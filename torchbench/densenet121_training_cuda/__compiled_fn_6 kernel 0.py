
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


# kernel path: /tmp/torchinductor_youkaichao/gg/cgg463u26szk2koomsmwdhziq76kysbb7oomrurjsyrliqijjwz4.py
# Source Nodes: [], Original ATen: [aten.sum, aten.view]

triton_poi_fused_sum_view_0 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[1024], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_sum_view_0', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1000
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0), xmask)
    tmp1 = tl.load(in_ptr0 + (1000 + x0), xmask)
    tmp3 = tl.load(in_ptr0 + (2000 + x0), xmask)
    tmp5 = tl.load(in_ptr0 + (3000 + x0), xmask)
    tmp2 = tmp0 + tmp1
    tmp4 = tmp2 + tmp3
    tmp6 = tmp4 + tmp5
    tl.store(out_ptr0 + (x0), tmp6, xmask)
''')

import triton
import triton.language as tl
from torch._inductor.triton_heuristics import grid, start_graph, end_graph
from torch._C import _cuda_getCurrentRawStream as get_cuda_stream


# kernel path: /tmp/torchinductor_youkaichao/kc/ckcfzxopkuatqil5htk4wi7d4gvu4y72chxfxrjmw2vntq5r6g34.py
# Source Nodes: [], Original ATen: [aten.div, aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_div_native_batch_norm_backward_threshold_backward_1 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_div_native_batch_norm_backward_threshold_backward_1', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 1024
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (50176*r2)), rmask & xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (x0 + (1024*r2)), rmask & xmask, eviction_policy='evict_last', other=0.0)
    tmp10 = tl.load(in_ptr2 + (r1 + (49*x0) + (50176*r2)), rmask & xmask, other=0.0)
    tmp11 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp18 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp6 = tl.broadcast_to(tmp5, [XBLOCK, RBLOCK])
    tmp8 = tl.where(rmask & xmask, tmp6, 0)
    tmp9 = tl.sum(tmp8, 1)[:, None]
    tmp12 = tmp10 - tmp11
    tmp13 = tmp5 * tmp12
    tmp14 = tl.broadcast_to(tmp13, [XBLOCK, RBLOCK])
    tmp16 = tl.where(rmask & xmask, tmp14, 0)
    tmp17 = tl.sum(tmp16, 1)[:, None]
    tmp19 = 1e-05
    tmp20 = tmp18 + tmp19
    tmp21 = tl.math.rsqrt(tmp20)
    tmp22 = tmp17 * tmp21
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp22, xmask)
    tl.store(out_ptr0 + (x0), tmp9, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/na/cnaieqm7eos4nxmwr5blpkmshfi2tojqkwpofg7zub5nvmgbmqb3.py
# Source Nodes: [], Original ATen: [aten.convolution_backward]

triton_poi_fused_convolution_backward_2 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_2', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (48608 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (992 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (992 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (992 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tl.store(out_ptr0 + (x4), tmp12, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/hk/chkvk23fn6nms4rtoyawfczmgdg2aflpmw633b34mpoe663ivxiq.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_3 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_3', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (6272*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (6272*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (6272*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/bp/cbpenmqovf6abathaqgms5jjezqyxdf3txfarhkpoh6qrfnrq7t7.py
# Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]

triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_4 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_4', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 49) % 128
    tmp0 = tl.load(in_ptr0 + (x3), xmask)
    tmp3 = tl.load(in_out_ptr0 + (x3), xmask)
    tmp5 = tl.load(in_ptr1 + (x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(in_out_ptr0 + (x3), tmp11, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ai/cairwwo6pt67e2hagabxxyhmzt5ng6ahcbr63ev2qe5fr6xacbee.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_5 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_5', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 992
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (48608*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (48608*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (48608*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/cs/ccsvdcf6v6kvgoace4nppjfxf6n7l4nosiaiclinjqql47vjbn6e.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_6 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(9,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_6', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (47040 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (960 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (960 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (960 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (47040 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (47040 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (960 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (960 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tl.store(out_ptr0 + (x4), tmp23, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/2n/c2nl3zgzytrjgnvc6cdezornfjkdrgxmqvqu3nwlbgqkjiqmdnjk.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_7 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_7', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 960
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (47040*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (47040*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (47040*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ub/cub77dbgpl36saglgqiiviq43ir7elo6wlxnmfd6l3b7tul5nudb.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_8 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*i1', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(13,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_8', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (45472 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (928 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (45472 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (45472 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (45472 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (45472 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tl.store(out_ptr0 + (x4), tmp34, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/vu/cvukdkoi5vcgasyuwup4cwynpjfa662wy6ef463ekygdc3mr3hoe.py
# Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]

triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 49) % 128
    tmp0 = tl.load(in_ptr0 + (x3), xmask)
    tmp3 = tl.load(in_ptr1 + (x3), xmask)
    tmp5 = tl.load(in_ptr2 + (x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(out_ptr0 + (x3), tmp11, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/46/c463okh2j5ifenzlszvsbwdie2ivczgurhuifs5ohizaw3673e3c.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_10 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(17,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_10', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (43904 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (896 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (43904 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (43904 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (43904 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (43904 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (43904 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (43904 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tl.store(in_out_ptr0 + (x4), tmp45, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/hg/chgmibtzqxfxx3vehvbhtqyylgl3u4i6lbkffv4unwltcvfy55bj.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_11 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(21,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_11', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (42336 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (864 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (42336 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (42336 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (42336 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (42336 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (42336 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (42336 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (42336 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (42336 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tl.store(in_out_ptr0 + (x4), tmp56, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/us/cusrf35ya25nn62uuin7l4o7c2bn6jfpvcwyaquo7vbgrxianj4m.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_12 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(25,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_12', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (40768 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (832 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (40768 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (40768 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (40768 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (40768 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (40768 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (40768 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (40768 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (40768 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (40768 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (40768 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tl.store(in_out_ptr0 + (x4), tmp67, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ik/cikth2xpszzrd6d3kf22feqcqa5bnvyhquqd4hhr5zguitjvsubd.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_13 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(29,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_13', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (39200 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (800 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (39200 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (39200 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (39200 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (39200 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (39200 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (39200 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (39200 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (39200 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (39200 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (39200 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (39200 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (39200 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tl.store(in_out_ptr0 + (x4), tmp78, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/vo/cvox6o3hj4zbmwyp7alumsiezclapsq3eyticj6sb26crosudrh6.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_14 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(33,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_14', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (37632 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (768 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (37632 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (37632 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (37632 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (37632 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (37632 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (37632 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (37632 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (37632 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (37632 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (37632 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (37632 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (37632 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (37632 + x3 + (39200*x2)), xmask)
    tmp81 = tl.load(in_ptr29 + (37632 + x3 + (39200*x2)), xmask)
    tmp83 = tl.load(in_ptr30 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tl.store(in_out_ptr0 + (x4), tmp89, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/6q/c6qsrod4b4xqfun3cqh3kvksf25blrxkbroqaqieaf4lvlnlellb.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_15 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(37,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_15', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (36064 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (736 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (36064 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (36064 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (36064 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (36064 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (36064 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (36064 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (36064 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (36064 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (36064 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (36064 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (36064 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (36064 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (36064 + x3 + (39200*x2)), xmask)
    tmp81 = tl.load(in_ptr29 + (36064 + x3 + (39200*x2)), xmask)
    tmp83 = tl.load(in_ptr30 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp90 = tl.load(in_ptr32 + (36064 + x3 + (37632*x2)), xmask)
    tmp92 = tl.load(in_ptr33 + (36064 + x3 + (37632*x2)), xmask)
    tmp94 = tl.load(in_ptr34 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp97 = tl.load(in_ptr35 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tmp91 = tmp90 <= tmp4
    tmp93 = tl.where(tmp91, tmp4, tmp92)
    tmp95 = tmp94 + tmp7
    tmp96 = tl.math.rsqrt(tmp95)
    tmp98 = tmp96 * tmp97
    tmp99 = tmp93 * tmp98
    tmp100 = tmp89 + tmp99
    tl.store(in_out_ptr0 + (x4), tmp100, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/gk/cgkx6rlcu5tyymxjq3xbj6wzuytarbra4it75g3ygh3c5x5cwjym.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_16 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(41,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_16', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (34496 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (704 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (34496 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (34496 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (34496 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (34496 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (34496 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (34496 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (34496 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (34496 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (34496 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (34496 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (34496 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (34496 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (34496 + x3 + (39200*x2)), xmask)
    tmp81 = tl.load(in_ptr29 + (34496 + x3 + (39200*x2)), xmask)
    tmp83 = tl.load(in_ptr30 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp90 = tl.load(in_ptr32 + (34496 + x3 + (37632*x2)), xmask)
    tmp92 = tl.load(in_ptr33 + (34496 + x3 + (37632*x2)), xmask)
    tmp94 = tl.load(in_ptr34 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp97 = tl.load(in_ptr35 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp101 = tl.load(in_ptr36 + (34496 + x3 + (36064*x2)), xmask)
    tmp103 = tl.load(in_ptr37 + (34496 + x3 + (36064*x2)), xmask)
    tmp105 = tl.load(in_ptr38 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp108 = tl.load(in_ptr39 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tmp91 = tmp90 <= tmp4
    tmp93 = tl.where(tmp91, tmp4, tmp92)
    tmp95 = tmp94 + tmp7
    tmp96 = tl.math.rsqrt(tmp95)
    tmp98 = tmp96 * tmp97
    tmp99 = tmp93 * tmp98
    tmp100 = tmp89 + tmp99
    tmp102 = tmp101 <= tmp4
    tmp104 = tl.where(tmp102, tmp4, tmp103)
    tmp106 = tmp105 + tmp7
    tmp107 = tl.math.rsqrt(tmp106)
    tmp109 = tmp107 * tmp108
    tmp110 = tmp104 * tmp109
    tmp111 = tmp100 + tmp110
    tl.store(in_out_ptr0 + (x4), tmp111, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/67/c67hbr5yjb3pldpl4do6bhxiqnsltobzatpk6ffwz2fsklaoklqf.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_17 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(45,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_17', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (32928 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (672 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (32928 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (32928 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (32928 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (32928 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (32928 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (32928 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (32928 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (32928 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (32928 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (32928 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (32928 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (32928 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (32928 + x3 + (39200*x2)), xmask)
    tmp81 = tl.load(in_ptr29 + (32928 + x3 + (39200*x2)), xmask)
    tmp83 = tl.load(in_ptr30 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp90 = tl.load(in_ptr32 + (32928 + x3 + (37632*x2)), xmask)
    tmp92 = tl.load(in_ptr33 + (32928 + x3 + (37632*x2)), xmask)
    tmp94 = tl.load(in_ptr34 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp97 = tl.load(in_ptr35 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp101 = tl.load(in_ptr36 + (32928 + x3 + (36064*x2)), xmask)
    tmp103 = tl.load(in_ptr37 + (32928 + x3 + (36064*x2)), xmask)
    tmp105 = tl.load(in_ptr38 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp108 = tl.load(in_ptr39 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp112 = tl.load(in_ptr40 + (32928 + x3 + (34496*x2)), xmask)
    tmp114 = tl.load(in_ptr41 + (32928 + x3 + (34496*x2)), xmask)
    tmp116 = tl.load(in_ptr42 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp119 = tl.load(in_ptr43 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tmp91 = tmp90 <= tmp4
    tmp93 = tl.where(tmp91, tmp4, tmp92)
    tmp95 = tmp94 + tmp7
    tmp96 = tl.math.rsqrt(tmp95)
    tmp98 = tmp96 * tmp97
    tmp99 = tmp93 * tmp98
    tmp100 = tmp89 + tmp99
    tmp102 = tmp101 <= tmp4
    tmp104 = tl.where(tmp102, tmp4, tmp103)
    tmp106 = tmp105 + tmp7
    tmp107 = tl.math.rsqrt(tmp106)
    tmp109 = tmp107 * tmp108
    tmp110 = tmp104 * tmp109
    tmp111 = tmp100 + tmp110
    tmp113 = tmp112 <= tmp4
    tmp115 = tl.where(tmp113, tmp4, tmp114)
    tmp117 = tmp116 + tmp7
    tmp118 = tl.math.rsqrt(tmp117)
    tmp120 = tmp118 * tmp119
    tmp121 = tmp115 * tmp120
    tmp122 = tmp111 + tmp121
    tl.store(in_out_ptr0 + (x4), tmp122, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/dp/cdp2d6qwdh2fev2nuenufebc5nil4msfa56qdwgrjopm3uukroov.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_18 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(49,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_18', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (31360 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (640 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (31360 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (31360 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (31360 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (31360 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (31360 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (31360 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (31360 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (31360 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (31360 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (31360 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (31360 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (31360 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (31360 + x3 + (39200*x2)), xmask)
    tmp81 = tl.load(in_ptr29 + (31360 + x3 + (39200*x2)), xmask)
    tmp83 = tl.load(in_ptr30 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp90 = tl.load(in_ptr32 + (31360 + x3 + (37632*x2)), xmask)
    tmp92 = tl.load(in_ptr33 + (31360 + x3 + (37632*x2)), xmask)
    tmp94 = tl.load(in_ptr34 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp97 = tl.load(in_ptr35 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp101 = tl.load(in_ptr36 + (31360 + x3 + (36064*x2)), xmask)
    tmp103 = tl.load(in_ptr37 + (31360 + x3 + (36064*x2)), xmask)
    tmp105 = tl.load(in_ptr38 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp108 = tl.load(in_ptr39 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp112 = tl.load(in_ptr40 + (31360 + x3 + (34496*x2)), xmask)
    tmp114 = tl.load(in_ptr41 + (31360 + x3 + (34496*x2)), xmask)
    tmp116 = tl.load(in_ptr42 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp119 = tl.load(in_ptr43 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp123 = tl.load(in_ptr44 + (31360 + x3 + (32928*x2)), xmask)
    tmp125 = tl.load(in_ptr45 + (31360 + x3 + (32928*x2)), xmask)
    tmp127 = tl.load(in_ptr46 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp130 = tl.load(in_ptr47 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tmp91 = tmp90 <= tmp4
    tmp93 = tl.where(tmp91, tmp4, tmp92)
    tmp95 = tmp94 + tmp7
    tmp96 = tl.math.rsqrt(tmp95)
    tmp98 = tmp96 * tmp97
    tmp99 = tmp93 * tmp98
    tmp100 = tmp89 + tmp99
    tmp102 = tmp101 <= tmp4
    tmp104 = tl.where(tmp102, tmp4, tmp103)
    tmp106 = tmp105 + tmp7
    tmp107 = tl.math.rsqrt(tmp106)
    tmp109 = tmp107 * tmp108
    tmp110 = tmp104 * tmp109
    tmp111 = tmp100 + tmp110
    tmp113 = tmp112 <= tmp4
    tmp115 = tl.where(tmp113, tmp4, tmp114)
    tmp117 = tmp116 + tmp7
    tmp118 = tl.math.rsqrt(tmp117)
    tmp120 = tmp118 * tmp119
    tmp121 = tmp115 * tmp120
    tmp122 = tmp111 + tmp121
    tmp124 = tmp123 <= tmp4
    tmp126 = tl.where(tmp124, tmp4, tmp125)
    tmp128 = tmp127 + tmp7
    tmp129 = tl.math.rsqrt(tmp128)
    tmp131 = tmp129 * tmp130
    tmp132 = tmp126 * tmp131
    tmp133 = tmp122 + tmp132
    tl.store(in_out_ptr0 + (x4), tmp133, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/4h/c4hesiddlbcgvq3hcxywagli3cjre4wq6c2t7xza4eukwwepwnnc.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_19 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(53,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_19', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (29792 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (608 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (29792 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (29792 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (29792 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (29792 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (29792 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (29792 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (29792 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (29792 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (29792 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (29792 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (29792 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (29792 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (29792 + x3 + (39200*x2)), xmask)
    tmp81 = tl.load(in_ptr29 + (29792 + x3 + (39200*x2)), xmask)
    tmp83 = tl.load(in_ptr30 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp90 = tl.load(in_ptr32 + (29792 + x3 + (37632*x2)), xmask)
    tmp92 = tl.load(in_ptr33 + (29792 + x3 + (37632*x2)), xmask)
    tmp94 = tl.load(in_ptr34 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp97 = tl.load(in_ptr35 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp101 = tl.load(in_ptr36 + (29792 + x3 + (36064*x2)), xmask)
    tmp103 = tl.load(in_ptr37 + (29792 + x3 + (36064*x2)), xmask)
    tmp105 = tl.load(in_ptr38 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp108 = tl.load(in_ptr39 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp112 = tl.load(in_ptr40 + (29792 + x3 + (34496*x2)), xmask)
    tmp114 = tl.load(in_ptr41 + (29792 + x3 + (34496*x2)), xmask)
    tmp116 = tl.load(in_ptr42 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp119 = tl.load(in_ptr43 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp123 = tl.load(in_ptr44 + (29792 + x3 + (32928*x2)), xmask)
    tmp125 = tl.load(in_ptr45 + (29792 + x3 + (32928*x2)), xmask)
    tmp127 = tl.load(in_ptr46 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp130 = tl.load(in_ptr47 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp134 = tl.load(in_ptr48 + (29792 + x3 + (31360*x2)), xmask)
    tmp136 = tl.load(in_ptr49 + (29792 + x3 + (31360*x2)), xmask)
    tmp138 = tl.load(in_ptr50 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp141 = tl.load(in_ptr51 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tmp91 = tmp90 <= tmp4
    tmp93 = tl.where(tmp91, tmp4, tmp92)
    tmp95 = tmp94 + tmp7
    tmp96 = tl.math.rsqrt(tmp95)
    tmp98 = tmp96 * tmp97
    tmp99 = tmp93 * tmp98
    tmp100 = tmp89 + tmp99
    tmp102 = tmp101 <= tmp4
    tmp104 = tl.where(tmp102, tmp4, tmp103)
    tmp106 = tmp105 + tmp7
    tmp107 = tl.math.rsqrt(tmp106)
    tmp109 = tmp107 * tmp108
    tmp110 = tmp104 * tmp109
    tmp111 = tmp100 + tmp110
    tmp113 = tmp112 <= tmp4
    tmp115 = tl.where(tmp113, tmp4, tmp114)
    tmp117 = tmp116 + tmp7
    tmp118 = tl.math.rsqrt(tmp117)
    tmp120 = tmp118 * tmp119
    tmp121 = tmp115 * tmp120
    tmp122 = tmp111 + tmp121
    tmp124 = tmp123 <= tmp4
    tmp126 = tl.where(tmp124, tmp4, tmp125)
    tmp128 = tmp127 + tmp7
    tmp129 = tl.math.rsqrt(tmp128)
    tmp131 = tmp129 * tmp130
    tmp132 = tmp126 * tmp131
    tmp133 = tmp122 + tmp132
    tmp135 = tmp134 <= tmp4
    tmp137 = tl.where(tmp135, tmp4, tmp136)
    tmp139 = tmp138 + tmp7
    tmp140 = tl.math.rsqrt(tmp139)
    tmp142 = tmp140 * tmp141
    tmp143 = tmp137 * tmp142
    tmp144 = tmp133 + tmp143
    tl.store(in_out_ptr0 + (x4), tmp144, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/i5/ci5tja7mauks746aej2apudfjhtoiqagbeuggaxpmgzoxqqyj7ep.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_20 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(57,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_20', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (28224 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (576 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (28224 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (28224 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (28224 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (28224 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (28224 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (28224 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (28224 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (28224 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (28224 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (28224 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (28224 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (28224 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (28224 + x3 + (39200*x2)), xmask)
    tmp81 = tl.load(in_ptr29 + (28224 + x3 + (39200*x2)), xmask)
    tmp83 = tl.load(in_ptr30 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp90 = tl.load(in_ptr32 + (28224 + x3 + (37632*x2)), xmask)
    tmp92 = tl.load(in_ptr33 + (28224 + x3 + (37632*x2)), xmask)
    tmp94 = tl.load(in_ptr34 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp97 = tl.load(in_ptr35 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp101 = tl.load(in_ptr36 + (28224 + x3 + (36064*x2)), xmask)
    tmp103 = tl.load(in_ptr37 + (28224 + x3 + (36064*x2)), xmask)
    tmp105 = tl.load(in_ptr38 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp108 = tl.load(in_ptr39 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp112 = tl.load(in_ptr40 + (28224 + x3 + (34496*x2)), xmask)
    tmp114 = tl.load(in_ptr41 + (28224 + x3 + (34496*x2)), xmask)
    tmp116 = tl.load(in_ptr42 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp119 = tl.load(in_ptr43 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp123 = tl.load(in_ptr44 + (28224 + x3 + (32928*x2)), xmask)
    tmp125 = tl.load(in_ptr45 + (28224 + x3 + (32928*x2)), xmask)
    tmp127 = tl.load(in_ptr46 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp130 = tl.load(in_ptr47 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp134 = tl.load(in_ptr48 + (28224 + x3 + (31360*x2)), xmask)
    tmp136 = tl.load(in_ptr49 + (28224 + x3 + (31360*x2)), xmask)
    tmp138 = tl.load(in_ptr50 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp141 = tl.load(in_ptr51 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp145 = tl.load(in_ptr52 + (28224 + x3 + (29792*x2)), xmask)
    tmp147 = tl.load(in_ptr53 + (28224 + x3 + (29792*x2)), xmask)
    tmp149 = tl.load(in_ptr54 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp152 = tl.load(in_ptr55 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tmp91 = tmp90 <= tmp4
    tmp93 = tl.where(tmp91, tmp4, tmp92)
    tmp95 = tmp94 + tmp7
    tmp96 = tl.math.rsqrt(tmp95)
    tmp98 = tmp96 * tmp97
    tmp99 = tmp93 * tmp98
    tmp100 = tmp89 + tmp99
    tmp102 = tmp101 <= tmp4
    tmp104 = tl.where(tmp102, tmp4, tmp103)
    tmp106 = tmp105 + tmp7
    tmp107 = tl.math.rsqrt(tmp106)
    tmp109 = tmp107 * tmp108
    tmp110 = tmp104 * tmp109
    tmp111 = tmp100 + tmp110
    tmp113 = tmp112 <= tmp4
    tmp115 = tl.where(tmp113, tmp4, tmp114)
    tmp117 = tmp116 + tmp7
    tmp118 = tl.math.rsqrt(tmp117)
    tmp120 = tmp118 * tmp119
    tmp121 = tmp115 * tmp120
    tmp122 = tmp111 + tmp121
    tmp124 = tmp123 <= tmp4
    tmp126 = tl.where(tmp124, tmp4, tmp125)
    tmp128 = tmp127 + tmp7
    tmp129 = tl.math.rsqrt(tmp128)
    tmp131 = tmp129 * tmp130
    tmp132 = tmp126 * tmp131
    tmp133 = tmp122 + tmp132
    tmp135 = tmp134 <= tmp4
    tmp137 = tl.where(tmp135, tmp4, tmp136)
    tmp139 = tmp138 + tmp7
    tmp140 = tl.math.rsqrt(tmp139)
    tmp142 = tmp140 * tmp141
    tmp143 = tmp137 * tmp142
    tmp144 = tmp133 + tmp143
    tmp146 = tmp145 <= tmp4
    tmp148 = tl.where(tmp146, tmp4, tmp147)
    tmp150 = tmp149 + tmp7
    tmp151 = tl.math.rsqrt(tmp150)
    tmp153 = tmp151 * tmp152
    tmp154 = tmp148 * tmp153
    tmp155 = tmp144 + tmp154
    tl.store(in_out_ptr0 + (x4), tmp155, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/oo/cooq5kmu4hduncjt6vl7x7wks4lirtrpshwf4w5jiw6yj7gn2eos.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_21 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(61,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_21', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (26656 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (544 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (26656 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (26656 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (26656 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (26656 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (26656 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (26656 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (26656 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (26656 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (26656 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (26656 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (26656 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (26656 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (26656 + x3 + (39200*x2)), xmask)
    tmp81 = tl.load(in_ptr29 + (26656 + x3 + (39200*x2)), xmask)
    tmp83 = tl.load(in_ptr30 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp90 = tl.load(in_ptr32 + (26656 + x3 + (37632*x2)), xmask)
    tmp92 = tl.load(in_ptr33 + (26656 + x3 + (37632*x2)), xmask)
    tmp94 = tl.load(in_ptr34 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp97 = tl.load(in_ptr35 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp101 = tl.load(in_ptr36 + (26656 + x3 + (36064*x2)), xmask)
    tmp103 = tl.load(in_ptr37 + (26656 + x3 + (36064*x2)), xmask)
    tmp105 = tl.load(in_ptr38 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp108 = tl.load(in_ptr39 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp112 = tl.load(in_ptr40 + (26656 + x3 + (34496*x2)), xmask)
    tmp114 = tl.load(in_ptr41 + (26656 + x3 + (34496*x2)), xmask)
    tmp116 = tl.load(in_ptr42 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp119 = tl.load(in_ptr43 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp123 = tl.load(in_ptr44 + (26656 + x3 + (32928*x2)), xmask)
    tmp125 = tl.load(in_ptr45 + (26656 + x3 + (32928*x2)), xmask)
    tmp127 = tl.load(in_ptr46 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp130 = tl.load(in_ptr47 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp134 = tl.load(in_ptr48 + (26656 + x3 + (31360*x2)), xmask)
    tmp136 = tl.load(in_ptr49 + (26656 + x3 + (31360*x2)), xmask)
    tmp138 = tl.load(in_ptr50 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp141 = tl.load(in_ptr51 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp145 = tl.load(in_ptr52 + (26656 + x3 + (29792*x2)), xmask)
    tmp147 = tl.load(in_ptr53 + (26656 + x3 + (29792*x2)), xmask)
    tmp149 = tl.load(in_ptr54 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp152 = tl.load(in_ptr55 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp156 = tl.load(in_ptr56 + (26656 + x3 + (28224*x2)), xmask)
    tmp158 = tl.load(in_ptr57 + (26656 + x3 + (28224*x2)), xmask)
    tmp160 = tl.load(in_ptr58 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp163 = tl.load(in_ptr59 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tmp91 = tmp90 <= tmp4
    tmp93 = tl.where(tmp91, tmp4, tmp92)
    tmp95 = tmp94 + tmp7
    tmp96 = tl.math.rsqrt(tmp95)
    tmp98 = tmp96 * tmp97
    tmp99 = tmp93 * tmp98
    tmp100 = tmp89 + tmp99
    tmp102 = tmp101 <= tmp4
    tmp104 = tl.where(tmp102, tmp4, tmp103)
    tmp106 = tmp105 + tmp7
    tmp107 = tl.math.rsqrt(tmp106)
    tmp109 = tmp107 * tmp108
    tmp110 = tmp104 * tmp109
    tmp111 = tmp100 + tmp110
    tmp113 = tmp112 <= tmp4
    tmp115 = tl.where(tmp113, tmp4, tmp114)
    tmp117 = tmp116 + tmp7
    tmp118 = tl.math.rsqrt(tmp117)
    tmp120 = tmp118 * tmp119
    tmp121 = tmp115 * tmp120
    tmp122 = tmp111 + tmp121
    tmp124 = tmp123 <= tmp4
    tmp126 = tl.where(tmp124, tmp4, tmp125)
    tmp128 = tmp127 + tmp7
    tmp129 = tl.math.rsqrt(tmp128)
    tmp131 = tmp129 * tmp130
    tmp132 = tmp126 * tmp131
    tmp133 = tmp122 + tmp132
    tmp135 = tmp134 <= tmp4
    tmp137 = tl.where(tmp135, tmp4, tmp136)
    tmp139 = tmp138 + tmp7
    tmp140 = tl.math.rsqrt(tmp139)
    tmp142 = tmp140 * tmp141
    tmp143 = tmp137 * tmp142
    tmp144 = tmp133 + tmp143
    tmp146 = tmp145 <= tmp4
    tmp148 = tl.where(tmp146, tmp4, tmp147)
    tmp150 = tmp149 + tmp7
    tmp151 = tl.math.rsqrt(tmp150)
    tmp153 = tmp151 * tmp152
    tmp154 = tmp148 * tmp153
    tmp155 = tmp144 + tmp154
    tmp157 = tmp156 <= tmp4
    tmp159 = tl.where(tmp157, tmp4, tmp158)
    tmp161 = tmp160 + tmp7
    tmp162 = tl.math.rsqrt(tmp161)
    tmp164 = tmp162 * tmp163
    tmp165 = tmp159 * tmp164
    tmp166 = tmp155 + tmp165
    tl.store(in_out_ptr0 + (x4), tmp166, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/lz/clzth3execwydfvnsps4hqdm3iygybofso3jfq3yqknn3aqtkf3e.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_22 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[8192], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(65,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_22', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, xnumel, XBLOCK : tl.constexpr):
    xnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 1568)
    x3 = xindex % 1568
    x1 = (xindex // 49) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (25088 + x3 + (50176*x2)), xmask).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (512 + x1 + (1024*x2)), xmask, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (25088 + x3 + (48608*x2)), xmask)
    tmp15 = tl.load(in_ptr5 + (25088 + x3 + (48608*x2)), xmask)
    tmp17 = tl.load(in_ptr6 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (25088 + x3 + (47040*x2)), xmask)
    tmp26 = tl.load(in_ptr9 + (25088 + x3 + (47040*x2)), xmask)
    tmp28 = tl.load(in_ptr10 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (25088 + x3 + (45472*x2)), xmask)
    tmp37 = tl.load(in_ptr13 + (25088 + x3 + (45472*x2)), xmask)
    tmp39 = tl.load(in_ptr14 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (25088 + x3 + (43904*x2)), xmask)
    tmp48 = tl.load(in_ptr17 + (25088 + x3 + (43904*x2)), xmask)
    tmp50 = tl.load(in_ptr18 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (25088 + x3 + (42336*x2)), xmask)
    tmp59 = tl.load(in_ptr21 + (25088 + x3 + (42336*x2)), xmask)
    tmp61 = tl.load(in_ptr22 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (25088 + x3 + (40768*x2)), xmask)
    tmp70 = tl.load(in_ptr25 + (25088 + x3 + (40768*x2)), xmask)
    tmp72 = tl.load(in_ptr26 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (25088 + x3 + (39200*x2)), xmask)
    tmp81 = tl.load(in_ptr29 + (25088 + x3 + (39200*x2)), xmask)
    tmp83 = tl.load(in_ptr30 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp90 = tl.load(in_ptr32 + (25088 + x3 + (37632*x2)), xmask)
    tmp92 = tl.load(in_ptr33 + (25088 + x3 + (37632*x2)), xmask)
    tmp94 = tl.load(in_ptr34 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp97 = tl.load(in_ptr35 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp101 = tl.load(in_ptr36 + (25088 + x3 + (36064*x2)), xmask)
    tmp103 = tl.load(in_ptr37 + (25088 + x3 + (36064*x2)), xmask)
    tmp105 = tl.load(in_ptr38 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp108 = tl.load(in_ptr39 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp112 = tl.load(in_ptr40 + (25088 + x3 + (34496*x2)), xmask)
    tmp114 = tl.load(in_ptr41 + (25088 + x3 + (34496*x2)), xmask)
    tmp116 = tl.load(in_ptr42 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp119 = tl.load(in_ptr43 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp123 = tl.load(in_ptr44 + (25088 + x3 + (32928*x2)), xmask)
    tmp125 = tl.load(in_ptr45 + (25088 + x3 + (32928*x2)), xmask)
    tmp127 = tl.load(in_ptr46 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp130 = tl.load(in_ptr47 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp134 = tl.load(in_ptr48 + (25088 + x3 + (31360*x2)), xmask)
    tmp136 = tl.load(in_ptr49 + (25088 + x3 + (31360*x2)), xmask)
    tmp138 = tl.load(in_ptr50 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp141 = tl.load(in_ptr51 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp145 = tl.load(in_ptr52 + (25088 + x3 + (29792*x2)), xmask)
    tmp147 = tl.load(in_ptr53 + (25088 + x3 + (29792*x2)), xmask)
    tmp149 = tl.load(in_ptr54 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp152 = tl.load(in_ptr55 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp156 = tl.load(in_ptr56 + (25088 + x3 + (28224*x2)), xmask)
    tmp158 = tl.load(in_ptr57 + (25088 + x3 + (28224*x2)), xmask)
    tmp160 = tl.load(in_ptr58 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp163 = tl.load(in_ptr59 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp167 = tl.load(in_ptr60 + (25088 + x3 + (26656*x2)), xmask)
    tmp169 = tl.load(in_ptr61 + (25088 + x3 + (26656*x2)), xmask)
    tmp171 = tl.load(in_ptr62 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp174 = tl.load(in_ptr63 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tmp91 = tmp90 <= tmp4
    tmp93 = tl.where(tmp91, tmp4, tmp92)
    tmp95 = tmp94 + tmp7
    tmp96 = tl.math.rsqrt(tmp95)
    tmp98 = tmp96 * tmp97
    tmp99 = tmp93 * tmp98
    tmp100 = tmp89 + tmp99
    tmp102 = tmp101 <= tmp4
    tmp104 = tl.where(tmp102, tmp4, tmp103)
    tmp106 = tmp105 + tmp7
    tmp107 = tl.math.rsqrt(tmp106)
    tmp109 = tmp107 * tmp108
    tmp110 = tmp104 * tmp109
    tmp111 = tmp100 + tmp110
    tmp113 = tmp112 <= tmp4
    tmp115 = tl.where(tmp113, tmp4, tmp114)
    tmp117 = tmp116 + tmp7
    tmp118 = tl.math.rsqrt(tmp117)
    tmp120 = tmp118 * tmp119
    tmp121 = tmp115 * tmp120
    tmp122 = tmp111 + tmp121
    tmp124 = tmp123 <= tmp4
    tmp126 = tl.where(tmp124, tmp4, tmp125)
    tmp128 = tmp127 + tmp7
    tmp129 = tl.math.rsqrt(tmp128)
    tmp131 = tmp129 * tmp130
    tmp132 = tmp126 * tmp131
    tmp133 = tmp122 + tmp132
    tmp135 = tmp134 <= tmp4
    tmp137 = tl.where(tmp135, tmp4, tmp136)
    tmp139 = tmp138 + tmp7
    tmp140 = tl.math.rsqrt(tmp139)
    tmp142 = tmp140 * tmp141
    tmp143 = tmp137 * tmp142
    tmp144 = tmp133 + tmp143
    tmp146 = tmp145 <= tmp4
    tmp148 = tl.where(tmp146, tmp4, tmp147)
    tmp150 = tmp149 + tmp7
    tmp151 = tl.math.rsqrt(tmp150)
    tmp153 = tmp151 * tmp152
    tmp154 = tmp148 * tmp153
    tmp155 = tmp144 + tmp154
    tmp157 = tmp156 <= tmp4
    tmp159 = tl.where(tmp157, tmp4, tmp158)
    tmp161 = tmp160 + tmp7
    tmp162 = tl.math.rsqrt(tmp161)
    tmp164 = tmp162 * tmp163
    tmp165 = tmp159 * tmp164
    tmp166 = tmp155 + tmp165
    tmp168 = tmp167 <= tmp4
    tmp170 = tl.where(tmp168, tmp4, tmp169)
    tmp172 = tmp171 + tmp7
    tmp173 = tl.math.rsqrt(tmp172)
    tmp175 = tmp173 * tmp174
    tmp176 = tmp170 * tmp175
    tmp177 = tmp166 + tmp176
    tl.store(in_out_ptr0 + (x4), tmp177, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/2p/c2p5kmxjoulr4z5canz3uychmr54y2ab2yhucr4b5cemyug6ws6s.py
# Source Nodes: [], Original ATen: [aten.add, aten.native_batch_norm_backward, aten.slice, aten.threshold_backward]

triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_23 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*i1', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(69,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_23', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 49) % 512
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x3 + (50176*x2)), None).to(tl.int1)
    tmp1 = tl.load(in_ptr1 + (x1 + (1024*x2)), None, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp10 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp13 = tl.load(in_ptr4 + (x3 + (48608*x2)), None)
    tmp15 = tl.load(in_ptr5 + (x3 + (48608*x2)), None)
    tmp17 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last')
    tmp24 = tl.load(in_ptr8 + (x3 + (47040*x2)), None)
    tmp26 = tl.load(in_ptr9 + (x3 + (47040*x2)), None)
    tmp28 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last')
    tmp31 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last')
    tmp35 = tl.load(in_ptr12 + (x3 + (45472*x2)), None)
    tmp37 = tl.load(in_ptr13 + (x3 + (45472*x2)), None)
    tmp39 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last')
    tmp42 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last')
    tmp46 = tl.load(in_ptr16 + (x3 + (43904*x2)), None)
    tmp48 = tl.load(in_ptr17 + (x3 + (43904*x2)), None)
    tmp50 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last')
    tmp53 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last')
    tmp57 = tl.load(in_ptr20 + (x3 + (42336*x2)), None)
    tmp59 = tl.load(in_ptr21 + (x3 + (42336*x2)), None)
    tmp61 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last')
    tmp64 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last')
    tmp68 = tl.load(in_ptr24 + (x3 + (40768*x2)), None)
    tmp70 = tl.load(in_ptr25 + (x3 + (40768*x2)), None)
    tmp72 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last')
    tmp75 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last')
    tmp79 = tl.load(in_ptr28 + (x3 + (39200*x2)), None)
    tmp81 = tl.load(in_ptr29 + (x3 + (39200*x2)), None)
    tmp83 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last')
    tmp86 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last')
    tmp90 = tl.load(in_ptr32 + (x3 + (37632*x2)), None)
    tmp92 = tl.load(in_ptr33 + (x3 + (37632*x2)), None)
    tmp94 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last')
    tmp97 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last')
    tmp101 = tl.load(in_ptr36 + (x3 + (36064*x2)), None)
    tmp103 = tl.load(in_ptr37 + (x3 + (36064*x2)), None)
    tmp105 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last')
    tmp108 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last')
    tmp112 = tl.load(in_ptr40 + (x3 + (34496*x2)), None)
    tmp114 = tl.load(in_ptr41 + (x3 + (34496*x2)), None)
    tmp116 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last')
    tmp119 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last')
    tmp123 = tl.load(in_ptr44 + (x3 + (32928*x2)), None)
    tmp125 = tl.load(in_ptr45 + (x3 + (32928*x2)), None)
    tmp127 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last')
    tmp130 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last')
    tmp134 = tl.load(in_ptr48 + (x3 + (31360*x2)), None)
    tmp136 = tl.load(in_ptr49 + (x3 + (31360*x2)), None)
    tmp138 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last')
    tmp141 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last')
    tmp145 = tl.load(in_ptr52 + (x3 + (29792*x2)), None)
    tmp147 = tl.load(in_ptr53 + (x3 + (29792*x2)), None)
    tmp149 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last')
    tmp152 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last')
    tmp156 = tl.load(in_ptr56 + (x3 + (28224*x2)), None)
    tmp158 = tl.load(in_ptr57 + (x3 + (28224*x2)), None)
    tmp160 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last')
    tmp163 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last')
    tmp167 = tl.load(in_ptr60 + (x3 + (26656*x2)), None)
    tmp169 = tl.load(in_ptr61 + (x3 + (26656*x2)), None)
    tmp171 = tl.load(in_ptr62 + (x1), None, eviction_policy='evict_last')
    tmp174 = tl.load(in_ptr63 + (x1), None, eviction_policy='evict_last')
    tmp178 = tl.load(in_ptr64 + (x4), None)
    tmp180 = tl.load(in_ptr65 + (x4), None)
    tmp182 = tl.load(in_ptr66 + (x1), None, eviction_policy='evict_last')
    tmp185 = tl.load(in_ptr67 + (x1), None, eviction_policy='evict_last')
    tmp2 = 49.0
    tmp3 = tmp1 / tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp0, tmp4, tmp3)
    tmp7 = 1e-05
    tmp8 = tmp6 + tmp7
    tmp9 = tl.math.rsqrt(tmp8)
    tmp11 = tmp9 * tmp10
    tmp12 = tmp5 * tmp11
    tmp14 = tmp13 <= tmp4
    tmp16 = tl.where(tmp14, tmp4, tmp15)
    tmp18 = tmp17 + tmp7
    tmp19 = tl.math.rsqrt(tmp18)
    tmp21 = tmp19 * tmp20
    tmp22 = tmp16 * tmp21
    tmp23 = tmp12 + tmp22
    tmp25 = tmp24 <= tmp4
    tmp27 = tl.where(tmp25, tmp4, tmp26)
    tmp29 = tmp28 + tmp7
    tmp30 = tl.math.rsqrt(tmp29)
    tmp32 = tmp30 * tmp31
    tmp33 = tmp27 * tmp32
    tmp34 = tmp23 + tmp33
    tmp36 = tmp35 <= tmp4
    tmp38 = tl.where(tmp36, tmp4, tmp37)
    tmp40 = tmp39 + tmp7
    tmp41 = tl.math.rsqrt(tmp40)
    tmp43 = tmp41 * tmp42
    tmp44 = tmp38 * tmp43
    tmp45 = tmp34 + tmp44
    tmp47 = tmp46 <= tmp4
    tmp49 = tl.where(tmp47, tmp4, tmp48)
    tmp51 = tmp50 + tmp7
    tmp52 = tl.math.rsqrt(tmp51)
    tmp54 = tmp52 * tmp53
    tmp55 = tmp49 * tmp54
    tmp56 = tmp45 + tmp55
    tmp58 = tmp57 <= tmp4
    tmp60 = tl.where(tmp58, tmp4, tmp59)
    tmp62 = tmp61 + tmp7
    tmp63 = tl.math.rsqrt(tmp62)
    tmp65 = tmp63 * tmp64
    tmp66 = tmp60 * tmp65
    tmp67 = tmp56 + tmp66
    tmp69 = tmp68 <= tmp4
    tmp71 = tl.where(tmp69, tmp4, tmp70)
    tmp73 = tmp72 + tmp7
    tmp74 = tl.math.rsqrt(tmp73)
    tmp76 = tmp74 * tmp75
    tmp77 = tmp71 * tmp76
    tmp78 = tmp67 + tmp77
    tmp80 = tmp79 <= tmp4
    tmp82 = tl.where(tmp80, tmp4, tmp81)
    tmp84 = tmp83 + tmp7
    tmp85 = tl.math.rsqrt(tmp84)
    tmp87 = tmp85 * tmp86
    tmp88 = tmp82 * tmp87
    tmp89 = tmp78 + tmp88
    tmp91 = tmp90 <= tmp4
    tmp93 = tl.where(tmp91, tmp4, tmp92)
    tmp95 = tmp94 + tmp7
    tmp96 = tl.math.rsqrt(tmp95)
    tmp98 = tmp96 * tmp97
    tmp99 = tmp93 * tmp98
    tmp100 = tmp89 + tmp99
    tmp102 = tmp101 <= tmp4
    tmp104 = tl.where(tmp102, tmp4, tmp103)
    tmp106 = tmp105 + tmp7
    tmp107 = tl.math.rsqrt(tmp106)
    tmp109 = tmp107 * tmp108
    tmp110 = tmp104 * tmp109
    tmp111 = tmp100 + tmp110
    tmp113 = tmp112 <= tmp4
    tmp115 = tl.where(tmp113, tmp4, tmp114)
    tmp117 = tmp116 + tmp7
    tmp118 = tl.math.rsqrt(tmp117)
    tmp120 = tmp118 * tmp119
    tmp121 = tmp115 * tmp120
    tmp122 = tmp111 + tmp121
    tmp124 = tmp123 <= tmp4
    tmp126 = tl.where(tmp124, tmp4, tmp125)
    tmp128 = tmp127 + tmp7
    tmp129 = tl.math.rsqrt(tmp128)
    tmp131 = tmp129 * tmp130
    tmp132 = tmp126 * tmp131
    tmp133 = tmp122 + tmp132
    tmp135 = tmp134 <= tmp4
    tmp137 = tl.where(tmp135, tmp4, tmp136)
    tmp139 = tmp138 + tmp7
    tmp140 = tl.math.rsqrt(tmp139)
    tmp142 = tmp140 * tmp141
    tmp143 = tmp137 * tmp142
    tmp144 = tmp133 + tmp143
    tmp146 = tmp145 <= tmp4
    tmp148 = tl.where(tmp146, tmp4, tmp147)
    tmp150 = tmp149 + tmp7
    tmp151 = tl.math.rsqrt(tmp150)
    tmp153 = tmp151 * tmp152
    tmp154 = tmp148 * tmp153
    tmp155 = tmp144 + tmp154
    tmp157 = tmp156 <= tmp4
    tmp159 = tl.where(tmp157, tmp4, tmp158)
    tmp161 = tmp160 + tmp7
    tmp162 = tl.math.rsqrt(tmp161)
    tmp164 = tmp162 * tmp163
    tmp165 = tmp159 * tmp164
    tmp166 = tmp155 + tmp165
    tmp168 = tmp167 <= tmp4
    tmp170 = tl.where(tmp168, tmp4, tmp169)
    tmp172 = tmp171 + tmp7
    tmp173 = tl.math.rsqrt(tmp172)
    tmp175 = tmp173 * tmp174
    tmp176 = tmp170 * tmp175
    tmp177 = tmp166 + tmp176
    tmp179 = tmp178 <= tmp4
    tmp181 = tl.where(tmp179, tmp4, tmp180)
    tmp183 = tmp182 + tmp7
    tmp184 = tl.math.rsqrt(tmp183)
    tmp186 = tmp184 * tmp185
    tmp187 = tmp181 * tmp186
    tmp188 = tmp177 + tmp187
    tl.store(in_out_ptr0 + (x4), tmp188, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/lo/clool2lmbhepqgiu5qp3rwtuugkffzku5vo4l5ykl3rvyrdggn5w.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_24 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_24', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 928
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (45472*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (45472*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (45472*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ot/cot2vana5ut4z33mjawnj57eww7qyrho5ewzvvww56x2lu7qyrdr.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_25 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_25', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 896
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (43904*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (43904*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (43904*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ku/ckuw3nwocoirk33roticymlmkhujenh2xzak6hxe3uthovtf5cn4.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_26 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_26', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 864
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (42336*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (42336*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (42336*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ic/cicejirwpowreb7fgeda5rm5iwuibvucegcwr7j4cjcij5tkicgw.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_27 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_27', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 832
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (40768*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (40768*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (40768*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/x2/cx2o2ba2gdk53nswf66e7ohrzuknvpccf2khznaqwdrbw5tfxpbs.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_28 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_28', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 800
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (39200*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (39200*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (39200*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/3s/c3ssap7tzv6soneisibbypleyt7tmu7ob2ukbdekrbmk6vu7qw2f.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_29 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_29', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 768
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (37632*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (37632*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (37632*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/mh/cmho3qw34tohsi5yhotfez7e5dkwcugdoavmpdbzgan6ycq5fzbs.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_30 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_30', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 736
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (36064*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (36064*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (36064*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/av/cavj3gn4wojgu3cu3eyeh7pwedl27g26gpqiwqwy3dubolppvftz.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_31 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_31', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 704
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (34496*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (34496*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (34496*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/u5/cu5hsqmxy24unpus6elajwxk46qjeersxdcsg3fs4zi5hadizcmf.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_32 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_32', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 672
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (32928*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (32928*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (32928*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/7g/c7guhpkuhehu4s422eqjmeifufnmhfuoi5zvrimc3wddqo3dlcpp.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_33 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_33', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 640
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (31360*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (31360*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (31360*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/2b/c2bdkffatcs4bbmf7ebqwfc5s24pglyjnkvmvy7vwkd273aux3kv.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_34 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_34', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 608
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (29792*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (29792*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (29792*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/yw/cywqjcrduz3vgqmlxmnokzy5z7w5nxpc2esvb64tv5xsi6wrjtqx.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_35 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_35', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 576
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (28224*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (28224*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (28224*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/pc/cpcup4dbgsj55ig5qs63xn3j7ezmqq3iof6q3uqeyu6dp2zowi36.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_36 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_36', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 544
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (26656*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (26656*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (26656*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/sc/cscet2lxpry672efacqs6nfknkpm2llgh7zc2omldyvoog6igwlb.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_37 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[512, 256],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_37', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 512
    rnumel = 196
    RBLOCK: tl.constexpr = 256
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex % 49
    r2 = (rindex // 49)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (49*x0) + (25088*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (49*x0) + (25088*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (49*x0) + (25088*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = tl.sum(tmp7, 1)[:, None]
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [XBLOCK, RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = tl.sum(tmp15, 1)[:, None]
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/jh/cjhsk5dxy7tjveahl7ms2jkhonr4m4sy5zs3pzavi4ndso2guqof.py
# Source Nodes: [], Original ATen: [aten.avg_pool2d_backward, aten.convolution_backward]

triton_poi_fused_avg_pool2d_backward_convolution_backward_38 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_avg_pool2d_backward_convolution_backward_38', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 14
    x1 = (xindex // 14) % 14
    x2 = (xindex // 196)
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + ((7*(tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(7, 1 + (x1 // 2)))))) + (7*(tl.where((tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(7, 1 + (x1 // 2))))) >= 0, 0, 7))) + (49*x2) + (tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(7, 1 + (x0 // 2))))) + (tl.where((tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(7, 1 + (x0 // 2))))) >= 0, 0, 7))), None, eviction_policy='evict_last')
    tmp1 = tmp0 / 4
    tmp2 = tl.math.max(0, (x1 // 2))
    tmp3 = tl.math.min(7, 1 + (x1 // 2))
    tmp4 = tmp2 < tmp3
    tmp5 = tl.math.max(0, (x0 // 2))
    tmp6 = tl.math.min(7, 1 + (x0 // 2))
    tmp7 = tmp5 < tmp6
    tmp8 = tmp4 & tmp7
    tmp9 = 0.0
    tmp10 = tl.where(tmp8, tmp1, tmp9)
    tl.store(out_ptr0 + (x4), tmp10, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/bh/cbh23yy33x77xken5qknfqnn7ai3bckz2ztujdchczv43ytutq3r.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_39 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_39', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 1024
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (200704*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (200704*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (200704*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ss/csswocw6sbx7olv44csvz2bhbfaitfzt5iug4mvg3pkju2ic2auo.py
# Source Nodes: [], Original ATen: [aten.convolution_backward]

triton_poi_fused_convolution_backward_40 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_40', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (194432 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (194432 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (992 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (992 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(out_ptr0 + (x4), tmp11, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/oa/coa2ck2lbjvls6daniqevega4ii44tjfr47d3n34tlhrmglzvjhg.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_41 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_41', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 128
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (25088*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (25088*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (25088*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/zc/czcqtfv6pmz5meqbjsyegip5ss2ysgr3kx6p4gkdetzt4sniqiim.py
# Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]

triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_42 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_42', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 196) % 128
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp3 = tl.load(in_out_ptr0 + (x3), None)
    tmp5 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(in_out_ptr0 + (x3), tmp11, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/cd/ccdws4np6lqx7kyhrpidkcoopjhlabtya6qtoqp7enymgxai6wfu.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_43 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_43', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 992
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (194432*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (194432*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (194432*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/rv/crvwjr5a4mosavc5kpaufnxseh4q6mepomo2flpjefcgcjnvdoo4.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_44 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(9,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_44', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (188160 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (188160 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (960 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (960 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (188160 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (188160 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (960 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (960 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tl.store(out_ptr0 + (x4), tmp22, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/jk/cjkpmvbgn72vos2vakvlvqjfwwfuo2porpkmdopbz44jr7qn6ss7.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_45 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_45', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 960
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (188160*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (188160*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (188160*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/mw/cmwkso5l6xwt2p6eg2sibikrkcotwlb6fboj32ptl54knrq4uwyp.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_46 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(13,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_46', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (181888 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (181888 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (181888 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (181888 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (181888 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (181888 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (928 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tl.store(out_ptr0 + (x4), tmp33, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/7y/c7yk4fejelkurxn5jbyszszqflbl2td4yy6hhmow6ku2xxhcaxui.py
# Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]

triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 196) % 128
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp3 = tl.load(in_ptr1 + (x3), None)
    tmp5 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(out_ptr0 + (x3), tmp11, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/lk/clkwcpzxip7jk5rmaru7kbfykqmumivl6ebkzpgoyapv4sc37pxd.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_48 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(17,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_48', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (175616 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (175616 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (175616 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (175616 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (175616 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (175616 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (175616 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (175616 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (896 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tl.store(in_out_ptr0 + (x4), tmp44, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/j6/cj65wutilrr72d4or4vpkdxvzgkjo2prkfaaawypaogw3t3b43nm.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_49 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(21,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_49', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (169344 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (169344 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (169344 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (169344 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (169344 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (169344 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (169344 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (169344 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (169344 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (169344 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (864 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tl.store(in_out_ptr0 + (x4), tmp55, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/5o/c5oh5ngvknyaxnul5mmgroosb7a7caqgpdzz2ymxsxhr43n3aprt.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_50 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(25,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_50', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (163072 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (163072 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (163072 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (163072 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (163072 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (163072 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (163072 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (163072 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (163072 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (163072 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (163072 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (163072 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (832 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tl.store(in_out_ptr0 + (x4), tmp66, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/zj/czjh3b2qdkgdp2n6xtagfplltq4vwtgncr6s3x6wrrfnvsqi2wjd.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_51 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(29,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_51', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (156800 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (156800 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (156800 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (156800 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (156800 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (156800 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (156800 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (156800 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (156800 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (156800 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (156800 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (156800 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (156800 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (156800 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (800 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tl.store(in_out_ptr0 + (x4), tmp77, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/kd/ckdvka5spizi6hnm3aczahc5z4v55rltgq5yvwhmvirafqobhr42.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_52 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(33,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_52', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (150528 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (150528 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (150528 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (150528 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (150528 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (150528 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (150528 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (150528 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (150528 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (150528 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (150528 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (150528 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (150528 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (150528 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (150528 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (150528 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (768 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tl.store(in_out_ptr0 + (x4), tmp88, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/sd/csdrmu4ib7eiiws2axs6syzllqfpmgazwtsakc3hj7e276bokv3f.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_53 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(37,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_53', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (144256 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (144256 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (144256 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (144256 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (144256 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (144256 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (144256 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (144256 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (144256 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (144256 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (144256 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (144256 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (144256 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (144256 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (144256 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (144256 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (144256 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (144256 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (736 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tl.store(in_out_ptr0 + (x4), tmp99, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ir/cirx4kd6ppaeyxm6gh6l5crri7jeksdkzyrmmli5bee4g3gt2zdb.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_54 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(41,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_54', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (137984 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (137984 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (137984 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (137984 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (137984 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (137984 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (137984 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (137984 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (137984 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (137984 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (137984 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (137984 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (137984 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (137984 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (137984 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (137984 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (137984 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (137984 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (137984 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (137984 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (704 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tl.store(in_out_ptr0 + (x4), tmp110, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/l5/cl563pvckmfy6s2vm4gk7uodmveooatoc4re36m2kpayzbkgxzim.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_55 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(45,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_55', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (131712 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (131712 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (131712 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (131712 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (131712 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (131712 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (131712 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (131712 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (131712 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (131712 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (131712 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (131712 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (131712 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (131712 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (131712 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (131712 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (131712 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (131712 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (131712 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (131712 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (131712 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (131712 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (672 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tl.store(in_out_ptr0 + (x4), tmp121, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/uc/cuc5gznlyah6bzecbiwiugrmna7un6kgyevxgigkvhq3zxlewci3.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_56 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(49,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_56', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (125440 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (125440 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (125440 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (125440 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (125440 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (125440 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (125440 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (125440 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (125440 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (125440 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (125440 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (125440 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (125440 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (125440 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (125440 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (125440 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (125440 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (125440 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (125440 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (125440 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (125440 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (125440 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (125440 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (125440 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (640 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tl.store(in_out_ptr0 + (x4), tmp132, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/dv/cdvy7e5762wdenfoaryi7prznnjt2lztnh2iay5rdudapqacljj6.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_57 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(53,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_57', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (119168 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (119168 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (119168 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (119168 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (119168 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (119168 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (119168 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (119168 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (119168 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (119168 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (119168 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (119168 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (119168 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (119168 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (119168 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (119168 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (119168 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (119168 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (119168 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (119168 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (119168 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (119168 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (119168 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (119168 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (119168 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (119168 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (608 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tl.store(in_out_ptr0 + (x4), tmp143, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/2d/c2daogp6qzlebttyl6evbvdhfzgrs47dhc54cpbiqdg3al5rrons.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_58 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(57,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_58', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (112896 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (112896 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (112896 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (112896 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (112896 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (112896 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (112896 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (112896 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (112896 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (112896 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (112896 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (112896 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (112896 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (112896 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (112896 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (112896 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (112896 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (112896 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (112896 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (112896 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (112896 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (112896 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (112896 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (112896 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (112896 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (112896 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (112896 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (112896 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (576 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tl.store(in_out_ptr0 + (x4), tmp154, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/st/cstaceccqkbybcophbbccdkbvhkktzhlp3kx365podlkoybootm7.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_59 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(61,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_59', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (106624 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (106624 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (106624 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (106624 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (106624 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (106624 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (106624 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (106624 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (106624 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (106624 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (106624 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (106624 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (106624 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (106624 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (106624 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (106624 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (106624 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (106624 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (106624 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (106624 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (106624 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (106624 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (106624 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (106624 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (106624 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (106624 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (106624 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (106624 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (106624 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (106624 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (544 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tl.store(in_out_ptr0 + (x4), tmp165, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/xq/cxqafbjtgv2gcjc4agm2hwjzzrplmyphufextkxnqs4dnnfxyeiq.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_60 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(65,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_60', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (100352 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (100352 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (100352 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (100352 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (100352 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (100352 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (100352 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (100352 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (100352 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (100352 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (100352 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (100352 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (100352 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (100352 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (100352 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (100352 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (100352 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (100352 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (100352 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (100352 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (100352 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (100352 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (100352 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (100352 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (100352 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (100352 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (100352 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (100352 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (100352 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (100352 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (100352 + x3 + (106624*x2)), xmask)
    tmp168 = tl.load(in_ptr61 + (100352 + x3 + (106624*x2)), xmask)
    tmp170 = tl.load(in_ptr62 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (512 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tl.store(in_out_ptr0 + (x4), tmp176, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/vx/cvxlmz3vhnj6p5rlol24jrjzy7iefyujcpyximffpvyvsjmp3hnf.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_61 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(69,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_61', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (94080 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (94080 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (94080 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (94080 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (94080 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (94080 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (94080 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (94080 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (94080 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (94080 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (94080 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (94080 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (94080 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (94080 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (94080 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (94080 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (94080 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (94080 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (94080 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (94080 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (94080 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (94080 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (94080 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (94080 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (94080 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (94080 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (94080 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (94080 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (94080 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (94080 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (94080 + x3 + (106624*x2)), xmask)
    tmp168 = tl.load(in_ptr61 + (94080 + x3 + (106624*x2)), xmask)
    tmp170 = tl.load(in_ptr62 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp177 = tl.load(in_ptr64 + (94080 + x3 + (100352*x2)), xmask)
    tmp179 = tl.load(in_ptr65 + (94080 + x3 + (100352*x2)), xmask)
    tmp181 = tl.load(in_ptr66 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp184 = tl.load(in_ptr67 + (480 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tmp178 = tmp177 <= tmp1
    tmp180 = tl.where(tmp178, tmp1, tmp179)
    tmp182 = tmp181 + tmp6
    tmp183 = tl.math.rsqrt(tmp182)
    tmp185 = tmp183 * tmp184
    tmp186 = tmp180 * tmp185
    tmp187 = tmp176 + tmp186
    tl.store(in_out_ptr0 + (x4), tmp187, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/b5/cb5kvg77dxnocdb43anceky6axwaucmaisfabzmxomlow76s2t42.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_62 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: '*fp32', 70: '*fp32', 71: '*fp32', 72: '*fp32', 73: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(73,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_62', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (87808 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (87808 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (87808 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (87808 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (87808 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (87808 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (87808 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (87808 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (87808 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (87808 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (87808 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (87808 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (87808 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (87808 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (87808 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (87808 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (87808 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (87808 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (87808 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (87808 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (87808 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (87808 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (87808 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (87808 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (87808 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (87808 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (87808 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (87808 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (87808 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (87808 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (87808 + x3 + (106624*x2)), xmask)
    tmp168 = tl.load(in_ptr61 + (87808 + x3 + (106624*x2)), xmask)
    tmp170 = tl.load(in_ptr62 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp177 = tl.load(in_ptr64 + (87808 + x3 + (100352*x2)), xmask)
    tmp179 = tl.load(in_ptr65 + (87808 + x3 + (100352*x2)), xmask)
    tmp181 = tl.load(in_ptr66 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp184 = tl.load(in_ptr67 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp188 = tl.load(in_ptr68 + (87808 + x3 + (94080*x2)), xmask)
    tmp190 = tl.load(in_ptr69 + (87808 + x3 + (94080*x2)), xmask)
    tmp192 = tl.load(in_ptr70 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp195 = tl.load(in_ptr71 + (448 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tmp178 = tmp177 <= tmp1
    tmp180 = tl.where(tmp178, tmp1, tmp179)
    tmp182 = tmp181 + tmp6
    tmp183 = tl.math.rsqrt(tmp182)
    tmp185 = tmp183 * tmp184
    tmp186 = tmp180 * tmp185
    tmp187 = tmp176 + tmp186
    tmp189 = tmp188 <= tmp1
    tmp191 = tl.where(tmp189, tmp1, tmp190)
    tmp193 = tmp192 + tmp6
    tmp194 = tl.math.rsqrt(tmp193)
    tmp196 = tmp194 * tmp195
    tmp197 = tmp191 * tmp196
    tmp198 = tmp187 + tmp197
    tl.store(in_out_ptr0 + (x4), tmp198, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/i7/ci74lpwvzttogbhbl4lmf4rpwml2hcs7wg2su4tf7vakorjtcns6.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_63 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: '*fp32', 70: '*fp32', 71: '*fp32', 72: '*fp32', 73: '*fp32', 74: '*fp32', 75: '*fp32', 76: '*fp32', 77: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(77,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_63', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (81536 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (81536 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (81536 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (81536 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (81536 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (81536 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (81536 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (81536 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (81536 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (81536 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (81536 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (81536 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (81536 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (81536 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (81536 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (81536 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (81536 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (81536 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (81536 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (81536 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (81536 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (81536 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (81536 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (81536 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (81536 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (81536 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (81536 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (81536 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (81536 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (81536 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (81536 + x3 + (106624*x2)), xmask)
    tmp168 = tl.load(in_ptr61 + (81536 + x3 + (106624*x2)), xmask)
    tmp170 = tl.load(in_ptr62 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp177 = tl.load(in_ptr64 + (81536 + x3 + (100352*x2)), xmask)
    tmp179 = tl.load(in_ptr65 + (81536 + x3 + (100352*x2)), xmask)
    tmp181 = tl.load(in_ptr66 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp184 = tl.load(in_ptr67 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp188 = tl.load(in_ptr68 + (81536 + x3 + (94080*x2)), xmask)
    tmp190 = tl.load(in_ptr69 + (81536 + x3 + (94080*x2)), xmask)
    tmp192 = tl.load(in_ptr70 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp195 = tl.load(in_ptr71 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp199 = tl.load(in_ptr72 + (81536 + x3 + (87808*x2)), xmask)
    tmp201 = tl.load(in_ptr73 + (81536 + x3 + (87808*x2)), xmask)
    tmp203 = tl.load(in_ptr74 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp206 = tl.load(in_ptr75 + (416 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tmp178 = tmp177 <= tmp1
    tmp180 = tl.where(tmp178, tmp1, tmp179)
    tmp182 = tmp181 + tmp6
    tmp183 = tl.math.rsqrt(tmp182)
    tmp185 = tmp183 * tmp184
    tmp186 = tmp180 * tmp185
    tmp187 = tmp176 + tmp186
    tmp189 = tmp188 <= tmp1
    tmp191 = tl.where(tmp189, tmp1, tmp190)
    tmp193 = tmp192 + tmp6
    tmp194 = tl.math.rsqrt(tmp193)
    tmp196 = tmp194 * tmp195
    tmp197 = tmp191 * tmp196
    tmp198 = tmp187 + tmp197
    tmp200 = tmp199 <= tmp1
    tmp202 = tl.where(tmp200, tmp1, tmp201)
    tmp204 = tmp203 + tmp6
    tmp205 = tl.math.rsqrt(tmp204)
    tmp207 = tmp205 * tmp206
    tmp208 = tmp202 * tmp207
    tmp209 = tmp198 + tmp208
    tl.store(in_out_ptr0 + (x4), tmp209, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ic/cickxffimsaclux7haj63fkexoykmxm2cqkx7yenh3ih4ytj63wv.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_64 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: '*fp32', 70: '*fp32', 71: '*fp32', 72: '*fp32', 73: '*fp32', 74: '*fp32', 75: '*fp32', 76: '*fp32', 77: '*fp32', 78: '*fp32', 79: '*fp32', 80: '*fp32', 81: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(81,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_64', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (75264 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (75264 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (75264 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (75264 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (75264 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (75264 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (75264 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (75264 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (75264 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (75264 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (75264 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (75264 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (75264 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (75264 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (75264 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (75264 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (75264 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (75264 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (75264 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (75264 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (75264 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (75264 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (75264 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (75264 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (75264 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (75264 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (75264 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (75264 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (75264 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (75264 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (75264 + x3 + (106624*x2)), xmask)
    tmp168 = tl.load(in_ptr61 + (75264 + x3 + (106624*x2)), xmask)
    tmp170 = tl.load(in_ptr62 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp177 = tl.load(in_ptr64 + (75264 + x3 + (100352*x2)), xmask)
    tmp179 = tl.load(in_ptr65 + (75264 + x3 + (100352*x2)), xmask)
    tmp181 = tl.load(in_ptr66 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp184 = tl.load(in_ptr67 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp188 = tl.load(in_ptr68 + (75264 + x3 + (94080*x2)), xmask)
    tmp190 = tl.load(in_ptr69 + (75264 + x3 + (94080*x2)), xmask)
    tmp192 = tl.load(in_ptr70 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp195 = tl.load(in_ptr71 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp199 = tl.load(in_ptr72 + (75264 + x3 + (87808*x2)), xmask)
    tmp201 = tl.load(in_ptr73 + (75264 + x3 + (87808*x2)), xmask)
    tmp203 = tl.load(in_ptr74 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp206 = tl.load(in_ptr75 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp210 = tl.load(in_ptr76 + (75264 + x3 + (81536*x2)), xmask)
    tmp212 = tl.load(in_ptr77 + (75264 + x3 + (81536*x2)), xmask)
    tmp214 = tl.load(in_ptr78 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp217 = tl.load(in_ptr79 + (384 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tmp178 = tmp177 <= tmp1
    tmp180 = tl.where(tmp178, tmp1, tmp179)
    tmp182 = tmp181 + tmp6
    tmp183 = tl.math.rsqrt(tmp182)
    tmp185 = tmp183 * tmp184
    tmp186 = tmp180 * tmp185
    tmp187 = tmp176 + tmp186
    tmp189 = tmp188 <= tmp1
    tmp191 = tl.where(tmp189, tmp1, tmp190)
    tmp193 = tmp192 + tmp6
    tmp194 = tl.math.rsqrt(tmp193)
    tmp196 = tmp194 * tmp195
    tmp197 = tmp191 * tmp196
    tmp198 = tmp187 + tmp197
    tmp200 = tmp199 <= tmp1
    tmp202 = tl.where(tmp200, tmp1, tmp201)
    tmp204 = tmp203 + tmp6
    tmp205 = tl.math.rsqrt(tmp204)
    tmp207 = tmp205 * tmp206
    tmp208 = tmp202 * tmp207
    tmp209 = tmp198 + tmp208
    tmp211 = tmp210 <= tmp1
    tmp213 = tl.where(tmp211, tmp1, tmp212)
    tmp215 = tmp214 + tmp6
    tmp216 = tl.math.rsqrt(tmp215)
    tmp218 = tmp216 * tmp217
    tmp219 = tmp213 * tmp218
    tmp220 = tmp209 + tmp219
    tl.store(in_out_ptr0 + (x4), tmp220, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ld/cldacwohx3bgb4xnqdbl36n7xrmze76hxys4jjn2y4kpb5w2gzqb.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_65 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: '*fp32', 70: '*fp32', 71: '*fp32', 72: '*fp32', 73: '*fp32', 74: '*fp32', 75: '*fp32', 76: '*fp32', 77: '*fp32', 78: '*fp32', 79: '*fp32', 80: '*fp32', 81: '*fp32', 82: '*fp32', 83: '*fp32', 84: '*fp32', 85: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(85,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_65', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (68992 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (68992 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (68992 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (68992 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (68992 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (68992 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (68992 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (68992 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (68992 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (68992 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (68992 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (68992 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (68992 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (68992 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (68992 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (68992 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (68992 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (68992 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (68992 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (68992 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (68992 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (68992 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (68992 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (68992 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (68992 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (68992 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (68992 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (68992 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (68992 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (68992 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (68992 + x3 + (106624*x2)), xmask)
    tmp168 = tl.load(in_ptr61 + (68992 + x3 + (106624*x2)), xmask)
    tmp170 = tl.load(in_ptr62 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp177 = tl.load(in_ptr64 + (68992 + x3 + (100352*x2)), xmask)
    tmp179 = tl.load(in_ptr65 + (68992 + x3 + (100352*x2)), xmask)
    tmp181 = tl.load(in_ptr66 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp184 = tl.load(in_ptr67 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp188 = tl.load(in_ptr68 + (68992 + x3 + (94080*x2)), xmask)
    tmp190 = tl.load(in_ptr69 + (68992 + x3 + (94080*x2)), xmask)
    tmp192 = tl.load(in_ptr70 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp195 = tl.load(in_ptr71 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp199 = tl.load(in_ptr72 + (68992 + x3 + (87808*x2)), xmask)
    tmp201 = tl.load(in_ptr73 + (68992 + x3 + (87808*x2)), xmask)
    tmp203 = tl.load(in_ptr74 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp206 = tl.load(in_ptr75 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp210 = tl.load(in_ptr76 + (68992 + x3 + (81536*x2)), xmask)
    tmp212 = tl.load(in_ptr77 + (68992 + x3 + (81536*x2)), xmask)
    tmp214 = tl.load(in_ptr78 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp217 = tl.load(in_ptr79 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp221 = tl.load(in_ptr80 + (68992 + x3 + (75264*x2)), xmask)
    tmp223 = tl.load(in_ptr81 + (68992 + x3 + (75264*x2)), xmask)
    tmp225 = tl.load(in_ptr82 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp228 = tl.load(in_ptr83 + (352 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tmp178 = tmp177 <= tmp1
    tmp180 = tl.where(tmp178, tmp1, tmp179)
    tmp182 = tmp181 + tmp6
    tmp183 = tl.math.rsqrt(tmp182)
    tmp185 = tmp183 * tmp184
    tmp186 = tmp180 * tmp185
    tmp187 = tmp176 + tmp186
    tmp189 = tmp188 <= tmp1
    tmp191 = tl.where(tmp189, tmp1, tmp190)
    tmp193 = tmp192 + tmp6
    tmp194 = tl.math.rsqrt(tmp193)
    tmp196 = tmp194 * tmp195
    tmp197 = tmp191 * tmp196
    tmp198 = tmp187 + tmp197
    tmp200 = tmp199 <= tmp1
    tmp202 = tl.where(tmp200, tmp1, tmp201)
    tmp204 = tmp203 + tmp6
    tmp205 = tl.math.rsqrt(tmp204)
    tmp207 = tmp205 * tmp206
    tmp208 = tmp202 * tmp207
    tmp209 = tmp198 + tmp208
    tmp211 = tmp210 <= tmp1
    tmp213 = tl.where(tmp211, tmp1, tmp212)
    tmp215 = tmp214 + tmp6
    tmp216 = tl.math.rsqrt(tmp215)
    tmp218 = tmp216 * tmp217
    tmp219 = tmp213 * tmp218
    tmp220 = tmp209 + tmp219
    tmp222 = tmp221 <= tmp1
    tmp224 = tl.where(tmp222, tmp1, tmp223)
    tmp226 = tmp225 + tmp6
    tmp227 = tl.math.rsqrt(tmp226)
    tmp229 = tmp227 * tmp228
    tmp230 = tmp224 * tmp229
    tmp231 = tmp220 + tmp230
    tl.store(in_out_ptr0 + (x4), tmp231, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/z5/cz5zsitpbotto7fqmlr4dwncljunt5rhojfvdya6pzqkbc3f6dvl.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_66 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: '*fp32', 70: '*fp32', 71: '*fp32', 72: '*fp32', 73: '*fp32', 74: '*fp32', 75: '*fp32', 76: '*fp32', 77: '*fp32', 78: '*fp32', 79: '*fp32', 80: '*fp32', 81: '*fp32', 82: '*fp32', 83: '*fp32', 84: '*fp32', 85: '*fp32', 86: '*fp32', 87: '*fp32', 88: '*fp32', 89: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(89,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_66', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (62720 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (62720 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (62720 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (62720 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (62720 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (62720 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (62720 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (62720 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (62720 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (62720 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (62720 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (62720 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (62720 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (62720 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (62720 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (62720 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (62720 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (62720 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (62720 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (62720 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (62720 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (62720 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (62720 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (62720 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (62720 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (62720 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (62720 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (62720 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (62720 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (62720 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (62720 + x3 + (106624*x2)), xmask)
    tmp168 = tl.load(in_ptr61 + (62720 + x3 + (106624*x2)), xmask)
    tmp170 = tl.load(in_ptr62 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp177 = tl.load(in_ptr64 + (62720 + x3 + (100352*x2)), xmask)
    tmp179 = tl.load(in_ptr65 + (62720 + x3 + (100352*x2)), xmask)
    tmp181 = tl.load(in_ptr66 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp184 = tl.load(in_ptr67 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp188 = tl.load(in_ptr68 + (62720 + x3 + (94080*x2)), xmask)
    tmp190 = tl.load(in_ptr69 + (62720 + x3 + (94080*x2)), xmask)
    tmp192 = tl.load(in_ptr70 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp195 = tl.load(in_ptr71 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp199 = tl.load(in_ptr72 + (62720 + x3 + (87808*x2)), xmask)
    tmp201 = tl.load(in_ptr73 + (62720 + x3 + (87808*x2)), xmask)
    tmp203 = tl.load(in_ptr74 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp206 = tl.load(in_ptr75 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp210 = tl.load(in_ptr76 + (62720 + x3 + (81536*x2)), xmask)
    tmp212 = tl.load(in_ptr77 + (62720 + x3 + (81536*x2)), xmask)
    tmp214 = tl.load(in_ptr78 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp217 = tl.load(in_ptr79 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp221 = tl.load(in_ptr80 + (62720 + x3 + (75264*x2)), xmask)
    tmp223 = tl.load(in_ptr81 + (62720 + x3 + (75264*x2)), xmask)
    tmp225 = tl.load(in_ptr82 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp228 = tl.load(in_ptr83 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp232 = tl.load(in_ptr84 + (62720 + x3 + (68992*x2)), xmask)
    tmp234 = tl.load(in_ptr85 + (62720 + x3 + (68992*x2)), xmask)
    tmp236 = tl.load(in_ptr86 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp239 = tl.load(in_ptr87 + (320 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tmp178 = tmp177 <= tmp1
    tmp180 = tl.where(tmp178, tmp1, tmp179)
    tmp182 = tmp181 + tmp6
    tmp183 = tl.math.rsqrt(tmp182)
    tmp185 = tmp183 * tmp184
    tmp186 = tmp180 * tmp185
    tmp187 = tmp176 + tmp186
    tmp189 = tmp188 <= tmp1
    tmp191 = tl.where(tmp189, tmp1, tmp190)
    tmp193 = tmp192 + tmp6
    tmp194 = tl.math.rsqrt(tmp193)
    tmp196 = tmp194 * tmp195
    tmp197 = tmp191 * tmp196
    tmp198 = tmp187 + tmp197
    tmp200 = tmp199 <= tmp1
    tmp202 = tl.where(tmp200, tmp1, tmp201)
    tmp204 = tmp203 + tmp6
    tmp205 = tl.math.rsqrt(tmp204)
    tmp207 = tmp205 * tmp206
    tmp208 = tmp202 * tmp207
    tmp209 = tmp198 + tmp208
    tmp211 = tmp210 <= tmp1
    tmp213 = tl.where(tmp211, tmp1, tmp212)
    tmp215 = tmp214 + tmp6
    tmp216 = tl.math.rsqrt(tmp215)
    tmp218 = tmp216 * tmp217
    tmp219 = tmp213 * tmp218
    tmp220 = tmp209 + tmp219
    tmp222 = tmp221 <= tmp1
    tmp224 = tl.where(tmp222, tmp1, tmp223)
    tmp226 = tmp225 + tmp6
    tmp227 = tl.math.rsqrt(tmp226)
    tmp229 = tmp227 * tmp228
    tmp230 = tmp224 * tmp229
    tmp231 = tmp220 + tmp230
    tmp233 = tmp232 <= tmp1
    tmp235 = tl.where(tmp233, tmp1, tmp234)
    tmp237 = tmp236 + tmp6
    tmp238 = tl.math.rsqrt(tmp237)
    tmp240 = tmp238 * tmp239
    tmp241 = tmp235 * tmp240
    tmp242 = tmp231 + tmp241
    tl.store(in_out_ptr0 + (x4), tmp242, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/b7/cb7daabthennyi6son3ayxkt32xognxvasgwpx4vo2c5ndkbtcst.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_67 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: '*fp32', 70: '*fp32', 71: '*fp32', 72: '*fp32', 73: '*fp32', 74: '*fp32', 75: '*fp32', 76: '*fp32', 77: '*fp32', 78: '*fp32', 79: '*fp32', 80: '*fp32', 81: '*fp32', 82: '*fp32', 83: '*fp32', 84: '*fp32', 85: '*fp32', 86: '*fp32', 87: '*fp32', 88: '*fp32', 89: '*fp32', 90: '*fp32', 91: '*fp32', 92: '*fp32', 93: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(93,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_67', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (56448 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (56448 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (56448 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (56448 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (56448 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (56448 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (56448 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (56448 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (56448 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (56448 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (56448 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (56448 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (56448 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (56448 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (56448 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (56448 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (56448 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (56448 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (56448 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (56448 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (56448 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (56448 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (56448 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (56448 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (56448 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (56448 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (56448 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (56448 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (56448 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (56448 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (56448 + x3 + (106624*x2)), xmask)
    tmp168 = tl.load(in_ptr61 + (56448 + x3 + (106624*x2)), xmask)
    tmp170 = tl.load(in_ptr62 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp177 = tl.load(in_ptr64 + (56448 + x3 + (100352*x2)), xmask)
    tmp179 = tl.load(in_ptr65 + (56448 + x3 + (100352*x2)), xmask)
    tmp181 = tl.load(in_ptr66 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp184 = tl.load(in_ptr67 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp188 = tl.load(in_ptr68 + (56448 + x3 + (94080*x2)), xmask)
    tmp190 = tl.load(in_ptr69 + (56448 + x3 + (94080*x2)), xmask)
    tmp192 = tl.load(in_ptr70 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp195 = tl.load(in_ptr71 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp199 = tl.load(in_ptr72 + (56448 + x3 + (87808*x2)), xmask)
    tmp201 = tl.load(in_ptr73 + (56448 + x3 + (87808*x2)), xmask)
    tmp203 = tl.load(in_ptr74 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp206 = tl.load(in_ptr75 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp210 = tl.load(in_ptr76 + (56448 + x3 + (81536*x2)), xmask)
    tmp212 = tl.load(in_ptr77 + (56448 + x3 + (81536*x2)), xmask)
    tmp214 = tl.load(in_ptr78 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp217 = tl.load(in_ptr79 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp221 = tl.load(in_ptr80 + (56448 + x3 + (75264*x2)), xmask)
    tmp223 = tl.load(in_ptr81 + (56448 + x3 + (75264*x2)), xmask)
    tmp225 = tl.load(in_ptr82 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp228 = tl.load(in_ptr83 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp232 = tl.load(in_ptr84 + (56448 + x3 + (68992*x2)), xmask)
    tmp234 = tl.load(in_ptr85 + (56448 + x3 + (68992*x2)), xmask)
    tmp236 = tl.load(in_ptr86 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp239 = tl.load(in_ptr87 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp243 = tl.load(in_ptr88 + (56448 + x3 + (62720*x2)), xmask)
    tmp245 = tl.load(in_ptr89 + (56448 + x3 + (62720*x2)), xmask)
    tmp247 = tl.load(in_ptr90 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp250 = tl.load(in_ptr91 + (288 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tmp178 = tmp177 <= tmp1
    tmp180 = tl.where(tmp178, tmp1, tmp179)
    tmp182 = tmp181 + tmp6
    tmp183 = tl.math.rsqrt(tmp182)
    tmp185 = tmp183 * tmp184
    tmp186 = tmp180 * tmp185
    tmp187 = tmp176 + tmp186
    tmp189 = tmp188 <= tmp1
    tmp191 = tl.where(tmp189, tmp1, tmp190)
    tmp193 = tmp192 + tmp6
    tmp194 = tl.math.rsqrt(tmp193)
    tmp196 = tmp194 * tmp195
    tmp197 = tmp191 * tmp196
    tmp198 = tmp187 + tmp197
    tmp200 = tmp199 <= tmp1
    tmp202 = tl.where(tmp200, tmp1, tmp201)
    tmp204 = tmp203 + tmp6
    tmp205 = tl.math.rsqrt(tmp204)
    tmp207 = tmp205 * tmp206
    tmp208 = tmp202 * tmp207
    tmp209 = tmp198 + tmp208
    tmp211 = tmp210 <= tmp1
    tmp213 = tl.where(tmp211, tmp1, tmp212)
    tmp215 = tmp214 + tmp6
    tmp216 = tl.math.rsqrt(tmp215)
    tmp218 = tmp216 * tmp217
    tmp219 = tmp213 * tmp218
    tmp220 = tmp209 + tmp219
    tmp222 = tmp221 <= tmp1
    tmp224 = tl.where(tmp222, tmp1, tmp223)
    tmp226 = tmp225 + tmp6
    tmp227 = tl.math.rsqrt(tmp226)
    tmp229 = tmp227 * tmp228
    tmp230 = tmp224 * tmp229
    tmp231 = tmp220 + tmp230
    tmp233 = tmp232 <= tmp1
    tmp235 = tl.where(tmp233, tmp1, tmp234)
    tmp237 = tmp236 + tmp6
    tmp238 = tl.math.rsqrt(tmp237)
    tmp240 = tmp238 * tmp239
    tmp241 = tmp235 * tmp240
    tmp242 = tmp231 + tmp241
    tmp244 = tmp243 <= tmp1
    tmp246 = tl.where(tmp244, tmp1, tmp245)
    tmp248 = tmp247 + tmp6
    tmp249 = tl.math.rsqrt(tmp248)
    tmp251 = tmp249 * tmp250
    tmp252 = tmp246 * tmp251
    tmp253 = tmp242 + tmp252
    tl.store(in_out_ptr0 + (x4), tmp253, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/sk/cskmlorwc2yhpwoqdv5fwf6je57ci6inefey7a5wos74tbfl24e2.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_68 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[32768], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: '*fp32', 70: '*fp32', 71: '*fp32', 72: '*fp32', 73: '*fp32', 74: '*fp32', 75: '*fp32', 76: '*fp32', 77: '*fp32', 78: '*fp32', 79: '*fp32', 80: '*fp32', 81: '*fp32', 82: '*fp32', 83: '*fp32', 84: '*fp32', 85: '*fp32', 86: '*fp32', 87: '*fp32', 88: '*fp32', 89: '*fp32', 90: '*fp32', 91: '*fp32', 92: '*fp32', 93: '*fp32', 94: '*fp32', 95: '*fp32', 96: '*fp32', 97: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(97,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_68', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, xnumel, XBLOCK : tl.constexpr):
    xnumel = 25088
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 6272)
    x3 = xindex % 6272
    x1 = (xindex // 196) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (50176 + x3 + (200704*x2)), xmask)
    tmp3 = tl.load(in_ptr1 + (50176 + x3 + (200704*x2)), xmask)
    tmp5 = tl.load(in_ptr2 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (50176 + x3 + (194432*x2)), xmask)
    tmp14 = tl.load(in_ptr5 + (50176 + x3 + (194432*x2)), xmask)
    tmp16 = tl.load(in_ptr6 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (50176 + x3 + (188160*x2)), xmask)
    tmp25 = tl.load(in_ptr9 + (50176 + x3 + (188160*x2)), xmask)
    tmp27 = tl.load(in_ptr10 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (50176 + x3 + (181888*x2)), xmask)
    tmp36 = tl.load(in_ptr13 + (50176 + x3 + (181888*x2)), xmask)
    tmp38 = tl.load(in_ptr14 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (50176 + x3 + (175616*x2)), xmask)
    tmp47 = tl.load(in_ptr17 + (50176 + x3 + (175616*x2)), xmask)
    tmp49 = tl.load(in_ptr18 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (50176 + x3 + (169344*x2)), xmask)
    tmp58 = tl.load(in_ptr21 + (50176 + x3 + (169344*x2)), xmask)
    tmp60 = tl.load(in_ptr22 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (50176 + x3 + (163072*x2)), xmask)
    tmp69 = tl.load(in_ptr25 + (50176 + x3 + (163072*x2)), xmask)
    tmp71 = tl.load(in_ptr26 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (50176 + x3 + (156800*x2)), xmask)
    tmp80 = tl.load(in_ptr29 + (50176 + x3 + (156800*x2)), xmask)
    tmp82 = tl.load(in_ptr30 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (50176 + x3 + (150528*x2)), xmask)
    tmp91 = tl.load(in_ptr33 + (50176 + x3 + (150528*x2)), xmask)
    tmp93 = tl.load(in_ptr34 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (50176 + x3 + (144256*x2)), xmask)
    tmp102 = tl.load(in_ptr37 + (50176 + x3 + (144256*x2)), xmask)
    tmp104 = tl.load(in_ptr38 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (50176 + x3 + (137984*x2)), xmask)
    tmp113 = tl.load(in_ptr41 + (50176 + x3 + (137984*x2)), xmask)
    tmp115 = tl.load(in_ptr42 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (50176 + x3 + (131712*x2)), xmask)
    tmp124 = tl.load(in_ptr45 + (50176 + x3 + (131712*x2)), xmask)
    tmp126 = tl.load(in_ptr46 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (50176 + x3 + (125440*x2)), xmask)
    tmp135 = tl.load(in_ptr49 + (50176 + x3 + (125440*x2)), xmask)
    tmp137 = tl.load(in_ptr50 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (50176 + x3 + (119168*x2)), xmask)
    tmp146 = tl.load(in_ptr53 + (50176 + x3 + (119168*x2)), xmask)
    tmp148 = tl.load(in_ptr54 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (50176 + x3 + (112896*x2)), xmask)
    tmp157 = tl.load(in_ptr57 + (50176 + x3 + (112896*x2)), xmask)
    tmp159 = tl.load(in_ptr58 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (50176 + x3 + (106624*x2)), xmask)
    tmp168 = tl.load(in_ptr61 + (50176 + x3 + (106624*x2)), xmask)
    tmp170 = tl.load(in_ptr62 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp177 = tl.load(in_ptr64 + (50176 + x3 + (100352*x2)), xmask)
    tmp179 = tl.load(in_ptr65 + (50176 + x3 + (100352*x2)), xmask)
    tmp181 = tl.load(in_ptr66 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp184 = tl.load(in_ptr67 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp188 = tl.load(in_ptr68 + (50176 + x3 + (94080*x2)), xmask)
    tmp190 = tl.load(in_ptr69 + (50176 + x3 + (94080*x2)), xmask)
    tmp192 = tl.load(in_ptr70 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp195 = tl.load(in_ptr71 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp199 = tl.load(in_ptr72 + (50176 + x3 + (87808*x2)), xmask)
    tmp201 = tl.load(in_ptr73 + (50176 + x3 + (87808*x2)), xmask)
    tmp203 = tl.load(in_ptr74 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp206 = tl.load(in_ptr75 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp210 = tl.load(in_ptr76 + (50176 + x3 + (81536*x2)), xmask)
    tmp212 = tl.load(in_ptr77 + (50176 + x3 + (81536*x2)), xmask)
    tmp214 = tl.load(in_ptr78 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp217 = tl.load(in_ptr79 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp221 = tl.load(in_ptr80 + (50176 + x3 + (75264*x2)), xmask)
    tmp223 = tl.load(in_ptr81 + (50176 + x3 + (75264*x2)), xmask)
    tmp225 = tl.load(in_ptr82 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp228 = tl.load(in_ptr83 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp232 = tl.load(in_ptr84 + (50176 + x3 + (68992*x2)), xmask)
    tmp234 = tl.load(in_ptr85 + (50176 + x3 + (68992*x2)), xmask)
    tmp236 = tl.load(in_ptr86 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp239 = tl.load(in_ptr87 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp243 = tl.load(in_ptr88 + (50176 + x3 + (62720*x2)), xmask)
    tmp245 = tl.load(in_ptr89 + (50176 + x3 + (62720*x2)), xmask)
    tmp247 = tl.load(in_ptr90 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp250 = tl.load(in_ptr91 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp254 = tl.load(in_ptr92 + (50176 + x3 + (56448*x2)), xmask)
    tmp256 = tl.load(in_ptr93 + (50176 + x3 + (56448*x2)), xmask)
    tmp258 = tl.load(in_ptr94 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp261 = tl.load(in_ptr95 + (256 + x1), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tmp178 = tmp177 <= tmp1
    tmp180 = tl.where(tmp178, tmp1, tmp179)
    tmp182 = tmp181 + tmp6
    tmp183 = tl.math.rsqrt(tmp182)
    tmp185 = tmp183 * tmp184
    tmp186 = tmp180 * tmp185
    tmp187 = tmp176 + tmp186
    tmp189 = tmp188 <= tmp1
    tmp191 = tl.where(tmp189, tmp1, tmp190)
    tmp193 = tmp192 + tmp6
    tmp194 = tl.math.rsqrt(tmp193)
    tmp196 = tmp194 * tmp195
    tmp197 = tmp191 * tmp196
    tmp198 = tmp187 + tmp197
    tmp200 = tmp199 <= tmp1
    tmp202 = tl.where(tmp200, tmp1, tmp201)
    tmp204 = tmp203 + tmp6
    tmp205 = tl.math.rsqrt(tmp204)
    tmp207 = tmp205 * tmp206
    tmp208 = tmp202 * tmp207
    tmp209 = tmp198 + tmp208
    tmp211 = tmp210 <= tmp1
    tmp213 = tl.where(tmp211, tmp1, tmp212)
    tmp215 = tmp214 + tmp6
    tmp216 = tl.math.rsqrt(tmp215)
    tmp218 = tmp216 * tmp217
    tmp219 = tmp213 * tmp218
    tmp220 = tmp209 + tmp219
    tmp222 = tmp221 <= tmp1
    tmp224 = tl.where(tmp222, tmp1, tmp223)
    tmp226 = tmp225 + tmp6
    tmp227 = tl.math.rsqrt(tmp226)
    tmp229 = tmp227 * tmp228
    tmp230 = tmp224 * tmp229
    tmp231 = tmp220 + tmp230
    tmp233 = tmp232 <= tmp1
    tmp235 = tl.where(tmp233, tmp1, tmp234)
    tmp237 = tmp236 + tmp6
    tmp238 = tl.math.rsqrt(tmp237)
    tmp240 = tmp238 * tmp239
    tmp241 = tmp235 * tmp240
    tmp242 = tmp231 + tmp241
    tmp244 = tmp243 <= tmp1
    tmp246 = tl.where(tmp244, tmp1, tmp245)
    tmp248 = tmp247 + tmp6
    tmp249 = tl.math.rsqrt(tmp248)
    tmp251 = tmp249 * tmp250
    tmp252 = tmp246 * tmp251
    tmp253 = tmp242 + tmp252
    tmp255 = tmp254 <= tmp1
    tmp257 = tl.where(tmp255, tmp1, tmp256)
    tmp259 = tmp258 + tmp6
    tmp260 = tl.math.rsqrt(tmp259)
    tmp262 = tmp260 * tmp261
    tmp263 = tmp257 * tmp262
    tmp264 = tmp253 + tmp263
    tl.store(in_out_ptr0 + (x4), tmp264, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/nb/cnb3edcvq7icnf64krw4q5ncxvs7ywyvra6vmqxhd5ukw472v2pl.py
# Source Nodes: [], Original ATen: [aten.add, aten.native_batch_norm_backward, aten.slice, aten.threshold_backward]

triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_69 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[262144], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: '*fp32', 54: '*fp32', 55: '*fp32', 56: '*fp32', 57: '*fp32', 58: '*fp32', 59: '*fp32', 60: '*fp32', 61: '*fp32', 62: '*fp32', 63: '*fp32', 64: '*fp32', 65: '*fp32', 66: '*fp32', 67: '*fp32', 68: '*fp32', 69: '*fp32', 70: '*fp32', 71: '*fp32', 72: '*fp32', 73: '*fp32', 74: '*fp32', 75: '*fp32', 76: '*fp32', 77: '*fp32', 78: '*fp32', 79: '*fp32', 80: '*fp32', 81: '*fp32', 82: '*fp32', 83: '*fp32', 84: '*fp32', 85: '*fp32', 86: '*fp32', 87: '*fp32', 88: '*fp32', 89: '*fp32', 90: '*fp32', 91: '*fp32', 92: '*fp32', 93: '*fp32', 94: '*fp32', 95: '*fp32', 96: '*fp32', 97: '*fp32', 98: '*fp32', 99: '*fp32', 100: '*fp32', 101: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(101,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_69', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, in_ptr52, in_ptr53, in_ptr54, in_ptr55, in_ptr56, in_ptr57, in_ptr58, in_ptr59, in_ptr60, in_ptr61, in_ptr62, in_ptr63, in_ptr64, in_ptr65, in_ptr66, in_ptr67, in_ptr68, in_ptr69, in_ptr70, in_ptr71, in_ptr72, in_ptr73, in_ptr74, in_ptr75, in_ptr76, in_ptr77, in_ptr78, in_ptr79, in_ptr80, in_ptr81, in_ptr82, in_ptr83, in_ptr84, in_ptr85, in_ptr86, in_ptr87, in_ptr88, in_ptr89, in_ptr90, in_ptr91, in_ptr92, in_ptr93, in_ptr94, in_ptr95, in_ptr96, in_ptr97, in_ptr98, in_ptr99, xnumel, XBLOCK : tl.constexpr):
    xnumel = 200704
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 50176)
    x3 = xindex % 50176
    x1 = (xindex // 196) % 256
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x3 + (200704*x2)), None)
    tmp3 = tl.load(in_ptr1 + (x3 + (200704*x2)), None)
    tmp5 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (x3 + (194432*x2)), None)
    tmp14 = tl.load(in_ptr5 + (x3 + (194432*x2)), None)
    tmp16 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (x3 + (188160*x2)), None)
    tmp25 = tl.load(in_ptr9 + (x3 + (188160*x2)), None)
    tmp27 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (x3 + (181888*x2)), None)
    tmp36 = tl.load(in_ptr13 + (x3 + (181888*x2)), None)
    tmp38 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (x3 + (175616*x2)), None)
    tmp47 = tl.load(in_ptr17 + (x3 + (175616*x2)), None)
    tmp49 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (x3 + (169344*x2)), None)
    tmp58 = tl.load(in_ptr21 + (x3 + (169344*x2)), None)
    tmp60 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (x3 + (163072*x2)), None)
    tmp69 = tl.load(in_ptr25 + (x3 + (163072*x2)), None)
    tmp71 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (x3 + (156800*x2)), None)
    tmp80 = tl.load(in_ptr29 + (x3 + (156800*x2)), None)
    tmp82 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (x3 + (150528*x2)), None)
    tmp91 = tl.load(in_ptr33 + (x3 + (150528*x2)), None)
    tmp93 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (x3 + (144256*x2)), None)
    tmp102 = tl.load(in_ptr37 + (x3 + (144256*x2)), None)
    tmp104 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (x3 + (137984*x2)), None)
    tmp113 = tl.load(in_ptr41 + (x3 + (137984*x2)), None)
    tmp115 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (x3 + (131712*x2)), None)
    tmp124 = tl.load(in_ptr45 + (x3 + (131712*x2)), None)
    tmp126 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (x3 + (125440*x2)), None)
    tmp135 = tl.load(in_ptr49 + (x3 + (125440*x2)), None)
    tmp137 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last')
    tmp144 = tl.load(in_ptr52 + (x3 + (119168*x2)), None)
    tmp146 = tl.load(in_ptr53 + (x3 + (119168*x2)), None)
    tmp148 = tl.load(in_ptr54 + (x1), None, eviction_policy='evict_last')
    tmp151 = tl.load(in_ptr55 + (x1), None, eviction_policy='evict_last')
    tmp155 = tl.load(in_ptr56 + (x3 + (112896*x2)), None)
    tmp157 = tl.load(in_ptr57 + (x3 + (112896*x2)), None)
    tmp159 = tl.load(in_ptr58 + (x1), None, eviction_policy='evict_last')
    tmp162 = tl.load(in_ptr59 + (x1), None, eviction_policy='evict_last')
    tmp166 = tl.load(in_ptr60 + (x3 + (106624*x2)), None)
    tmp168 = tl.load(in_ptr61 + (x3 + (106624*x2)), None)
    tmp170 = tl.load(in_ptr62 + (x1), None, eviction_policy='evict_last')
    tmp173 = tl.load(in_ptr63 + (x1), None, eviction_policy='evict_last')
    tmp177 = tl.load(in_ptr64 + (x3 + (100352*x2)), None)
    tmp179 = tl.load(in_ptr65 + (x3 + (100352*x2)), None)
    tmp181 = tl.load(in_ptr66 + (x1), None, eviction_policy='evict_last')
    tmp184 = tl.load(in_ptr67 + (x1), None, eviction_policy='evict_last')
    tmp188 = tl.load(in_ptr68 + (x3 + (94080*x2)), None)
    tmp190 = tl.load(in_ptr69 + (x3 + (94080*x2)), None)
    tmp192 = tl.load(in_ptr70 + (x1), None, eviction_policy='evict_last')
    tmp195 = tl.load(in_ptr71 + (x1), None, eviction_policy='evict_last')
    tmp199 = tl.load(in_ptr72 + (x3 + (87808*x2)), None)
    tmp201 = tl.load(in_ptr73 + (x3 + (87808*x2)), None)
    tmp203 = tl.load(in_ptr74 + (x1), None, eviction_policy='evict_last')
    tmp206 = tl.load(in_ptr75 + (x1), None, eviction_policy='evict_last')
    tmp210 = tl.load(in_ptr76 + (x3 + (81536*x2)), None)
    tmp212 = tl.load(in_ptr77 + (x3 + (81536*x2)), None)
    tmp214 = tl.load(in_ptr78 + (x1), None, eviction_policy='evict_last')
    tmp217 = tl.load(in_ptr79 + (x1), None, eviction_policy='evict_last')
    tmp221 = tl.load(in_ptr80 + (x3 + (75264*x2)), None)
    tmp223 = tl.load(in_ptr81 + (x3 + (75264*x2)), None)
    tmp225 = tl.load(in_ptr82 + (x1), None, eviction_policy='evict_last')
    tmp228 = tl.load(in_ptr83 + (x1), None, eviction_policy='evict_last')
    tmp232 = tl.load(in_ptr84 + (x3 + (68992*x2)), None)
    tmp234 = tl.load(in_ptr85 + (x3 + (68992*x2)), None)
    tmp236 = tl.load(in_ptr86 + (x1), None, eviction_policy='evict_last')
    tmp239 = tl.load(in_ptr87 + (x1), None, eviction_policy='evict_last')
    tmp243 = tl.load(in_ptr88 + (x3 + (62720*x2)), None)
    tmp245 = tl.load(in_ptr89 + (x3 + (62720*x2)), None)
    tmp247 = tl.load(in_ptr90 + (x1), None, eviction_policy='evict_last')
    tmp250 = tl.load(in_ptr91 + (x1), None, eviction_policy='evict_last')
    tmp254 = tl.load(in_ptr92 + (x3 + (56448*x2)), None)
    tmp256 = tl.load(in_ptr93 + (x3 + (56448*x2)), None)
    tmp258 = tl.load(in_ptr94 + (x1), None, eviction_policy='evict_last')
    tmp261 = tl.load(in_ptr95 + (x1), None, eviction_policy='evict_last')
    tmp265 = tl.load(in_ptr96 + (x4), None)
    tmp267 = tl.load(in_ptr97 + (x4), None)
    tmp269 = tl.load(in_ptr98 + (x1), None, eviction_policy='evict_last')
    tmp272 = tl.load(in_ptr99 + (x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tmp145 = tmp144 <= tmp1
    tmp147 = tl.where(tmp145, tmp1, tmp146)
    tmp149 = tmp148 + tmp6
    tmp150 = tl.math.rsqrt(tmp149)
    tmp152 = tmp150 * tmp151
    tmp153 = tmp147 * tmp152
    tmp154 = tmp143 + tmp153
    tmp156 = tmp155 <= tmp1
    tmp158 = tl.where(tmp156, tmp1, tmp157)
    tmp160 = tmp159 + tmp6
    tmp161 = tl.math.rsqrt(tmp160)
    tmp163 = tmp161 * tmp162
    tmp164 = tmp158 * tmp163
    tmp165 = tmp154 + tmp164
    tmp167 = tmp166 <= tmp1
    tmp169 = tl.where(tmp167, tmp1, tmp168)
    tmp171 = tmp170 + tmp6
    tmp172 = tl.math.rsqrt(tmp171)
    tmp174 = tmp172 * tmp173
    tmp175 = tmp169 * tmp174
    tmp176 = tmp165 + tmp175
    tmp178 = tmp177 <= tmp1
    tmp180 = tl.where(tmp178, tmp1, tmp179)
    tmp182 = tmp181 + tmp6
    tmp183 = tl.math.rsqrt(tmp182)
    tmp185 = tmp183 * tmp184
    tmp186 = tmp180 * tmp185
    tmp187 = tmp176 + tmp186
    tmp189 = tmp188 <= tmp1
    tmp191 = tl.where(tmp189, tmp1, tmp190)
    tmp193 = tmp192 + tmp6
    tmp194 = tl.math.rsqrt(tmp193)
    tmp196 = tmp194 * tmp195
    tmp197 = tmp191 * tmp196
    tmp198 = tmp187 + tmp197
    tmp200 = tmp199 <= tmp1
    tmp202 = tl.where(tmp200, tmp1, tmp201)
    tmp204 = tmp203 + tmp6
    tmp205 = tl.math.rsqrt(tmp204)
    tmp207 = tmp205 * tmp206
    tmp208 = tmp202 * tmp207
    tmp209 = tmp198 + tmp208
    tmp211 = tmp210 <= tmp1
    tmp213 = tl.where(tmp211, tmp1, tmp212)
    tmp215 = tmp214 + tmp6
    tmp216 = tl.math.rsqrt(tmp215)
    tmp218 = tmp216 * tmp217
    tmp219 = tmp213 * tmp218
    tmp220 = tmp209 + tmp219
    tmp222 = tmp221 <= tmp1
    tmp224 = tl.where(tmp222, tmp1, tmp223)
    tmp226 = tmp225 + tmp6
    tmp227 = tl.math.rsqrt(tmp226)
    tmp229 = tmp227 * tmp228
    tmp230 = tmp224 * tmp229
    tmp231 = tmp220 + tmp230
    tmp233 = tmp232 <= tmp1
    tmp235 = tl.where(tmp233, tmp1, tmp234)
    tmp237 = tmp236 + tmp6
    tmp238 = tl.math.rsqrt(tmp237)
    tmp240 = tmp238 * tmp239
    tmp241 = tmp235 * tmp240
    tmp242 = tmp231 + tmp241
    tmp244 = tmp243 <= tmp1
    tmp246 = tl.where(tmp244, tmp1, tmp245)
    tmp248 = tmp247 + tmp6
    tmp249 = tl.math.rsqrt(tmp248)
    tmp251 = tmp249 * tmp250
    tmp252 = tmp246 * tmp251
    tmp253 = tmp242 + tmp252
    tmp255 = tmp254 <= tmp1
    tmp257 = tl.where(tmp255, tmp1, tmp256)
    tmp259 = tmp258 + tmp6
    tmp260 = tl.math.rsqrt(tmp259)
    tmp262 = tmp260 * tmp261
    tmp263 = tmp257 * tmp262
    tmp264 = tmp253 + tmp263
    tmp266 = tmp265 <= tmp1
    tmp268 = tl.where(tmp266, tmp1, tmp267)
    tmp270 = tmp269 + tmp6
    tmp271 = tl.math.rsqrt(tmp270)
    tmp273 = tmp271 * tmp272
    tmp274 = tmp268 * tmp273
    tmp275 = tmp264 + tmp274
    tl.store(in_out_ptr0 + (x4), tmp275, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/rh/crh7psdsczpbjnh7eiacbalshoz5276yfdz3ihw55nwf4waj7mb3.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_70 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_70', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 928
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (181888*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (181888*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (181888*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/5w/c5weh7xpvkthbo6xusbtadhnrlfp4byw42xw6pn7thjpewvlvc6c.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_71 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_71', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 896
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (175616*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (175616*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (175616*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/k2/ck2ygrm42rq7iiv7pwkobxa2nbzplxguzsykwierrljg2eb4tcux.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_72 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_72', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 864
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (169344*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (169344*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (169344*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/r2/cr2pwigewtgftc4qrnoewlvxg3xx2urzkwfkupno2jr2pxprpsjy.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_73 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_73', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 832
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (163072*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (163072*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (163072*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/oi/coisodmuethjadxowpsgkdgn3omkit3tfaeonigar3oqr7gjlwsw.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_74 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_74', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 800
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (156800*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (156800*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (156800*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/7v/c7vaq46m7vrvh6mws65xffjl32g2jtcz6skjtphbaxxpbgccmd4m.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_75 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_75', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 768
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (150528*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (150528*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (150528*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/44/c446ugoc6drxrypndmasfl3hvpekaf4oewebb7rgfssd22nnlzhx.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_76 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_76', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 736
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (144256*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (144256*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (144256*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/no/cnolscbxqqsxcvdd2xzxpl7wthzrvcibcvsiadwi2i7ase4ukzfo.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_77 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_77', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 704
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (137984*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (137984*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (137984*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/sj/csj7y5bhplr3sigll3smul6g5ioofjuqw7n5mmldihsgu4hjtjt4.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_78 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_78', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 672
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (131712*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (131712*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (131712*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/gl/cglzoluqyumlplrkbvyp7lm6io6ylahjiwc3yg5yhyh543jzorz2.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_79 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_79', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 640
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (125440*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (125440*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (125440*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/6c/c6c6z3nvmdv5z7pybgtwtwa4dzpn7xcdhqujivybetuyum2eqjha.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_80 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_80', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 608
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (119168*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (119168*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (119168*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/xw/cxwhzsipzhcw5lxdjke3egbcigdhht76ujed6icafvtsslfhtycy.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_81 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_81', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 576
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (112896*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (112896*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (112896*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/bj/cbjhxzjfiryz6q55oxvwvcd5zuomm74jowsrqbar7ixzhh3lmmy7.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_82 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[1024, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_82', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 544
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (106624*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (106624*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (106624*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/oe/coeacutevf5uvmm6z62mh2vddjhyuplzufh32vjsfmhadddvfnn2.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_83 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[512, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_83', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 512
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (100352*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (100352*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (100352*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/o4/co4tlgafyxesun33qgfixlkdpxt6yrhezgrfi3d2xwke3f7bz2nx.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_84 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[512, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_84', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 480
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (94080*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (94080*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (94080*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/c2/cc2fs7s7c5stxqftufl5io7r5ph3srufum6umfl75iyvidoupccr.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_85 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[512, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_85', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 448
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (87808*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (87808*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (87808*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/4w/c4wwp427kpwshudsyvxwgzrcoqhy6zr4olvcisznpd7razypdi62.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_86 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[512, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_86', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 416
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (81536*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (81536*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (81536*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ww/cwwgrvmesfshi5u4527wxjrpoeqhi5x5q7akimpamggvaxzbitpi.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_87 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[512, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_87', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 384
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (75264*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (75264*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (75264*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/s7/cs7gt4nd24gzlmw6lbn3oxyzhcfxjt5k5wkoxmaxs25b6fakg5yx.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_88 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[512, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_88', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 352
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (68992*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (68992*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (68992*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/po/cpoake7dh3usdevmm77pl4euznk2d4w5puwqx2g6tknlc6mkki2w.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_89 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[512, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_89', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 320
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (62720*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (62720*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (62720*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/un/cun3ct7otezyxfdfz4325a2jhwck6igrf4z6ohj26jom6digfb32.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_90 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[512, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_90', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 288
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (56448*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (56448*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (56448*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/yq/cyqfgoplolqu4ladvzx36ltihawjma4olmsmb3jgifzo3uo4lmve.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_91 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[256, 1024],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_91', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel):
    xnumel = 256
    XBLOCK: tl.constexpr = 1
    rnumel = 784
    RBLOCK: tl.constexpr = 1024
    xoffset = tl.program_id(0) * XBLOCK
    xindex = tl.full([1], xoffset, tl.int32)
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[:]
    rmask = rindex < rnumel
    r1 = rindex % 196
    r2 = (rindex // 196)
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (196*x0) + (50176*r2)), rmask & xmask, other=0.0)
    tmp3 = tl.load(in_ptr1 + (r1 + (196*x0) + (50176*r2)), rmask & xmask, other=0.0)
    tmp9 = tl.load(in_ptr2 + (r1 + (196*x0) + (50176*r2)), rmask & xmask, other=0.0)
    tmp10 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    tmp17 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp5 = tl.broadcast_to(tmp4, [RBLOCK])
    tmp7 = tl.where(rmask & xmask, tmp5, 0)
    tmp8 = triton_helpers.promote_to_tensor(tl.sum(tmp7, 0))
    tmp11 = tmp9 - tmp10
    tmp12 = tmp4 * tmp11
    tmp13 = tl.broadcast_to(tmp12, [RBLOCK])
    tmp15 = tl.where(rmask & xmask, tmp13, 0)
    tmp16 = triton_helpers.promote_to_tensor(tl.sum(tmp15, 0))
    tmp18 = 1e-05
    tmp19 = tmp17 + tmp18
    tmp20 = tl.math.rsqrt(tmp19)
    tmp21 = tmp16 * tmp20
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp21, xmask)
    tl.store(out_ptr0 + (x0), tmp8, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/lh/clhbqj45deyzrre32cafko4lsgch4zdoa7d53oiusj76c4zikgmo.py
# Source Nodes: [], Original ATen: [aten.avg_pool2d_backward, aten.convolution_backward]

triton_poi_fused_avg_pool2d_backward_convolution_backward_92 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[1048576], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_avg_pool2d_backward_convolution_backward_92', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 802816
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 28
    x1 = (xindex // 28) % 28
    x2 = (xindex // 784)
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + ((14*(tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(14, 1 + (x1 // 2)))))) + (14*(tl.where((tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(14, 1 + (x1 // 2))))) >= 0, 0, 14))) + (196*x2) + (tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(14, 1 + (x0 // 2))))) + (tl.where((tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(14, 1 + (x0 // 2))))) >= 0, 0, 14))), None, eviction_policy='evict_last')
    tmp1 = tmp0 / 4
    tmp2 = tl.math.max(0, (x1 // 2))
    tmp3 = tl.math.min(14, 1 + (x1 // 2))
    tmp4 = tmp2 < tmp3
    tmp5 = tl.math.max(0, (x0 // 2))
    tmp6 = tl.math.min(14, 1 + (x0 // 2))
    tmp7 = tmp5 < tmp6
    tmp8 = tmp4 & tmp7
    tmp9 = 0.0
    tmp10 = tl.where(tmp8, tmp1, tmp9)
    tl.store(out_ptr0 + (x4), tmp10, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/kd/ckdkntenh62pwymvgs3stcbsogj6ha2mkgsb44vn5jir5iillshi.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_93 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_93', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 512
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (401408*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (401408*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (401408*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/he/cheit5vslolve5vc75cnlszuukqw5alvx5mpkonslhfl77ojqk2e.py
# Source Nodes: [], Original ATen: [aten.convolution_backward]

triton_poi_fused_convolution_backward_94 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_94', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (376320 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (376320 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (480 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (480 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(out_ptr0 + (x4), tmp11, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/2y/c2ynz7y2ek4todqc5kbk4ywnhsuisdqe6gvcqvm33krtkyjoaden.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_95 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[128, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_95', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (100352*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (100352*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (100352*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/7y/c7yzoqpdffdjdf5ysvlj7etlrp7fbhit7woaal2aa5w43vio4vay.py
# Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]

triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_96 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_96', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 784) % 128
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp3 = tl.load(in_out_ptr0 + (x3), None)
    tmp5 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(in_out_ptr0 + (x3), tmp11, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/sl/cslvf4gbvx5wz3ouhmzjrm3qr7kshcs27iutmzxcu4dd7wwduh3p.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_97 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_97', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 480
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (376320*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (376320*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (376320*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/hl/chl6o6zhiq43njg25svj6olucxmhfm7p32efw3omlh5udtino3r2.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_98 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(9,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_98', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (351232 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (351232 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (448 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (448 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (351232 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (351232 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (448 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (448 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tl.store(out_ptr0 + (x4), tmp22, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/kk/ckk5clbg4fp4534d2an6kkbghazsswqhxky7dwmsami7z2whrrch.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_99 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_99', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 448
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (351232*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (351232*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (351232*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/td/ctdsfcefj3kuksho65cr2ampmyyryzqemzlssa3xqozh35ik5bjf.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_100 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(13,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_100', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (326144 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (326144 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (416 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (416 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (326144 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (326144 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (416 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (416 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (326144 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (326144 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (416 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (416 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tl.store(out_ptr0 + (x4), tmp33, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/yw/cywhyrhbeogyyt7izsh5eqlv7raq5deveffugcdoabscm7zvan56.py
# Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]

triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 784) % 128
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp3 = tl.load(in_ptr1 + (x3), None)
    tmp5 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(out_ptr0 + (x3), tmp11, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/rp/crpphprnqqh6ggqepfhpe4t7iipznfqibao56ikig5obv6vd2dqv.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_102 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(17,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_102', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (301056 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (301056 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (384 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (384 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (301056 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (301056 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (384 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (384 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (301056 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (301056 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (384 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (384 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (301056 + x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (301056 + x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (384 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (384 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tl.store(in_out_ptr0 + (x4), tmp44, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/zf/czfhchxbujdi5gujfcgyy6witfcdeb3dlk7q6obq43ucobdak5mt.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_103 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(21,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_103', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (275968 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (275968 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (352 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (352 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (275968 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (275968 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (352 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (352 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (275968 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (275968 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (352 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (352 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (275968 + x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (275968 + x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (352 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (352 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (275968 + x3 + (301056*x2)), None)
    tmp47 = tl.load(in_ptr17 + (275968 + x3 + (301056*x2)), None)
    tmp49 = tl.load(in_ptr18 + (352 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (352 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tl.store(in_out_ptr0 + (x4), tmp55, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/j3/cj3lol6jz76oijp4gvcu4j3fbludsi7iknfvqnxsiqe6ov4gaqps.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_104 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(25,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_104', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (250880 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (250880 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (320 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (320 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (250880 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (250880 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (320 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (320 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (250880 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (250880 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (320 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (320 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (250880 + x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (250880 + x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (320 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (320 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (250880 + x3 + (301056*x2)), None)
    tmp47 = tl.load(in_ptr17 + (250880 + x3 + (301056*x2)), None)
    tmp49 = tl.load(in_ptr18 + (320 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (320 + x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (250880 + x3 + (275968*x2)), None)
    tmp58 = tl.load(in_ptr21 + (250880 + x3 + (275968*x2)), None)
    tmp60 = tl.load(in_ptr22 + (320 + x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (320 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tl.store(in_out_ptr0 + (x4), tmp66, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/p4/cp4w6yzi3vdmgs2wusr7ckso4jeqrqos7q72azj5koubwzah27rm.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_105 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(29,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_105', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (225792 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (225792 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (288 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (288 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (225792 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (225792 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (288 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (288 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (225792 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (225792 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (288 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (288 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (225792 + x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (225792 + x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (288 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (288 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (225792 + x3 + (301056*x2)), None)
    tmp47 = tl.load(in_ptr17 + (225792 + x3 + (301056*x2)), None)
    tmp49 = tl.load(in_ptr18 + (288 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (288 + x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (225792 + x3 + (275968*x2)), None)
    tmp58 = tl.load(in_ptr21 + (225792 + x3 + (275968*x2)), None)
    tmp60 = tl.load(in_ptr22 + (288 + x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (288 + x1), None, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (225792 + x3 + (250880*x2)), None)
    tmp69 = tl.load(in_ptr25 + (225792 + x3 + (250880*x2)), None)
    tmp71 = tl.load(in_ptr26 + (288 + x1), None, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (288 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tl.store(in_out_ptr0 + (x4), tmp77, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/3s/c3s5mzgrkdjtkndbk4r4khnbyf2abuefloqpl5leld5g3ny4s4uj.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_106 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(33,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_106', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (200704 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (200704 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (256 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (256 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (200704 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (200704 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (256 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (256 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (200704 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (200704 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (256 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (256 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (200704 + x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (200704 + x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (256 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (256 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (200704 + x3 + (301056*x2)), None)
    tmp47 = tl.load(in_ptr17 + (200704 + x3 + (301056*x2)), None)
    tmp49 = tl.load(in_ptr18 + (256 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (256 + x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (200704 + x3 + (275968*x2)), None)
    tmp58 = tl.load(in_ptr21 + (200704 + x3 + (275968*x2)), None)
    tmp60 = tl.load(in_ptr22 + (256 + x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (256 + x1), None, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (200704 + x3 + (250880*x2)), None)
    tmp69 = tl.load(in_ptr25 + (200704 + x3 + (250880*x2)), None)
    tmp71 = tl.load(in_ptr26 + (256 + x1), None, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (256 + x1), None, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (200704 + x3 + (225792*x2)), None)
    tmp80 = tl.load(in_ptr29 + (200704 + x3 + (225792*x2)), None)
    tmp82 = tl.load(in_ptr30 + (256 + x1), None, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (256 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tl.store(in_out_ptr0 + (x4), tmp88, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/k3/ck3ndyqygcnzymmdkda5zefwo53xayy4g2mwhagpa2opoofzjslh.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_107 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(37,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_107', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (175616 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (175616 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (224 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (224 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (175616 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (175616 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (224 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (224 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (175616 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (175616 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (224 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (224 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (175616 + x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (175616 + x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (224 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (224 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (175616 + x3 + (301056*x2)), None)
    tmp47 = tl.load(in_ptr17 + (175616 + x3 + (301056*x2)), None)
    tmp49 = tl.load(in_ptr18 + (224 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (224 + x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (175616 + x3 + (275968*x2)), None)
    tmp58 = tl.load(in_ptr21 + (175616 + x3 + (275968*x2)), None)
    tmp60 = tl.load(in_ptr22 + (224 + x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (224 + x1), None, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (175616 + x3 + (250880*x2)), None)
    tmp69 = tl.load(in_ptr25 + (175616 + x3 + (250880*x2)), None)
    tmp71 = tl.load(in_ptr26 + (224 + x1), None, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (224 + x1), None, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (175616 + x3 + (225792*x2)), None)
    tmp80 = tl.load(in_ptr29 + (175616 + x3 + (225792*x2)), None)
    tmp82 = tl.load(in_ptr30 + (224 + x1), None, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (224 + x1), None, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (175616 + x3 + (200704*x2)), None)
    tmp91 = tl.load(in_ptr33 + (175616 + x3 + (200704*x2)), None)
    tmp93 = tl.load(in_ptr34 + (224 + x1), None, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (224 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tl.store(in_out_ptr0 + (x4), tmp99, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/qk/cqk5j5v3vfg7txb266sb5djxab4dqq4o55qznpjnqwo34icn23lt.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_108 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(41,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_108', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (150528 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (150528 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (192 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (192 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (150528 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (150528 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (192 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (192 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (150528 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (150528 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (192 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (192 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (150528 + x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (150528 + x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (192 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (192 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (150528 + x3 + (301056*x2)), None)
    tmp47 = tl.load(in_ptr17 + (150528 + x3 + (301056*x2)), None)
    tmp49 = tl.load(in_ptr18 + (192 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (192 + x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (150528 + x3 + (275968*x2)), None)
    tmp58 = tl.load(in_ptr21 + (150528 + x3 + (275968*x2)), None)
    tmp60 = tl.load(in_ptr22 + (192 + x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (192 + x1), None, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (150528 + x3 + (250880*x2)), None)
    tmp69 = tl.load(in_ptr25 + (150528 + x3 + (250880*x2)), None)
    tmp71 = tl.load(in_ptr26 + (192 + x1), None, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (192 + x1), None, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (150528 + x3 + (225792*x2)), None)
    tmp80 = tl.load(in_ptr29 + (150528 + x3 + (225792*x2)), None)
    tmp82 = tl.load(in_ptr30 + (192 + x1), None, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (192 + x1), None, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (150528 + x3 + (200704*x2)), None)
    tmp91 = tl.load(in_ptr33 + (150528 + x3 + (200704*x2)), None)
    tmp93 = tl.load(in_ptr34 + (192 + x1), None, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (192 + x1), None, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (150528 + x3 + (175616*x2)), None)
    tmp102 = tl.load(in_ptr37 + (150528 + x3 + (175616*x2)), None)
    tmp104 = tl.load(in_ptr38 + (192 + x1), None, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (192 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tl.store(in_out_ptr0 + (x4), tmp110, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/on/conzmjbx74si3zavibhzjm5cskieembhqgp4yyo7drbq7zbgotug.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_109 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(45,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_109', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (125440 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (125440 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (160 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (160 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (125440 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (125440 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (160 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (160 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (125440 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (125440 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (160 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (160 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (125440 + x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (125440 + x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (160 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (160 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (125440 + x3 + (301056*x2)), None)
    tmp47 = tl.load(in_ptr17 + (125440 + x3 + (301056*x2)), None)
    tmp49 = tl.load(in_ptr18 + (160 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (160 + x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (125440 + x3 + (275968*x2)), None)
    tmp58 = tl.load(in_ptr21 + (125440 + x3 + (275968*x2)), None)
    tmp60 = tl.load(in_ptr22 + (160 + x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (160 + x1), None, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (125440 + x3 + (250880*x2)), None)
    tmp69 = tl.load(in_ptr25 + (125440 + x3 + (250880*x2)), None)
    tmp71 = tl.load(in_ptr26 + (160 + x1), None, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (160 + x1), None, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (125440 + x3 + (225792*x2)), None)
    tmp80 = tl.load(in_ptr29 + (125440 + x3 + (225792*x2)), None)
    tmp82 = tl.load(in_ptr30 + (160 + x1), None, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (160 + x1), None, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (125440 + x3 + (200704*x2)), None)
    tmp91 = tl.load(in_ptr33 + (125440 + x3 + (200704*x2)), None)
    tmp93 = tl.load(in_ptr34 + (160 + x1), None, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (160 + x1), None, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (125440 + x3 + (175616*x2)), None)
    tmp102 = tl.load(in_ptr37 + (125440 + x3 + (175616*x2)), None)
    tmp104 = tl.load(in_ptr38 + (160 + x1), None, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (160 + x1), None, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (125440 + x3 + (150528*x2)), None)
    tmp113 = tl.load(in_ptr41 + (125440 + x3 + (150528*x2)), None)
    tmp115 = tl.load(in_ptr42 + (160 + x1), None, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (160 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tl.store(in_out_ptr0 + (x4), tmp121, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/gj/cgjz625xvq4opomhszqjakgh4zbrves2bvln4ybp3n7acudjwhqe.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_110 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[131072], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(49,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_110', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, xnumel, XBLOCK : tl.constexpr):
    xnumel = 100352
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 25088)
    x3 = xindex % 25088
    x1 = (xindex // 784) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (100352 + x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (100352 + x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (128 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (128 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (100352 + x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (100352 + x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (128 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (128 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (100352 + x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (100352 + x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (128 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (128 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (100352 + x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (100352 + x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (128 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (128 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (100352 + x3 + (301056*x2)), None)
    tmp47 = tl.load(in_ptr17 + (100352 + x3 + (301056*x2)), None)
    tmp49 = tl.load(in_ptr18 + (128 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (128 + x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (100352 + x3 + (275968*x2)), None)
    tmp58 = tl.load(in_ptr21 + (100352 + x3 + (275968*x2)), None)
    tmp60 = tl.load(in_ptr22 + (128 + x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (128 + x1), None, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (100352 + x3 + (250880*x2)), None)
    tmp69 = tl.load(in_ptr25 + (100352 + x3 + (250880*x2)), None)
    tmp71 = tl.load(in_ptr26 + (128 + x1), None, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (128 + x1), None, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (100352 + x3 + (225792*x2)), None)
    tmp80 = tl.load(in_ptr29 + (100352 + x3 + (225792*x2)), None)
    tmp82 = tl.load(in_ptr30 + (128 + x1), None, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (128 + x1), None, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (100352 + x3 + (200704*x2)), None)
    tmp91 = tl.load(in_ptr33 + (100352 + x3 + (200704*x2)), None)
    tmp93 = tl.load(in_ptr34 + (128 + x1), None, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (128 + x1), None, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (100352 + x3 + (175616*x2)), None)
    tmp102 = tl.load(in_ptr37 + (100352 + x3 + (175616*x2)), None)
    tmp104 = tl.load(in_ptr38 + (128 + x1), None, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (128 + x1), None, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (100352 + x3 + (150528*x2)), None)
    tmp113 = tl.load(in_ptr41 + (100352 + x3 + (150528*x2)), None)
    tmp115 = tl.load(in_ptr42 + (128 + x1), None, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (128 + x1), None, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (100352 + x3 + (125440*x2)), None)
    tmp124 = tl.load(in_ptr45 + (100352 + x3 + (125440*x2)), None)
    tmp126 = tl.load(in_ptr46 + (128 + x1), None, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (128 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tl.store(in_out_ptr0 + (x4), tmp132, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/si/csi5cnklbd65ythoybc3ivrbwgte65b2zirns2vqi7ipcva6lyxu.py
# Source Nodes: [], Original ATen: [aten.add, aten.native_batch_norm_backward, aten.slice, aten.threshold_backward]

triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_111 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: '*fp32', 30: '*fp32', 31: '*fp32', 32: '*fp32', 33: '*fp32', 34: '*fp32', 35: '*fp32', 36: '*fp32', 37: '*fp32', 38: '*fp32', 39: '*fp32', 40: '*fp32', 41: '*fp32', 42: '*fp32', 43: '*fp32', 44: '*fp32', 45: '*fp32', 46: '*fp32', 47: '*fp32', 48: '*fp32', 49: '*fp32', 50: '*fp32', 51: '*fp32', 52: '*fp32', 53: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(53,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_111', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, in_ptr28, in_ptr29, in_ptr30, in_ptr31, in_ptr32, in_ptr33, in_ptr34, in_ptr35, in_ptr36, in_ptr37, in_ptr38, in_ptr39, in_ptr40, in_ptr41, in_ptr42, in_ptr43, in_ptr44, in_ptr45, in_ptr46, in_ptr47, in_ptr48, in_ptr49, in_ptr50, in_ptr51, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 100352)
    x3 = xindex % 100352
    x1 = (xindex // 784) % 128
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x3 + (401408*x2)), None)
    tmp3 = tl.load(in_ptr1 + (x3 + (401408*x2)), None)
    tmp5 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (x3 + (376320*x2)), None)
    tmp14 = tl.load(in_ptr5 + (x3 + (376320*x2)), None)
    tmp16 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (x3 + (351232*x2)), None)
    tmp25 = tl.load(in_ptr9 + (x3 + (351232*x2)), None)
    tmp27 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (x3 + (326144*x2)), None)
    tmp36 = tl.load(in_ptr13 + (x3 + (326144*x2)), None)
    tmp38 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (x3 + (301056*x2)), None)
    tmp47 = tl.load(in_ptr17 + (x3 + (301056*x2)), None)
    tmp49 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (x3 + (275968*x2)), None)
    tmp58 = tl.load(in_ptr21 + (x3 + (275968*x2)), None)
    tmp60 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (x3 + (250880*x2)), None)
    tmp69 = tl.load(in_ptr25 + (x3 + (250880*x2)), None)
    tmp71 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last')
    tmp78 = tl.load(in_ptr28 + (x3 + (225792*x2)), None)
    tmp80 = tl.load(in_ptr29 + (x3 + (225792*x2)), None)
    tmp82 = tl.load(in_ptr30 + (x1), None, eviction_policy='evict_last')
    tmp85 = tl.load(in_ptr31 + (x1), None, eviction_policy='evict_last')
    tmp89 = tl.load(in_ptr32 + (x3 + (200704*x2)), None)
    tmp91 = tl.load(in_ptr33 + (x3 + (200704*x2)), None)
    tmp93 = tl.load(in_ptr34 + (x1), None, eviction_policy='evict_last')
    tmp96 = tl.load(in_ptr35 + (x1), None, eviction_policy='evict_last')
    tmp100 = tl.load(in_ptr36 + (x3 + (175616*x2)), None)
    tmp102 = tl.load(in_ptr37 + (x3 + (175616*x2)), None)
    tmp104 = tl.load(in_ptr38 + (x1), None, eviction_policy='evict_last')
    tmp107 = tl.load(in_ptr39 + (x1), None, eviction_policy='evict_last')
    tmp111 = tl.load(in_ptr40 + (x3 + (150528*x2)), None)
    tmp113 = tl.load(in_ptr41 + (x3 + (150528*x2)), None)
    tmp115 = tl.load(in_ptr42 + (x1), None, eviction_policy='evict_last')
    tmp118 = tl.load(in_ptr43 + (x1), None, eviction_policy='evict_last')
    tmp122 = tl.load(in_ptr44 + (x3 + (125440*x2)), None)
    tmp124 = tl.load(in_ptr45 + (x3 + (125440*x2)), None)
    tmp126 = tl.load(in_ptr46 + (x1), None, eviction_policy='evict_last')
    tmp129 = tl.load(in_ptr47 + (x1), None, eviction_policy='evict_last')
    tmp133 = tl.load(in_ptr48 + (x4), None)
    tmp135 = tl.load(in_ptr49 + (x4), None)
    tmp137 = tl.load(in_ptr50 + (x1), None, eviction_policy='evict_last')
    tmp140 = tl.load(in_ptr51 + (x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tmp79 = tmp78 <= tmp1
    tmp81 = tl.where(tmp79, tmp1, tmp80)
    tmp83 = tmp82 + tmp6
    tmp84 = tl.math.rsqrt(tmp83)
    tmp86 = tmp84 * tmp85
    tmp87 = tmp81 * tmp86
    tmp88 = tmp77 + tmp87
    tmp90 = tmp89 <= tmp1
    tmp92 = tl.where(tmp90, tmp1, tmp91)
    tmp94 = tmp93 + tmp6
    tmp95 = tl.math.rsqrt(tmp94)
    tmp97 = tmp95 * tmp96
    tmp98 = tmp92 * tmp97
    tmp99 = tmp88 + tmp98
    tmp101 = tmp100 <= tmp1
    tmp103 = tl.where(tmp101, tmp1, tmp102)
    tmp105 = tmp104 + tmp6
    tmp106 = tl.math.rsqrt(tmp105)
    tmp108 = tmp106 * tmp107
    tmp109 = tmp103 * tmp108
    tmp110 = tmp99 + tmp109
    tmp112 = tmp111 <= tmp1
    tmp114 = tl.where(tmp112, tmp1, tmp113)
    tmp116 = tmp115 + tmp6
    tmp117 = tl.math.rsqrt(tmp116)
    tmp119 = tmp117 * tmp118
    tmp120 = tmp114 * tmp119
    tmp121 = tmp110 + tmp120
    tmp123 = tmp122 <= tmp1
    tmp125 = tl.where(tmp123, tmp1, tmp124)
    tmp127 = tmp126 + tmp6
    tmp128 = tl.math.rsqrt(tmp127)
    tmp130 = tmp128 * tmp129
    tmp131 = tmp125 * tmp130
    tmp132 = tmp121 + tmp131
    tmp134 = tmp133 <= tmp1
    tmp136 = tl.where(tmp134, tmp1, tmp135)
    tmp138 = tmp137 + tmp6
    tmp139 = tl.math.rsqrt(tmp138)
    tmp141 = tmp139 * tmp140
    tmp142 = tmp136 * tmp141
    tmp143 = tmp132 + tmp142
    tl.store(in_out_ptr0 + (x4), tmp143, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/2j/c2jz6gqwvheptrmh3sr53tzque4qypxj3nkntk2y3l2f224mcjak.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_112 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_112', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 416
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (326144*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (326144*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (326144*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ee/ceenbolsbmxf3xmbwp4lpl6uglbbfwvtqaio4efhta7xussipmxr.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_113 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_113', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 384
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (301056*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (301056*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (301056*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/qh/cqhu6cwplwl3cspikjnorohgu3nqfiuaprqjguxjuv3e3w7gdnnm.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_114 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_114', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 352
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (275968*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (275968*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (275968*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/rc/crcvkd2bqvtx35gqcqt2aywrgdfc5zd2vtbromakj3phw3evvhy5.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_115 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_115', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 320
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (250880*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (250880*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (250880*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/er/cer4tibbkixt64yqbewsweb2uhv2zx4mulr4ntblyrrbbptcxzsj.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_116 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_116', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 288
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (225792*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (225792*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (225792*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/6s/c6sjkbmvmtm2aaampefdzbukxdvpkugbmjjb7tqsnsoeflbj73of.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_117 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[256, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_117', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (200704*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (200704*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (200704*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/b6/cb6mwxywmkrkxeb2x2zh4cjuepzmvgn6tt3bvy7eh4et56ayygaf.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_118 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[256, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_118', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 224
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (175616*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (175616*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (175616*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ki/ckijv737g66t43wlrus3tpab4lzagwgwezrju6iou5ohq4l37hnm.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_119 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[256, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_119', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 192
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (150528*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (150528*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (150528*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/7d/c7dprhimooa3qlzi5uxvka3cseqwrgzwhlzovkwcwweba6lvtfga.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_120 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[256, 4096],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_120', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 160
    rnumel = 3136
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 784
        r2 = (rindex // 784)
        tmp0 = tl.load(in_ptr0 + (r1 + (784*x0) + (125440*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (784*x0) + (125440*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (784*x0) + (125440*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/7m/c7me3hdfaiy3apasejcgwwl6dohphodkqvil5dwwthr5vvyhkuyh.py
# Source Nodes: [], Original ATen: [aten.avg_pool2d_backward, aten.convolution_backward]

triton_poi_fused_avg_pool2d_backward_convolution_backward_121 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[2097152], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_avg_pool2d_backward_convolution_backward_121', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1605632
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 56
    x1 = (xindex // 56) % 56
    x2 = (xindex // 3136)
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + ((28*(tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(28, 1 + (x1 // 2)))))) + (28*(tl.where((tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(28, 1 + (x1 // 2))))) >= 0, 0, 28))) + (784*x2) + (tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(28, 1 + (x0 // 2))))) + (tl.where((tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(28, 1 + (x0 // 2))))) >= 0, 0, 28))), None, eviction_policy='evict_last')
    tmp1 = tmp0 / 4
    tmp2 = tl.math.max(0, (x1 // 2))
    tmp3 = tl.math.min(28, 1 + (x1 // 2))
    tmp4 = tmp2 < tmp3
    tmp5 = tl.math.max(0, (x0 // 2))
    tmp6 = tl.math.min(28, 1 + (x0 // 2))
    tmp7 = tmp5 < tmp6
    tmp8 = tmp4 & tmp7
    tmp9 = 0.0
    tmp10 = tl.where(tmp8, tmp1, tmp9)
    tl.store(out_ptr0 + (x4), tmp10, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/3o/c3o75x4g2vdspv7qgtx36jzxeahnrfeksemvh75tluywuyorfs2c.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_122 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[256, 16384],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32', 8: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7, 8))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_122', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 12544
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r1 = rindex % 3136
        r2 = (rindex // 3136)
        tmp0 = tl.load(in_ptr0 + (r1 + (3136*x0) + (802816*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + (r1 + (3136*x0) + (802816*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + (r1 + (3136*x0) + (802816*r2)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tmp15 = tl.load(in_ptr4 + (x0), xmask, eviction_policy='evict_last')
    tmp16 = 1e-05
    tmp17 = tmp15 + tmp16
    tmp18 = tl.math.rsqrt(tmp17)
    tmp19 = tmp13 * tmp18
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp19, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/pg/cpgdv5odw7l7vwk4xqm5ogglkqfejz4v2oziq63mvh5v7ezrc73p.py
# Source Nodes: [], Original ATen: [aten.convolution_backward]

triton_poi_fused_convolution_backward_123 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_123', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 100352)
    x3 = xindex % 100352
    x1 = (xindex // 3136) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (702464 + x3 + (802816*x2)), None)
    tmp3 = tl.load(in_ptr1 + (702464 + x3 + (802816*x2)), None)
    tmp5 = tl.load(in_ptr2 + (224 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (224 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(out_ptr0 + (x4), tmp11, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/5t/c5twemgvuwlwnmycieoanabuaenfh3tbhjpt7zajxt5vjjbkjnum.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_124 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[256, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_124', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 256
    rnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 128
    x1 = (xindex // 128)
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + ((3136*x0) + (401408*(r2 // 3136)) + (802816*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + ((3136*x0) + (401408*(r2 // 3136)) + (802816*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + ((3136*x0) + (401408*(r2 // 3136)) + (802816*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr1 + (x3), tmp13, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/vk/cvk6spd6y6mskxko3nac6nk3tnijhtonj3c2tqypgjovvisx76ap.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_125 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_125', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*r1)), rmask & xmask, other=0.0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/jw/cjwf5axcsoox5sq2xz2ild5seaerbnhld57lcmqrbvhgbxiznv4s.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_126 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_126', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (128*r1)), rmask & xmask, other=0.0)
    tmp5 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp9 = tmp4 * tmp8
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ko/ckob2dmeguerj6mgvl4y4bw5jal3wubdgikoihhpxqwic2vmy3gm.py
# Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]

triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_127 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[2097152], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(4,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_127', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1605632
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 3136) % 128
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp3 = tl.load(in_out_ptr0 + (x3), None)
    tmp5 = tl.load(in_ptr1 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(in_out_ptr0 + (x3), tmp11, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/4e/c4ekf47umdbbm2qsf6aaxzqlooqacwaanm6oy6sl4texye7p37dq.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_128 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_128', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 448
    rnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 224
    x1 = (xindex // 224)
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + ((3136*x0) + (702464*(r2 // 3136)) + (1404928*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + ((3136*x0) + (702464*(r2 // 3136)) + (1404928*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + ((3136*x0) + (702464*(r2 // 3136)) + (1404928*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr1 + (x3), tmp13, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/dg/cdgfiawz35qnx3ubo5djbd4uaptn45wjrliqbes5ms24aaubkugv.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_129 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[256, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_129', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 224
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (224*r1)), rmask & xmask, other=0.0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/5o/c5oomwu43z6cunnhqefad2xfc5jjnrzntuuxswqwnbhj3jbxg3ag.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_130 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[256, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_130', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 224
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (224*r1)), rmask & xmask, other=0.0)
    tmp5 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp9 = tmp4 * tmp8
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ni/cniangt2vgcrfz2rwqqea4bg7qmk3g652gr56bfi2oija44ldmvq.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_131 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(9,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_131', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 100352)
    x3 = xindex % 100352
    x1 = (xindex // 3136) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (602112 + x3 + (802816*x2)), None)
    tmp3 = tl.load(in_ptr1 + (602112 + x3 + (802816*x2)), None)
    tmp5 = tl.load(in_ptr2 + (192 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (192 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (602112 + x3 + (702464*x2)), None)
    tmp14 = tl.load(in_ptr5 + (602112 + x3 + (702464*x2)), None)
    tmp16 = tl.load(in_ptr6 + (192 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (192 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tl.store(out_ptr0 + (x4), tmp22, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/ed/cedvb6cxbhunfg3sz3rgewh2akfzk3iphcf3rastg3bh4ic27bbn.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_132 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_132', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 384
    rnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 192
    x1 = (xindex // 192)
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + ((3136*x0) + (602112*(r2 // 3136)) + (1204224*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + ((3136*x0) + (602112*(r2 // 3136)) + (1204224*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + ((3136*x0) + (602112*(r2 // 3136)) + (1204224*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr1 + (x3), tmp13, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/r3/cr3gqrzmo3ihr5oav4vuwatw4kc26zwbe5peolfzjfyzu5tlokum.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_133 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[256, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_133', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 192
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (192*r1)), rmask & xmask, other=0.0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/xj/cxjme65a7bnkovc5k4qra6iqzu42hckstiswdahiyi4l6mellroo.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_134 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[256, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_134', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 192
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (192*r1)), rmask & xmask, other=0.0)
    tmp5 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp9 = tmp4 * tmp8
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/lb/clb43n4ljt7cczdtzz4lfgjsjlspqspuoilpmsj4orpzidmdccei.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_135 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(13,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_135', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 100352)
    x3 = xindex % 100352
    x1 = (xindex // 3136) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (501760 + x3 + (802816*x2)), None)
    tmp3 = tl.load(in_ptr1 + (501760 + x3 + (802816*x2)), None)
    tmp5 = tl.load(in_ptr2 + (160 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (160 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (501760 + x3 + (702464*x2)), None)
    tmp14 = tl.load(in_ptr5 + (501760 + x3 + (702464*x2)), None)
    tmp16 = tl.load(in_ptr6 + (160 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (160 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (501760 + x3 + (602112*x2)), None)
    tmp25 = tl.load(in_ptr9 + (501760 + x3 + (602112*x2)), None)
    tmp27 = tl.load(in_ptr10 + (160 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (160 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tl.store(out_ptr0 + (x4), tmp33, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/z3/cz375qcoixqwrm2hwq2zic2cp6fzvbphaswjlcxipcycs43n2w2k.py
# Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]

triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_136 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[2097152], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_136', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, xnumel, XBLOCK : tl.constexpr):
    xnumel = 1605632
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x3 = xindex
    x1 = (xindex // 3136) % 128
    tmp0 = tl.load(in_ptr0 + (x3), None)
    tmp3 = tl.load(in_ptr1 + (x3), None)
    tmp5 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tl.store(out_ptr0 + (x3), tmp11, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/kt/cktopfcht4j32hsfag4hpekorqttjlswiw2wxziec5ab3536dqai.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_137 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(17,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_137', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 100352)
    x3 = xindex % 100352
    x1 = (xindex // 3136) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (401408 + x3 + (802816*x2)), None)
    tmp3 = tl.load(in_ptr1 + (401408 + x3 + (802816*x2)), None)
    tmp5 = tl.load(in_ptr2 + (128 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (128 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (401408 + x3 + (702464*x2)), None)
    tmp14 = tl.load(in_ptr5 + (401408 + x3 + (702464*x2)), None)
    tmp16 = tl.load(in_ptr6 + (128 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (128 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (401408 + x3 + (602112*x2)), None)
    tmp25 = tl.load(in_ptr9 + (401408 + x3 + (602112*x2)), None)
    tmp27 = tl.load(in_ptr10 + (128 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (128 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (401408 + x3 + (501760*x2)), None)
    tmp36 = tl.load(in_ptr13 + (401408 + x3 + (501760*x2)), None)
    tmp38 = tl.load(in_ptr14 + (128 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (128 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tl.store(in_out_ptr0 + (x4), tmp44, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/tu/ctu3bir3hchtq4xrw3tpak5yiahlghqceinv3bknncxgritrjkvw.py
# Source Nodes: [], Original ATen: [aten.add]

triton_poi_fused_add_138 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(21,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_138', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 100352)
    x3 = xindex % 100352
    x1 = (xindex // 3136) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (301056 + x3 + (802816*x2)), None)
    tmp3 = tl.load(in_ptr1 + (301056 + x3 + (802816*x2)), None)
    tmp5 = tl.load(in_ptr2 + (96 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (96 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (301056 + x3 + (702464*x2)), None)
    tmp14 = tl.load(in_ptr5 + (301056 + x3 + (702464*x2)), None)
    tmp16 = tl.load(in_ptr6 + (96 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (96 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (301056 + x3 + (602112*x2)), None)
    tmp25 = tl.load(in_ptr9 + (301056 + x3 + (602112*x2)), None)
    tmp27 = tl.load(in_ptr10 + (96 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (96 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (301056 + x3 + (501760*x2)), None)
    tmp36 = tl.load(in_ptr13 + (301056 + x3 + (501760*x2)), None)
    tmp38 = tl.load(in_ptr14 + (96 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (96 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (301056 + x3 + (401408*x2)), None)
    tmp47 = tl.load(in_ptr17 + (301056 + x3 + (401408*x2)), None)
    tmp49 = tl.load(in_ptr18 + (96 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (96 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tl.store(in_out_ptr0 + (x4), tmp55, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/cu/ccue3ti3whe3j72swlo4girqbe2injscu2segna5xvnq7635wvu5.py
# Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]

triton_poi_fused_add_convolution_backward_139 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[524288], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(25,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_convolution_backward_139', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, xnumel, XBLOCK : tl.constexpr):
    xnumel = 401408
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 100352)
    x3 = xindex % 100352
    x1 = (xindex // 3136) % 32
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (200704 + x3 + (802816*x2)), None)
    tmp3 = tl.load(in_ptr1 + (200704 + x3 + (802816*x2)), None)
    tmp5 = tl.load(in_ptr2 + (64 + x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (64 + x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (200704 + x3 + (702464*x2)), None)
    tmp14 = tl.load(in_ptr5 + (200704 + x3 + (702464*x2)), None)
    tmp16 = tl.load(in_ptr6 + (64 + x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (64 + x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (200704 + x3 + (602112*x2)), None)
    tmp25 = tl.load(in_ptr9 + (200704 + x3 + (602112*x2)), None)
    tmp27 = tl.load(in_ptr10 + (64 + x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (64 + x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (200704 + x3 + (501760*x2)), None)
    tmp36 = tl.load(in_ptr13 + (200704 + x3 + (501760*x2)), None)
    tmp38 = tl.load(in_ptr14 + (64 + x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (64 + x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (200704 + x3 + (401408*x2)), None)
    tmp47 = tl.load(in_ptr17 + (200704 + x3 + (401408*x2)), None)
    tmp49 = tl.load(in_ptr18 + (64 + x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (64 + x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (200704 + x3 + (301056*x2)), None)
    tmp58 = tl.load(in_ptr21 + (200704 + x3 + (301056*x2)), None)
    tmp60 = tl.load(in_ptr22 + (64 + x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (64 + x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tl.store(in_out_ptr0 + (x4), tmp66, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/fa/cfao43rftwqdr4n2alaf3agoqrx3m3rartv3orjvuyajqlhopdsk.py
# Source Nodes: [], Original ATen: [aten.add, aten.native_batch_norm_backward, aten.slice, aten.threshold_backward]

triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_140 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[1048576], 
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: '*fp32', 8: '*fp32', 9: '*fp32', 10: '*fp32', 11: '*fp32', 12: '*fp32', 13: '*fp32', 14: '*fp32', 15: '*fp32', 16: '*fp32', 17: '*fp32', 18: '*fp32', 19: '*fp32', 20: '*fp32', 21: '*fp32', 22: '*fp32', 23: '*fp32', 24: '*fp32', 25: '*fp32', 26: '*fp32', 27: '*fp32', 28: '*fp32', 29: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(29,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_140', 'mutated_arg_names': ['in_out_ptr0']},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, in_ptr5, in_ptr6, in_ptr7, in_ptr8, in_ptr9, in_ptr10, in_ptr11, in_ptr12, in_ptr13, in_ptr14, in_ptr15, in_ptr16, in_ptr17, in_ptr18, in_ptr19, in_ptr20, in_ptr21, in_ptr22, in_ptr23, in_ptr24, in_ptr25, in_ptr26, in_ptr27, xnumel, XBLOCK : tl.constexpr):
    xnumel = 802816
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x2 = (xindex // 200704)
    x3 = xindex % 200704
    x1 = (xindex // 3136) % 64
    x4 = xindex
    tmp0 = tl.load(in_ptr0 + (x3 + (802816*x2)), None)
    tmp3 = tl.load(in_ptr1 + (x3 + (802816*x2)), None)
    tmp5 = tl.load(in_ptr2 + (x1), None, eviction_policy='evict_last')
    tmp9 = tl.load(in_ptr3 + (x1), None, eviction_policy='evict_last')
    tmp12 = tl.load(in_ptr4 + (x3 + (702464*x2)), None)
    tmp14 = tl.load(in_ptr5 + (x3 + (702464*x2)), None)
    tmp16 = tl.load(in_ptr6 + (x1), None, eviction_policy='evict_last')
    tmp19 = tl.load(in_ptr7 + (x1), None, eviction_policy='evict_last')
    tmp23 = tl.load(in_ptr8 + (x3 + (602112*x2)), None)
    tmp25 = tl.load(in_ptr9 + (x3 + (602112*x2)), None)
    tmp27 = tl.load(in_ptr10 + (x1), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr11 + (x1), None, eviction_policy='evict_last')
    tmp34 = tl.load(in_ptr12 + (x3 + (501760*x2)), None)
    tmp36 = tl.load(in_ptr13 + (x3 + (501760*x2)), None)
    tmp38 = tl.load(in_ptr14 + (x1), None, eviction_policy='evict_last')
    tmp41 = tl.load(in_ptr15 + (x1), None, eviction_policy='evict_last')
    tmp45 = tl.load(in_ptr16 + (x3 + (401408*x2)), None)
    tmp47 = tl.load(in_ptr17 + (x3 + (401408*x2)), None)
    tmp49 = tl.load(in_ptr18 + (x1), None, eviction_policy='evict_last')
    tmp52 = tl.load(in_ptr19 + (x1), None, eviction_policy='evict_last')
    tmp56 = tl.load(in_ptr20 + (x3 + (301056*x2)), None)
    tmp58 = tl.load(in_ptr21 + (x3 + (301056*x2)), None)
    tmp60 = tl.load(in_ptr22 + (x1), None, eviction_policy='evict_last')
    tmp63 = tl.load(in_ptr23 + (x1), None, eviction_policy='evict_last')
    tmp67 = tl.load(in_ptr24 + (x4), None)
    tmp69 = tl.load(in_ptr25 + (x4), None)
    tmp71 = tl.load(in_ptr26 + (x1), None, eviction_policy='evict_last')
    tmp74 = tl.load(in_ptr27 + (x1), None, eviction_policy='evict_last')
    tmp1 = 0.0
    tmp2 = tmp0 <= tmp1
    tmp4 = tl.where(tmp2, tmp1, tmp3)
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp10 = tmp8 * tmp9
    tmp11 = tmp4 * tmp10
    tmp13 = tmp12 <= tmp1
    tmp15 = tl.where(tmp13, tmp1, tmp14)
    tmp17 = tmp16 + tmp6
    tmp18 = tl.math.rsqrt(tmp17)
    tmp20 = tmp18 * tmp19
    tmp21 = tmp15 * tmp20
    tmp22 = tmp11 + tmp21
    tmp24 = tmp23 <= tmp1
    tmp26 = tl.where(tmp24, tmp1, tmp25)
    tmp28 = tmp27 + tmp6
    tmp29 = tl.math.rsqrt(tmp28)
    tmp31 = tmp29 * tmp30
    tmp32 = tmp26 * tmp31
    tmp33 = tmp22 + tmp32
    tmp35 = tmp34 <= tmp1
    tmp37 = tl.where(tmp35, tmp1, tmp36)
    tmp39 = tmp38 + tmp6
    tmp40 = tl.math.rsqrt(tmp39)
    tmp42 = tmp40 * tmp41
    tmp43 = tmp37 * tmp42
    tmp44 = tmp33 + tmp43
    tmp46 = tmp45 <= tmp1
    tmp48 = tl.where(tmp46, tmp1, tmp47)
    tmp50 = tmp49 + tmp6
    tmp51 = tl.math.rsqrt(tmp50)
    tmp53 = tmp51 * tmp52
    tmp54 = tmp48 * tmp53
    tmp55 = tmp44 + tmp54
    tmp57 = tmp56 <= tmp1
    tmp59 = tl.where(tmp57, tmp1, tmp58)
    tmp61 = tmp60 + tmp6
    tmp62 = tl.math.rsqrt(tmp61)
    tmp64 = tmp62 * tmp63
    tmp65 = tmp59 * tmp64
    tmp66 = tmp55 + tmp65
    tmp68 = tmp67 <= tmp1
    tmp70 = tl.where(tmp68, tmp1, tmp69)
    tmp72 = tmp71 + tmp6
    tmp73 = tl.math.rsqrt(tmp72)
    tmp75 = tmp73 * tmp74
    tmp76 = tmp70 * tmp75
    tmp77 = tmp66 + tmp76
    tl.store(in_out_ptr0 + (x4), tmp77, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/ag/cagsvggxe2kgvegzk5b2o2vrjtxltevdy5baylfzxdw4a46jy4on.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_141 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_141', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 320
    rnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 160
    x1 = (xindex // 160)
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + ((3136*x0) + (501760*(r2 // 3136)) + (1003520*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + ((3136*x0) + (501760*(r2 // 3136)) + (1003520*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + ((3136*x0) + (501760*(r2 // 3136)) + (1003520*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr1 + (x3), tmp13, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/zp/czpp5pndsebat4ila4gmr4yl7nsgim2r6seouxpo7wpxmhycq3rb.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_142 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[256, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_142', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 160
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (160*r1)), rmask & xmask, other=0.0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/kc/ckcnzrfj4dk2f2bhiektsklb5ldvqx7lsmufahjws6injflc7nw3.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_143 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[256, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_143', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 160
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (160*r1)), rmask & xmask, other=0.0)
    tmp5 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp9 = tmp4 * tmp8
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/yv/cyv3nv3bv2rmpdxhaxwa3w4nooselxbijidwrl7sl2kugngswccz.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_144 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[256, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_144', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 192
    rnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 96
    x1 = (xindex // 96)
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    tmp9 = tl.load(in_ptr3 + (x0), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + ((3136*x0) + (301056*(r2 // 3136)) + (602112*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + ((3136*x0) + (301056*(r2 // 3136)) + (602112*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + ((3136*x0) + (301056*(r2 // 3136)) + (602112*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr1 + (x3), tmp13, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ke/cketqynzl7fv6gjiqcu2prosaiy5huxgazeatoyskip7ffvg4lcr.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_145 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_145', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 96
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (96*r1)), rmask & xmask, other=0.0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/ig/cig26eaai6mweqvmv4ttrg45hpnoeccsuaa64dnk35fmexn4ijzo.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_146 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[128, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_146', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 96
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (96*r1)), rmask & xmask, other=0.0)
    tmp5 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp9 = tmp4 * tmp8
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/gq/cgqamut5pjoo5iogf7yi2ydbuirhmngfjm4v4253h6c5ffqdcarn.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_147 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[128, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: 'i32', 6: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(5, 6))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_147', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 128
    rnumel = 6272
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 64
    x1 = (xindex // 64)
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    _tmp11 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + ((3136*x0) + (200704*(r2 // 3136)) + (401408*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp3 = tl.load(in_ptr1 + ((3136*x0) + (200704*(r2 // 3136)) + (401408*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp8 = tl.load(in_ptr2 + ((3136*x0) + (200704*(r2 // 3136)) + (401408*x1) + (r2 % 3136)), rmask & xmask, eviction_policy='evict_first', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp9 = tmp4 * tmp8
        tmp10 = tl.broadcast_to(tmp9, [XBLOCK, RBLOCK])
        tmp12 = _tmp11 + tmp10
        _tmp11 = tl.where(rmask & xmask, tmp12, _tmp11)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp6, xmask)
    tmp11 = tl.sum(_tmp11, 1)[:, None]
    tl.store(out_ptr1 + (x3), tmp11, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/76/c76knlavha6tagbw5bwltrt6ywrdab3rktascmauji43lyabou52.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_148 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_148', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (64*r1)), rmask & xmask, other=0.0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/tz/ctzk4vk5d62h36cemf4pc4cauwkpqplyvxphbzb4mpmkwvoetyga.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_149 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 2],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_149', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 2
    RBLOCK: tl.constexpr = 2
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (x0 + (64*r1)), rmask & xmask, other=0.0)
    tmp5 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp9 = tmp4 * tmp8
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/3f/c3fqnc545trzqsfm7qs2xaqyrx6ozwdue3l2qfqu4f3nfszsnipw.py
# Source Nodes: [], Original ATen: [aten.convolution_backward, aten.max_pool2d_with_indices_backward, aten.native_batch_norm_backward, aten.threshold_backward]

triton_poi_fused_convolution_backward_max_pool2d_with_indices_backward_native_batch_norm_backward_threshold_backward_150 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, pointwise
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@pointwise(
    size_hints=[4194304], 
    filename=__file__,
    triton_meta={'signature': {0: '*i64', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: '*fp32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(7,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_poi_fused_convolution_backward_max_pool2d_with_indices_backward_native_batch_norm_backward_threshold_backward_150', 'mutated_arg_names': []},
    min_elem_per_thread=0
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, in_ptr4, out_ptr0, out_ptr1, xnumel, XBLOCK : tl.constexpr):
    xnumel = 3211264
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:]
    xmask = xindex < xnumel
    x0 = xindex % 112
    x1 = (xindex // 112) % 112
    x2 = (xindex // 12544)
    x3 = xindex % 12544
    x5 = xindex
    x6 = (xindex // 12544) % 64
    tmp0 = tl.load(in_ptr0 + ((56*(tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2)))))) + (56*(tl.where((tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2))))) >= 0, 0, 56))) + (3136*x2) + (tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) + (tl.where((tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) >= 0, 0, 56))), None, eviction_policy='evict_last')
    tmp1 = tl.load(in_ptr1 + ((56*(tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2)))))) + (56*(tl.where((tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2))))) >= 0, 0, 56))) + (3136*x2) + (tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) + (tl.where((tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) >= 0, 0, 56))), None, eviction_policy='evict_last')
    tmp6 = tl.load(in_ptr0 + ((56*(tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2)))))) + (56*(tl.where((tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2))))) >= 0, 0, 56))) + (3136*x2) + (tl.math.min(1 + (tl.math.max(0, (x0 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) + (tl.where((tl.math.min(1 + (tl.math.max(0, (x0 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) >= 0, 0, 56))), None)
    tmp7 = tl.load(in_ptr1 + ((56*(tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2)))))) + (56*(tl.where((tl.math.min(tl.math.max(0, (x1 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2))))) >= 0, 0, 56))) + (3136*x2) + (tl.math.min(1 + (tl.math.max(0, (x0 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) + (tl.where((tl.math.min(1 + (tl.math.max(0, (x0 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) >= 0, 0, 56))), None)
    tmp19 = tl.load(in_ptr0 + ((56*(tl.math.min(1 + (tl.math.max(0, (x1 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2)))))) + (56*(tl.where((tl.math.min(1 + (tl.math.max(0, (x1 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2))))) >= 0, 0, 56))) + (3136*x2) + (tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) + (tl.where((tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) >= 0, 0, 56))), None, eviction_policy='evict_last')
    tmp20 = tl.load(in_ptr1 + ((56*(tl.math.min(1 + (tl.math.max(0, (x1 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2)))))) + (56*(tl.where((tl.math.min(1 + (tl.math.max(0, (x1 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2))))) >= 0, 0, 56))) + (3136*x2) + (tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) + (tl.where((tl.math.min(tl.math.max(0, (x0 // 2)), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) >= 0, 0, 56))), None, eviction_policy='evict_last')
    tmp30 = tl.load(in_ptr0 + ((56*(tl.math.min(1 + (tl.math.max(0, (x1 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2)))))) + (56*(tl.where((tl.math.min(1 + (tl.math.max(0, (x1 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2))))) >= 0, 0, 56))) + (3136*x2) + (tl.math.min(1 + (tl.math.max(0, (x0 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) + (tl.where((tl.math.min(1 + (tl.math.max(0, (x0 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) >= 0, 0, 56))), None)
    tmp31 = tl.load(in_ptr1 + ((56*(tl.math.min(1 + (tl.math.max(0, (x1 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2)))))) + (56*(tl.where((tl.math.min(1 + (tl.math.max(0, (x1 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x1) // 2))))) >= 0, 0, 56))) + (3136*x2) + (tl.math.min(1 + (tl.math.max(0, (x0 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) + (tl.where((tl.math.min(1 + (tl.math.max(0, (x0 // 2))), (-1) + (tl.math.min(56, 1 + ((1 + x0) // 2))))) >= 0, 0, 56))), None)
    tmp37 = tl.load(in_ptr2 + (x5), None)
    tmp40 = tl.load(in_ptr3 + (x6), None, eviction_policy='evict_last')
    tmp44 = tl.load(in_ptr4 + (x6), None, eviction_policy='evict_last')
    tmp2 = x3
    tmp3 = tmp0 == tmp2
    tmp4 = 0.0
    tmp5 = tl.where(tmp3, tmp1, tmp4)
    tmp8 = tmp6 == tmp2
    tmp9 = tl.math.max(0, (x1 // 2))
    tmp10 = tl.math.min(56, 1 + ((1 + x1) // 2))
    tmp11 = tmp9 < tmp10
    tmp12 = 1 + (tl.math.max(0, (x0 // 2)))
    tmp13 = tl.math.min(56, 1 + ((1 + x0) // 2))
    tmp14 = tmp12 < tmp13
    tmp15 = tmp11 & tmp14
    tmp16 = tmp15 & tmp8
    tmp17 = tmp5 + tmp7
    tmp18 = tl.where(tmp16, tmp17, tmp5)
    tmp21 = tmp19 == tmp2
    tmp22 = 1 + (tl.math.max(0, (x1 // 2)))
    tmp23 = tmp22 < tmp10
    tmp24 = tl.math.max(0, (x0 // 2))
    tmp25 = tmp24 < tmp13
    tmp26 = tmp23 & tmp25
    tmp27 = tmp26 & tmp21
    tmp28 = tmp18 + tmp20
    tmp29 = tl.where(tmp27, tmp28, tmp18)
    tmp32 = tmp30 == tmp2
    tmp33 = tmp23 & tmp14
    tmp34 = tmp33 & tmp32
    tmp35 = tmp29 + tmp31
    tmp36 = tl.where(tmp34, tmp35, tmp29)
    tmp38 = tmp37 <= tmp4
    tmp39 = tl.where(tmp38, tmp4, tmp36)
    tmp41 = 1e-05
    tmp42 = tmp40 + tmp41
    tmp43 = tl.math.rsqrt(tmp42)
    tmp45 = tmp43 * tmp44
    tmp46 = tmp39 * tmp45
    tl.store(out_ptr0 + (x5), tmp36, None)
    tl.store(out_ptr1 + (x5), tmp46, None)
''')


# kernel path: /tmp/torchinductor_youkaichao/kb/ckboyzfmdx4vuuibz3vzwr4tkgaa4sxrry5llouvw3txynpnnc2v.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_red_fused_native_batch_norm_backward_threshold_backward_151 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@reduction(
    size_hints=[512, 8192],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: '*fp32', 4: '*fp32', 5: '*fp32', 6: 'i32', 7: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3, 4, 5, 6, 7), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(6, 7))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_red_fused_native_batch_norm_backward_threshold_backward_151', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, in_ptr1, in_ptr2, in_ptr3, out_ptr0, out_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr, RBLOCK : tl.constexpr):
    xnumel = 448
    rnumel = 7168
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rbase = tl.arange(0, RBLOCK)[None, :]
    x0 = xindex % 7
    x1 = (xindex // 7)
    _tmp6 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    x3 = xindex
    tmp9 = tl.load(in_ptr3 + (x1), xmask, eviction_policy='evict_last')
    _tmp13 = tl.full([XBLOCK, RBLOCK], 0, tl.float32)
    for roffset in range(0, rnumel, RBLOCK):
        rindex = roffset + rbase
        rmask = rindex < rnumel
        r2 = rindex
        tmp0 = tl.load(in_ptr0 + ((112*(((r2 + (7168*x0)) // 112) % 112)) + (12544*x1) + (802816*((r2 + (7168*x0)) // 12544)) + (r2 % 112)), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp3 = tl.load(in_ptr1 + ((112*(((r2 + (7168*x0)) // 112) % 112)) + (12544*x1) + (802816*((r2 + (7168*x0)) // 12544)) + (r2 % 112)), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp8 = tl.load(in_ptr2 + ((112*(((r2 + (7168*x0)) // 112) % 112)) + (12544*x1) + (802816*((r2 + (7168*x0)) // 12544)) + (r2 % 112)), rmask & xmask, eviction_policy='evict_last', other=0.0)
        tmp1 = 0.0
        tmp2 = tmp0 <= tmp1
        tmp4 = tl.where(tmp2, tmp1, tmp3)
        tmp5 = tl.broadcast_to(tmp4, [XBLOCK, RBLOCK])
        tmp7 = _tmp6 + tmp5
        _tmp6 = tl.where(rmask & xmask, tmp7, _tmp6)
        tmp10 = tmp8 - tmp9
        tmp11 = tmp4 * tmp10
        tmp12 = tl.broadcast_to(tmp11, [XBLOCK, RBLOCK])
        tmp14 = _tmp13 + tmp12
        _tmp13 = tl.where(rmask & xmask, tmp14, _tmp13)
    tmp6 = tl.sum(_tmp6, 1)[:, None]
    tl.store(out_ptr0 + (x3), tmp6, xmask)
    tmp13 = tl.sum(_tmp13, 1)[:, None]
    tl.store(out_ptr1 + (x3), tmp13, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/xc/cxckl63apqyfiznhwly4jlbxjfb62jmo25e4dh4jvoaqted5c7ul.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_152 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 8],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: 'i32', 3: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(2,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_152', 'mutated_arg_names': []}
)
@triton.jit
def triton_(in_ptr0, out_ptr0, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 7
    RBLOCK: tl.constexpr = 8
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (7*x0)), rmask & xmask, other=0.0)
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tl.store(out_ptr0 + (x0), tmp4, xmask)
''')


# kernel path: /tmp/torchinductor_youkaichao/lz/clzv7mmoef7pjjnjircsoqochuo3qzfvuglwauob35ziqlrtytas.py
# Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]

triton_per_fused_native_batch_norm_backward_threshold_backward_153 = async_compile.triton('triton_', '''
import triton
import triton.language as tl
from torch._inductor.ir import ReductionHint
from torch._inductor.ir import TileHint
from torch._inductor.triton_heuristics import AutotuneHint, persistent_reduction
from torch._inductor.utils import instance_descriptor
from torch._inductor import triton_helpers

@persistent_reduction(
    size_hints=[64, 8],
    reduction_hint=ReductionHint.INNER,
    filename=__file__,
    triton_meta={'signature': {0: '*fp32', 1: '*fp32', 2: '*fp32', 3: 'i32', 4: 'i32'}, 'device': 0, 'device_type': 'cuda', 'constants': {}, 'configs': [instance_descriptor(divisible_by_16=(0, 1, 2, 3), equal_to_1=(), ids_of_folded_args=(), divisible_by_8=(3,))]},
    inductor_meta={'autotune_hints': set(), 'kernel_name': 'triton_per_fused_native_batch_norm_backward_threshold_backward_153', 'mutated_arg_names': ['in_out_ptr0']}
)
@triton.jit
def triton_(in_out_ptr0, in_ptr0, in_ptr1, xnumel, rnumel, XBLOCK : tl.constexpr):
    xnumel = 64
    rnumel = 7
    RBLOCK: tl.constexpr = 8
    xoffset = tl.program_id(0) * XBLOCK
    xindex = xoffset + tl.arange(0, XBLOCK)[:, None]
    xmask = xindex < xnumel
    rindex = tl.arange(0, RBLOCK)[None, :]
    rmask = rindex < rnumel
    r1 = rindex
    x0 = xindex
    tmp0 = tl.load(in_ptr0 + (r1 + (7*x0)), rmask & xmask, other=0.0)
    tmp5 = tl.load(in_ptr1 + (x0), xmask, eviction_policy='evict_last')
    tmp1 = tl.broadcast_to(tmp0, [XBLOCK, RBLOCK])
    tmp3 = tl.where(rmask & xmask, tmp1, 0)
    tmp4 = tl.sum(tmp3, 1)[:, None]
    tmp6 = 1e-05
    tmp7 = tmp5 + tmp6
    tmp8 = tl.math.rsqrt(tmp7)
    tmp9 = tmp4 * tmp8
    tl.debug_barrier()
    tl.store(in_out_ptr0 + (x0), tmp9, xmask)
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_2, primals_4, primals_6, primals_7, primals_9, primals_10, primals_12, primals_13, primals_15, primals_16, primals_18, primals_19, primals_21, primals_22, primals_24, primals_25, primals_27, primals_28, primals_30, primals_31, primals_33, primals_34, primals_36, primals_37, primals_39, primals_40, primals_42, primals_43, primals_45, primals_46, primals_48, primals_49, primals_51, primals_52, primals_54, primals_55, primals_57, primals_58, primals_60, primals_61, primals_63, primals_64, primals_66, primals_67, primals_69, primals_70, primals_72, primals_73, primals_75, primals_76, primals_78, primals_79, primals_81, primals_82, primals_84, primals_85, primals_87, primals_88, primals_90, primals_91, primals_93, primals_94, primals_96, primals_97, primals_99, primals_100, primals_102, primals_103, primals_105, primals_106, primals_108, primals_109, primals_111, primals_112, primals_114, primals_115, primals_117, primals_118, primals_120, primals_121, primals_123, primals_124, primals_126, primals_127, primals_129, primals_130, primals_132, primals_133, primals_135, primals_136, primals_138, primals_139, primals_141, primals_142, primals_144, primals_145, primals_147, primals_148, primals_150, primals_151, primals_153, primals_154, primals_156, primals_157, primals_159, primals_160, primals_162, primals_163, primals_165, primals_166, primals_168, primals_169, primals_171, primals_172, primals_174, primals_175, primals_177, primals_178, primals_180, primals_181, primals_183, primals_184, primals_186, primals_187, primals_189, primals_190, primals_192, primals_193, primals_195, primals_196, primals_198, primals_199, primals_201, primals_202, primals_204, primals_205, primals_207, primals_208, primals_210, primals_211, primals_213, primals_214, primals_216, primals_217, primals_219, primals_220, primals_222, primals_223, primals_225, primals_226, primals_228, primals_229, primals_231, primals_232, primals_234, primals_235, primals_237, primals_238, primals_240, primals_241, primals_243, primals_244, primals_246, primals_247, primals_249, primals_250, primals_252, primals_253, primals_255, primals_256, primals_258, primals_259, primals_261, primals_262, primals_264, primals_265, primals_267, primals_268, primals_270, primals_271, primals_273, primals_274, primals_276, primals_277, primals_279, primals_280, primals_282, primals_283, primals_285, primals_286, primals_288, primals_289, primals_291, primals_292, primals_294, primals_295, primals_297, primals_298, primals_300, primals_301, primals_303, primals_304, primals_306, primals_307, primals_309, primals_310, primals_312, primals_313, primals_315, primals_316, primals_318, primals_319, primals_321, primals_322, primals_324, primals_325, primals_327, primals_328, primals_330, primals_331, primals_333, primals_334, primals_336, primals_337, primals_339, primals_340, primals_342, primals_343, primals_345, primals_346, primals_348, primals_349, primals_351, primals_352, primals_354, primals_355, primals_357, primals_358, primals_360, primals_361, primals_365, primals_366, primals_369, primals_371, primals_372, primals_374, primals_375, primals_377, primals_378, primals_380, primals_381, primals_383, primals_384, primals_386, primals_387, primals_389, primals_390, primals_392, primals_393, primals_395, primals_396, primals_398, primals_399, primals_401, primals_402, primals_404, primals_405, primals_407, primals_408, primals_410, primals_411, primals_413, primals_414, primals_416, primals_417, primals_419, primals_420, primals_422, primals_423, primals_425, primals_426, primals_428, primals_429, primals_431, primals_432, primals_434, primals_435, primals_437, primals_438, primals_440, primals_441, primals_443, primals_444, primals_446, primals_447, primals_449, primals_450, primals_452, primals_453, primals_455, primals_456, primals_458, primals_459, primals_461, primals_462, primals_464, primals_465, primals_467, primals_468, primals_470, primals_471, primals_473, primals_474, primals_476, primals_477, primals_479, primals_480, primals_482, primals_483, primals_485, primals_486, primals_488, primals_489, primals_491, primals_492, primals_494, primals_495, primals_497, primals_498, primals_500, primals_501, primals_503, primals_504, primals_506, primals_507, primals_509, primals_510, primals_512, primals_513, primals_515, primals_516, primals_518, primals_519, primals_521, primals_522, primals_524, primals_525, primals_527, primals_528, primals_530, primals_531, primals_533, primals_534, primals_536, primals_537, primals_539, primals_540, primals_542, primals_543, primals_545, primals_546, primals_548, primals_549, primals_551, primals_552, primals_554, primals_555, primals_557, primals_558, primals_560, primals_561, primals_563, primals_564, primals_566, primals_567, primals_569, primals_570, primals_572, primals_573, primals_575, primals_576, primals_578, primals_579, primals_581, primals_582, primals_584, primals_585, primals_587, primals_588, primals_590, primals_591, primals_593, primals_594, primals_596, primals_597, primals_599, primals_600, primals_602, primals_603, primals_605, primals_606, primals_608, primals_609, primals_611, primals_612, primals_614, primals_615, primals_617, primals_618, primals_620, primals_621, primals_623, primals_624, primals_626, primals_627, primals_629, primals_630, primals_632, primals_633, primals_635, primals_636, primals_638, primals_639, primals_641, primals_642, primals_644, primals_645, primals_647, primals_648, primals_650, primals_651, primals_653, primals_654, primals_656, primals_657, primals_659, primals_660, primals_662, primals_663, primals_665, primals_666, primals_668, primals_669, primals_671, primals_672, primals_674, primals_675, primals_677, primals_678, primals_680, primals_681, primals_683, primals_684, primals_686, primals_687, primals_689, primals_690, primals_692, primals_693, primals_695, primals_696, primals_698, primals_699, primals_701, primals_702, primals_704, primals_705, primals_707, primals_708, primals_710, primals_711, primals_713, primals_714, primals_716, primals_717, primals_719, primals_720, primals_722, primals_723, primals_725, primals_726, primals_728, convolution, relu, getitem_1, relu_1, convolution_1, relu_2, cat, relu_3, convolution_3, relu_4, cat_1, relu_5, convolution_5, relu_6, cat_2, relu_7, convolution_7, relu_8, cat_3, relu_9, convolution_9, relu_10, cat_4, relu_11, convolution_11, relu_12, cat_5, relu_13, convolution_13, avg_pool2d, relu_14, convolution_14, relu_15, cat_6, relu_16, convolution_16, relu_17, cat_7, relu_18, convolution_18, relu_19, cat_8, relu_20, convolution_20, relu_21, cat_9, relu_22, convolution_22, relu_23, cat_10, relu_24, convolution_24, relu_25, cat_11, relu_26, convolution_26, relu_27, cat_12, relu_28, convolution_28, relu_29, cat_13, relu_30, convolution_30, relu_31, cat_14, relu_32, convolution_32, relu_33, cat_15, relu_34, convolution_34, relu_35, cat_16, relu_36, convolution_36, relu_37, cat_17, relu_38, convolution_38, avg_pool2d_1, relu_39, convolution_39, relu_40, cat_18, relu_41, convolution_41, relu_42, cat_19, relu_43, convolution_43, relu_44, cat_20, relu_45, convolution_45, relu_46, cat_21, relu_47, convolution_47, relu_48, cat_22, relu_49, convolution_49, relu_50, cat_23, relu_51, convolution_51, relu_52, cat_24, relu_53, convolution_53, relu_54, cat_25, relu_55, convolution_55, relu_56, cat_26, relu_57, convolution_57, relu_58, cat_27, relu_59, convolution_59, relu_60, cat_28, relu_61, convolution_61, relu_62, cat_29, relu_63, convolution_63, relu_64, cat_30, relu_65, convolution_65, relu_66, cat_31, relu_67, convolution_67, relu_68, cat_32, relu_69, convolution_69, relu_70, cat_33, relu_71, convolution_71, relu_72, cat_34, relu_73, convolution_73, relu_74, cat_35, relu_75, convolution_75, relu_76, cat_36, relu_77, convolution_77, relu_78, cat_37, relu_79, convolution_79, relu_80, cat_38, relu_81, convolution_81, relu_82, cat_39, relu_83, convolution_83, relu_84, cat_40, relu_85, convolution_85, relu_86, cat_41, relu_87, convolution_87, avg_pool2d_2, relu_88, convolution_88, relu_89, cat_42, relu_90, convolution_90, relu_91, cat_43, relu_92, convolution_92, relu_93, cat_44, relu_94, convolution_94, relu_95, cat_45, relu_96, convolution_96, relu_97, cat_46, relu_98, convolution_98, relu_99, cat_47, relu_100, convolution_100, relu_101, cat_48, relu_102, convolution_102, relu_103, cat_49, relu_104, convolution_104, relu_105, cat_50, relu_106, convolution_106, relu_107, cat_51, relu_108, convolution_108, relu_109, cat_52, relu_110, convolution_110, relu_111, cat_53, relu_112, convolution_112, relu_113, cat_54, relu_114, convolution_114, relu_115, cat_55, relu_116, convolution_116, relu_117, cat_56, relu_118, convolution_118, relu_119, cat_57, view, permute_1, le, sub_240, tangents_1 = args
    args.clear()
    assert_size_stride(primals_1, (64, 3, 7, 7), (147, 49, 7, 1))
    assert_size_stride(primals_2, (64, ), (1, ))
    assert_size_stride(primals_4, (64, ), (1, ))
    assert_size_stride(primals_6, (128, 64, 1, 1), (64, 1, 1, 1))
    assert_size_stride(primals_7, (128, ), (1, ))
    assert_size_stride(primals_9, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_10, (96, ), (1, ))
    assert_size_stride(primals_12, (128, 96, 1, 1), (96, 1, 1, 1))
    assert_size_stride(primals_13, (128, ), (1, ))
    assert_size_stride(primals_15, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_16, (128, ), (1, ))
    assert_size_stride(primals_18, (128, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(primals_19, (128, ), (1, ))
    assert_size_stride(primals_21, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_22, (160, ), (1, ))
    assert_size_stride(primals_24, (128, 160, 1, 1), (160, 1, 1, 1))
    assert_size_stride(primals_25, (128, ), (1, ))
    assert_size_stride(primals_27, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_28, (192, ), (1, ))
    assert_size_stride(primals_30, (128, 192, 1, 1), (192, 1, 1, 1))
    assert_size_stride(primals_31, (128, ), (1, ))
    assert_size_stride(primals_33, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_34, (224, ), (1, ))
    assert_size_stride(primals_36, (128, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(primals_37, (128, ), (1, ))
    assert_size_stride(primals_39, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_40, (256, ), (1, ))
    assert_size_stride(primals_42, (128, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_43, (128, ), (1, ))
    assert_size_stride(primals_45, (128, 128, 1, 1), (128, 1, 1, 1))
    assert_size_stride(primals_46, (128, ), (1, ))
    assert_size_stride(primals_48, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_49, (160, ), (1, ))
    assert_size_stride(primals_51, (128, 160, 1, 1), (160, 1, 1, 1))
    assert_size_stride(primals_52, (128, ), (1, ))
    assert_size_stride(primals_54, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_55, (192, ), (1, ))
    assert_size_stride(primals_57, (128, 192, 1, 1), (192, 1, 1, 1))
    assert_size_stride(primals_58, (128, ), (1, ))
    assert_size_stride(primals_60, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_61, (224, ), (1, ))
    assert_size_stride(primals_63, (128, 224, 1, 1), (224, 1, 1, 1))
    assert_size_stride(primals_64, (128, ), (1, ))
    assert_size_stride(primals_66, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_67, (256, ), (1, ))
    assert_size_stride(primals_69, (128, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_70, (128, ), (1, ))
    assert_size_stride(primals_72, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_73, (288, ), (1, ))
    assert_size_stride(primals_75, (128, 288, 1, 1), (288, 1, 1, 1))
    assert_size_stride(primals_76, (128, ), (1, ))
    assert_size_stride(primals_78, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_79, (320, ), (1, ))
    assert_size_stride(primals_81, (128, 320, 1, 1), (320, 1, 1, 1))
    assert_size_stride(primals_82, (128, ), (1, ))
    assert_size_stride(primals_84, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_85, (352, ), (1, ))
    assert_size_stride(primals_87, (128, 352, 1, 1), (352, 1, 1, 1))
    assert_size_stride(primals_88, (128, ), (1, ))
    assert_size_stride(primals_90, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_91, (384, ), (1, ))
    assert_size_stride(primals_93, (128, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_94, (128, ), (1, ))
    assert_size_stride(primals_96, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_97, (416, ), (1, ))
    assert_size_stride(primals_99, (128, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_100, (128, ), (1, ))
    assert_size_stride(primals_102, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_103, (448, ), (1, ))
    assert_size_stride(primals_105, (128, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(primals_106, (128, ), (1, ))
    assert_size_stride(primals_108, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_109, (480, ), (1, ))
    assert_size_stride(primals_111, (128, 480, 1, 1), (480, 1, 1, 1))
    assert_size_stride(primals_112, (128, ), (1, ))
    assert_size_stride(primals_114, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_115, (512, ), (1, ))
    assert_size_stride(primals_117, (256, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_118, (256, ), (1, ))
    assert_size_stride(primals_120, (128, 256, 1, 1), (256, 1, 1, 1))
    assert_size_stride(primals_121, (128, ), (1, ))
    assert_size_stride(primals_123, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_124, (288, ), (1, ))
    assert_size_stride(primals_126, (128, 288, 1, 1), (288, 1, 1, 1))
    assert_size_stride(primals_127, (128, ), (1, ))
    assert_size_stride(primals_129, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_130, (320, ), (1, ))
    assert_size_stride(primals_132, (128, 320, 1, 1), (320, 1, 1, 1))
    assert_size_stride(primals_133, (128, ), (1, ))
    assert_size_stride(primals_135, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_136, (352, ), (1, ))
    assert_size_stride(primals_138, (128, 352, 1, 1), (352, 1, 1, 1))
    assert_size_stride(primals_139, (128, ), (1, ))
    assert_size_stride(primals_141, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_142, (384, ), (1, ))
    assert_size_stride(primals_144, (128, 384, 1, 1), (384, 1, 1, 1))
    assert_size_stride(primals_145, (128, ), (1, ))
    assert_size_stride(primals_147, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_148, (416, ), (1, ))
    assert_size_stride(primals_150, (128, 416, 1, 1), (416, 1, 1, 1))
    assert_size_stride(primals_151, (128, ), (1, ))
    assert_size_stride(primals_153, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_154, (448, ), (1, ))
    assert_size_stride(primals_156, (128, 448, 1, 1), (448, 1, 1, 1))
    assert_size_stride(primals_157, (128, ), (1, ))
    assert_size_stride(primals_159, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_160, (480, ), (1, ))
    assert_size_stride(primals_162, (128, 480, 1, 1), (480, 1, 1, 1))
    assert_size_stride(primals_163, (128, ), (1, ))
    assert_size_stride(primals_165, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_166, (512, ), (1, ))
    assert_size_stride(primals_168, (128, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_169, (128, ), (1, ))
    assert_size_stride(primals_171, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_172, (544, ), (1, ))
    assert_size_stride(primals_174, (128, 544, 1, 1), (544, 1, 1, 1))
    assert_size_stride(primals_175, (128, ), (1, ))
    assert_size_stride(primals_177, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_178, (576, ), (1, ))
    assert_size_stride(primals_180, (128, 576, 1, 1), (576, 1, 1, 1))
    assert_size_stride(primals_181, (128, ), (1, ))
    assert_size_stride(primals_183, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_184, (608, ), (1, ))
    assert_size_stride(primals_186, (128, 608, 1, 1), (608, 1, 1, 1))
    assert_size_stride(primals_187, (128, ), (1, ))
    assert_size_stride(primals_189, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_190, (640, ), (1, ))
    assert_size_stride(primals_192, (128, 640, 1, 1), (640, 1, 1, 1))
    assert_size_stride(primals_193, (128, ), (1, ))
    assert_size_stride(primals_195, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_196, (672, ), (1, ))
    assert_size_stride(primals_198, (128, 672, 1, 1), (672, 1, 1, 1))
    assert_size_stride(primals_199, (128, ), (1, ))
    assert_size_stride(primals_201, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_202, (704, ), (1, ))
    assert_size_stride(primals_204, (128, 704, 1, 1), (704, 1, 1, 1))
    assert_size_stride(primals_205, (128, ), (1, ))
    assert_size_stride(primals_207, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_208, (736, ), (1, ))
    assert_size_stride(primals_210, (128, 736, 1, 1), (736, 1, 1, 1))
    assert_size_stride(primals_211, (128, ), (1, ))
    assert_size_stride(primals_213, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_214, (768, ), (1, ))
    assert_size_stride(primals_216, (128, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_217, (128, ), (1, ))
    assert_size_stride(primals_219, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_220, (800, ), (1, ))
    assert_size_stride(primals_222, (128, 800, 1, 1), (800, 1, 1, 1))
    assert_size_stride(primals_223, (128, ), (1, ))
    assert_size_stride(primals_225, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_226, (832, ), (1, ))
    assert_size_stride(primals_228, (128, 832, 1, 1), (832, 1, 1, 1))
    assert_size_stride(primals_229, (128, ), (1, ))
    assert_size_stride(primals_231, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_232, (864, ), (1, ))
    assert_size_stride(primals_234, (128, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_235, (128, ), (1, ))
    assert_size_stride(primals_237, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_238, (896, ), (1, ))
    assert_size_stride(primals_240, (128, 896, 1, 1), (896, 1, 1, 1))
    assert_size_stride(primals_241, (128, ), (1, ))
    assert_size_stride(primals_243, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_244, (928, ), (1, ))
    assert_size_stride(primals_246, (128, 928, 1, 1), (928, 1, 1, 1))
    assert_size_stride(primals_247, (128, ), (1, ))
    assert_size_stride(primals_249, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_250, (960, ), (1, ))
    assert_size_stride(primals_252, (128, 960, 1, 1), (960, 1, 1, 1))
    assert_size_stride(primals_253, (128, ), (1, ))
    assert_size_stride(primals_255, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_256, (992, ), (1, ))
    assert_size_stride(primals_258, (128, 992, 1, 1), (992, 1, 1, 1))
    assert_size_stride(primals_259, (128, ), (1, ))
    assert_size_stride(primals_261, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_262, (1024, ), (1, ))
    assert_size_stride(primals_264, (512, 1024, 1, 1), (1024, 1, 1, 1))
    assert_size_stride(primals_265, (512, ), (1, ))
    assert_size_stride(primals_267, (128, 512, 1, 1), (512, 1, 1, 1))
    assert_size_stride(primals_268, (128, ), (1, ))
    assert_size_stride(primals_270, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_271, (544, ), (1, ))
    assert_size_stride(primals_273, (128, 544, 1, 1), (544, 1, 1, 1))
    assert_size_stride(primals_274, (128, ), (1, ))
    assert_size_stride(primals_276, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_277, (576, ), (1, ))
    assert_size_stride(primals_279, (128, 576, 1, 1), (576, 1, 1, 1))
    assert_size_stride(primals_280, (128, ), (1, ))
    assert_size_stride(primals_282, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_283, (608, ), (1, ))
    assert_size_stride(primals_285, (128, 608, 1, 1), (608, 1, 1, 1))
    assert_size_stride(primals_286, (128, ), (1, ))
    assert_size_stride(primals_288, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_289, (640, ), (1, ))
    assert_size_stride(primals_291, (128, 640, 1, 1), (640, 1, 1, 1))
    assert_size_stride(primals_292, (128, ), (1, ))
    assert_size_stride(primals_294, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_295, (672, ), (1, ))
    assert_size_stride(primals_297, (128, 672, 1, 1), (672, 1, 1, 1))
    assert_size_stride(primals_298, (128, ), (1, ))
    assert_size_stride(primals_300, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_301, (704, ), (1, ))
    assert_size_stride(primals_303, (128, 704, 1, 1), (704, 1, 1, 1))
    assert_size_stride(primals_304, (128, ), (1, ))
    assert_size_stride(primals_306, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_307, (736, ), (1, ))
    assert_size_stride(primals_309, (128, 736, 1, 1), (736, 1, 1, 1))
    assert_size_stride(primals_310, (128, ), (1, ))
    assert_size_stride(primals_312, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_313, (768, ), (1, ))
    assert_size_stride(primals_315, (128, 768, 1, 1), (768, 1, 1, 1))
    assert_size_stride(primals_316, (128, ), (1, ))
    assert_size_stride(primals_318, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_319, (800, ), (1, ))
    assert_size_stride(primals_321, (128, 800, 1, 1), (800, 1, 1, 1))
    assert_size_stride(primals_322, (128, ), (1, ))
    assert_size_stride(primals_324, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_325, (832, ), (1, ))
    assert_size_stride(primals_327, (128, 832, 1, 1), (832, 1, 1, 1))
    assert_size_stride(primals_328, (128, ), (1, ))
    assert_size_stride(primals_330, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_331, (864, ), (1, ))
    assert_size_stride(primals_333, (128, 864, 1, 1), (864, 1, 1, 1))
    assert_size_stride(primals_334, (128, ), (1, ))
    assert_size_stride(primals_336, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_337, (896, ), (1, ))
    assert_size_stride(primals_339, (128, 896, 1, 1), (896, 1, 1, 1))
    assert_size_stride(primals_340, (128, ), (1, ))
    assert_size_stride(primals_342, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_343, (928, ), (1, ))
    assert_size_stride(primals_345, (128, 928, 1, 1), (928, 1, 1, 1))
    assert_size_stride(primals_346, (128, ), (1, ))
    assert_size_stride(primals_348, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_349, (960, ), (1, ))
    assert_size_stride(primals_351, (128, 960, 1, 1), (960, 1, 1, 1))
    assert_size_stride(primals_352, (128, ), (1, ))
    assert_size_stride(primals_354, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_355, (992, ), (1, ))
    assert_size_stride(primals_357, (128, 992, 1, 1), (992, 1, 1, 1))
    assert_size_stride(primals_358, (128, ), (1, ))
    assert_size_stride(primals_360, (32, 128, 3, 3), (1152, 9, 3, 1))
    assert_size_stride(primals_361, (1024, ), (1, ))
    assert_size_stride(primals_365, (64, ), (1, ))
    assert_size_stride(primals_366, (64, ), (1, ))
    assert_size_stride(primals_369, (64, ), (1, ))
    assert_size_stride(primals_371, (128, ), (1, ))
    assert_size_stride(primals_372, (128, ), (1, ))
    assert_size_stride(primals_374, (96, ), (1, ))
    assert_size_stride(primals_375, (96, ), (1, ))
    assert_size_stride(primals_377, (128, ), (1, ))
    assert_size_stride(primals_378, (128, ), (1, ))
    assert_size_stride(primals_380, (128, ), (1, ))
    assert_size_stride(primals_381, (128, ), (1, ))
    assert_size_stride(primals_383, (128, ), (1, ))
    assert_size_stride(primals_384, (128, ), (1, ))
    assert_size_stride(primals_386, (160, ), (1, ))
    assert_size_stride(primals_387, (160, ), (1, ))
    assert_size_stride(primals_389, (128, ), (1, ))
    assert_size_stride(primals_390, (128, ), (1, ))
    assert_size_stride(primals_392, (192, ), (1, ))
    assert_size_stride(primals_393, (192, ), (1, ))
    assert_size_stride(primals_395, (128, ), (1, ))
    assert_size_stride(primals_396, (128, ), (1, ))
    assert_size_stride(primals_398, (224, ), (1, ))
    assert_size_stride(primals_399, (224, ), (1, ))
    assert_size_stride(primals_401, (128, ), (1, ))
    assert_size_stride(primals_402, (128, ), (1, ))
    assert_size_stride(primals_404, (256, ), (1, ))
    assert_size_stride(primals_405, (256, ), (1, ))
    assert_size_stride(primals_407, (128, ), (1, ))
    assert_size_stride(primals_408, (128, ), (1, ))
    assert_size_stride(primals_410, (128, ), (1, ))
    assert_size_stride(primals_411, (128, ), (1, ))
    assert_size_stride(primals_413, (160, ), (1, ))
    assert_size_stride(primals_414, (160, ), (1, ))
    assert_size_stride(primals_416, (128, ), (1, ))
    assert_size_stride(primals_417, (128, ), (1, ))
    assert_size_stride(primals_419, (192, ), (1, ))
    assert_size_stride(primals_420, (192, ), (1, ))
    assert_size_stride(primals_422, (128, ), (1, ))
    assert_size_stride(primals_423, (128, ), (1, ))
    assert_size_stride(primals_425, (224, ), (1, ))
    assert_size_stride(primals_426, (224, ), (1, ))
    assert_size_stride(primals_428, (128, ), (1, ))
    assert_size_stride(primals_429, (128, ), (1, ))
    assert_size_stride(primals_431, (256, ), (1, ))
    assert_size_stride(primals_432, (256, ), (1, ))
    assert_size_stride(primals_434, (128, ), (1, ))
    assert_size_stride(primals_435, (128, ), (1, ))
    assert_size_stride(primals_437, (288, ), (1, ))
    assert_size_stride(primals_438, (288, ), (1, ))
    assert_size_stride(primals_440, (128, ), (1, ))
    assert_size_stride(primals_441, (128, ), (1, ))
    assert_size_stride(primals_443, (320, ), (1, ))
    assert_size_stride(primals_444, (320, ), (1, ))
    assert_size_stride(primals_446, (128, ), (1, ))
    assert_size_stride(primals_447, (128, ), (1, ))
    assert_size_stride(primals_449, (352, ), (1, ))
    assert_size_stride(primals_450, (352, ), (1, ))
    assert_size_stride(primals_452, (128, ), (1, ))
    assert_size_stride(primals_453, (128, ), (1, ))
    assert_size_stride(primals_455, (384, ), (1, ))
    assert_size_stride(primals_456, (384, ), (1, ))
    assert_size_stride(primals_458, (128, ), (1, ))
    assert_size_stride(primals_459, (128, ), (1, ))
    assert_size_stride(primals_461, (416, ), (1, ))
    assert_size_stride(primals_462, (416, ), (1, ))
    assert_size_stride(primals_464, (128, ), (1, ))
    assert_size_stride(primals_465, (128, ), (1, ))
    assert_size_stride(primals_467, (448, ), (1, ))
    assert_size_stride(primals_468, (448, ), (1, ))
    assert_size_stride(primals_470, (128, ), (1, ))
    assert_size_stride(primals_471, (128, ), (1, ))
    assert_size_stride(primals_473, (480, ), (1, ))
    assert_size_stride(primals_474, (480, ), (1, ))
    assert_size_stride(primals_476, (128, ), (1, ))
    assert_size_stride(primals_477, (128, ), (1, ))
    assert_size_stride(primals_479, (512, ), (1, ))
    assert_size_stride(primals_480, (512, ), (1, ))
    assert_size_stride(primals_482, (256, ), (1, ))
    assert_size_stride(primals_483, (256, ), (1, ))
    assert_size_stride(primals_485, (128, ), (1, ))
    assert_size_stride(primals_486, (128, ), (1, ))
    assert_size_stride(primals_488, (288, ), (1, ))
    assert_size_stride(primals_489, (288, ), (1, ))
    assert_size_stride(primals_491, (128, ), (1, ))
    assert_size_stride(primals_492, (128, ), (1, ))
    assert_size_stride(primals_494, (320, ), (1, ))
    assert_size_stride(primals_495, (320, ), (1, ))
    assert_size_stride(primals_497, (128, ), (1, ))
    assert_size_stride(primals_498, (128, ), (1, ))
    assert_size_stride(primals_500, (352, ), (1, ))
    assert_size_stride(primals_501, (352, ), (1, ))
    assert_size_stride(primals_503, (128, ), (1, ))
    assert_size_stride(primals_504, (128, ), (1, ))
    assert_size_stride(primals_506, (384, ), (1, ))
    assert_size_stride(primals_507, (384, ), (1, ))
    assert_size_stride(primals_509, (128, ), (1, ))
    assert_size_stride(primals_510, (128, ), (1, ))
    assert_size_stride(primals_512, (416, ), (1, ))
    assert_size_stride(primals_513, (416, ), (1, ))
    assert_size_stride(primals_515, (128, ), (1, ))
    assert_size_stride(primals_516, (128, ), (1, ))
    assert_size_stride(primals_518, (448, ), (1, ))
    assert_size_stride(primals_519, (448, ), (1, ))
    assert_size_stride(primals_521, (128, ), (1, ))
    assert_size_stride(primals_522, (128, ), (1, ))
    assert_size_stride(primals_524, (480, ), (1, ))
    assert_size_stride(primals_525, (480, ), (1, ))
    assert_size_stride(primals_527, (128, ), (1, ))
    assert_size_stride(primals_528, (128, ), (1, ))
    assert_size_stride(primals_530, (512, ), (1, ))
    assert_size_stride(primals_531, (512, ), (1, ))
    assert_size_stride(primals_533, (128, ), (1, ))
    assert_size_stride(primals_534, (128, ), (1, ))
    assert_size_stride(primals_536, (544, ), (1, ))
    assert_size_stride(primals_537, (544, ), (1, ))
    assert_size_stride(primals_539, (128, ), (1, ))
    assert_size_stride(primals_540, (128, ), (1, ))
    assert_size_stride(primals_542, (576, ), (1, ))
    assert_size_stride(primals_543, (576, ), (1, ))
    assert_size_stride(primals_545, (128, ), (1, ))
    assert_size_stride(primals_546, (128, ), (1, ))
    assert_size_stride(primals_548, (608, ), (1, ))
    assert_size_stride(primals_549, (608, ), (1, ))
    assert_size_stride(primals_551, (128, ), (1, ))
    assert_size_stride(primals_552, (128, ), (1, ))
    assert_size_stride(primals_554, (640, ), (1, ))
    assert_size_stride(primals_555, (640, ), (1, ))
    assert_size_stride(primals_557, (128, ), (1, ))
    assert_size_stride(primals_558, (128, ), (1, ))
    assert_size_stride(primals_560, (672, ), (1, ))
    assert_size_stride(primals_561, (672, ), (1, ))
    assert_size_stride(primals_563, (128, ), (1, ))
    assert_size_stride(primals_564, (128, ), (1, ))
    assert_size_stride(primals_566, (704, ), (1, ))
    assert_size_stride(primals_567, (704, ), (1, ))
    assert_size_stride(primals_569, (128, ), (1, ))
    assert_size_stride(primals_570, (128, ), (1, ))
    assert_size_stride(primals_572, (736, ), (1, ))
    assert_size_stride(primals_573, (736, ), (1, ))
    assert_size_stride(primals_575, (128, ), (1, ))
    assert_size_stride(primals_576, (128, ), (1, ))
    assert_size_stride(primals_578, (768, ), (1, ))
    assert_size_stride(primals_579, (768, ), (1, ))
    assert_size_stride(primals_581, (128, ), (1, ))
    assert_size_stride(primals_582, (128, ), (1, ))
    assert_size_stride(primals_584, (800, ), (1, ))
    assert_size_stride(primals_585, (800, ), (1, ))
    assert_size_stride(primals_587, (128, ), (1, ))
    assert_size_stride(primals_588, (128, ), (1, ))
    assert_size_stride(primals_590, (832, ), (1, ))
    assert_size_stride(primals_591, (832, ), (1, ))
    assert_size_stride(primals_593, (128, ), (1, ))
    assert_size_stride(primals_594, (128, ), (1, ))
    assert_size_stride(primals_596, (864, ), (1, ))
    assert_size_stride(primals_597, (864, ), (1, ))
    assert_size_stride(primals_599, (128, ), (1, ))
    assert_size_stride(primals_600, (128, ), (1, ))
    assert_size_stride(primals_602, (896, ), (1, ))
    assert_size_stride(primals_603, (896, ), (1, ))
    assert_size_stride(primals_605, (128, ), (1, ))
    assert_size_stride(primals_606, (128, ), (1, ))
    assert_size_stride(primals_608, (928, ), (1, ))
    assert_size_stride(primals_609, (928, ), (1, ))
    assert_size_stride(primals_611, (128, ), (1, ))
    assert_size_stride(primals_612, (128, ), (1, ))
    assert_size_stride(primals_614, (960, ), (1, ))
    assert_size_stride(primals_615, (960, ), (1, ))
    assert_size_stride(primals_617, (128, ), (1, ))
    assert_size_stride(primals_618, (128, ), (1, ))
    assert_size_stride(primals_620, (992, ), (1, ))
    assert_size_stride(primals_621, (992, ), (1, ))
    assert_size_stride(primals_623, (128, ), (1, ))
    assert_size_stride(primals_624, (128, ), (1, ))
    assert_size_stride(primals_626, (1024, ), (1, ))
    assert_size_stride(primals_627, (1024, ), (1, ))
    assert_size_stride(primals_629, (512, ), (1, ))
    assert_size_stride(primals_630, (512, ), (1, ))
    assert_size_stride(primals_632, (128, ), (1, ))
    assert_size_stride(primals_633, (128, ), (1, ))
    assert_size_stride(primals_635, (544, ), (1, ))
    assert_size_stride(primals_636, (544, ), (1, ))
    assert_size_stride(primals_638, (128, ), (1, ))
    assert_size_stride(primals_639, (128, ), (1, ))
    assert_size_stride(primals_641, (576, ), (1, ))
    assert_size_stride(primals_642, (576, ), (1, ))
    assert_size_stride(primals_644, (128, ), (1, ))
    assert_size_stride(primals_645, (128, ), (1, ))
    assert_size_stride(primals_647, (608, ), (1, ))
    assert_size_stride(primals_648, (608, ), (1, ))
    assert_size_stride(primals_650, (128, ), (1, ))
    assert_size_stride(primals_651, (128, ), (1, ))
    assert_size_stride(primals_653, (640, ), (1, ))
    assert_size_stride(primals_654, (640, ), (1, ))
    assert_size_stride(primals_656, (128, ), (1, ))
    assert_size_stride(primals_657, (128, ), (1, ))
    assert_size_stride(primals_659, (672, ), (1, ))
    assert_size_stride(primals_660, (672, ), (1, ))
    assert_size_stride(primals_662, (128, ), (1, ))
    assert_size_stride(primals_663, (128, ), (1, ))
    assert_size_stride(primals_665, (704, ), (1, ))
    assert_size_stride(primals_666, (704, ), (1, ))
    assert_size_stride(primals_668, (128, ), (1, ))
    assert_size_stride(primals_669, (128, ), (1, ))
    assert_size_stride(primals_671, (736, ), (1, ))
    assert_size_stride(primals_672, (736, ), (1, ))
    assert_size_stride(primals_674, (128, ), (1, ))
    assert_size_stride(primals_675, (128, ), (1, ))
    assert_size_stride(primals_677, (768, ), (1, ))
    assert_size_stride(primals_678, (768, ), (1, ))
    assert_size_stride(primals_680, (128, ), (1, ))
    assert_size_stride(primals_681, (128, ), (1, ))
    assert_size_stride(primals_683, (800, ), (1, ))
    assert_size_stride(primals_684, (800, ), (1, ))
    assert_size_stride(primals_686, (128, ), (1, ))
    assert_size_stride(primals_687, (128, ), (1, ))
    assert_size_stride(primals_689, (832, ), (1, ))
    assert_size_stride(primals_690, (832, ), (1, ))
    assert_size_stride(primals_692, (128, ), (1, ))
    assert_size_stride(primals_693, (128, ), (1, ))
    assert_size_stride(primals_695, (864, ), (1, ))
    assert_size_stride(primals_696, (864, ), (1, ))
    assert_size_stride(primals_698, (128, ), (1, ))
    assert_size_stride(primals_699, (128, ), (1, ))
    assert_size_stride(primals_701, (896, ), (1, ))
    assert_size_stride(primals_702, (896, ), (1, ))
    assert_size_stride(primals_704, (128, ), (1, ))
    assert_size_stride(primals_705, (128, ), (1, ))
    assert_size_stride(primals_707, (928, ), (1, ))
    assert_size_stride(primals_708, (928, ), (1, ))
    assert_size_stride(primals_710, (128, ), (1, ))
    assert_size_stride(primals_711, (128, ), (1, ))
    assert_size_stride(primals_713, (960, ), (1, ))
    assert_size_stride(primals_714, (960, ), (1, ))
    assert_size_stride(primals_716, (128, ), (1, ))
    assert_size_stride(primals_717, (128, ), (1, ))
    assert_size_stride(primals_719, (992, ), (1, ))
    assert_size_stride(primals_720, (992, ), (1, ))
    assert_size_stride(primals_722, (128, ), (1, ))
    assert_size_stride(primals_723, (128, ), (1, ))
    assert_size_stride(primals_725, (1024, ), (1, ))
    assert_size_stride(primals_726, (1024, ), (1, ))
    assert_size_stride(primals_728, (4, 3, 224, 224), (150528, 50176, 224, 1))
    assert_size_stride(convolution, (4, 64, 112, 112), (802816, 12544, 112, 1))
    assert_size_stride(relu, (4, 64, 112, 112), (802816, 12544, 112, 1))
    assert_size_stride(getitem_1, (4, 64, 56, 56), (200704, 3136, 56, 1))
    assert_size_stride(relu_1, (4, 64, 56, 56), (200704, 3136, 56, 1))
    assert_size_stride(convolution_1, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(relu_2, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(cat, (4, 96, 56, 56), (301056, 3136, 56, 1))
    assert_size_stride(relu_3, (4, 96, 56, 56), (301056, 3136, 56, 1))
    assert_size_stride(convolution_3, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(relu_4, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(cat_1, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(relu_5, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(convolution_5, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(relu_6, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(cat_2, (4, 160, 56, 56), (501760, 3136, 56, 1))
    assert_size_stride(relu_7, (4, 160, 56, 56), (501760, 3136, 56, 1))
    assert_size_stride(convolution_7, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(relu_8, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(cat_3, (4, 192, 56, 56), (602112, 3136, 56, 1))
    assert_size_stride(relu_9, (4, 192, 56, 56), (602112, 3136, 56, 1))
    assert_size_stride(convolution_9, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(relu_10, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(cat_4, (4, 224, 56, 56), (702464, 3136, 56, 1))
    assert_size_stride(relu_11, (4, 224, 56, 56), (702464, 3136, 56, 1))
    assert_size_stride(convolution_11, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(relu_12, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(cat_5, (4, 256, 56, 56), (802816, 3136, 56, 1))
    assert_size_stride(relu_13, (4, 256, 56, 56), (802816, 3136, 56, 1))
    assert_size_stride(convolution_13, (4, 128, 56, 56), (401408, 3136, 56, 1))
    assert_size_stride(avg_pool2d, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_14, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(convolution_14, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_15, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_6, (4, 160, 28, 28), (125440, 784, 28, 1))
    assert_size_stride(relu_16, (4, 160, 28, 28), (125440, 784, 28, 1))
    assert_size_stride(convolution_16, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_17, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_7, (4, 192, 28, 28), (150528, 784, 28, 1))
    assert_size_stride(relu_18, (4, 192, 28, 28), (150528, 784, 28, 1))
    assert_size_stride(convolution_18, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_19, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_8, (4, 224, 28, 28), (175616, 784, 28, 1))
    assert_size_stride(relu_20, (4, 224, 28, 28), (175616, 784, 28, 1))
    assert_size_stride(convolution_20, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_21, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_9, (4, 256, 28, 28), (200704, 784, 28, 1))
    assert_size_stride(relu_22, (4, 256, 28, 28), (200704, 784, 28, 1))
    assert_size_stride(convolution_22, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_23, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_10, (4, 288, 28, 28), (225792, 784, 28, 1))
    assert_size_stride(relu_24, (4, 288, 28, 28), (225792, 784, 28, 1))
    assert_size_stride(convolution_24, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_25, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_11, (4, 320, 28, 28), (250880, 784, 28, 1))
    assert_size_stride(relu_26, (4, 320, 28, 28), (250880, 784, 28, 1))
    assert_size_stride(convolution_26, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_27, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_12, (4, 352, 28, 28), (275968, 784, 28, 1))
    assert_size_stride(relu_28, (4, 352, 28, 28), (275968, 784, 28, 1))
    assert_size_stride(convolution_28, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_29, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_13, (4, 384, 28, 28), (301056, 784, 28, 1))
    assert_size_stride(relu_30, (4, 384, 28, 28), (301056, 784, 28, 1))
    assert_size_stride(convolution_30, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_31, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_14, (4, 416, 28, 28), (326144, 784, 28, 1))
    assert_size_stride(relu_32, (4, 416, 28, 28), (326144, 784, 28, 1))
    assert_size_stride(convolution_32, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_33, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_15, (4, 448, 28, 28), (351232, 784, 28, 1))
    assert_size_stride(relu_34, (4, 448, 28, 28), (351232, 784, 28, 1))
    assert_size_stride(convolution_34, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_35, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_16, (4, 480, 28, 28), (376320, 784, 28, 1))
    assert_size_stride(relu_36, (4, 480, 28, 28), (376320, 784, 28, 1))
    assert_size_stride(convolution_36, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(relu_37, (4, 128, 28, 28), (100352, 784, 28, 1))
    assert_size_stride(cat_17, (4, 512, 28, 28), (401408, 784, 28, 1))
    assert_size_stride(relu_38, (4, 512, 28, 28), (401408, 784, 28, 1))
    assert_size_stride(convolution_38, (4, 256, 28, 28), (200704, 784, 28, 1))
    assert_size_stride(avg_pool2d_1, (4, 256, 14, 14), (50176, 196, 14, 1))
    assert_size_stride(relu_39, (4, 256, 14, 14), (50176, 196, 14, 1))
    assert_size_stride(convolution_39, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_40, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_18, (4, 288, 14, 14), (56448, 196, 14, 1))
    assert_size_stride(relu_41, (4, 288, 14, 14), (56448, 196, 14, 1))
    assert_size_stride(convolution_41, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_42, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_19, (4, 320, 14, 14), (62720, 196, 14, 1))
    assert_size_stride(relu_43, (4, 320, 14, 14), (62720, 196, 14, 1))
    assert_size_stride(convolution_43, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_44, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_20, (4, 352, 14, 14), (68992, 196, 14, 1))
    assert_size_stride(relu_45, (4, 352, 14, 14), (68992, 196, 14, 1))
    assert_size_stride(convolution_45, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_46, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_21, (4, 384, 14, 14), (75264, 196, 14, 1))
    assert_size_stride(relu_47, (4, 384, 14, 14), (75264, 196, 14, 1))
    assert_size_stride(convolution_47, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_48, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_22, (4, 416, 14, 14), (81536, 196, 14, 1))
    assert_size_stride(relu_49, (4, 416, 14, 14), (81536, 196, 14, 1))
    assert_size_stride(convolution_49, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_50, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_23, (4, 448, 14, 14), (87808, 196, 14, 1))
    assert_size_stride(relu_51, (4, 448, 14, 14), (87808, 196, 14, 1))
    assert_size_stride(convolution_51, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_52, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_24, (4, 480, 14, 14), (94080, 196, 14, 1))
    assert_size_stride(relu_53, (4, 480, 14, 14), (94080, 196, 14, 1))
    assert_size_stride(convolution_53, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_54, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_25, (4, 512, 14, 14), (100352, 196, 14, 1))
    assert_size_stride(relu_55, (4, 512, 14, 14), (100352, 196, 14, 1))
    assert_size_stride(convolution_55, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_56, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_26, (4, 544, 14, 14), (106624, 196, 14, 1))
    assert_size_stride(relu_57, (4, 544, 14, 14), (106624, 196, 14, 1))
    assert_size_stride(convolution_57, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_58, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_27, (4, 576, 14, 14), (112896, 196, 14, 1))
    assert_size_stride(relu_59, (4, 576, 14, 14), (112896, 196, 14, 1))
    assert_size_stride(convolution_59, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_60, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_28, (4, 608, 14, 14), (119168, 196, 14, 1))
    assert_size_stride(relu_61, (4, 608, 14, 14), (119168, 196, 14, 1))
    assert_size_stride(convolution_61, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_62, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_29, (4, 640, 14, 14), (125440, 196, 14, 1))
    assert_size_stride(relu_63, (4, 640, 14, 14), (125440, 196, 14, 1))
    assert_size_stride(convolution_63, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_64, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_30, (4, 672, 14, 14), (131712, 196, 14, 1))
    assert_size_stride(relu_65, (4, 672, 14, 14), (131712, 196, 14, 1))
    assert_size_stride(convolution_65, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_66, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_31, (4, 704, 14, 14), (137984, 196, 14, 1))
    assert_size_stride(relu_67, (4, 704, 14, 14), (137984, 196, 14, 1))
    assert_size_stride(convolution_67, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_68, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_32, (4, 736, 14, 14), (144256, 196, 14, 1))
    assert_size_stride(relu_69, (4, 736, 14, 14), (144256, 196, 14, 1))
    assert_size_stride(convolution_69, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_70, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_33, (4, 768, 14, 14), (150528, 196, 14, 1))
    assert_size_stride(relu_71, (4, 768, 14, 14), (150528, 196, 14, 1))
    assert_size_stride(convolution_71, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_72, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_34, (4, 800, 14, 14), (156800, 196, 14, 1))
    assert_size_stride(relu_73, (4, 800, 14, 14), (156800, 196, 14, 1))
    assert_size_stride(convolution_73, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_74, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_35, (4, 832, 14, 14), (163072, 196, 14, 1))
    assert_size_stride(relu_75, (4, 832, 14, 14), (163072, 196, 14, 1))
    assert_size_stride(convolution_75, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_76, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_36, (4, 864, 14, 14), (169344, 196, 14, 1))
    assert_size_stride(relu_77, (4, 864, 14, 14), (169344, 196, 14, 1))
    assert_size_stride(convolution_77, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_78, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_37, (4, 896, 14, 14), (175616, 196, 14, 1))
    assert_size_stride(relu_79, (4, 896, 14, 14), (175616, 196, 14, 1))
    assert_size_stride(convolution_79, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_80, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_38, (4, 928, 14, 14), (181888, 196, 14, 1))
    assert_size_stride(relu_81, (4, 928, 14, 14), (181888, 196, 14, 1))
    assert_size_stride(convolution_81, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_82, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_39, (4, 960, 14, 14), (188160, 196, 14, 1))
    assert_size_stride(relu_83, (4, 960, 14, 14), (188160, 196, 14, 1))
    assert_size_stride(convolution_83, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_84, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_40, (4, 992, 14, 14), (194432, 196, 14, 1))
    assert_size_stride(relu_85, (4, 992, 14, 14), (194432, 196, 14, 1))
    assert_size_stride(convolution_85, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(relu_86, (4, 128, 14, 14), (25088, 196, 14, 1))
    assert_size_stride(cat_41, (4, 1024, 14, 14), (200704, 196, 14, 1))
    assert_size_stride(relu_87, (4, 1024, 14, 14), (200704, 196, 14, 1))
    assert_size_stride(convolution_87, (4, 512, 14, 14), (100352, 196, 14, 1))
    assert_size_stride(avg_pool2d_2, (4, 512, 7, 7), (25088, 49, 7, 1))
    assert_size_stride(relu_88, (4, 512, 7, 7), (25088, 49, 7, 1))
    assert_size_stride(convolution_88, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_89, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_42, (4, 544, 7, 7), (26656, 49, 7, 1))
    assert_size_stride(relu_90, (4, 544, 7, 7), (26656, 49, 7, 1))
    assert_size_stride(convolution_90, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_91, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_43, (4, 576, 7, 7), (28224, 49, 7, 1))
    assert_size_stride(relu_92, (4, 576, 7, 7), (28224, 49, 7, 1))
    assert_size_stride(convolution_92, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_93, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_44, (4, 608, 7, 7), (29792, 49, 7, 1))
    assert_size_stride(relu_94, (4, 608, 7, 7), (29792, 49, 7, 1))
    assert_size_stride(convolution_94, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_95, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_45, (4, 640, 7, 7), (31360, 49, 7, 1))
    assert_size_stride(relu_96, (4, 640, 7, 7), (31360, 49, 7, 1))
    assert_size_stride(convolution_96, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_97, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_46, (4, 672, 7, 7), (32928, 49, 7, 1))
    assert_size_stride(relu_98, (4, 672, 7, 7), (32928, 49, 7, 1))
    assert_size_stride(convolution_98, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_99, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_47, (4, 704, 7, 7), (34496, 49, 7, 1))
    assert_size_stride(relu_100, (4, 704, 7, 7), (34496, 49, 7, 1))
    assert_size_stride(convolution_100, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_101, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_48, (4, 736, 7, 7), (36064, 49, 7, 1))
    assert_size_stride(relu_102, (4, 736, 7, 7), (36064, 49, 7, 1))
    assert_size_stride(convolution_102, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_103, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_49, (4, 768, 7, 7), (37632, 49, 7, 1))
    assert_size_stride(relu_104, (4, 768, 7, 7), (37632, 49, 7, 1))
    assert_size_stride(convolution_104, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_105, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_50, (4, 800, 7, 7), (39200, 49, 7, 1))
    assert_size_stride(relu_106, (4, 800, 7, 7), (39200, 49, 7, 1))
    assert_size_stride(convolution_106, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_107, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_51, (4, 832, 7, 7), (40768, 49, 7, 1))
    assert_size_stride(relu_108, (4, 832, 7, 7), (40768, 49, 7, 1))
    assert_size_stride(convolution_108, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_109, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_52, (4, 864, 7, 7), (42336, 49, 7, 1))
    assert_size_stride(relu_110, (4, 864, 7, 7), (42336, 49, 7, 1))
    assert_size_stride(convolution_110, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_111, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_53, (4, 896, 7, 7), (43904, 49, 7, 1))
    assert_size_stride(relu_112, (4, 896, 7, 7), (43904, 49, 7, 1))
    assert_size_stride(convolution_112, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_113, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_54, (4, 928, 7, 7), (45472, 49, 7, 1))
    assert_size_stride(relu_114, (4, 928, 7, 7), (45472, 49, 7, 1))
    assert_size_stride(convolution_114, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_115, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_55, (4, 960, 7, 7), (47040, 49, 7, 1))
    assert_size_stride(relu_116, (4, 960, 7, 7), (47040, 49, 7, 1))
    assert_size_stride(convolution_116, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_117, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_56, (4, 992, 7, 7), (48608, 49, 7, 1))
    assert_size_stride(relu_118, (4, 992, 7, 7), (48608, 49, 7, 1))
    assert_size_stride(convolution_118, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(relu_119, (4, 128, 7, 7), (6272, 49, 7, 1))
    assert_size_stride(cat_57, (4, 1024, 7, 7), (50176, 49, 7, 1))
    assert_size_stride(view, (4, 1024), (1024, 1))
    assert_size_stride(permute_1, (1000, 1024), (1024, 1))
    assert_size_stride(le, (4, 1024, 7, 7), (50176, 49, 7, 1))
    assert_size_stride(sub_240, (4, 64, 56, 56), (200704, 3136, 56, 1))
    assert_size_stride(tangents_1, (4, 1000), (1000, 1))
    with torch.cuda._DeviceGuard(0):
        torch.cuda.set_device(0) # no-op to ensure context
        buf0 = empty((4, 1024), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(tangents_1, permute_1, out=buf0)
        del permute_1
        buf1 = empty((1000, 1024), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.mm]
        extern_kernels.mm(reinterpret_tensor(tangents_1, (1000, 4), (1, 1000), 0), view, out=buf1)
        del view
        buf2 = empty((1000, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.sum, aten.view]
        stream0 = get_cuda_stream(0)
        triton_poi_fused_sum_view_0.run(tangents_1, buf2, 1000, grid=grid(1000), stream=stream0)
        del tangents_1
        buf3 = empty((1024, ), device='cuda', dtype=torch.float32)
        buf4 = empty((1024, ), device='cuda', dtype=torch.float32)
        buf5 = buf4; del buf4  # reuse
        # Source Nodes: [], Original ATen: [aten.div, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_div_native_batch_norm_backward_threshold_backward_1.run(buf5, le, buf0, cat_57, primals_725, primals_726, buf3, 1024, 196, grid=grid(1024), stream=stream0)
        del cat_57
        del primals_725
        buf6 = empty((4, 32, 7, 7), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        triton_poi_fused_convolution_backward_2.run(le, buf0, primals_726, primals_361, buf6, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf7 = aten.convolution_backward(buf6, relu_119, primals_360, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_360
        buf8 = buf7[0]
        buf9 = buf7[1]
        del buf7
        buf10 = empty((128, ), device='cuda', dtype=torch.float32)
        buf11 = empty((128, ), device='cuda', dtype=torch.float32)
        buf12 = buf11; del buf11  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf12, relu_119, buf8, convolution_118, primals_722, primals_723, buf10, 128, 196, grid=grid(128), stream=stream0)
        del convolution_118
        del primals_722
        buf13 = buf8; del buf8  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_4.run(buf13, relu_119, primals_723, primals_358, 25088, grid=grid(25088), stream=stream0)
        del primals_358
        del primals_723
        del relu_119
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf14 = aten.convolution_backward(buf13, relu_118, primals_357, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf13
        del primals_357
        buf15 = buf14[0]
        buf16 = buf14[1]
        del buf14
        buf17 = empty((992, ), device='cuda', dtype=torch.float32)
        buf18 = empty((992, ), device='cuda', dtype=torch.float32)
        buf19 = buf18; del buf18  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_5.run(buf19, relu_118, buf15, cat_56, primals_719, primals_720, buf17, 992, 196, grid=grid(992), stream=stream0)
        del cat_56
        del primals_719
        buf20 = buf6; del buf6  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_6.run(le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, buf20, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf21 = aten.convolution_backward(buf20, relu_117, primals_354, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_354
        buf22 = buf21[0]
        buf23 = buf21[1]
        del buf21
        buf24 = empty((128, ), device='cuda', dtype=torch.float32)
        buf25 = empty((128, ), device='cuda', dtype=torch.float32)
        buf26 = buf25; del buf25  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf26, relu_117, buf22, convolution_116, primals_716, primals_717, buf24, 128, 196, grid=grid(128), stream=stream0)
        del convolution_116
        del primals_716
        buf27 = buf22; del buf22  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_4.run(buf27, relu_117, primals_717, primals_352, 25088, grid=grid(25088), stream=stream0)
        del primals_352
        del primals_717
        del relu_117
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf28 = aten.convolution_backward(buf27, relu_116, primals_351, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_351
        buf29 = buf28[0]
        buf30 = buf28[1]
        del buf28
        buf31 = empty((960, ), device='cuda', dtype=torch.float32)
        buf32 = empty((960, ), device='cuda', dtype=torch.float32)
        buf33 = buf32; del buf32  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_7.run(buf33, relu_116, buf29, cat_55, primals_713, primals_714, buf31, 960, 196, grid=grid(960), stream=stream0)
        del cat_55
        del primals_713
        buf48 = buf20; del buf20  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_8.run(le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, buf48, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf49 = aten.convolution_backward(buf48, relu_115, primals_348, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_348
        buf50 = buf49[0]
        buf55 = buf27; del buf27  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_115, buf50, primals_711, primals_346, buf55, 25088, grid=grid(25088), stream=stream0)
        del primals_346
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf56 = aten.convolution_backward(buf55, relu_114, primals_345, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_345
        buf57 = buf56[0]
        buf47 = buf48; del buf48  # reuse
        buf62 = buf47; del buf47  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_10.run(buf62, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf63 = aten.convolution_backward(buf62, relu_113, primals_342, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_342
        buf64 = buf63[0]
        buf69 = buf55; del buf55  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_113, buf64, primals_705, primals_340, buf69, 25088, grid=grid(25088), stream=stream0)
        del primals_340
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf70 = aten.convolution_backward(buf69, relu_112, primals_339, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_339
        buf71 = buf70[0]
        buf46 = buf62; del buf62  # reuse
        buf88 = buf46; del buf46  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_11.run(buf88, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf89 = aten.convolution_backward(buf88, relu_111, primals_336, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_336
        buf90 = buf89[0]
        buf95 = buf69; del buf69  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_111, buf90, primals_699, primals_334, buf95, 25088, grid=grid(25088), stream=stream0)
        del primals_334
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf96 = aten.convolution_backward(buf95, relu_110, primals_333, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_333
        buf97 = buf96[0]
        buf45 = buf88; del buf88  # reuse
        buf87 = buf45; del buf45  # reuse
        buf102 = buf87; del buf87  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_12.run(buf102, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf103 = aten.convolution_backward(buf102, relu_109, primals_330, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_330
        buf104 = buf103[0]
        buf109 = buf95; del buf95  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_109, buf104, primals_693, primals_328, buf109, 25088, grid=grid(25088), stream=stream0)
        del primals_328
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf110 = aten.convolution_backward(buf109, relu_108, primals_327, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_327
        buf111 = buf110[0]
        buf44 = buf102; del buf102  # reuse
        buf86 = buf44; del buf44  # reuse
        buf126 = buf86; del buf86  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_13.run(buf126, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf127 = aten.convolution_backward(buf126, relu_107, primals_324, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_324
        buf128 = buf127[0]
        buf133 = buf109; del buf109  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_107, buf128, primals_687, primals_322, buf133, 25088, grid=grid(25088), stream=stream0)
        del primals_322
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf134 = aten.convolution_backward(buf133, relu_106, primals_321, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_321
        buf135 = buf134[0]
        buf43 = buf126; del buf126  # reuse
        buf85 = buf43; del buf43  # reuse
        buf125 = buf85; del buf85  # reuse
        buf140 = buf125; del buf125  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_14.run(buf140, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf141 = aten.convolution_backward(buf140, relu_105, primals_318, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_318
        buf142 = buf141[0]
        buf147 = buf133; del buf133  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_105, buf142, primals_681, primals_316, buf147, 25088, grid=grid(25088), stream=stream0)
        del primals_316
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf148 = aten.convolution_backward(buf147, relu_104, primals_315, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_315
        buf149 = buf148[0]
        buf42 = buf140; del buf140  # reuse
        buf84 = buf42; del buf42  # reuse
        buf124 = buf84; del buf84  # reuse
        buf162 = buf124; del buf124  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_15.run(buf162, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, relu_104, buf149, primals_678, primals_313, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf163 = aten.convolution_backward(buf162, relu_103, primals_312, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_312
        buf164 = buf163[0]
        buf169 = buf147; del buf147  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_103, buf164, primals_675, primals_310, buf169, 25088, grid=grid(25088), stream=stream0)
        del primals_310
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf170 = aten.convolution_backward(buf169, relu_102, primals_309, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_309
        buf171 = buf170[0]
        buf41 = buf162; del buf162  # reuse
        buf83 = buf41; del buf41  # reuse
        buf123 = buf83; del buf83  # reuse
        buf161 = buf123; del buf123  # reuse
        buf176 = buf161; del buf161  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_16.run(buf176, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, relu_104, buf149, primals_678, primals_313, relu_102, buf171, primals_672, primals_307, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf177 = aten.convolution_backward(buf176, relu_101, primals_306, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_306
        buf178 = buf177[0]
        buf183 = buf169; del buf169  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_101, buf178, primals_669, primals_304, buf183, 25088, grid=grid(25088), stream=stream0)
        del primals_304
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf184 = aten.convolution_backward(buf183, relu_100, primals_303, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_303
        buf185 = buf184[0]
        buf40 = buf176; del buf176  # reuse
        buf82 = buf40; del buf40  # reuse
        buf122 = buf82; del buf82  # reuse
        buf160 = buf122; del buf122  # reuse
        buf196 = buf160; del buf160  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_17.run(buf196, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, relu_104, buf149, primals_678, primals_313, relu_102, buf171, primals_672, primals_307, relu_100, buf185, primals_666, primals_301, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf197 = aten.convolution_backward(buf196, relu_99, primals_300, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_300
        buf198 = buf197[0]
        buf203 = buf183; del buf183  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_99, buf198, primals_663, primals_298, buf203, 25088, grid=grid(25088), stream=stream0)
        del primals_298
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf204 = aten.convolution_backward(buf203, relu_98, primals_297, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_297
        buf205 = buf204[0]
        buf39 = buf196; del buf196  # reuse
        buf81 = buf39; del buf39  # reuse
        buf121 = buf81; del buf81  # reuse
        buf159 = buf121; del buf121  # reuse
        buf195 = buf159; del buf159  # reuse
        buf210 = buf195; del buf195  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_18.run(buf210, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, relu_104, buf149, primals_678, primals_313, relu_102, buf171, primals_672, primals_307, relu_100, buf185, primals_666, primals_301, relu_98, buf205, primals_660, primals_295, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf211 = aten.convolution_backward(buf210, relu_97, primals_294, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_294
        buf212 = buf211[0]
        buf217 = buf203; del buf203  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_97, buf212, primals_657, primals_292, buf217, 25088, grid=grid(25088), stream=stream0)
        del primals_292
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf218 = aten.convolution_backward(buf217, relu_96, primals_291, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_291
        buf219 = buf218[0]
        buf38 = buf210; del buf210  # reuse
        buf80 = buf38; del buf38  # reuse
        buf120 = buf80; del buf80  # reuse
        buf158 = buf120; del buf120  # reuse
        buf194 = buf158; del buf158  # reuse
        buf228 = buf194; del buf194  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_19.run(buf228, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, relu_104, buf149, primals_678, primals_313, relu_102, buf171, primals_672, primals_307, relu_100, buf185, primals_666, primals_301, relu_98, buf205, primals_660, primals_295, relu_96, buf219, primals_654, primals_289, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf229 = aten.convolution_backward(buf228, relu_95, primals_288, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_288
        buf230 = buf229[0]
        buf235 = buf217; del buf217  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_95, buf230, primals_651, primals_286, buf235, 25088, grid=grid(25088), stream=stream0)
        del primals_286
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf236 = aten.convolution_backward(buf235, relu_94, primals_285, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_285
        buf237 = buf236[0]
        buf37 = buf228; del buf228  # reuse
        buf79 = buf37; del buf37  # reuse
        buf119 = buf79; del buf79  # reuse
        buf157 = buf119; del buf119  # reuse
        buf193 = buf157; del buf157  # reuse
        buf227 = buf193; del buf193  # reuse
        buf242 = buf227; del buf227  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_20.run(buf242, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, relu_104, buf149, primals_678, primals_313, relu_102, buf171, primals_672, primals_307, relu_100, buf185, primals_666, primals_301, relu_98, buf205, primals_660, primals_295, relu_96, buf219, primals_654, primals_289, relu_94, buf237, primals_648, primals_283, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf243 = aten.convolution_backward(buf242, relu_93, primals_282, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_282
        buf244 = buf243[0]
        buf249 = buf235; del buf235  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_93, buf244, primals_645, primals_280, buf249, 25088, grid=grid(25088), stream=stream0)
        del primals_280
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf250 = aten.convolution_backward(buf249, relu_92, primals_279, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_279
        buf251 = buf250[0]
        buf36 = buf242; del buf242  # reuse
        buf78 = buf36; del buf36  # reuse
        buf118 = buf78; del buf78  # reuse
        buf156 = buf118; del buf118  # reuse
        buf192 = buf156; del buf156  # reuse
        buf226 = buf192; del buf192  # reuse
        buf258 = buf226; del buf226  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_21.run(buf258, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, relu_104, buf149, primals_678, primals_313, relu_102, buf171, primals_672, primals_307, relu_100, buf185, primals_666, primals_301, relu_98, buf205, primals_660, primals_295, relu_96, buf219, primals_654, primals_289, relu_94, buf237, primals_648, primals_283, relu_92, buf251, primals_642, primals_277, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf259 = aten.convolution_backward(buf258, relu_91, primals_276, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_276
        buf260 = buf259[0]
        buf265 = buf249; del buf249  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_91, buf260, primals_639, primals_274, buf265, 25088, grid=grid(25088), stream=stream0)
        del primals_274
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf266 = aten.convolution_backward(buf265, relu_90, primals_273, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_273
        buf267 = buf266[0]
        buf35 = buf258; del buf258  # reuse
        buf77 = buf35; del buf35  # reuse
        buf117 = buf77; del buf77  # reuse
        buf155 = buf117; del buf117  # reuse
        buf191 = buf155; del buf155  # reuse
        buf225 = buf191; del buf191  # reuse
        buf257 = buf225; del buf225  # reuse
        buf272 = buf257; del buf257  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_22.run(buf272, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, relu_104, buf149, primals_678, primals_313, relu_102, buf171, primals_672, primals_307, relu_100, buf185, primals_666, primals_301, relu_98, buf205, primals_660, primals_295, relu_96, buf219, primals_654, primals_289, relu_94, buf237, primals_648, primals_283, relu_92, buf251, primals_642, primals_277, relu_90, buf267, primals_636, primals_271, 6272, grid=grid(6272), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf273 = aten.convolution_backward(buf272, relu_89, primals_270, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf272
        del primals_270
        buf274 = buf273[0]
        buf279 = buf265; del buf265  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_9.run(relu_89, buf274, primals_633, primals_268, buf279, 25088, grid=grid(25088), stream=stream0)
        del primals_268
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf280 = aten.convolution_backward(buf279, relu_88, primals_267, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf279
        del primals_267
        buf281 = buf280[0]
        buf34 = empty((4, 512, 7, 7), device='cuda', dtype=torch.float32)
        buf76 = buf34; del buf34  # reuse
        buf116 = buf76; del buf76  # reuse
        buf154 = buf116; del buf116  # reuse
        buf190 = buf154; del buf154  # reuse
        buf224 = buf190; del buf190  # reuse
        buf256 = buf224; del buf224  # reuse
        buf286 = buf256; del buf256  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.native_batch_norm_backward, aten.slice, aten.threshold_backward]
        triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_23.run(buf286, le, buf0, primals_726, primals_361, relu_118, buf15, primals_720, primals_355, relu_116, buf29, primals_714, primals_349, relu_114, buf57, primals_708, primals_343, relu_112, buf71, primals_702, primals_337, relu_110, buf97, primals_696, primals_331, relu_108, buf111, primals_690, primals_325, relu_106, buf135, primals_684, primals_319, relu_104, buf149, primals_678, primals_313, relu_102, buf171, primals_672, primals_307, relu_100, buf185, primals_666, primals_301, relu_98, buf205, primals_660, primals_295, relu_96, buf219, primals_654, primals_289, relu_94, buf237, primals_648, primals_283, relu_92, buf251, primals_642, primals_277, relu_90, buf267, primals_636, primals_271, relu_88, buf281, primals_630, primals_265, 100352, grid=grid(100352), stream=stream0)
        del buf0
        del buf15
        del buf29
        del le
        del primals_265
        del primals_271
        del primals_277
        del primals_283
        del primals_289
        del primals_295
        del primals_301
        del primals_307
        del primals_313
        del primals_319
        del primals_325
        del primals_331
        del primals_337
        del primals_343
        del primals_349
        del primals_355
        del primals_361
        del primals_714
        del primals_720
        del primals_726
        del relu_116
        del relu_118
        buf51 = buf49[1]
        del buf49
        buf52 = empty((128, ), device='cuda', dtype=torch.float32)
        buf53 = empty((128, ), device='cuda', dtype=torch.float32)
        buf54 = buf53; del buf53  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf54, relu_115, buf50, convolution_114, primals_710, primals_711, buf52, 128, 196, grid=grid(128), stream=stream0)
        del buf50
        del convolution_114
        del primals_710
        del primals_711
        del relu_115
        buf58 = buf56[1]
        del buf56
        buf59 = empty((928, ), device='cuda', dtype=torch.float32)
        buf60 = empty((928, ), device='cuda', dtype=torch.float32)
        buf61 = buf60; del buf60  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_24.run(buf61, relu_114, buf57, cat_54, primals_707, primals_708, buf59, 928, 196, grid=grid(928), stream=stream0)
        del buf57
        del cat_54
        del primals_707
        del primals_708
        del relu_114
        buf65 = buf63[1]
        del buf63
        buf66 = empty((128, ), device='cuda', dtype=torch.float32)
        buf67 = empty((128, ), device='cuda', dtype=torch.float32)
        buf68 = buf67; del buf67  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf68, relu_113, buf64, convolution_112, primals_704, primals_705, buf66, 128, 196, grid=grid(128), stream=stream0)
        del buf64
        del convolution_112
        del primals_704
        del primals_705
        del relu_113
        buf72 = buf70[1]
        del buf70
        buf73 = empty((896, ), device='cuda', dtype=torch.float32)
        buf74 = empty((896, ), device='cuda', dtype=torch.float32)
        buf75 = buf74; del buf74  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_25.run(buf75, relu_112, buf71, cat_53, primals_701, primals_702, buf73, 896, 196, grid=grid(896), stream=stream0)
        del buf71
        del cat_53
        del primals_701
        del primals_702
        del relu_112
        buf91 = buf89[1]
        del buf89
        buf92 = empty((128, ), device='cuda', dtype=torch.float32)
        buf93 = empty((128, ), device='cuda', dtype=torch.float32)
        buf94 = buf93; del buf93  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf94, relu_111, buf90, convolution_110, primals_698, primals_699, buf92, 128, 196, grid=grid(128), stream=stream0)
        del buf90
        del convolution_110
        del primals_698
        del primals_699
        del relu_111
        buf98 = buf96[1]
        del buf96
        buf99 = empty((864, ), device='cuda', dtype=torch.float32)
        buf100 = empty((864, ), device='cuda', dtype=torch.float32)
        buf101 = buf100; del buf100  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_26.run(buf101, relu_110, buf97, cat_52, primals_695, primals_696, buf99, 864, 196, grid=grid(864), stream=stream0)
        del buf97
        del cat_52
        del primals_695
        del primals_696
        del relu_110
        buf105 = buf103[1]
        del buf103
        buf106 = empty((128, ), device='cuda', dtype=torch.float32)
        buf107 = empty((128, ), device='cuda', dtype=torch.float32)
        buf108 = buf107; del buf107  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf108, relu_109, buf104, convolution_108, primals_692, primals_693, buf106, 128, 196, grid=grid(128), stream=stream0)
        del buf104
        del convolution_108
        del primals_692
        del primals_693
        del relu_109
        buf112 = buf110[1]
        del buf110
        buf113 = empty((832, ), device='cuda', dtype=torch.float32)
        buf114 = empty((832, ), device='cuda', dtype=torch.float32)
        buf115 = buf114; del buf114  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_27.run(buf115, relu_108, buf111, cat_51, primals_689, primals_690, buf113, 832, 196, grid=grid(832), stream=stream0)
        del buf111
        del cat_51
        del primals_689
        del primals_690
        del relu_108
        buf129 = buf127[1]
        del buf127
        buf130 = empty((128, ), device='cuda', dtype=torch.float32)
        buf131 = empty((128, ), device='cuda', dtype=torch.float32)
        buf132 = buf131; del buf131  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf132, relu_107, buf128, convolution_106, primals_686, primals_687, buf130, 128, 196, grid=grid(128), stream=stream0)
        del buf128
        del convolution_106
        del primals_686
        del primals_687
        del relu_107
        buf136 = buf134[1]
        del buf134
        buf137 = empty((800, ), device='cuda', dtype=torch.float32)
        buf138 = empty((800, ), device='cuda', dtype=torch.float32)
        buf139 = buf138; del buf138  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_28.run(buf139, relu_106, buf135, cat_50, primals_683, primals_684, buf137, 800, 196, grid=grid(800), stream=stream0)
        del buf135
        del cat_50
        del primals_683
        del primals_684
        del relu_106
        buf143 = buf141[1]
        del buf141
        buf144 = empty((128, ), device='cuda', dtype=torch.float32)
        buf145 = empty((128, ), device='cuda', dtype=torch.float32)
        buf146 = buf145; del buf145  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf146, relu_105, buf142, convolution_104, primals_680, primals_681, buf144, 128, 196, grid=grid(128), stream=stream0)
        del buf142
        del convolution_104
        del primals_680
        del primals_681
        del relu_105
        buf150 = buf148[1]
        del buf148
        buf151 = empty((768, ), device='cuda', dtype=torch.float32)
        buf152 = empty((768, ), device='cuda', dtype=torch.float32)
        buf153 = buf152; del buf152  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_29.run(buf153, relu_104, buf149, cat_49, primals_677, primals_678, buf151, 768, 196, grid=grid(768), stream=stream0)
        del buf149
        del cat_49
        del primals_677
        del primals_678
        del relu_104
        buf165 = buf163[1]
        del buf163
        buf166 = empty((128, ), device='cuda', dtype=torch.float32)
        buf167 = empty((128, ), device='cuda', dtype=torch.float32)
        buf168 = buf167; del buf167  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf168, relu_103, buf164, convolution_102, primals_674, primals_675, buf166, 128, 196, grid=grid(128), stream=stream0)
        del buf164
        del convolution_102
        del primals_674
        del primals_675
        del relu_103
        buf172 = buf170[1]
        del buf170
        buf173 = empty((736, ), device='cuda', dtype=torch.float32)
        buf174 = empty((736, ), device='cuda', dtype=torch.float32)
        buf175 = buf174; del buf174  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_30.run(buf175, relu_102, buf171, cat_48, primals_671, primals_672, buf173, 736, 196, grid=grid(736), stream=stream0)
        del buf171
        del cat_48
        del primals_671
        del primals_672
        del relu_102
        buf179 = buf177[1]
        del buf177
        buf180 = empty((128, ), device='cuda', dtype=torch.float32)
        buf181 = empty((128, ), device='cuda', dtype=torch.float32)
        buf182 = buf181; del buf181  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf182, relu_101, buf178, convolution_100, primals_668, primals_669, buf180, 128, 196, grid=grid(128), stream=stream0)
        del buf178
        del convolution_100
        del primals_668
        del primals_669
        del relu_101
        buf186 = buf184[1]
        del buf184
        buf187 = empty((704, ), device='cuda', dtype=torch.float32)
        buf188 = empty((704, ), device='cuda', dtype=torch.float32)
        buf189 = buf188; del buf188  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_31.run(buf189, relu_100, buf185, cat_47, primals_665, primals_666, buf187, 704, 196, grid=grid(704), stream=stream0)
        del buf185
        del cat_47
        del primals_665
        del primals_666
        del relu_100
        buf199 = buf197[1]
        del buf197
        buf200 = empty((128, ), device='cuda', dtype=torch.float32)
        buf201 = empty((128, ), device='cuda', dtype=torch.float32)
        buf202 = buf201; del buf201  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf202, relu_99, buf198, convolution_98, primals_662, primals_663, buf200, 128, 196, grid=grid(128), stream=stream0)
        del buf198
        del convolution_98
        del primals_662
        del primals_663
        del relu_99
        buf206 = buf204[1]
        del buf204
        buf207 = empty((672, ), device='cuda', dtype=torch.float32)
        buf208 = empty((672, ), device='cuda', dtype=torch.float32)
        buf209 = buf208; del buf208  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_32.run(buf209, relu_98, buf205, cat_46, primals_659, primals_660, buf207, 672, 196, grid=grid(672), stream=stream0)
        del buf205
        del cat_46
        del primals_659
        del primals_660
        del relu_98
        buf213 = buf211[1]
        del buf211
        buf214 = empty((128, ), device='cuda', dtype=torch.float32)
        buf215 = empty((128, ), device='cuda', dtype=torch.float32)
        buf216 = buf215; del buf215  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf216, relu_97, buf212, convolution_96, primals_656, primals_657, buf214, 128, 196, grid=grid(128), stream=stream0)
        del buf212
        del convolution_96
        del primals_656
        del primals_657
        del relu_97
        buf220 = buf218[1]
        del buf218
        buf221 = empty((640, ), device='cuda', dtype=torch.float32)
        buf222 = empty((640, ), device='cuda', dtype=torch.float32)
        buf223 = buf222; del buf222  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_33.run(buf223, relu_96, buf219, cat_45, primals_653, primals_654, buf221, 640, 196, grid=grid(640), stream=stream0)
        del buf219
        del cat_45
        del primals_653
        del primals_654
        del relu_96
        buf231 = buf229[1]
        del buf229
        buf232 = empty((128, ), device='cuda', dtype=torch.float32)
        buf233 = empty((128, ), device='cuda', dtype=torch.float32)
        buf234 = buf233; del buf233  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf234, relu_95, buf230, convolution_94, primals_650, primals_651, buf232, 128, 196, grid=grid(128), stream=stream0)
        del buf230
        del convolution_94
        del primals_650
        del primals_651
        del relu_95
        buf238 = buf236[1]
        del buf236
        buf239 = empty((608, ), device='cuda', dtype=torch.float32)
        buf240 = empty((608, ), device='cuda', dtype=torch.float32)
        buf241 = buf240; del buf240  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_34.run(buf241, relu_94, buf237, cat_44, primals_647, primals_648, buf239, 608, 196, grid=grid(608), stream=stream0)
        del buf237
        del cat_44
        del primals_647
        del primals_648
        del relu_94
        buf245 = buf243[1]
        del buf243
        buf246 = empty((128, ), device='cuda', dtype=torch.float32)
        buf247 = empty((128, ), device='cuda', dtype=torch.float32)
        buf248 = buf247; del buf247  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf248, relu_93, buf244, convolution_92, primals_644, primals_645, buf246, 128, 196, grid=grid(128), stream=stream0)
        del buf244
        del convolution_92
        del primals_644
        del primals_645
        del relu_93
        buf252 = buf250[1]
        del buf250
        buf253 = empty((576, ), device='cuda', dtype=torch.float32)
        buf254 = empty((576, ), device='cuda', dtype=torch.float32)
        buf255 = buf254; del buf254  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_35.run(buf255, relu_92, buf251, cat_43, primals_641, primals_642, buf253, 576, 196, grid=grid(576), stream=stream0)
        del buf251
        del cat_43
        del primals_641
        del primals_642
        del relu_92
        buf261 = buf259[1]
        del buf259
        buf262 = empty((128, ), device='cuda', dtype=torch.float32)
        buf263 = empty((128, ), device='cuda', dtype=torch.float32)
        buf264 = buf263; del buf263  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf264, relu_91, buf260, convolution_90, primals_638, primals_639, buf262, 128, 196, grid=grid(128), stream=stream0)
        del buf260
        del convolution_90
        del primals_638
        del primals_639
        del relu_91
        buf268 = buf266[1]
        del buf266
        buf269 = empty((544, ), device='cuda', dtype=torch.float32)
        buf270 = empty((544, ), device='cuda', dtype=torch.float32)
        buf271 = buf270; del buf270  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_36.run(buf271, relu_90, buf267, cat_42, primals_635, primals_636, buf269, 544, 196, grid=grid(544), stream=stream0)
        del buf267
        del cat_42
        del primals_635
        del primals_636
        del relu_90
        buf275 = buf273[1]
        del buf273
        buf276 = empty((128, ), device='cuda', dtype=torch.float32)
        buf277 = empty((128, ), device='cuda', dtype=torch.float32)
        buf278 = buf277; del buf277  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_3.run(buf278, relu_89, buf274, convolution_88, primals_632, primals_633, buf276, 128, 196, grid=grid(128), stream=stream0)
        del convolution_88
        del primals_632
        del primals_633
        del relu_89
        buf282 = buf280[1]
        del buf280
        buf283 = empty((512, ), device='cuda', dtype=torch.float32)
        buf284 = empty((512, ), device='cuda', dtype=torch.float32)
        buf285 = buf284; del buf284  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_37.run(buf285, relu_88, buf281, avg_pool2d_2, primals_629, primals_630, buf283, 512, 196, grid=grid(512), stream=stream0)
        del avg_pool2d_2
        del buf281
        del primals_629
        del primals_630
        del relu_88
        buf287 = empty((4, 512, 14, 14), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.avg_pool2d_backward, aten.convolution_backward]
        triton_poi_fused_avg_pool2d_backward_convolution_backward_38.run(buf286, buf287, 401408, grid=grid(401408), stream=stream0)
        del buf286
        # Source Nodes: [], Original ATen: [aten.avg_pool2d_backward, aten.convolution_backward]
        buf288 = aten.convolution_backward(buf287, relu_87, primals_264, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf287
        del primals_264
        buf289 = buf288[0]
        buf290 = buf288[1]
        del buf288
        buf291 = empty((1024, ), device='cuda', dtype=torch.float32)
        buf292 = empty((1024, ), device='cuda', dtype=torch.float32)
        buf293 = buf292; del buf292  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_39.run(buf293, relu_87, buf289, cat_41, primals_626, primals_627, buf291, 1024, 784, grid=grid(1024), stream=stream0)
        del cat_41
        del primals_626
        buf294 = reinterpret_tensor(buf274, (4, 32, 14, 14), (6272, 196, 14, 1), 0); del buf274  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        triton_poi_fused_convolution_backward_40.run(relu_87, buf289, primals_627, primals_262, buf294, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf295 = aten.convolution_backward(buf294, relu_86, primals_261, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_261
        buf296 = buf295[0]
        buf297 = buf295[1]
        del buf295
        buf298 = empty((128, ), device='cuda', dtype=torch.float32)
        buf299 = empty((128, ), device='cuda', dtype=torch.float32)
        buf300 = buf299; del buf299  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf300, relu_86, buf296, convolution_85, primals_623, primals_624, buf298, 128, 784, grid=grid(128), stream=stream0)
        del convolution_85
        del primals_623
        buf301 = buf296; del buf296  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_42.run(buf301, relu_86, primals_624, primals_259, 100352, grid=grid(100352), stream=stream0)
        del primals_259
        del primals_624
        del relu_86
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf302 = aten.convolution_backward(buf301, relu_85, primals_258, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf301
        del primals_258
        buf303 = buf302[0]
        buf304 = buf302[1]
        del buf302
        buf305 = empty((992, ), device='cuda', dtype=torch.float32)
        buf306 = empty((992, ), device='cuda', dtype=torch.float32)
        buf307 = buf306; del buf306  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_43.run(buf307, relu_85, buf303, cat_40, primals_620, primals_621, buf305, 992, 784, grid=grid(992), stream=stream0)
        del cat_40
        del primals_620
        buf308 = buf294; del buf294  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_44.run(relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, buf308, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf309 = aten.convolution_backward(buf308, relu_84, primals_255, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_255
        buf310 = buf309[0]
        buf311 = buf309[1]
        del buf309
        buf312 = empty((128, ), device='cuda', dtype=torch.float32)
        buf313 = empty((128, ), device='cuda', dtype=torch.float32)
        buf314 = buf313; del buf313  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf314, relu_84, buf310, convolution_83, primals_617, primals_618, buf312, 128, 784, grid=grid(128), stream=stream0)
        del convolution_83
        del primals_617
        buf315 = buf310; del buf310  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_42.run(buf315, relu_84, primals_618, primals_253, 100352, grid=grid(100352), stream=stream0)
        del primals_253
        del primals_618
        del relu_84
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf316 = aten.convolution_backward(buf315, relu_83, primals_252, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_252
        buf317 = buf316[0]
        buf318 = buf316[1]
        del buf316
        buf319 = empty((960, ), device='cuda', dtype=torch.float32)
        buf320 = empty((960, ), device='cuda', dtype=torch.float32)
        buf321 = buf320; del buf320  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_45.run(buf321, relu_83, buf317, cat_39, primals_614, primals_615, buf319, 960, 784, grid=grid(960), stream=stream0)
        del cat_39
        del primals_614
        buf344 = buf308; del buf308  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_46.run(relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, buf344, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf345 = aten.convolution_backward(buf344, relu_82, primals_249, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_249
        buf346 = buf345[0]
        buf351 = buf315; del buf315  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_82, buf346, primals_612, primals_247, buf351, 100352, grid=grid(100352), stream=stream0)
        del primals_247
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf352 = aten.convolution_backward(buf351, relu_81, primals_246, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_246
        buf353 = buf352[0]
        buf343 = buf344; del buf344  # reuse
        buf358 = buf343; del buf343  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_48.run(buf358, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf359 = aten.convolution_backward(buf358, relu_80, primals_243, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_243
        buf360 = buf359[0]
        buf365 = buf351; del buf351  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_80, buf360, primals_606, primals_241, buf365, 100352, grid=grid(100352), stream=stream0)
        del primals_241
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf366 = aten.convolution_backward(buf365, relu_79, primals_240, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_240
        buf367 = buf366[0]
        buf342 = buf358; del buf358  # reuse
        buf392 = buf342; del buf342  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_49.run(buf392, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf393 = aten.convolution_backward(buf392, relu_78, primals_237, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_237
        buf394 = buf393[0]
        buf399 = buf365; del buf365  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_78, buf394, primals_600, primals_235, buf399, 100352, grid=grid(100352), stream=stream0)
        del primals_235
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf400 = aten.convolution_backward(buf399, relu_77, primals_234, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_234
        buf401 = buf400[0]
        buf341 = buf392; del buf392  # reuse
        buf391 = buf341; del buf341  # reuse
        buf406 = buf391; del buf391  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_50.run(buf406, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf407 = aten.convolution_backward(buf406, relu_76, primals_231, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_231
        buf408 = buf407[0]
        buf413 = buf399; del buf399  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_76, buf408, primals_594, primals_229, buf413, 100352, grid=grid(100352), stream=stream0)
        del primals_229
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf414 = aten.convolution_backward(buf413, relu_75, primals_228, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_228
        buf415 = buf414[0]
        buf340 = buf406; del buf406  # reuse
        buf390 = buf340; del buf340  # reuse
        buf438 = buf390; del buf390  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_51.run(buf438, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf439 = aten.convolution_backward(buf438, relu_74, primals_225, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_225
        buf440 = buf439[0]
        buf445 = buf413; del buf413  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_74, buf440, primals_588, primals_223, buf445, 100352, grid=grid(100352), stream=stream0)
        del primals_223
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf446 = aten.convolution_backward(buf445, relu_73, primals_222, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_222
        buf447 = buf446[0]
        buf339 = buf438; del buf438  # reuse
        buf389 = buf339; del buf339  # reuse
        buf437 = buf389; del buf389  # reuse
        buf452 = buf437; del buf437  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_52.run(buf452, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf453 = aten.convolution_backward(buf452, relu_72, primals_219, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_219
        buf454 = buf453[0]
        buf459 = buf445; del buf445  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_72, buf454, primals_582, primals_217, buf459, 100352, grid=grid(100352), stream=stream0)
        del primals_217
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf460 = aten.convolution_backward(buf459, relu_71, primals_216, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_216
        buf461 = buf460[0]
        buf338 = buf452; del buf452  # reuse
        buf388 = buf338; del buf338  # reuse
        buf436 = buf388; del buf388  # reuse
        buf482 = buf436; del buf436  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_53.run(buf482, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf483 = aten.convolution_backward(buf482, relu_70, primals_213, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_213
        buf484 = buf483[0]
        buf489 = buf459; del buf459  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_70, buf484, primals_576, primals_211, buf489, 100352, grid=grid(100352), stream=stream0)
        del primals_211
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf490 = aten.convolution_backward(buf489, relu_69, primals_210, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_210
        buf491 = buf490[0]
        buf337 = buf482; del buf482  # reuse
        buf387 = buf337; del buf337  # reuse
        buf435 = buf387; del buf387  # reuse
        buf481 = buf435; del buf435  # reuse
        buf496 = buf481; del buf481  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_54.run(buf496, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf497 = aten.convolution_backward(buf496, relu_68, primals_207, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_207
        buf498 = buf497[0]
        buf503 = buf489; del buf489  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_68, buf498, primals_570, primals_205, buf503, 100352, grid=grid(100352), stream=stream0)
        del primals_205
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf504 = aten.convolution_backward(buf503, relu_67, primals_204, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_204
        buf505 = buf504[0]
        buf336 = buf496; del buf496  # reuse
        buf386 = buf336; del buf336  # reuse
        buf434 = buf386; del buf386  # reuse
        buf480 = buf434; del buf434  # reuse
        buf524 = buf480; del buf480  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_55.run(buf524, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf525 = aten.convolution_backward(buf524, relu_66, primals_201, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_201
        buf526 = buf525[0]
        buf531 = buf503; del buf503  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_66, buf526, primals_564, primals_199, buf531, 100352, grid=grid(100352), stream=stream0)
        del primals_199
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf532 = aten.convolution_backward(buf531, relu_65, primals_198, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_198
        buf533 = buf532[0]
        buf335 = buf524; del buf524  # reuse
        buf385 = buf335; del buf335  # reuse
        buf433 = buf385; del buf385  # reuse
        buf479 = buf433; del buf433  # reuse
        buf523 = buf479; del buf479  # reuse
        buf538 = buf523; del buf523  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_56.run(buf538, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf539 = aten.convolution_backward(buf538, relu_64, primals_195, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_195
        buf540 = buf539[0]
        buf545 = buf531; del buf531  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_64, buf540, primals_558, primals_193, buf545, 100352, grid=grid(100352), stream=stream0)
        del primals_193
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf546 = aten.convolution_backward(buf545, relu_63, primals_192, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_192
        buf547 = buf546[0]
        buf334 = buf538; del buf538  # reuse
        buf384 = buf334; del buf334  # reuse
        buf432 = buf384; del buf384  # reuse
        buf478 = buf432; del buf432  # reuse
        buf522 = buf478; del buf478  # reuse
        buf564 = buf522; del buf522  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_57.run(buf564, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf565 = aten.convolution_backward(buf564, relu_62, primals_189, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_189
        buf566 = buf565[0]
        buf571 = buf545; del buf545  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_62, buf566, primals_552, primals_187, buf571, 100352, grid=grid(100352), stream=stream0)
        del primals_187
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf572 = aten.convolution_backward(buf571, relu_61, primals_186, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_186
        buf573 = buf572[0]
        buf333 = buf564; del buf564  # reuse
        buf383 = buf333; del buf333  # reuse
        buf431 = buf383; del buf383  # reuse
        buf477 = buf431; del buf431  # reuse
        buf521 = buf477; del buf477  # reuse
        buf563 = buf521; del buf521  # reuse
        buf578 = buf563; del buf563  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_58.run(buf578, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf579 = aten.convolution_backward(buf578, relu_60, primals_183, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_183
        buf580 = buf579[0]
        buf585 = buf571; del buf571  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_60, buf580, primals_546, primals_181, buf585, 100352, grid=grid(100352), stream=stream0)
        del primals_181
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf586 = aten.convolution_backward(buf585, relu_59, primals_180, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_180
        buf587 = buf586[0]
        buf332 = buf578; del buf578  # reuse
        buf382 = buf332; del buf332  # reuse
        buf430 = buf382; del buf382  # reuse
        buf476 = buf430; del buf430  # reuse
        buf520 = buf476; del buf476  # reuse
        buf562 = buf520; del buf520  # reuse
        buf602 = buf562; del buf562  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_59.run(buf602, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf603 = aten.convolution_backward(buf602, relu_58, primals_177, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_177
        buf604 = buf603[0]
        buf609 = buf585; del buf585  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_58, buf604, primals_540, primals_175, buf609, 100352, grid=grid(100352), stream=stream0)
        del primals_175
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf610 = aten.convolution_backward(buf609, relu_57, primals_174, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_174
        buf611 = buf610[0]
        buf331 = buf602; del buf602  # reuse
        buf381 = buf331; del buf331  # reuse
        buf429 = buf381; del buf381  # reuse
        buf475 = buf429; del buf429  # reuse
        buf519 = buf475; del buf475  # reuse
        buf561 = buf519; del buf519  # reuse
        buf601 = buf561; del buf561  # reuse
        buf616 = buf601; del buf601  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_60.run(buf616, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf617 = aten.convolution_backward(buf616, relu_56, primals_171, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_171
        buf618 = buf617[0]
        buf623 = buf609; del buf609  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_56, buf618, primals_534, primals_169, buf623, 100352, grid=grid(100352), stream=stream0)
        del primals_169
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf624 = aten.convolution_backward(buf623, relu_55, primals_168, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_168
        buf625 = buf624[0]
        buf330 = buf616; del buf616  # reuse
        buf380 = buf330; del buf330  # reuse
        buf428 = buf380; del buf380  # reuse
        buf474 = buf428; del buf428  # reuse
        buf518 = buf474; del buf474  # reuse
        buf560 = buf518; del buf518  # reuse
        buf600 = buf560; del buf560  # reuse
        buf638 = buf600; del buf600  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_61.run(buf638, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, relu_55, buf625, primals_531, primals_166, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf639 = aten.convolution_backward(buf638, relu_54, primals_165, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_165
        buf640 = buf639[0]
        buf645 = buf623; del buf623  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_54, buf640, primals_528, primals_163, buf645, 100352, grid=grid(100352), stream=stream0)
        del primals_163
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf646 = aten.convolution_backward(buf645, relu_53, primals_162, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_162
        buf647 = buf646[0]
        buf329 = buf638; del buf638  # reuse
        buf379 = buf329; del buf329  # reuse
        buf427 = buf379; del buf379  # reuse
        buf473 = buf427; del buf427  # reuse
        buf517 = buf473; del buf473  # reuse
        buf559 = buf517; del buf517  # reuse
        buf599 = buf559; del buf559  # reuse
        buf637 = buf599; del buf599  # reuse
        buf652 = buf637; del buf637  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_62.run(buf652, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, relu_55, buf625, primals_531, primals_166, relu_53, buf647, primals_525, primals_160, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf653 = aten.convolution_backward(buf652, relu_52, primals_159, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_159
        buf654 = buf653[0]
        buf659 = buf645; del buf645  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_52, buf654, primals_522, primals_157, buf659, 100352, grid=grid(100352), stream=stream0)
        del primals_157
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf660 = aten.convolution_backward(buf659, relu_51, primals_156, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_156
        buf661 = buf660[0]
        buf328 = buf652; del buf652  # reuse
        buf378 = buf328; del buf328  # reuse
        buf426 = buf378; del buf378  # reuse
        buf472 = buf426; del buf426  # reuse
        buf516 = buf472; del buf472  # reuse
        buf558 = buf516; del buf516  # reuse
        buf598 = buf558; del buf558  # reuse
        buf636 = buf598; del buf598  # reuse
        buf672 = buf636; del buf636  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_63.run(buf672, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, relu_55, buf625, primals_531, primals_166, relu_53, buf647, primals_525, primals_160, relu_51, buf661, primals_519, primals_154, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf673 = aten.convolution_backward(buf672, relu_50, primals_153, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_153
        buf674 = buf673[0]
        buf679 = buf659; del buf659  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_50, buf674, primals_516, primals_151, buf679, 100352, grid=grid(100352), stream=stream0)
        del primals_151
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf680 = aten.convolution_backward(buf679, relu_49, primals_150, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_150
        buf681 = buf680[0]
        buf327 = buf672; del buf672  # reuse
        buf377 = buf327; del buf327  # reuse
        buf425 = buf377; del buf377  # reuse
        buf471 = buf425; del buf425  # reuse
        buf515 = buf471; del buf471  # reuse
        buf557 = buf515; del buf515  # reuse
        buf597 = buf557; del buf557  # reuse
        buf635 = buf597; del buf597  # reuse
        buf671 = buf635; del buf635  # reuse
        buf686 = buf671; del buf671  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_64.run(buf686, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, relu_55, buf625, primals_531, primals_166, relu_53, buf647, primals_525, primals_160, relu_51, buf661, primals_519, primals_154, relu_49, buf681, primals_513, primals_148, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf687 = aten.convolution_backward(buf686, relu_48, primals_147, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_147
        buf688 = buf687[0]
        buf693 = buf679; del buf679  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_48, buf688, primals_510, primals_145, buf693, 100352, grid=grid(100352), stream=stream0)
        del primals_145
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf694 = aten.convolution_backward(buf693, relu_47, primals_144, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_144
        buf695 = buf694[0]
        buf326 = buf686; del buf686  # reuse
        buf376 = buf326; del buf326  # reuse
        buf424 = buf376; del buf376  # reuse
        buf470 = buf424; del buf424  # reuse
        buf514 = buf470; del buf470  # reuse
        buf556 = buf514; del buf514  # reuse
        buf596 = buf556; del buf556  # reuse
        buf634 = buf596; del buf596  # reuse
        buf670 = buf634; del buf634  # reuse
        buf704 = buf670; del buf670  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_65.run(buf704, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, relu_55, buf625, primals_531, primals_166, relu_53, buf647, primals_525, primals_160, relu_51, buf661, primals_519, primals_154, relu_49, buf681, primals_513, primals_148, relu_47, buf695, primals_507, primals_142, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf705 = aten.convolution_backward(buf704, relu_46, primals_141, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_141
        buf706 = buf705[0]
        buf711 = buf693; del buf693  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_46, buf706, primals_504, primals_139, buf711, 100352, grid=grid(100352), stream=stream0)
        del primals_139
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf712 = aten.convolution_backward(buf711, relu_45, primals_138, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_138
        buf713 = buf712[0]
        buf325 = buf704; del buf704  # reuse
        buf375 = buf325; del buf325  # reuse
        buf423 = buf375; del buf375  # reuse
        buf469 = buf423; del buf423  # reuse
        buf513 = buf469; del buf469  # reuse
        buf555 = buf513; del buf513  # reuse
        buf595 = buf555; del buf555  # reuse
        buf633 = buf595; del buf595  # reuse
        buf669 = buf633; del buf633  # reuse
        buf703 = buf669; del buf669  # reuse
        buf718 = buf703; del buf703  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_66.run(buf718, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, relu_55, buf625, primals_531, primals_166, relu_53, buf647, primals_525, primals_160, relu_51, buf661, primals_519, primals_154, relu_49, buf681, primals_513, primals_148, relu_47, buf695, primals_507, primals_142, relu_45, buf713, primals_501, primals_136, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf719 = aten.convolution_backward(buf718, relu_44, primals_135, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_135
        buf720 = buf719[0]
        buf725 = buf711; del buf711  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_44, buf720, primals_498, primals_133, buf725, 100352, grid=grid(100352), stream=stream0)
        del primals_133
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf726 = aten.convolution_backward(buf725, relu_43, primals_132, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_132
        buf727 = buf726[0]
        buf324 = buf718; del buf718  # reuse
        buf374 = buf324; del buf324  # reuse
        buf422 = buf374; del buf374  # reuse
        buf468 = buf422; del buf422  # reuse
        buf512 = buf468; del buf468  # reuse
        buf554 = buf512; del buf512  # reuse
        buf594 = buf554; del buf554  # reuse
        buf632 = buf594; del buf594  # reuse
        buf668 = buf632; del buf632  # reuse
        buf702 = buf668; del buf668  # reuse
        buf734 = buf702; del buf702  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_67.run(buf734, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, relu_55, buf625, primals_531, primals_166, relu_53, buf647, primals_525, primals_160, relu_51, buf661, primals_519, primals_154, relu_49, buf681, primals_513, primals_148, relu_47, buf695, primals_507, primals_142, relu_45, buf713, primals_501, primals_136, relu_43, buf727, primals_495, primals_130, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf735 = aten.convolution_backward(buf734, relu_42, primals_129, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_129
        buf736 = buf735[0]
        buf741 = buf725; del buf725  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_42, buf736, primals_492, primals_127, buf741, 100352, grid=grid(100352), stream=stream0)
        del primals_127
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf742 = aten.convolution_backward(buf741, relu_41, primals_126, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_126
        buf743 = buf742[0]
        buf323 = buf734; del buf734  # reuse
        buf373 = buf323; del buf323  # reuse
        buf421 = buf373; del buf373  # reuse
        buf467 = buf421; del buf421  # reuse
        buf511 = buf467; del buf467  # reuse
        buf553 = buf511; del buf511  # reuse
        buf593 = buf553; del buf553  # reuse
        buf631 = buf593; del buf593  # reuse
        buf667 = buf631; del buf631  # reuse
        buf701 = buf667; del buf667  # reuse
        buf733 = buf701; del buf701  # reuse
        buf748 = buf733; del buf733  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_68.run(buf748, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, relu_55, buf625, primals_531, primals_166, relu_53, buf647, primals_525, primals_160, relu_51, buf661, primals_519, primals_154, relu_49, buf681, primals_513, primals_148, relu_47, buf695, primals_507, primals_142, relu_45, buf713, primals_501, primals_136, relu_43, buf727, primals_495, primals_130, relu_41, buf743, primals_489, primals_124, 25088, grid=grid(25088), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf749 = aten.convolution_backward(buf748, relu_40, primals_123, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf748
        del primals_123
        buf750 = buf749[0]
        buf755 = buf741; del buf741  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_47.run(relu_40, buf750, primals_486, primals_121, buf755, 100352, grid=grid(100352), stream=stream0)
        del primals_121
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf756 = aten.convolution_backward(buf755, relu_39, primals_120, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf755
        del primals_120
        buf757 = buf756[0]
        buf322 = empty((4, 256, 14, 14), device='cuda', dtype=torch.float32)
        buf372 = buf322; del buf322  # reuse
        buf420 = buf372; del buf372  # reuse
        buf466 = buf420; del buf420  # reuse
        buf510 = buf466; del buf466  # reuse
        buf552 = buf510; del buf510  # reuse
        buf592 = buf552; del buf552  # reuse
        buf630 = buf592; del buf592  # reuse
        buf666 = buf630; del buf630  # reuse
        buf700 = buf666; del buf666  # reuse
        buf732 = buf700; del buf700  # reuse
        buf762 = buf732; del buf732  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.native_batch_norm_backward, aten.slice, aten.threshold_backward]
        triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_69.run(buf762, relu_87, buf289, primals_627, primals_262, relu_85, buf303, primals_621, primals_256, relu_83, buf317, primals_615, primals_250, relu_81, buf353, primals_609, primals_244, relu_79, buf367, primals_603, primals_238, relu_77, buf401, primals_597, primals_232, relu_75, buf415, primals_591, primals_226, relu_73, buf447, primals_585, primals_220, relu_71, buf461, primals_579, primals_214, relu_69, buf491, primals_573, primals_208, relu_67, buf505, primals_567, primals_202, relu_65, buf533, primals_561, primals_196, relu_63, buf547, primals_555, primals_190, relu_61, buf573, primals_549, primals_184, relu_59, buf587, primals_543, primals_178, relu_57, buf611, primals_537, primals_172, relu_55, buf625, primals_531, primals_166, relu_53, buf647, primals_525, primals_160, relu_51, buf661, primals_519, primals_154, relu_49, buf681, primals_513, primals_148, relu_47, buf695, primals_507, primals_142, relu_45, buf713, primals_501, primals_136, relu_43, buf727, primals_495, primals_130, relu_41, buf743, primals_489, primals_124, relu_39, buf757, primals_483, primals_118, 200704, grid=grid(200704), stream=stream0)
        del buf303
        del buf317
        del primals_118
        del primals_124
        del primals_130
        del primals_136
        del primals_142
        del primals_148
        del primals_154
        del primals_160
        del primals_166
        del primals_172
        del primals_178
        del primals_184
        del primals_190
        del primals_196
        del primals_202
        del primals_208
        del primals_214
        del primals_220
        del primals_226
        del primals_232
        del primals_238
        del primals_244
        del primals_250
        del primals_256
        del primals_262
        del primals_615
        del primals_621
        del primals_627
        del relu_83
        del relu_85
        del relu_87
        buf347 = buf345[1]
        del buf345
        buf348 = empty((128, ), device='cuda', dtype=torch.float32)
        buf349 = empty((128, ), device='cuda', dtype=torch.float32)
        buf350 = buf349; del buf349  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf350, relu_82, buf346, convolution_81, primals_611, primals_612, buf348, 128, 784, grid=grid(128), stream=stream0)
        del buf346
        del convolution_81
        del primals_611
        del primals_612
        del relu_82
        buf354 = buf352[1]
        del buf352
        buf355 = empty((928, ), device='cuda', dtype=torch.float32)
        buf356 = empty((928, ), device='cuda', dtype=torch.float32)
        buf357 = buf356; del buf356  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_70.run(buf357, relu_81, buf353, cat_38, primals_608, primals_609, buf355, 928, 784, grid=grid(928), stream=stream0)
        del buf353
        del cat_38
        del primals_608
        del primals_609
        del relu_81
        buf361 = buf359[1]
        del buf359
        buf362 = empty((128, ), device='cuda', dtype=torch.float32)
        buf363 = empty((128, ), device='cuda', dtype=torch.float32)
        buf364 = buf363; del buf363  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf364, relu_80, buf360, convolution_79, primals_605, primals_606, buf362, 128, 784, grid=grid(128), stream=stream0)
        del buf360
        del convolution_79
        del primals_605
        del primals_606
        del relu_80
        buf368 = buf366[1]
        del buf366
        buf369 = empty((896, ), device='cuda', dtype=torch.float32)
        buf370 = empty((896, ), device='cuda', dtype=torch.float32)
        buf371 = buf370; del buf370  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_71.run(buf371, relu_79, buf367, cat_37, primals_602, primals_603, buf369, 896, 784, grid=grid(896), stream=stream0)
        del buf367
        del cat_37
        del primals_602
        del primals_603
        del relu_79
        buf395 = buf393[1]
        del buf393
        buf396 = empty((128, ), device='cuda', dtype=torch.float32)
        buf397 = empty((128, ), device='cuda', dtype=torch.float32)
        buf398 = buf397; del buf397  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf398, relu_78, buf394, convolution_77, primals_599, primals_600, buf396, 128, 784, grid=grid(128), stream=stream0)
        del buf394
        del convolution_77
        del primals_599
        del primals_600
        del relu_78
        buf402 = buf400[1]
        del buf400
        buf403 = empty((864, ), device='cuda', dtype=torch.float32)
        buf404 = empty((864, ), device='cuda', dtype=torch.float32)
        buf405 = buf404; del buf404  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_72.run(buf405, relu_77, buf401, cat_36, primals_596, primals_597, buf403, 864, 784, grid=grid(864), stream=stream0)
        del buf401
        del cat_36
        del primals_596
        del primals_597
        del relu_77
        buf409 = buf407[1]
        del buf407
        buf410 = empty((128, ), device='cuda', dtype=torch.float32)
        buf411 = empty((128, ), device='cuda', dtype=torch.float32)
        buf412 = buf411; del buf411  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf412, relu_76, buf408, convolution_75, primals_593, primals_594, buf410, 128, 784, grid=grid(128), stream=stream0)
        del buf408
        del convolution_75
        del primals_593
        del primals_594
        del relu_76
        buf416 = buf414[1]
        del buf414
        buf417 = empty((832, ), device='cuda', dtype=torch.float32)
        buf418 = empty((832, ), device='cuda', dtype=torch.float32)
        buf419 = buf418; del buf418  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_73.run(buf419, relu_75, buf415, cat_35, primals_590, primals_591, buf417, 832, 784, grid=grid(832), stream=stream0)
        del buf415
        del cat_35
        del primals_590
        del primals_591
        del relu_75
        buf441 = buf439[1]
        del buf439
        buf442 = empty((128, ), device='cuda', dtype=torch.float32)
        buf443 = empty((128, ), device='cuda', dtype=torch.float32)
        buf444 = buf443; del buf443  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf444, relu_74, buf440, convolution_73, primals_587, primals_588, buf442, 128, 784, grid=grid(128), stream=stream0)
        del buf440
        del convolution_73
        del primals_587
        del primals_588
        del relu_74
        buf448 = buf446[1]
        del buf446
        buf449 = empty((800, ), device='cuda', dtype=torch.float32)
        buf450 = empty((800, ), device='cuda', dtype=torch.float32)
        buf451 = buf450; del buf450  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_74.run(buf451, relu_73, buf447, cat_34, primals_584, primals_585, buf449, 800, 784, grid=grid(800), stream=stream0)
        del buf447
        del cat_34
        del primals_584
        del primals_585
        del relu_73
        buf455 = buf453[1]
        del buf453
        buf456 = empty((128, ), device='cuda', dtype=torch.float32)
        buf457 = empty((128, ), device='cuda', dtype=torch.float32)
        buf458 = buf457; del buf457  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf458, relu_72, buf454, convolution_71, primals_581, primals_582, buf456, 128, 784, grid=grid(128), stream=stream0)
        del buf454
        del convolution_71
        del primals_581
        del primals_582
        del relu_72
        buf462 = buf460[1]
        del buf460
        buf463 = empty((768, ), device='cuda', dtype=torch.float32)
        buf464 = empty((768, ), device='cuda', dtype=torch.float32)
        buf465 = buf464; del buf464  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_75.run(buf465, relu_71, buf461, cat_33, primals_578, primals_579, buf463, 768, 784, grid=grid(768), stream=stream0)
        del buf461
        del cat_33
        del primals_578
        del primals_579
        del relu_71
        buf485 = buf483[1]
        del buf483
        buf486 = empty((128, ), device='cuda', dtype=torch.float32)
        buf487 = empty((128, ), device='cuda', dtype=torch.float32)
        buf488 = buf487; del buf487  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf488, relu_70, buf484, convolution_69, primals_575, primals_576, buf486, 128, 784, grid=grid(128), stream=stream0)
        del buf484
        del convolution_69
        del primals_575
        del primals_576
        del relu_70
        buf492 = buf490[1]
        del buf490
        buf493 = empty((736, ), device='cuda', dtype=torch.float32)
        buf494 = empty((736, ), device='cuda', dtype=torch.float32)
        buf495 = buf494; del buf494  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_76.run(buf495, relu_69, buf491, cat_32, primals_572, primals_573, buf493, 736, 784, grid=grid(736), stream=stream0)
        del buf491
        del cat_32
        del primals_572
        del primals_573
        del relu_69
        buf499 = buf497[1]
        del buf497
        buf500 = empty((128, ), device='cuda', dtype=torch.float32)
        buf501 = empty((128, ), device='cuda', dtype=torch.float32)
        buf502 = buf501; del buf501  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf502, relu_68, buf498, convolution_67, primals_569, primals_570, buf500, 128, 784, grid=grid(128), stream=stream0)
        del buf498
        del convolution_67
        del primals_569
        del primals_570
        del relu_68
        buf506 = buf504[1]
        del buf504
        buf507 = empty((704, ), device='cuda', dtype=torch.float32)
        buf508 = empty((704, ), device='cuda', dtype=torch.float32)
        buf509 = buf508; del buf508  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_77.run(buf509, relu_67, buf505, cat_31, primals_566, primals_567, buf507, 704, 784, grid=grid(704), stream=stream0)
        del buf505
        del cat_31
        del primals_566
        del primals_567
        del relu_67
        buf527 = buf525[1]
        del buf525
        buf528 = empty((128, ), device='cuda', dtype=torch.float32)
        buf529 = empty((128, ), device='cuda', dtype=torch.float32)
        buf530 = buf529; del buf529  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf530, relu_66, buf526, convolution_65, primals_563, primals_564, buf528, 128, 784, grid=grid(128), stream=stream0)
        del buf526
        del convolution_65
        del primals_563
        del primals_564
        del relu_66
        buf534 = buf532[1]
        del buf532
        buf535 = empty((672, ), device='cuda', dtype=torch.float32)
        buf536 = empty((672, ), device='cuda', dtype=torch.float32)
        buf537 = buf536; del buf536  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_78.run(buf537, relu_65, buf533, cat_30, primals_560, primals_561, buf535, 672, 784, grid=grid(672), stream=stream0)
        del buf533
        del cat_30
        del primals_560
        del primals_561
        del relu_65
        buf541 = buf539[1]
        del buf539
        buf542 = empty((128, ), device='cuda', dtype=torch.float32)
        buf543 = empty((128, ), device='cuda', dtype=torch.float32)
        buf544 = buf543; del buf543  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf544, relu_64, buf540, convolution_63, primals_557, primals_558, buf542, 128, 784, grid=grid(128), stream=stream0)
        del buf540
        del convolution_63
        del primals_557
        del primals_558
        del relu_64
        buf548 = buf546[1]
        del buf546
        buf549 = empty((640, ), device='cuda', dtype=torch.float32)
        buf550 = empty((640, ), device='cuda', dtype=torch.float32)
        buf551 = buf550; del buf550  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_79.run(buf551, relu_63, buf547, cat_29, primals_554, primals_555, buf549, 640, 784, grid=grid(640), stream=stream0)
        del buf547
        del cat_29
        del primals_554
        del primals_555
        del relu_63
        buf567 = buf565[1]
        del buf565
        buf568 = empty((128, ), device='cuda', dtype=torch.float32)
        buf569 = empty((128, ), device='cuda', dtype=torch.float32)
        buf570 = buf569; del buf569  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf570, relu_62, buf566, convolution_61, primals_551, primals_552, buf568, 128, 784, grid=grid(128), stream=stream0)
        del buf566
        del convolution_61
        del primals_551
        del primals_552
        del relu_62
        buf574 = buf572[1]
        del buf572
        buf575 = empty((608, ), device='cuda', dtype=torch.float32)
        buf576 = empty((608, ), device='cuda', dtype=torch.float32)
        buf577 = buf576; del buf576  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_80.run(buf577, relu_61, buf573, cat_28, primals_548, primals_549, buf575, 608, 784, grid=grid(608), stream=stream0)
        del buf573
        del cat_28
        del primals_548
        del primals_549
        del relu_61
        buf581 = buf579[1]
        del buf579
        buf582 = empty((128, ), device='cuda', dtype=torch.float32)
        buf583 = empty((128, ), device='cuda', dtype=torch.float32)
        buf584 = buf583; del buf583  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf584, relu_60, buf580, convolution_59, primals_545, primals_546, buf582, 128, 784, grid=grid(128), stream=stream0)
        del buf580
        del convolution_59
        del primals_545
        del primals_546
        del relu_60
        buf588 = buf586[1]
        del buf586
        buf589 = empty((576, ), device='cuda', dtype=torch.float32)
        buf590 = empty((576, ), device='cuda', dtype=torch.float32)
        buf591 = buf590; del buf590  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_81.run(buf591, relu_59, buf587, cat_27, primals_542, primals_543, buf589, 576, 784, grid=grid(576), stream=stream0)
        del buf587
        del cat_27
        del primals_542
        del primals_543
        del relu_59
        buf605 = buf603[1]
        del buf603
        buf606 = empty((128, ), device='cuda', dtype=torch.float32)
        buf607 = empty((128, ), device='cuda', dtype=torch.float32)
        buf608 = buf607; del buf607  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf608, relu_58, buf604, convolution_57, primals_539, primals_540, buf606, 128, 784, grid=grid(128), stream=stream0)
        del buf604
        del convolution_57
        del primals_539
        del primals_540
        del relu_58
        buf612 = buf610[1]
        del buf610
        buf613 = empty((544, ), device='cuda', dtype=torch.float32)
        buf614 = empty((544, ), device='cuda', dtype=torch.float32)
        buf615 = buf614; del buf614  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_82.run(buf615, relu_57, buf611, cat_26, primals_536, primals_537, buf613, 544, 784, grid=grid(544), stream=stream0)
        del buf611
        del cat_26
        del primals_536
        del primals_537
        del relu_57
        buf619 = buf617[1]
        del buf617
        buf620 = empty((128, ), device='cuda', dtype=torch.float32)
        buf621 = empty((128, ), device='cuda', dtype=torch.float32)
        buf622 = buf621; del buf621  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf622, relu_56, buf618, convolution_55, primals_533, primals_534, buf620, 128, 784, grid=grid(128), stream=stream0)
        del buf618
        del convolution_55
        del primals_533
        del primals_534
        del relu_56
        buf626 = buf624[1]
        del buf624
        buf627 = empty((512, ), device='cuda', dtype=torch.float32)
        buf628 = empty((512, ), device='cuda', dtype=torch.float32)
        buf629 = buf628; del buf628  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_83.run(buf629, relu_55, buf625, cat_25, primals_530, primals_531, buf627, 512, 784, grid=grid(512), stream=stream0)
        del buf625
        del cat_25
        del primals_530
        del primals_531
        del relu_55
        buf641 = buf639[1]
        del buf639
        buf642 = empty((128, ), device='cuda', dtype=torch.float32)
        buf643 = empty((128, ), device='cuda', dtype=torch.float32)
        buf644 = buf643; del buf643  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf644, relu_54, buf640, convolution_53, primals_527, primals_528, buf642, 128, 784, grid=grid(128), stream=stream0)
        del buf640
        del convolution_53
        del primals_527
        del primals_528
        del relu_54
        buf648 = buf646[1]
        del buf646
        buf649 = empty((480, ), device='cuda', dtype=torch.float32)
        buf650 = empty((480, ), device='cuda', dtype=torch.float32)
        buf651 = buf650; del buf650  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_84.run(buf651, relu_53, buf647, cat_24, primals_524, primals_525, buf649, 480, 784, grid=grid(480), stream=stream0)
        del buf647
        del cat_24
        del primals_524
        del primals_525
        del relu_53
        buf655 = buf653[1]
        del buf653
        buf656 = empty((128, ), device='cuda', dtype=torch.float32)
        buf657 = empty((128, ), device='cuda', dtype=torch.float32)
        buf658 = buf657; del buf657  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf658, relu_52, buf654, convolution_51, primals_521, primals_522, buf656, 128, 784, grid=grid(128), stream=stream0)
        del buf654
        del convolution_51
        del primals_521
        del primals_522
        del relu_52
        buf662 = buf660[1]
        del buf660
        buf663 = empty((448, ), device='cuda', dtype=torch.float32)
        buf664 = empty((448, ), device='cuda', dtype=torch.float32)
        buf665 = buf664; del buf664  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_85.run(buf665, relu_51, buf661, cat_23, primals_518, primals_519, buf663, 448, 784, grid=grid(448), stream=stream0)
        del buf661
        del cat_23
        del primals_518
        del primals_519
        del relu_51
        buf675 = buf673[1]
        del buf673
        buf676 = empty((128, ), device='cuda', dtype=torch.float32)
        buf677 = empty((128, ), device='cuda', dtype=torch.float32)
        buf678 = buf677; del buf677  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf678, relu_50, buf674, convolution_49, primals_515, primals_516, buf676, 128, 784, grid=grid(128), stream=stream0)
        del buf674
        del convolution_49
        del primals_515
        del primals_516
        del relu_50
        buf682 = buf680[1]
        del buf680
        buf683 = empty((416, ), device='cuda', dtype=torch.float32)
        buf684 = empty((416, ), device='cuda', dtype=torch.float32)
        buf685 = buf684; del buf684  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_86.run(buf685, relu_49, buf681, cat_22, primals_512, primals_513, buf683, 416, 784, grid=grid(416), stream=stream0)
        del buf681
        del cat_22
        del primals_512
        del primals_513
        del relu_49
        buf689 = buf687[1]
        del buf687
        buf690 = empty((128, ), device='cuda', dtype=torch.float32)
        buf691 = empty((128, ), device='cuda', dtype=torch.float32)
        buf692 = buf691; del buf691  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf692, relu_48, buf688, convolution_47, primals_509, primals_510, buf690, 128, 784, grid=grid(128), stream=stream0)
        del buf688
        del convolution_47
        del primals_509
        del primals_510
        del relu_48
        buf696 = buf694[1]
        del buf694
        buf697 = empty((384, ), device='cuda', dtype=torch.float32)
        buf698 = empty((384, ), device='cuda', dtype=torch.float32)
        buf699 = buf698; del buf698  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_87.run(buf699, relu_47, buf695, cat_21, primals_506, primals_507, buf697, 384, 784, grid=grid(384), stream=stream0)
        del buf695
        del cat_21
        del primals_506
        del primals_507
        del relu_47
        buf707 = buf705[1]
        del buf705
        buf708 = empty((128, ), device='cuda', dtype=torch.float32)
        buf709 = empty((128, ), device='cuda', dtype=torch.float32)
        buf710 = buf709; del buf709  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf710, relu_46, buf706, convolution_45, primals_503, primals_504, buf708, 128, 784, grid=grid(128), stream=stream0)
        del buf706
        del convolution_45
        del primals_503
        del primals_504
        del relu_46
        buf714 = buf712[1]
        del buf712
        buf715 = empty((352, ), device='cuda', dtype=torch.float32)
        buf716 = empty((352, ), device='cuda', dtype=torch.float32)
        buf717 = buf716; del buf716  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_88.run(buf717, relu_45, buf713, cat_20, primals_500, primals_501, buf715, 352, 784, grid=grid(352), stream=stream0)
        del buf713
        del cat_20
        del primals_500
        del primals_501
        del relu_45
        buf721 = buf719[1]
        del buf719
        buf722 = empty((128, ), device='cuda', dtype=torch.float32)
        buf723 = empty((128, ), device='cuda', dtype=torch.float32)
        buf724 = buf723; del buf723  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf724, relu_44, buf720, convolution_43, primals_497, primals_498, buf722, 128, 784, grid=grid(128), stream=stream0)
        del buf720
        del convolution_43
        del primals_497
        del primals_498
        del relu_44
        buf728 = buf726[1]
        del buf726
        buf729 = empty((320, ), device='cuda', dtype=torch.float32)
        buf730 = empty((320, ), device='cuda', dtype=torch.float32)
        buf731 = buf730; del buf730  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_89.run(buf731, relu_43, buf727, cat_19, primals_494, primals_495, buf729, 320, 784, grid=grid(320), stream=stream0)
        del buf727
        del cat_19
        del primals_494
        del primals_495
        del relu_43
        buf737 = buf735[1]
        del buf735
        buf738 = empty((128, ), device='cuda', dtype=torch.float32)
        buf739 = empty((128, ), device='cuda', dtype=torch.float32)
        buf740 = buf739; del buf739  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf740, relu_42, buf736, convolution_41, primals_491, primals_492, buf738, 128, 784, grid=grid(128), stream=stream0)
        del buf736
        del convolution_41
        del primals_491
        del primals_492
        del relu_42
        buf744 = buf742[1]
        del buf742
        buf745 = empty((288, ), device='cuda', dtype=torch.float32)
        buf746 = empty((288, ), device='cuda', dtype=torch.float32)
        buf747 = buf746; del buf746  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_90.run(buf747, relu_41, buf743, cat_18, primals_488, primals_489, buf745, 288, 784, grid=grid(288), stream=stream0)
        del buf743
        del cat_18
        del primals_488
        del primals_489
        del relu_41
        buf751 = buf749[1]
        del buf749
        buf752 = empty((128, ), device='cuda', dtype=torch.float32)
        buf753 = empty((128, ), device='cuda', dtype=torch.float32)
        buf754 = buf753; del buf753  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_41.run(buf754, relu_40, buf750, convolution_39, primals_485, primals_486, buf752, 128, 784, grid=grid(128), stream=stream0)
        del convolution_39
        del primals_485
        del primals_486
        del relu_40
        buf758 = buf756[1]
        del buf756
        buf759 = empty((256, ), device='cuda', dtype=torch.float32)
        buf760 = empty((256, ), device='cuda', dtype=torch.float32)
        buf761 = buf760; del buf760  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_91.run(buf761, relu_39, buf757, avg_pool2d_1, primals_482, primals_483, buf759, 256, 784, grid=grid(256), stream=stream0)
        del avg_pool2d_1
        del buf757
        del primals_482
        del primals_483
        del relu_39
        buf763 = reinterpret_tensor(buf289, (4, 256, 28, 28), (200704, 784, 28, 1), 0); del buf289  # reuse
        # Source Nodes: [], Original ATen: [aten.avg_pool2d_backward, aten.convolution_backward]
        triton_poi_fused_avg_pool2d_backward_convolution_backward_92.run(buf762, buf763, 802816, grid=grid(802816), stream=stream0)
        del buf762
        # Source Nodes: [], Original ATen: [aten.avg_pool2d_backward, aten.convolution_backward]
        buf764 = aten.convolution_backward(buf763, relu_38, primals_117, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf763
        del primals_117
        buf765 = buf764[0]
        buf766 = buf764[1]
        del buf764
        buf767 = empty((512, ), device='cuda', dtype=torch.float32)
        buf768 = empty((512, ), device='cuda', dtype=torch.float32)
        buf769 = buf768; del buf768  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_93.run(buf769, relu_38, buf765, cat_17, primals_479, primals_480, buf767, 512, 3136, grid=grid(512), stream=stream0)
        del cat_17
        del primals_479
        buf770 = reinterpret_tensor(buf750, (4, 32, 28, 28), (25088, 784, 28, 1), 0); del buf750  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        triton_poi_fused_convolution_backward_94.run(relu_38, buf765, primals_480, primals_115, buf770, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf771 = aten.convolution_backward(buf770, relu_37, primals_114, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_114
        buf772 = buf771[0]
        buf773 = buf771[1]
        del buf771
        buf774 = empty((128, ), device='cuda', dtype=torch.float32)
        buf775 = empty((128, ), device='cuda', dtype=torch.float32)
        buf776 = buf775; del buf775  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf776, relu_37, buf772, convolution_36, primals_476, primals_477, buf774, 128, 3136, grid=grid(128), stream=stream0)
        del convolution_36
        del primals_476
        buf777 = buf772; del buf772  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_96.run(buf777, relu_37, primals_477, primals_112, 401408, grid=grid(401408), stream=stream0)
        del primals_112
        del primals_477
        del relu_37
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf778 = aten.convolution_backward(buf777, relu_36, primals_111, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf777
        del primals_111
        buf779 = buf778[0]
        buf780 = buf778[1]
        del buf778
        buf781 = empty((480, ), device='cuda', dtype=torch.float32)
        buf782 = empty((480, ), device='cuda', dtype=torch.float32)
        buf783 = buf782; del buf782  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_97.run(buf783, relu_36, buf779, cat_16, primals_473, primals_474, buf781, 480, 3136, grid=grid(480), stream=stream0)
        del cat_16
        del primals_473
        buf784 = buf770; del buf770  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_98.run(relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, buf784, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf785 = aten.convolution_backward(buf784, relu_35, primals_108, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_108
        buf786 = buf785[0]
        buf787 = buf785[1]
        del buf785
        buf788 = empty((128, ), device='cuda', dtype=torch.float32)
        buf789 = empty((128, ), device='cuda', dtype=torch.float32)
        buf790 = buf789; del buf789  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf790, relu_35, buf786, convolution_34, primals_470, primals_471, buf788, 128, 3136, grid=grid(128), stream=stream0)
        del convolution_34
        del primals_470
        buf791 = buf786; del buf786  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_96.run(buf791, relu_35, primals_471, primals_106, 401408, grid=grid(401408), stream=stream0)
        del primals_106
        del primals_471
        del relu_35
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf792 = aten.convolution_backward(buf791, relu_34, primals_105, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_105
        buf793 = buf792[0]
        buf794 = buf792[1]
        del buf792
        buf795 = empty((448, ), device='cuda', dtype=torch.float32)
        buf796 = empty((448, ), device='cuda', dtype=torch.float32)
        buf797 = buf796; del buf796  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_99.run(buf797, relu_34, buf793, cat_15, primals_467, primals_468, buf795, 448, 3136, grid=grid(448), stream=stream0)
        del cat_15
        del primals_467
        buf808 = buf784; del buf784  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_100.run(relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, buf808, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf809 = aten.convolution_backward(buf808, relu_33, primals_102, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_102
        buf810 = buf809[0]
        buf815 = buf791; del buf791  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_33, buf810, primals_465, primals_100, buf815, 401408, grid=grid(401408), stream=stream0)
        del primals_100
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf816 = aten.convolution_backward(buf815, relu_32, primals_99, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_99
        buf817 = buf816[0]
        buf807 = buf808; del buf808  # reuse
        buf822 = buf807; del buf807  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_102.run(buf822, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf823 = aten.convolution_backward(buf822, relu_31, primals_96, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_96
        buf824 = buf823[0]
        buf829 = buf815; del buf815  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_31, buf824, primals_459, primals_94, buf829, 401408, grid=grid(401408), stream=stream0)
        del primals_94
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf830 = aten.convolution_backward(buf829, relu_30, primals_93, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_93
        buf831 = buf830[0]
        buf806 = buf822; del buf822  # reuse
        buf844 = buf806; del buf806  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_103.run(buf844, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, relu_30, buf831, primals_456, primals_91, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf845 = aten.convolution_backward(buf844, relu_29, primals_90, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_90
        buf846 = buf845[0]
        buf851 = buf829; del buf829  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_29, buf846, primals_453, primals_88, buf851, 401408, grid=grid(401408), stream=stream0)
        del primals_88
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf852 = aten.convolution_backward(buf851, relu_28, primals_87, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_87
        buf853 = buf852[0]
        buf805 = buf844; del buf844  # reuse
        buf843 = buf805; del buf805  # reuse
        buf858 = buf843; del buf843  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_104.run(buf858, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, relu_30, buf831, primals_456, primals_91, relu_28, buf853, primals_450, primals_85, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf859 = aten.convolution_backward(buf858, relu_27, primals_84, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_84
        buf860 = buf859[0]
        buf865 = buf851; del buf851  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_27, buf860, primals_447, primals_82, buf865, 401408, grid=grid(401408), stream=stream0)
        del primals_82
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf866 = aten.convolution_backward(buf865, relu_26, primals_81, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_81
        buf867 = buf866[0]
        buf804 = buf858; del buf858  # reuse
        buf842 = buf804; del buf804  # reuse
        buf878 = buf842; del buf842  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_105.run(buf878, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, relu_30, buf831, primals_456, primals_91, relu_28, buf853, primals_450, primals_85, relu_26, buf867, primals_444, primals_79, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf879 = aten.convolution_backward(buf878, relu_25, primals_78, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_78
        buf880 = buf879[0]
        buf885 = buf865; del buf865  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_25, buf880, primals_441, primals_76, buf885, 401408, grid=grid(401408), stream=stream0)
        del primals_76
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf886 = aten.convolution_backward(buf885, relu_24, primals_75, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_75
        buf887 = buf886[0]
        buf803 = buf878; del buf878  # reuse
        buf841 = buf803; del buf803  # reuse
        buf877 = buf841; del buf841  # reuse
        buf892 = buf877; del buf877  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_106.run(buf892, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, relu_30, buf831, primals_456, primals_91, relu_28, buf853, primals_450, primals_85, relu_26, buf867, primals_444, primals_79, relu_24, buf887, primals_438, primals_73, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf893 = aten.convolution_backward(buf892, relu_23, primals_72, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_72
        buf894 = buf893[0]
        buf899 = buf885; del buf885  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_23, buf894, primals_435, primals_70, buf899, 401408, grid=grid(401408), stream=stream0)
        del primals_70
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf900 = aten.convolution_backward(buf899, relu_22, primals_69, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_69
        buf901 = buf900[0]
        buf802 = buf892; del buf892  # reuse
        buf840 = buf802; del buf802  # reuse
        buf876 = buf840; del buf840  # reuse
        buf910 = buf876; del buf876  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_107.run(buf910, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, relu_30, buf831, primals_456, primals_91, relu_28, buf853, primals_450, primals_85, relu_26, buf867, primals_444, primals_79, relu_24, buf887, primals_438, primals_73, relu_22, buf901, primals_432, primals_67, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf911 = aten.convolution_backward(buf910, relu_21, primals_66, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_66
        buf912 = buf911[0]
        buf917 = buf899; del buf899  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_21, buf912, primals_429, primals_64, buf917, 401408, grid=grid(401408), stream=stream0)
        del primals_64
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf918 = aten.convolution_backward(buf917, relu_20, primals_63, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_63
        buf919 = buf918[0]
        buf801 = buf910; del buf910  # reuse
        buf839 = buf801; del buf801  # reuse
        buf875 = buf839; del buf839  # reuse
        buf909 = buf875; del buf875  # reuse
        buf924 = buf909; del buf909  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_108.run(buf924, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, relu_30, buf831, primals_456, primals_91, relu_28, buf853, primals_450, primals_85, relu_26, buf867, primals_444, primals_79, relu_24, buf887, primals_438, primals_73, relu_22, buf901, primals_432, primals_67, relu_20, buf919, primals_426, primals_61, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf925 = aten.convolution_backward(buf924, relu_19, primals_60, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_60
        buf926 = buf925[0]
        buf931 = buf917; del buf917  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_19, buf926, primals_423, primals_58, buf931, 401408, grid=grid(401408), stream=stream0)
        del primals_58
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf932 = aten.convolution_backward(buf931, relu_18, primals_57, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_57
        buf933 = buf932[0]
        buf800 = buf924; del buf924  # reuse
        buf838 = buf800; del buf800  # reuse
        buf874 = buf838; del buf838  # reuse
        buf908 = buf874; del buf874  # reuse
        buf940 = buf908; del buf908  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_109.run(buf940, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, relu_30, buf831, primals_456, primals_91, relu_28, buf853, primals_450, primals_85, relu_26, buf867, primals_444, primals_79, relu_24, buf887, primals_438, primals_73, relu_22, buf901, primals_432, primals_67, relu_20, buf919, primals_426, primals_61, relu_18, buf933, primals_420, primals_55, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf941 = aten.convolution_backward(buf940, relu_17, primals_54, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_54
        buf942 = buf941[0]
        buf947 = buf931; del buf931  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_17, buf942, primals_417, primals_52, buf947, 401408, grid=grid(401408), stream=stream0)
        del primals_52
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf948 = aten.convolution_backward(buf947, relu_16, primals_51, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_51
        buf949 = buf948[0]
        buf799 = buf940; del buf940  # reuse
        buf837 = buf799; del buf799  # reuse
        buf873 = buf837; del buf837  # reuse
        buf907 = buf873; del buf873  # reuse
        buf939 = buf907; del buf907  # reuse
        buf954 = buf939; del buf939  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_110.run(buf954, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, relu_30, buf831, primals_456, primals_91, relu_28, buf853, primals_450, primals_85, relu_26, buf867, primals_444, primals_79, relu_24, buf887, primals_438, primals_73, relu_22, buf901, primals_432, primals_67, relu_20, buf919, primals_426, primals_61, relu_18, buf933, primals_420, primals_55, relu_16, buf949, primals_414, primals_49, 100352, grid=grid(100352), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf955 = aten.convolution_backward(buf954, relu_15, primals_48, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf954
        del primals_48
        buf956 = buf955[0]
        buf961 = buf947; del buf947  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_101.run(relu_15, buf956, primals_411, primals_46, buf961, 401408, grid=grid(401408), stream=stream0)
        del primals_46
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf962 = aten.convolution_backward(buf961, relu_14, primals_45, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_45
        buf963 = buf962[0]
        buf798 = buf961; del buf961  # reuse
        buf836 = buf798; del buf798  # reuse
        buf872 = buf836; del buf836  # reuse
        buf906 = buf872; del buf872  # reuse
        buf938 = buf906; del buf906  # reuse
        buf968 = buf938; del buf938  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.native_batch_norm_backward, aten.slice, aten.threshold_backward]
        triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_111.run(buf968, relu_38, buf765, primals_480, primals_115, relu_36, buf779, primals_474, primals_109, relu_34, buf793, primals_468, primals_103, relu_32, buf817, primals_462, primals_97, relu_30, buf831, primals_456, primals_91, relu_28, buf853, primals_450, primals_85, relu_26, buf867, primals_444, primals_79, relu_24, buf887, primals_438, primals_73, relu_22, buf901, primals_432, primals_67, relu_20, buf919, primals_426, primals_61, relu_18, buf933, primals_420, primals_55, relu_16, buf949, primals_414, primals_49, relu_14, buf963, primals_408, primals_43, 401408, grid=grid(401408), stream=stream0)
        del buf779
        del buf793
        del primals_103
        del primals_109
        del primals_115
        del primals_43
        del primals_468
        del primals_474
        del primals_480
        del primals_49
        del primals_55
        del primals_61
        del primals_67
        del primals_73
        del primals_79
        del primals_85
        del primals_91
        del primals_97
        del relu_34
        del relu_36
        del relu_38
        buf811 = buf809[1]
        del buf809
        buf812 = empty((128, ), device='cuda', dtype=torch.float32)
        buf813 = empty((128, ), device='cuda', dtype=torch.float32)
        buf814 = buf813; del buf813  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf814, relu_33, buf810, convolution_32, primals_464, primals_465, buf812, 128, 3136, grid=grid(128), stream=stream0)
        del buf810
        del convolution_32
        del primals_464
        del primals_465
        del relu_33
        buf818 = buf816[1]
        del buf816
        buf819 = empty((416, ), device='cuda', dtype=torch.float32)
        buf820 = empty((416, ), device='cuda', dtype=torch.float32)
        buf821 = buf820; del buf820  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_112.run(buf821, relu_32, buf817, cat_14, primals_461, primals_462, buf819, 416, 3136, grid=grid(416), stream=stream0)
        del buf817
        del cat_14
        del primals_461
        del primals_462
        del relu_32
        buf825 = buf823[1]
        del buf823
        buf826 = empty((128, ), device='cuda', dtype=torch.float32)
        buf827 = empty((128, ), device='cuda', dtype=torch.float32)
        buf828 = buf827; del buf827  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf828, relu_31, buf824, convolution_30, primals_458, primals_459, buf826, 128, 3136, grid=grid(128), stream=stream0)
        del buf824
        del convolution_30
        del primals_458
        del primals_459
        del relu_31
        buf832 = buf830[1]
        del buf830
        buf833 = empty((384, ), device='cuda', dtype=torch.float32)
        buf834 = empty((384, ), device='cuda', dtype=torch.float32)
        buf835 = buf834; del buf834  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_113.run(buf835, relu_30, buf831, cat_13, primals_455, primals_456, buf833, 384, 3136, grid=grid(384), stream=stream0)
        del buf831
        del cat_13
        del primals_455
        del primals_456
        del relu_30
        buf847 = buf845[1]
        del buf845
        buf848 = empty((128, ), device='cuda', dtype=torch.float32)
        buf849 = empty((128, ), device='cuda', dtype=torch.float32)
        buf850 = buf849; del buf849  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf850, relu_29, buf846, convolution_28, primals_452, primals_453, buf848, 128, 3136, grid=grid(128), stream=stream0)
        del buf846
        del convolution_28
        del primals_452
        del primals_453
        del relu_29
        buf854 = buf852[1]
        del buf852
        buf855 = empty((352, ), device='cuda', dtype=torch.float32)
        buf856 = empty((352, ), device='cuda', dtype=torch.float32)
        buf857 = buf856; del buf856  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_114.run(buf857, relu_28, buf853, cat_12, primals_449, primals_450, buf855, 352, 3136, grid=grid(352), stream=stream0)
        del buf853
        del cat_12
        del primals_449
        del primals_450
        del relu_28
        buf861 = buf859[1]
        del buf859
        buf862 = empty((128, ), device='cuda', dtype=torch.float32)
        buf863 = empty((128, ), device='cuda', dtype=torch.float32)
        buf864 = buf863; del buf863  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf864, relu_27, buf860, convolution_26, primals_446, primals_447, buf862, 128, 3136, grid=grid(128), stream=stream0)
        del buf860
        del convolution_26
        del primals_446
        del primals_447
        del relu_27
        buf868 = buf866[1]
        del buf866
        buf869 = empty((320, ), device='cuda', dtype=torch.float32)
        buf870 = empty((320, ), device='cuda', dtype=torch.float32)
        buf871 = buf870; del buf870  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_115.run(buf871, relu_26, buf867, cat_11, primals_443, primals_444, buf869, 320, 3136, grid=grid(320), stream=stream0)
        del buf867
        del cat_11
        del primals_443
        del primals_444
        del relu_26
        buf881 = buf879[1]
        del buf879
        buf882 = empty((128, ), device='cuda', dtype=torch.float32)
        buf883 = empty((128, ), device='cuda', dtype=torch.float32)
        buf884 = buf883; del buf883  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf884, relu_25, buf880, convolution_24, primals_440, primals_441, buf882, 128, 3136, grid=grid(128), stream=stream0)
        del buf880
        del convolution_24
        del primals_440
        del primals_441
        del relu_25
        buf888 = buf886[1]
        del buf886
        buf889 = empty((288, ), device='cuda', dtype=torch.float32)
        buf890 = empty((288, ), device='cuda', dtype=torch.float32)
        buf891 = buf890; del buf890  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_116.run(buf891, relu_24, buf887, cat_10, primals_437, primals_438, buf889, 288, 3136, grid=grid(288), stream=stream0)
        del buf887
        del cat_10
        del primals_437
        del primals_438
        del relu_24
        buf895 = buf893[1]
        del buf893
        buf896 = empty((128, ), device='cuda', dtype=torch.float32)
        buf897 = empty((128, ), device='cuda', dtype=torch.float32)
        buf898 = buf897; del buf897  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf898, relu_23, buf894, convolution_22, primals_434, primals_435, buf896, 128, 3136, grid=grid(128), stream=stream0)
        del buf894
        del convolution_22
        del primals_434
        del primals_435
        del relu_23
        buf902 = buf900[1]
        del buf900
        buf903 = empty((256, ), device='cuda', dtype=torch.float32)
        buf904 = empty((256, ), device='cuda', dtype=torch.float32)
        buf905 = buf904; del buf904  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_117.run(buf905, relu_22, buf901, cat_9, primals_431, primals_432, buf903, 256, 3136, grid=grid(256), stream=stream0)
        del cat_9
        del primals_431
        del primals_432
        del relu_22
        buf913 = buf911[1]
        del buf911
        buf914 = empty((128, ), device='cuda', dtype=torch.float32)
        buf915 = empty((128, ), device='cuda', dtype=torch.float32)
        buf916 = buf915; del buf915  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf916, relu_21, buf912, convolution_20, primals_428, primals_429, buf914, 128, 3136, grid=grid(128), stream=stream0)
        del buf912
        del convolution_20
        del primals_428
        del primals_429
        del relu_21
        buf920 = buf918[1]
        del buf918
        buf921 = empty((224, ), device='cuda', dtype=torch.float32)
        buf922 = empty((224, ), device='cuda', dtype=torch.float32)
        buf923 = buf922; del buf922  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_118.run(buf923, relu_20, buf919, cat_8, primals_425, primals_426, buf921, 224, 3136, grid=grid(224), stream=stream0)
        del buf919
        del cat_8
        del primals_425
        del primals_426
        del relu_20
        buf927 = buf925[1]
        del buf925
        buf928 = empty((128, ), device='cuda', dtype=torch.float32)
        buf929 = empty((128, ), device='cuda', dtype=torch.float32)
        buf930 = buf929; del buf929  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf930, relu_19, buf926, convolution_18, primals_422, primals_423, buf928, 128, 3136, grid=grid(128), stream=stream0)
        del buf926
        del convolution_18
        del primals_422
        del primals_423
        del relu_19
        buf934 = buf932[1]
        del buf932
        buf935 = empty((192, ), device='cuda', dtype=torch.float32)
        buf936 = empty((192, ), device='cuda', dtype=torch.float32)
        buf937 = buf936; del buf936  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_119.run(buf937, relu_18, buf933, cat_7, primals_419, primals_420, buf935, 192, 3136, grid=grid(192), stream=stream0)
        del buf933
        del cat_7
        del primals_419
        del primals_420
        del relu_18
        buf943 = buf941[1]
        del buf941
        buf944 = empty((128, ), device='cuda', dtype=torch.float32)
        buf945 = empty((128, ), device='cuda', dtype=torch.float32)
        buf946 = buf945; del buf945  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf946, relu_17, buf942, convolution_16, primals_416, primals_417, buf944, 128, 3136, grid=grid(128), stream=stream0)
        del buf942
        del convolution_16
        del primals_416
        del primals_417
        del relu_17
        buf950 = buf948[1]
        del buf948
        buf951 = empty((160, ), device='cuda', dtype=torch.float32)
        buf952 = empty((160, ), device='cuda', dtype=torch.float32)
        buf953 = buf952; del buf952  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_120.run(buf953, relu_16, buf949, cat_6, primals_413, primals_414, buf951, 160, 3136, grid=grid(160), stream=stream0)
        del buf949
        del cat_6
        del primals_413
        del primals_414
        del relu_16
        buf957 = buf955[1]
        del buf955
        buf958 = empty((128, ), device='cuda', dtype=torch.float32)
        buf959 = empty((128, ), device='cuda', dtype=torch.float32)
        buf960 = buf959; del buf959  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf960, relu_15, buf956, convolution_14, primals_410, primals_411, buf958, 128, 3136, grid=grid(128), stream=stream0)
        del buf956
        del convolution_14
        del primals_410
        del primals_411
        del relu_15
        buf964 = buf962[1]
        del buf962
        buf965 = empty((128, ), device='cuda', dtype=torch.float32)
        buf966 = empty((128, ), device='cuda', dtype=torch.float32)
        buf967 = buf966; del buf966  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_95.run(buf967, relu_14, buf963, avg_pool2d, primals_407, primals_408, buf965, 128, 3136, grid=grid(128), stream=stream0)
        del avg_pool2d
        del buf963
        del primals_407
        del primals_408
        del relu_14
        buf969 = reinterpret_tensor(buf765, (4, 128, 56, 56), (401408, 3136, 56, 1), 0); del buf765  # reuse
        # Source Nodes: [], Original ATen: [aten.avg_pool2d_backward, aten.convolution_backward]
        triton_poi_fused_avg_pool2d_backward_convolution_backward_121.run(buf968, buf969, 1605632, grid=grid(1605632), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.avg_pool2d_backward, aten.convolution_backward]
        buf970 = aten.convolution_backward(buf969, relu_13, primals_42, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf969
        del primals_42
        buf971 = buf970[0]
        buf972 = buf970[1]
        del buf970
        buf973 = empty((256, ), device='cuda', dtype=torch.float32)
        buf974 = empty((256, ), device='cuda', dtype=torch.float32)
        buf975 = buf974; del buf974  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_122.run(buf975, relu_13, buf971, cat_5, primals_404, primals_405, buf973, 256, 12544, grid=grid(256), stream=stream0)
        del cat_5
        del primals_404
        buf976 = reinterpret_tensor(buf968, (4, 32, 56, 56), (100352, 3136, 56, 1), 0); del buf968  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        triton_poi_fused_convolution_backward_123.run(relu_13, buf971, primals_405, primals_40, buf976, 401408, grid=grid(401408), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf977 = aten.convolution_backward(buf976, relu_12, primals_39, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_39
        buf978 = buf977[0]
        buf979 = buf977[1]
        del buf977
        buf980 = empty_strided((128, 2), (1, 128), device='cuda', dtype=torch.float32)
        buf982 = empty_strided((128, 2), (1, 128), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_124.run(relu_12, buf978, convolution_11, primals_401, buf980, buf982, 256, 6272, grid=grid(256), stream=stream0)
        del convolution_11
        del primals_401
        buf981 = empty((128, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_125.run(buf980, buf981, 128, 2, grid=grid(128), stream=stream0)
        buf983 = empty((128, ), device='cuda', dtype=torch.float32)
        buf984 = buf983; del buf983  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_126.run(buf984, buf982, primals_402, 128, 2, grid=grid(128), stream=stream0)
        buf985 = buf978; del buf978  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_127.run(buf985, relu_12, primals_402, primals_37, 1605632, grid=grid(1605632), stream=stream0)
        del primals_37
        del primals_402
        del relu_12
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf986 = aten.convolution_backward(buf985, relu_11, primals_36, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf985
        del primals_36
        buf987 = buf986[0]
        buf988 = buf986[1]
        del buf986
        buf989 = empty_strided((224, 2), (1, 224), device='cuda', dtype=torch.float32)
        buf991 = empty_strided((224, 2), (1, 224), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_128.run(relu_11, buf987, cat_4, primals_398, buf989, buf991, 448, 6272, grid=grid(448), stream=stream0)
        del cat_4
        del primals_398
        buf990 = empty((224, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_129.run(buf989, buf990, 224, 2, grid=grid(224), stream=stream0)
        buf992 = empty((224, ), device='cuda', dtype=torch.float32)
        buf993 = buf992; del buf992  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_130.run(buf993, buf991, primals_399, 224, 2, grid=grid(224), stream=stream0)
        buf994 = buf976; del buf976  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_131.run(relu_13, buf971, primals_405, primals_40, relu_11, buf987, primals_399, primals_34, buf994, 401408, grid=grid(401408), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf995 = aten.convolution_backward(buf994, relu_10, primals_33, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_33
        buf996 = buf995[0]
        buf997 = buf995[1]
        del buf995
        buf998 = buf982; del buf982  # reuse
        buf1000 = buf980; del buf980  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_124.run(relu_10, buf996, convolution_9, primals_395, buf998, buf1000, 256, 6272, grid=grid(256), stream=stream0)
        del convolution_9
        del primals_395
        buf999 = empty((128, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_125.run(buf998, buf999, 128, 2, grid=grid(128), stream=stream0)
        buf1001 = empty((128, ), device='cuda', dtype=torch.float32)
        buf1002 = buf1001; del buf1001  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_126.run(buf1002, buf1000, primals_396, 128, 2, grid=grid(128), stream=stream0)
        buf1003 = buf996; del buf996  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_127.run(buf1003, relu_10, primals_396, primals_31, 1605632, grid=grid(1605632), stream=stream0)
        del primals_31
        del primals_396
        del relu_10
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf1004 = aten.convolution_backward(buf1003, relu_9, primals_30, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_30
        buf1005 = buf1004[0]
        buf1006 = buf1004[1]
        del buf1004
        buf1007 = empty_strided((192, 2), (1, 192), device='cuda', dtype=torch.float32)
        buf1009 = empty_strided((192, 2), (1, 192), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_132.run(relu_9, buf1005, cat_3, primals_392, buf1007, buf1009, 384, 6272, grid=grid(384), stream=stream0)
        del cat_3
        del primals_392
        buf1008 = empty((192, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_133.run(buf1007, buf1008, 192, 2, grid=grid(192), stream=stream0)
        del buf1007
        buf1010 = empty((192, ), device='cuda', dtype=torch.float32)
        buf1011 = buf1010; del buf1010  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_134.run(buf1011, buf1009, primals_393, 192, 2, grid=grid(192), stream=stream0)
        del buf1009
        buf1016 = buf994; del buf994  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_135.run(relu_13, buf971, primals_405, primals_40, relu_11, buf987, primals_399, primals_34, relu_9, buf1005, primals_393, primals_28, buf1016, 401408, grid=grid(401408), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf1017 = aten.convolution_backward(buf1016, relu_8, primals_27, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_27
        buf1018 = buf1017[0]
        buf1025 = buf1003; del buf1003  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_136.run(relu_8, buf1018, primals_390, primals_25, buf1025, 1605632, grid=grid(1605632), stream=stream0)
        del primals_25
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf1026 = aten.convolution_backward(buf1025, relu_7, primals_24, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_24
        buf1027 = buf1026[0]
        buf1015 = buf1016; del buf1016  # reuse
        buf1034 = buf1015; del buf1015  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_137.run(buf1034, relu_13, buf971, primals_405, primals_40, relu_11, buf987, primals_399, primals_34, relu_9, buf1005, primals_393, primals_28, relu_7, buf1027, primals_387, primals_22, 401408, grid=grid(401408), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf1035 = aten.convolution_backward(buf1034, relu_6, primals_21, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_21
        buf1036 = buf1035[0]
        buf1043 = buf1025; del buf1025  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_136.run(relu_6, buf1036, primals_384, primals_19, buf1043, 1605632, grid=grid(1605632), stream=stream0)
        del primals_19
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf1044 = aten.convolution_backward(buf1043, relu_5, primals_18, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_18
        buf1045 = buf1044[0]
        buf1014 = buf1034; del buf1034  # reuse
        buf1054 = buf1014; del buf1014  # reuse
        # Source Nodes: [], Original ATen: [aten.add]
        triton_poi_fused_add_138.run(buf1054, relu_13, buf971, primals_405, primals_40, relu_11, buf987, primals_399, primals_34, relu_9, buf1005, primals_393, primals_28, relu_7, buf1027, primals_387, primals_22, relu_5, buf1045, primals_381, primals_16, 401408, grid=grid(401408), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.convolution_backward]
        buf1055 = aten.convolution_backward(buf1054, relu_4, primals_15, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_15
        buf1056 = buf1055[0]
        buf1063 = buf1043; del buf1043  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_136.run(relu_4, buf1056, primals_378, primals_13, buf1063, 1605632, grid=grid(1605632), stream=stream0)
        del primals_13
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf1064 = aten.convolution_backward(buf1063, relu_3, primals_12, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del primals_12
        buf1065 = buf1064[0]
        buf1013 = buf1054; del buf1054  # reuse
        buf1053 = buf1013; del buf1013  # reuse
        buf1072 = buf1053; del buf1053  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        triton_poi_fused_add_convolution_backward_139.run(buf1072, relu_13, buf971, primals_405, primals_40, relu_11, buf987, primals_399, primals_34, relu_9, buf1005, primals_393, primals_28, relu_7, buf1027, primals_387, primals_22, relu_5, buf1045, primals_381, primals_16, relu_3, buf1065, primals_375, primals_10, 401408, grid=grid(401408), stream=stream0)
        # Source Nodes: [], Original ATen: [aten.add, aten.convolution_backward]
        buf1073 = aten.convolution_backward(buf1072, relu_2, primals_9, [0], [1, 1], [1, 1], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf1072
        del primals_9
        buf1074 = buf1073[0]
        buf1081 = buf1063; del buf1063  # reuse
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_native_batch_norm_backward_threshold_backward_136.run(relu_2, buf1074, primals_372, primals_7, buf1081, 1605632, grid=grid(1605632), stream=stream0)
        del primals_7
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf1082 = aten.convolution_backward(buf1081, relu_1, primals_6, [0], [1, 1], [0, 0], [1, 1], False, [0, 0], 1, [True, True, False])
        del buf1081
        del primals_6
        buf1083 = buf1082[0]
        buf1012 = reinterpret_tensor(buf901, (4, 64, 56, 56), (200704, 3136, 56, 1), 0); del buf901  # reuse
        buf1052 = buf1012; del buf1012  # reuse
        buf1090 = buf1052; del buf1052  # reuse
        # Source Nodes: [], Original ATen: [aten.add, aten.native_batch_norm_backward, aten.slice, aten.threshold_backward]
        triton_poi_fused_add_native_batch_norm_backward_slice_threshold_backward_140.run(buf1090, relu_13, buf971, primals_405, primals_40, relu_11, buf987, primals_399, primals_34, relu_9, buf1005, primals_393, primals_28, relu_7, buf1027, primals_387, primals_22, relu_5, buf1045, primals_381, primals_16, relu_3, buf1065, primals_375, primals_10, relu_1, buf1083, primals_369, primals_4, 802816, grid=grid(802816), stream=stream0)
        del buf1005
        del buf987
        del primals_10
        del primals_16
        del primals_22
        del primals_28
        del primals_34
        del primals_393
        del primals_399
        del primals_4
        del primals_40
        del primals_405
        del relu_11
        del relu_13
        del relu_9
        buf1019 = buf1017[1]
        del buf1017
        buf1020 = buf1000; del buf1000  # reuse
        buf1022 = buf998; del buf998  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_124.run(relu_8, buf1018, convolution_7, primals_389, buf1020, buf1022, 256, 6272, grid=grid(256), stream=stream0)
        del buf1018
        del convolution_7
        del primals_389
        del relu_8
        buf1021 = empty((128, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_125.run(buf1020, buf1021, 128, 2, grid=grid(128), stream=stream0)
        buf1023 = empty((128, ), device='cuda', dtype=torch.float32)
        buf1024 = buf1023; del buf1023  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_126.run(buf1024, buf1022, primals_390, 128, 2, grid=grid(128), stream=stream0)
        del primals_390
        buf1028 = buf1026[1]
        del buf1026
        buf1029 = empty_strided((160, 2), (1, 160), device='cuda', dtype=torch.float32)
        buf1031 = empty_strided((160, 2), (1, 160), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_141.run(relu_7, buf1027, cat_2, primals_386, buf1029, buf1031, 320, 6272, grid=grid(320), stream=stream0)
        del buf1027
        del cat_2
        del primals_386
        del relu_7
        buf1030 = empty((160, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_142.run(buf1029, buf1030, 160, 2, grid=grid(160), stream=stream0)
        del buf1029
        buf1032 = empty((160, ), device='cuda', dtype=torch.float32)
        buf1033 = buf1032; del buf1032  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_143.run(buf1033, buf1031, primals_387, 160, 2, grid=grid(160), stream=stream0)
        del buf1031
        del primals_387
        buf1037 = buf1035[1]
        del buf1035
        buf1038 = buf1022; del buf1022  # reuse
        buf1040 = buf1020; del buf1020  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_124.run(relu_6, buf1036, convolution_5, primals_383, buf1038, buf1040, 256, 6272, grid=grid(256), stream=stream0)
        del buf1036
        del convolution_5
        del primals_383
        del relu_6
        buf1039 = empty((128, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_125.run(buf1038, buf1039, 128, 2, grid=grid(128), stream=stream0)
        buf1041 = empty((128, ), device='cuda', dtype=torch.float32)
        buf1042 = buf1041; del buf1041  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_126.run(buf1042, buf1040, primals_384, 128, 2, grid=grid(128), stream=stream0)
        del primals_384
        buf1046 = buf1044[1]
        del buf1044
        buf1047 = buf1040; del buf1040  # reuse
        buf1049 = buf1038; del buf1038  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_124.run(relu_5, buf1045, cat_1, primals_380, buf1047, buf1049, 256, 6272, grid=grid(256), stream=stream0)
        del buf1045
        del cat_1
        del primals_380
        del relu_5
        buf1048 = empty((128, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_125.run(buf1047, buf1048, 128, 2, grid=grid(128), stream=stream0)
        buf1050 = empty((128, ), device='cuda', dtype=torch.float32)
        buf1051 = buf1050; del buf1050  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_126.run(buf1051, buf1049, primals_381, 128, 2, grid=grid(128), stream=stream0)
        del primals_381
        buf1057 = buf1055[1]
        del buf1055
        buf1058 = buf1049; del buf1049  # reuse
        buf1060 = buf1047; del buf1047  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_124.run(relu_4, buf1056, convolution_3, primals_377, buf1058, buf1060, 256, 6272, grid=grid(256), stream=stream0)
        del buf1056
        del convolution_3
        del primals_377
        del relu_4
        buf1059 = empty((128, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_125.run(buf1058, buf1059, 128, 2, grid=grid(128), stream=stream0)
        buf1061 = empty((128, ), device='cuda', dtype=torch.float32)
        buf1062 = buf1061; del buf1061  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_126.run(buf1062, buf1060, primals_378, 128, 2, grid=grid(128), stream=stream0)
        del primals_378
        buf1066 = buf1064[1]
        del buf1064
        buf1067 = empty_strided((96, 2), (1, 96), device='cuda', dtype=torch.float32)
        buf1069 = empty_strided((96, 2), (1, 96), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_144.run(relu_3, buf1065, cat, primals_374, buf1067, buf1069, 192, 6272, grid=grid(192), stream=stream0)
        del buf1065
        del cat
        del primals_374
        del relu_3
        buf1068 = empty((96, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_145.run(buf1067, buf1068, 96, 2, grid=grid(96), stream=stream0)
        del buf1067
        buf1070 = empty((96, ), device='cuda', dtype=torch.float32)
        buf1071 = buf1070; del buf1070  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_146.run(buf1071, buf1069, primals_375, 96, 2, grid=grid(96), stream=stream0)
        del buf1069
        del primals_375
        buf1075 = buf1073[1]
        del buf1073
        buf1076 = buf1060; del buf1060  # reuse
        buf1078 = buf1058; del buf1058  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_124.run(relu_2, buf1074, convolution_1, primals_371, buf1076, buf1078, 256, 6272, grid=grid(256), stream=stream0)
        del buf1074
        del convolution_1
        del primals_371
        del relu_2
        buf1077 = empty((128, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_125.run(buf1076, buf1077, 128, 2, grid=grid(128), stream=stream0)
        del buf1076
        buf1079 = empty((128, ), device='cuda', dtype=torch.float32)
        buf1080 = buf1079; del buf1079  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_126.run(buf1080, buf1078, primals_372, 128, 2, grid=grid(128), stream=stream0)
        del buf1078
        del primals_372
        buf1084 = buf1082[1]
        del buf1082
        buf1085 = empty_strided((64, 2), (1, 64), device='cuda', dtype=torch.float32)
        buf1087 = empty_strided((64, 2), (1, 64), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_147.run(relu_1, buf1083, sub_240, buf1085, buf1087, 128, 6272, grid=grid(128), stream=stream0)
        del buf1083
        del relu_1
        del sub_240
        buf1086 = empty((64, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_148.run(buf1085, buf1086, 64, 2, grid=grid(64), stream=stream0)
        del buf1085
        buf1088 = empty((64, ), device='cuda', dtype=torch.float32)
        buf1089 = buf1088; del buf1088  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_149.run(buf1089, buf1087, primals_369, 64, 2, grid=grid(64), stream=stream0)
        del buf1087
        del primals_369
        buf1091 = reinterpret_tensor(buf971, (4, 64, 112, 112), (802816, 12544, 112, 1), 0); del buf971  # reuse
        buf1097 = empty((4, 64, 112, 112), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.max_pool2d_with_indices_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        triton_poi_fused_convolution_backward_max_pool2d_with_indices_backward_native_batch_norm_backward_threshold_backward_150.run(getitem_1, buf1090, relu, primals_366, primals_2, buf1091, buf1097, 3211264, grid=grid(3211264), stream=stream0)
        del buf1090
        del getitem_1
        del primals_2
        buf1092 = reinterpret_tensor(buf991, (64, 7), (7, 1), 0); del buf991  # reuse
        buf1094 = reinterpret_tensor(buf989, (64, 7), (7, 1), 0); del buf989  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_red_fused_native_batch_norm_backward_threshold_backward_151.run(relu, buf1091, convolution, primals_365, buf1092, buf1094, 448, 7168, grid=grid(448), stream=stream0)
        del buf1091
        del convolution
        del primals_365
        del relu
        buf1093 = empty((64, ), device='cuda', dtype=torch.float32)
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_152.run(buf1092, buf1093, 64, 7, grid=grid(64), stream=stream0)
        del buf1092
        buf1095 = empty((64, ), device='cuda', dtype=torch.float32)
        buf1096 = buf1095; del buf1095  # reuse
        # Source Nodes: [], Original ATen: [aten.native_batch_norm_backward, aten.threshold_backward]
        triton_per_fused_native_batch_norm_backward_threshold_backward_153.run(buf1096, buf1094, primals_366, 64, 7, grid=grid(64), stream=stream0)
        del buf1094
        del primals_366
        # Source Nodes: [], Original ATen: [aten.convolution_backward, aten.native_batch_norm_backward, aten.threshold_backward]
        buf1098 = aten.convolution_backward(buf1097, primals_728, primals_1, [0], [2, 2], [3, 3], [1, 1], False, [0, 0], 1, [False, True, False])
        del buf1097
        del primals_1
        del primals_728
        buf1099 = buf1098[1]
        return (buf1099, buf1096, buf1093, buf1089, buf1086, buf1084, buf1080, buf1077, buf1075, buf1071, buf1068, buf1066, buf1062, buf1059, buf1057, buf1051, buf1048, buf1046, buf1042, buf1039, buf1037, buf1033, buf1030, buf1028, buf1024, buf1021, buf1019, buf1011, buf1008, buf1006, buf1002, buf999, buf997, buf993, buf990, buf988, buf984, buf981, buf979, buf975, buf973, buf972, buf967, buf965, buf964, buf960, buf958, buf957, buf953, buf951, buf950, buf946, buf944, buf943, buf937, buf935, buf934, buf930, buf928, buf927, buf923, buf921, buf920, buf916, buf914, buf913, buf905, buf903, buf902, buf898, buf896, buf895, buf891, buf889, buf888, buf884, buf882, buf881, buf871, buf869, buf868, buf864, buf862, buf861, buf857, buf855, buf854, buf850, buf848, buf847, buf835, buf833, buf832, buf828, buf826, buf825, buf821, buf819, buf818, buf814, buf812, buf811, buf797, buf795, buf794, buf790, buf788, buf787, buf783, buf781, buf780, buf776, buf774, buf773, buf769, buf767, buf766, buf761, buf759, buf758, buf754, buf752, buf751, buf747, buf745, buf744, buf740, buf738, buf737, buf731, buf729, buf728, buf724, buf722, buf721, buf717, buf715, buf714, buf710, buf708, buf707, buf699, buf697, buf696, buf692, buf690, buf689, buf685, buf683, buf682, buf678, buf676, buf675, buf665, buf663, buf662, buf658, buf656, buf655, buf651, buf649, buf648, buf644, buf642, buf641, buf629, buf627, buf626, buf622, buf620, buf619, buf615, buf613, buf612, buf608, buf606, buf605, buf591, buf589, buf588, buf584, buf582, buf581, buf577, buf575, buf574, buf570, buf568, buf567, buf551, buf549, buf548, buf544, buf542, buf541, buf537, buf535, buf534, buf530, buf528, buf527, buf509, buf507, buf506, buf502, buf500, buf499, buf495, buf493, buf492, buf488, buf486, buf485, buf465, buf463, buf462, buf458, buf456, buf455, buf451, buf449, buf448, buf444, buf442, buf441, buf419, buf417, buf416, buf412, buf410, buf409, buf405, buf403, buf402, buf398, buf396, buf395, buf371, buf369, buf368, buf364, buf362, buf361, buf357, buf355, buf354, buf350, buf348, buf347, buf321, buf319, buf318, buf314, buf312, buf311, buf307, buf305, buf304, buf300, buf298, buf297, buf293, buf291, buf290, buf285, buf283, buf282, buf278, buf276, buf275, buf271, buf269, buf268, buf264, buf262, buf261, buf255, buf253, buf252, buf248, buf246, buf245, buf241, buf239, buf238, buf234, buf232, buf231, buf223, buf221, buf220, buf216, buf214, buf213, buf209, buf207, buf206, buf202, buf200, buf199, buf189, buf187, buf186, buf182, buf180, buf179, buf175, buf173, buf172, buf168, buf166, buf165, buf153, buf151, buf150, buf146, buf144, buf143, buf139, buf137, buf136, buf132, buf130, buf129, buf115, buf113, buf112, buf108, buf106, buf105, buf101, buf99, buf98, buf94, buf92, buf91, buf75, buf73, buf72, buf68, buf66, buf65, buf61, buf59, buf58, buf54, buf52, buf51, buf33, buf31, buf30, buf26, buf24, buf23, buf19, buf17, buf16, buf12, buf10, buf9, buf5, buf3, reinterpret_tensor(buf1, (1000, 1024), (1024, 1), 0), buf2, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((64, 3, 7, 7), (147, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    primals_2 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_4 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_6 = rand_strided((128, 64, 1, 1), (64, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_7 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_9 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_10 = rand_strided((96, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_12 = rand_strided((128, 96, 1, 1), (96, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_13 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_15 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_16 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_18 = rand_strided((128, 128, 1, 1), (128, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_19 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_21 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_22 = rand_strided((160, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_24 = rand_strided((128, 160, 1, 1), (160, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_25 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_27 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_28 = rand_strided((192, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_30 = rand_strided((128, 192, 1, 1), (192, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_31 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_33 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_34 = rand_strided((224, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_36 = rand_strided((128, 224, 1, 1), (224, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_37 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_39 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_40 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_42 = rand_strided((128, 256, 1, 1), (256, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_43 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_45 = rand_strided((128, 128, 1, 1), (128, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_46 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_48 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_49 = rand_strided((160, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_51 = rand_strided((128, 160, 1, 1), (160, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_52 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_54 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_55 = rand_strided((192, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_57 = rand_strided((128, 192, 1, 1), (192, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_58 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_60 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_61 = rand_strided((224, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_63 = rand_strided((128, 224, 1, 1), (224, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_64 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_66 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_67 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_69 = rand_strided((128, 256, 1, 1), (256, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_70 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_72 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_73 = rand_strided((288, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_75 = rand_strided((128, 288, 1, 1), (288, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_76 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_78 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_79 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_81 = rand_strided((128, 320, 1, 1), (320, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_82 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_84 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_85 = rand_strided((352, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_87 = rand_strided((128, 352, 1, 1), (352, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_88 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_90 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_91 = rand_strided((384, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_93 = rand_strided((128, 384, 1, 1), (384, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_94 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_96 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_97 = rand_strided((416, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_99 = rand_strided((128, 416, 1, 1), (416, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_100 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_102 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_103 = rand_strided((448, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_105 = rand_strided((128, 448, 1, 1), (448, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_106 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_108 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_109 = rand_strided((480, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_111 = rand_strided((128, 480, 1, 1), (480, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_112 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_114 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_115 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_117 = rand_strided((256, 512, 1, 1), (512, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_118 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_120 = rand_strided((128, 256, 1, 1), (256, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_121 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_123 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_124 = rand_strided((288, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_126 = rand_strided((128, 288, 1, 1), (288, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_127 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_129 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_130 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_132 = rand_strided((128, 320, 1, 1), (320, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_133 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_135 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_136 = rand_strided((352, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_138 = rand_strided((128, 352, 1, 1), (352, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_139 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_141 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_142 = rand_strided((384, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_144 = rand_strided((128, 384, 1, 1), (384, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_145 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_147 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_148 = rand_strided((416, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_150 = rand_strided((128, 416, 1, 1), (416, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_151 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_153 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_154 = rand_strided((448, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_156 = rand_strided((128, 448, 1, 1), (448, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_157 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_159 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_160 = rand_strided((480, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_162 = rand_strided((128, 480, 1, 1), (480, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_163 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_165 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_166 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_168 = rand_strided((128, 512, 1, 1), (512, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_169 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_171 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_172 = rand_strided((544, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_174 = rand_strided((128, 544, 1, 1), (544, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_175 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_177 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_178 = rand_strided((576, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_180 = rand_strided((128, 576, 1, 1), (576, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_181 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_183 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_184 = rand_strided((608, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_186 = rand_strided((128, 608, 1, 1), (608, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_187 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_189 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_190 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_192 = rand_strided((128, 640, 1, 1), (640, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_193 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_195 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_196 = rand_strided((672, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_198 = rand_strided((128, 672, 1, 1), (672, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_199 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_201 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_202 = rand_strided((704, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_204 = rand_strided((128, 704, 1, 1), (704, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_205 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_207 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_208 = rand_strided((736, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_210 = rand_strided((128, 736, 1, 1), (736, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_211 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_213 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_214 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_216 = rand_strided((128, 768, 1, 1), (768, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_217 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_219 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_220 = rand_strided((800, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_222 = rand_strided((128, 800, 1, 1), (800, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_223 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_225 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_226 = rand_strided((832, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_228 = rand_strided((128, 832, 1, 1), (832, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_229 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_231 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_232 = rand_strided((864, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_234 = rand_strided((128, 864, 1, 1), (864, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_235 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_237 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_238 = rand_strided((896, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_240 = rand_strided((128, 896, 1, 1), (896, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_241 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_243 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_244 = rand_strided((928, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_246 = rand_strided((128, 928, 1, 1), (928, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_247 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_249 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_250 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_252 = rand_strided((128, 960, 1, 1), (960, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_253 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_255 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_256 = rand_strided((992, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_258 = rand_strided((128, 992, 1, 1), (992, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_259 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_261 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_262 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_264 = rand_strided((512, 1024, 1, 1), (1024, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_265 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_267 = rand_strided((128, 512, 1, 1), (512, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_268 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_270 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_271 = rand_strided((544, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_273 = rand_strided((128, 544, 1, 1), (544, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_274 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_276 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_277 = rand_strided((576, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_279 = rand_strided((128, 576, 1, 1), (576, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_280 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_282 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_283 = rand_strided((608, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_285 = rand_strided((128, 608, 1, 1), (608, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_286 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_288 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_289 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_291 = rand_strided((128, 640, 1, 1), (640, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_292 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_294 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_295 = rand_strided((672, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_297 = rand_strided((128, 672, 1, 1), (672, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_298 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_300 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_301 = rand_strided((704, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_303 = rand_strided((128, 704, 1, 1), (704, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_304 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_306 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_307 = rand_strided((736, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_309 = rand_strided((128, 736, 1, 1), (736, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_310 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_312 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_313 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_315 = rand_strided((128, 768, 1, 1), (768, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_316 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_318 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_319 = rand_strided((800, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_321 = rand_strided((128, 800, 1, 1), (800, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_322 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_324 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_325 = rand_strided((832, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_327 = rand_strided((128, 832, 1, 1), (832, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_328 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_330 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_331 = rand_strided((864, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_333 = rand_strided((128, 864, 1, 1), (864, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_334 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_336 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_337 = rand_strided((896, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_339 = rand_strided((128, 896, 1, 1), (896, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_340 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_342 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_343 = rand_strided((928, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_345 = rand_strided((128, 928, 1, 1), (928, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_346 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_348 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_349 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_351 = rand_strided((128, 960, 1, 1), (960, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_352 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_354 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_355 = rand_strided((992, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_357 = rand_strided((128, 992, 1, 1), (992, 1, 1, 1), device='cuda:0', dtype=torch.float32)
    primals_358 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_360 = rand_strided((32, 128, 3, 3), (1152, 9, 3, 1), device='cuda:0', dtype=torch.float32)
    primals_361 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_365 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_366 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_369 = rand_strided((64, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_371 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_372 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_374 = rand_strided((96, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_375 = rand_strided((96, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_377 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_378 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_380 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_381 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_383 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_384 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_386 = rand_strided((160, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_387 = rand_strided((160, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_389 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_390 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_392 = rand_strided((192, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_393 = rand_strided((192, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_395 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_396 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_398 = rand_strided((224, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_399 = rand_strided((224, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_401 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_402 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_404 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_405 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_407 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_408 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_410 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_411 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_413 = rand_strided((160, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_414 = rand_strided((160, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_416 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_417 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_419 = rand_strided((192, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_420 = rand_strided((192, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_422 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_423 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_425 = rand_strided((224, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_426 = rand_strided((224, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_428 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_429 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_431 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_432 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_434 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_435 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_437 = rand_strided((288, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_438 = rand_strided((288, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_440 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_441 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_443 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_444 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_446 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_447 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_449 = rand_strided((352, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_450 = rand_strided((352, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_452 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_453 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_455 = rand_strided((384, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_456 = rand_strided((384, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_458 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_459 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_461 = rand_strided((416, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_462 = rand_strided((416, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_464 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_465 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_467 = rand_strided((448, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_468 = rand_strided((448, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_470 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_471 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_473 = rand_strided((480, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_474 = rand_strided((480, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_476 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_477 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_479 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_480 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_482 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_483 = rand_strided((256, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_485 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_486 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_488 = rand_strided((288, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_489 = rand_strided((288, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_491 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_492 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_494 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_495 = rand_strided((320, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_497 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_498 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_500 = rand_strided((352, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_501 = rand_strided((352, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_503 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_504 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_506 = rand_strided((384, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_507 = rand_strided((384, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_509 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_510 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_512 = rand_strided((416, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_513 = rand_strided((416, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_515 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_516 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_518 = rand_strided((448, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_519 = rand_strided((448, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_521 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_522 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_524 = rand_strided((480, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_525 = rand_strided((480, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_527 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_528 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_530 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_531 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_533 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_534 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_536 = rand_strided((544, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_537 = rand_strided((544, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_539 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_540 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_542 = rand_strided((576, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_543 = rand_strided((576, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_545 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_546 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_548 = rand_strided((608, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_549 = rand_strided((608, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_551 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_552 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_554 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_555 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_557 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_558 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_560 = rand_strided((672, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_561 = rand_strided((672, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_563 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_564 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_566 = rand_strided((704, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_567 = rand_strided((704, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_569 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_570 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_572 = rand_strided((736, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_573 = rand_strided((736, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_575 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_576 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_578 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_579 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_581 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_582 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_584 = rand_strided((800, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_585 = rand_strided((800, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_587 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_588 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_590 = rand_strided((832, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_591 = rand_strided((832, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_593 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_594 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_596 = rand_strided((864, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_597 = rand_strided((864, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_599 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_600 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_602 = rand_strided((896, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_603 = rand_strided((896, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_605 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_606 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_608 = rand_strided((928, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_609 = rand_strided((928, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_611 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_612 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_614 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_615 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_617 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_618 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_620 = rand_strided((992, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_621 = rand_strided((992, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_623 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_624 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_626 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_627 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_629 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_630 = rand_strided((512, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_632 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_633 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_635 = rand_strided((544, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_636 = rand_strided((544, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_638 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_639 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_641 = rand_strided((576, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_642 = rand_strided((576, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_644 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_645 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_647 = rand_strided((608, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_648 = rand_strided((608, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_650 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_651 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_653 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_654 = rand_strided((640, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_656 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_657 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_659 = rand_strided((672, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_660 = rand_strided((672, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_662 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_663 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_665 = rand_strided((704, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_666 = rand_strided((704, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_668 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_669 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_671 = rand_strided((736, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_672 = rand_strided((736, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_674 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_675 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_677 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_678 = rand_strided((768, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_680 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_681 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_683 = rand_strided((800, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_684 = rand_strided((800, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_686 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_687 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_689 = rand_strided((832, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_690 = rand_strided((832, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_692 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_693 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_695 = rand_strided((864, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_696 = rand_strided((864, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_698 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_699 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_701 = rand_strided((896, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_702 = rand_strided((896, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_704 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_705 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_707 = rand_strided((928, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_708 = rand_strided((928, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_710 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_711 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_713 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_714 = rand_strided((960, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_716 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_717 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_719 = rand_strided((992, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_720 = rand_strided((992, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_722 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_723 = rand_strided((128, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_725 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_726 = rand_strided((1024, ), (1, ), device='cuda:0', dtype=torch.float32)
    primals_728 = rand_strided((4, 3, 224, 224), (150528, 50176, 224, 1), device='cuda:0', dtype=torch.float32)
    convolution = rand_strided((4, 64, 112, 112), (802816, 12544, 112, 1), device='cuda:0', dtype=torch.float32)
    relu = rand_strided((4, 64, 112, 112), (802816, 12544, 112, 1), device='cuda:0', dtype=torch.float32)
    getitem_1 = rand_strided((4, 64, 56, 56), (200704, 3136, 56, 1), device='cuda:0', dtype=torch.int64)
    relu_1 = rand_strided((4, 64, 56, 56), (200704, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    convolution_1 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_2 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    cat = rand_strided((4, 96, 56, 56), (301056, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_3 = rand_strided((4, 96, 56, 56), (301056, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    convolution_3 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_4 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    cat_1 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_5 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    convolution_5 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_6 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    cat_2 = rand_strided((4, 160, 56, 56), (501760, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_7 = rand_strided((4, 160, 56, 56), (501760, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    convolution_7 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_8 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    cat_3 = rand_strided((4, 192, 56, 56), (602112, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_9 = rand_strided((4, 192, 56, 56), (602112, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    convolution_9 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_10 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    cat_4 = rand_strided((4, 224, 56, 56), (702464, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_11 = rand_strided((4, 224, 56, 56), (702464, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    convolution_11 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_12 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    cat_5 = rand_strided((4, 256, 56, 56), (802816, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    relu_13 = rand_strided((4, 256, 56, 56), (802816, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    convolution_13 = rand_strided((4, 128, 56, 56), (401408, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    avg_pool2d = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_14 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_14 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_15 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_6 = rand_strided((4, 160, 28, 28), (125440, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_16 = rand_strided((4, 160, 28, 28), (125440, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_16 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_17 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_7 = rand_strided((4, 192, 28, 28), (150528, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_18 = rand_strided((4, 192, 28, 28), (150528, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_18 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_19 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_8 = rand_strided((4, 224, 28, 28), (175616, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_20 = rand_strided((4, 224, 28, 28), (175616, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_20 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_21 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_9 = rand_strided((4, 256, 28, 28), (200704, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_22 = rand_strided((4, 256, 28, 28), (200704, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_22 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_23 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_10 = rand_strided((4, 288, 28, 28), (225792, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_24 = rand_strided((4, 288, 28, 28), (225792, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_24 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_25 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_11 = rand_strided((4, 320, 28, 28), (250880, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_26 = rand_strided((4, 320, 28, 28), (250880, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_26 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_27 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_12 = rand_strided((4, 352, 28, 28), (275968, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_28 = rand_strided((4, 352, 28, 28), (275968, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_28 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_29 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_13 = rand_strided((4, 384, 28, 28), (301056, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_30 = rand_strided((4, 384, 28, 28), (301056, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_30 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_31 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_14 = rand_strided((4, 416, 28, 28), (326144, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_32 = rand_strided((4, 416, 28, 28), (326144, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_32 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_33 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_15 = rand_strided((4, 448, 28, 28), (351232, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_34 = rand_strided((4, 448, 28, 28), (351232, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_34 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_35 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_16 = rand_strided((4, 480, 28, 28), (376320, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_36 = rand_strided((4, 480, 28, 28), (376320, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_36 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_37 = rand_strided((4, 128, 28, 28), (100352, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    cat_17 = rand_strided((4, 512, 28, 28), (401408, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    relu_38 = rand_strided((4, 512, 28, 28), (401408, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    convolution_38 = rand_strided((4, 256, 28, 28), (200704, 784, 28, 1), device='cuda:0', dtype=torch.float32)
    avg_pool2d_1 = rand_strided((4, 256, 14, 14), (50176, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_39 = rand_strided((4, 256, 14, 14), (50176, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_39 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_40 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_18 = rand_strided((4, 288, 14, 14), (56448, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_41 = rand_strided((4, 288, 14, 14), (56448, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_41 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_42 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_19 = rand_strided((4, 320, 14, 14), (62720, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_43 = rand_strided((4, 320, 14, 14), (62720, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_43 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_44 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_20 = rand_strided((4, 352, 14, 14), (68992, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_45 = rand_strided((4, 352, 14, 14), (68992, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_45 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_46 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_21 = rand_strided((4, 384, 14, 14), (75264, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_47 = rand_strided((4, 384, 14, 14), (75264, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_47 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_48 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_22 = rand_strided((4, 416, 14, 14), (81536, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_49 = rand_strided((4, 416, 14, 14), (81536, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_49 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_50 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_23 = rand_strided((4, 448, 14, 14), (87808, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_51 = rand_strided((4, 448, 14, 14), (87808, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_51 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_52 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_24 = rand_strided((4, 480, 14, 14), (94080, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_53 = rand_strided((4, 480, 14, 14), (94080, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_53 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_54 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_25 = rand_strided((4, 512, 14, 14), (100352, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_55 = rand_strided((4, 512, 14, 14), (100352, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_55 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_56 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_26 = rand_strided((4, 544, 14, 14), (106624, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_57 = rand_strided((4, 544, 14, 14), (106624, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_57 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_58 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_27 = rand_strided((4, 576, 14, 14), (112896, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_59 = rand_strided((4, 576, 14, 14), (112896, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_59 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_60 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_28 = rand_strided((4, 608, 14, 14), (119168, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_61 = rand_strided((4, 608, 14, 14), (119168, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_61 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_62 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_29 = rand_strided((4, 640, 14, 14), (125440, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_63 = rand_strided((4, 640, 14, 14), (125440, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_63 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_64 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_30 = rand_strided((4, 672, 14, 14), (131712, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_65 = rand_strided((4, 672, 14, 14), (131712, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_65 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_66 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_31 = rand_strided((4, 704, 14, 14), (137984, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_67 = rand_strided((4, 704, 14, 14), (137984, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_67 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_68 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_32 = rand_strided((4, 736, 14, 14), (144256, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_69 = rand_strided((4, 736, 14, 14), (144256, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_69 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_70 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_33 = rand_strided((4, 768, 14, 14), (150528, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_71 = rand_strided((4, 768, 14, 14), (150528, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_71 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_72 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_34 = rand_strided((4, 800, 14, 14), (156800, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_73 = rand_strided((4, 800, 14, 14), (156800, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_73 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_74 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_35 = rand_strided((4, 832, 14, 14), (163072, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_75 = rand_strided((4, 832, 14, 14), (163072, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_75 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_76 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_36 = rand_strided((4, 864, 14, 14), (169344, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_77 = rand_strided((4, 864, 14, 14), (169344, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_77 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_78 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_37 = rand_strided((4, 896, 14, 14), (175616, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_79 = rand_strided((4, 896, 14, 14), (175616, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_79 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_80 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_38 = rand_strided((4, 928, 14, 14), (181888, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_81 = rand_strided((4, 928, 14, 14), (181888, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_81 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_82 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_39 = rand_strided((4, 960, 14, 14), (188160, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_83 = rand_strided((4, 960, 14, 14), (188160, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_83 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_84 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_40 = rand_strided((4, 992, 14, 14), (194432, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_85 = rand_strided((4, 992, 14, 14), (194432, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_85 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_86 = rand_strided((4, 128, 14, 14), (25088, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    cat_41 = rand_strided((4, 1024, 14, 14), (200704, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    relu_87 = rand_strided((4, 1024, 14, 14), (200704, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    convolution_87 = rand_strided((4, 512, 14, 14), (100352, 196, 14, 1), device='cuda:0', dtype=torch.float32)
    avg_pool2d_2 = rand_strided((4, 512, 7, 7), (25088, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_88 = rand_strided((4, 512, 7, 7), (25088, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_88 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_89 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_42 = rand_strided((4, 544, 7, 7), (26656, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_90 = rand_strided((4, 544, 7, 7), (26656, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_90 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_91 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_43 = rand_strided((4, 576, 7, 7), (28224, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_92 = rand_strided((4, 576, 7, 7), (28224, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_92 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_93 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_44 = rand_strided((4, 608, 7, 7), (29792, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_94 = rand_strided((4, 608, 7, 7), (29792, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_94 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_95 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_45 = rand_strided((4, 640, 7, 7), (31360, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_96 = rand_strided((4, 640, 7, 7), (31360, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_96 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_97 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_46 = rand_strided((4, 672, 7, 7), (32928, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_98 = rand_strided((4, 672, 7, 7), (32928, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_98 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_99 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_47 = rand_strided((4, 704, 7, 7), (34496, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_100 = rand_strided((4, 704, 7, 7), (34496, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_100 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_101 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_48 = rand_strided((4, 736, 7, 7), (36064, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_102 = rand_strided((4, 736, 7, 7), (36064, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_102 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_103 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_49 = rand_strided((4, 768, 7, 7), (37632, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_104 = rand_strided((4, 768, 7, 7), (37632, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_104 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_105 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_50 = rand_strided((4, 800, 7, 7), (39200, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_106 = rand_strided((4, 800, 7, 7), (39200, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_106 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_107 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_51 = rand_strided((4, 832, 7, 7), (40768, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_108 = rand_strided((4, 832, 7, 7), (40768, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_108 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_109 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_52 = rand_strided((4, 864, 7, 7), (42336, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_110 = rand_strided((4, 864, 7, 7), (42336, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_110 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_111 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_53 = rand_strided((4, 896, 7, 7), (43904, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_112 = rand_strided((4, 896, 7, 7), (43904, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_112 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_113 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_54 = rand_strided((4, 928, 7, 7), (45472, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_114 = rand_strided((4, 928, 7, 7), (45472, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_114 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_115 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_55 = rand_strided((4, 960, 7, 7), (47040, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_116 = rand_strided((4, 960, 7, 7), (47040, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_116 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_117 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_56 = rand_strided((4, 992, 7, 7), (48608, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_118 = rand_strided((4, 992, 7, 7), (48608, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    convolution_118 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    relu_119 = rand_strided((4, 128, 7, 7), (6272, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    cat_57 = rand_strided((4, 1024, 7, 7), (50176, 49, 7, 1), device='cuda:0', dtype=torch.float32)
    view = rand_strided((4, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    permute_1 = rand_strided((1000, 1024), (1024, 1), device='cuda:0', dtype=torch.float32)
    le = rand_strided((4, 1024, 7, 7), (50176, 49, 7, 1), device='cuda:0', dtype=torch.bool)
    sub_240 = rand_strided((4, 64, 56, 56), (200704, 3136, 56, 1), device='cuda:0', dtype=torch.float32)
    tangents_1 = rand_strided((4, 1000), (1000, 1), device='cuda:0', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_2, primals_4, primals_6, primals_7, primals_9, primals_10, primals_12, primals_13, primals_15, primals_16, primals_18, primals_19, primals_21, primals_22, primals_24, primals_25, primals_27, primals_28, primals_30, primals_31, primals_33, primals_34, primals_36, primals_37, primals_39, primals_40, primals_42, primals_43, primals_45, primals_46, primals_48, primals_49, primals_51, primals_52, primals_54, primals_55, primals_57, primals_58, primals_60, primals_61, primals_63, primals_64, primals_66, primals_67, primals_69, primals_70, primals_72, primals_73, primals_75, primals_76, primals_78, primals_79, primals_81, primals_82, primals_84, primals_85, primals_87, primals_88, primals_90, primals_91, primals_93, primals_94, primals_96, primals_97, primals_99, primals_100, primals_102, primals_103, primals_105, primals_106, primals_108, primals_109, primals_111, primals_112, primals_114, primals_115, primals_117, primals_118, primals_120, primals_121, primals_123, primals_124, primals_126, primals_127, primals_129, primals_130, primals_132, primals_133, primals_135, primals_136, primals_138, primals_139, primals_141, primals_142, primals_144, primals_145, primals_147, primals_148, primals_150, primals_151, primals_153, primals_154, primals_156, primals_157, primals_159, primals_160, primals_162, primals_163, primals_165, primals_166, primals_168, primals_169, primals_171, primals_172, primals_174, primals_175, primals_177, primals_178, primals_180, primals_181, primals_183, primals_184, primals_186, primals_187, primals_189, primals_190, primals_192, primals_193, primals_195, primals_196, primals_198, primals_199, primals_201, primals_202, primals_204, primals_205, primals_207, primals_208, primals_210, primals_211, primals_213, primals_214, primals_216, primals_217, primals_219, primals_220, primals_222, primals_223, primals_225, primals_226, primals_228, primals_229, primals_231, primals_232, primals_234, primals_235, primals_237, primals_238, primals_240, primals_241, primals_243, primals_244, primals_246, primals_247, primals_249, primals_250, primals_252, primals_253, primals_255, primals_256, primals_258, primals_259, primals_261, primals_262, primals_264, primals_265, primals_267, primals_268, primals_270, primals_271, primals_273, primals_274, primals_276, primals_277, primals_279, primals_280, primals_282, primals_283, primals_285, primals_286, primals_288, primals_289, primals_291, primals_292, primals_294, primals_295, primals_297, primals_298, primals_300, primals_301, primals_303, primals_304, primals_306, primals_307, primals_309, primals_310, primals_312, primals_313, primals_315, primals_316, primals_318, primals_319, primals_321, primals_322, primals_324, primals_325, primals_327, primals_328, primals_330, primals_331, primals_333, primals_334, primals_336, primals_337, primals_339, primals_340, primals_342, primals_343, primals_345, primals_346, primals_348, primals_349, primals_351, primals_352, primals_354, primals_355, primals_357, primals_358, primals_360, primals_361, primals_365, primals_366, primals_369, primals_371, primals_372, primals_374, primals_375, primals_377, primals_378, primals_380, primals_381, primals_383, primals_384, primals_386, primals_387, primals_389, primals_390, primals_392, primals_393, primals_395, primals_396, primals_398, primals_399, primals_401, primals_402, primals_404, primals_405, primals_407, primals_408, primals_410, primals_411, primals_413, primals_414, primals_416, primals_417, primals_419, primals_420, primals_422, primals_423, primals_425, primals_426, primals_428, primals_429, primals_431, primals_432, primals_434, primals_435, primals_437, primals_438, primals_440, primals_441, primals_443, primals_444, primals_446, primals_447, primals_449, primals_450, primals_452, primals_453, primals_455, primals_456, primals_458, primals_459, primals_461, primals_462, primals_464, primals_465, primals_467, primals_468, primals_470, primals_471, primals_473, primals_474, primals_476, primals_477, primals_479, primals_480, primals_482, primals_483, primals_485, primals_486, primals_488, primals_489, primals_491, primals_492, primals_494, primals_495, primals_497, primals_498, primals_500, primals_501, primals_503, primals_504, primals_506, primals_507, primals_509, primals_510, primals_512, primals_513, primals_515, primals_516, primals_518, primals_519, primals_521, primals_522, primals_524, primals_525, primals_527, primals_528, primals_530, primals_531, primals_533, primals_534, primals_536, primals_537, primals_539, primals_540, primals_542, primals_543, primals_545, primals_546, primals_548, primals_549, primals_551, primals_552, primals_554, primals_555, primals_557, primals_558, primals_560, primals_561, primals_563, primals_564, primals_566, primals_567, primals_569, primals_570, primals_572, primals_573, primals_575, primals_576, primals_578, primals_579, primals_581, primals_582, primals_584, primals_585, primals_587, primals_588, primals_590, primals_591, primals_593, primals_594, primals_596, primals_597, primals_599, primals_600, primals_602, primals_603, primals_605, primals_606, primals_608, primals_609, primals_611, primals_612, primals_614, primals_615, primals_617, primals_618, primals_620, primals_621, primals_623, primals_624, primals_626, primals_627, primals_629, primals_630, primals_632, primals_633, primals_635, primals_636, primals_638, primals_639, primals_641, primals_642, primals_644, primals_645, primals_647, primals_648, primals_650, primals_651, primals_653, primals_654, primals_656, primals_657, primals_659, primals_660, primals_662, primals_663, primals_665, primals_666, primals_668, primals_669, primals_671, primals_672, primals_674, primals_675, primals_677, primals_678, primals_680, primals_681, primals_683, primals_684, primals_686, primals_687, primals_689, primals_690, primals_692, primals_693, primals_695, primals_696, primals_698, primals_699, primals_701, primals_702, primals_704, primals_705, primals_707, primals_708, primals_710, primals_711, primals_713, primals_714, primals_716, primals_717, primals_719, primals_720, primals_722, primals_723, primals_725, primals_726, primals_728, convolution, relu, getitem_1, relu_1, convolution_1, relu_2, cat, relu_3, convolution_3, relu_4, cat_1, relu_5, convolution_5, relu_6, cat_2, relu_7, convolution_7, relu_8, cat_3, relu_9, convolution_9, relu_10, cat_4, relu_11, convolution_11, relu_12, cat_5, relu_13, convolution_13, avg_pool2d, relu_14, convolution_14, relu_15, cat_6, relu_16, convolution_16, relu_17, cat_7, relu_18, convolution_18, relu_19, cat_8, relu_20, convolution_20, relu_21, cat_9, relu_22, convolution_22, relu_23, cat_10, relu_24, convolution_24, relu_25, cat_11, relu_26, convolution_26, relu_27, cat_12, relu_28, convolution_28, relu_29, cat_13, relu_30, convolution_30, relu_31, cat_14, relu_32, convolution_32, relu_33, cat_15, relu_34, convolution_34, relu_35, cat_16, relu_36, convolution_36, relu_37, cat_17, relu_38, convolution_38, avg_pool2d_1, relu_39, convolution_39, relu_40, cat_18, relu_41, convolution_41, relu_42, cat_19, relu_43, convolution_43, relu_44, cat_20, relu_45, convolution_45, relu_46, cat_21, relu_47, convolution_47, relu_48, cat_22, relu_49, convolution_49, relu_50, cat_23, relu_51, convolution_51, relu_52, cat_24, relu_53, convolution_53, relu_54, cat_25, relu_55, convolution_55, relu_56, cat_26, relu_57, convolution_57, relu_58, cat_27, relu_59, convolution_59, relu_60, cat_28, relu_61, convolution_61, relu_62, cat_29, relu_63, convolution_63, relu_64, cat_30, relu_65, convolution_65, relu_66, cat_31, relu_67, convolution_67, relu_68, cat_32, relu_69, convolution_69, relu_70, cat_33, relu_71, convolution_71, relu_72, cat_34, relu_73, convolution_73, relu_74, cat_35, relu_75, convolution_75, relu_76, cat_36, relu_77, convolution_77, relu_78, cat_37, relu_79, convolution_79, relu_80, cat_38, relu_81, convolution_81, relu_82, cat_39, relu_83, convolution_83, relu_84, cat_40, relu_85, convolution_85, relu_86, cat_41, relu_87, convolution_87, avg_pool2d_2, relu_88, convolution_88, relu_89, cat_42, relu_90, convolution_90, relu_91, cat_43, relu_92, convolution_92, relu_93, cat_44, relu_94, convolution_94, relu_95, cat_45, relu_96, convolution_96, relu_97, cat_46, relu_98, convolution_98, relu_99, cat_47, relu_100, convolution_100, relu_101, cat_48, relu_102, convolution_102, relu_103, cat_49, relu_104, convolution_104, relu_105, cat_50, relu_106, convolution_106, relu_107, cat_51, relu_108, convolution_108, relu_109, cat_52, relu_110, convolution_110, relu_111, cat_53, relu_112, convolution_112, relu_113, cat_54, relu_114, convolution_114, relu_115, cat_55, relu_116, convolution_116, relu_117, cat_56, relu_118, convolution_118, relu_119, cat_57, view, permute_1, le, sub_240, tangents_1]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('densenet121', benchmark_compiled_module)
