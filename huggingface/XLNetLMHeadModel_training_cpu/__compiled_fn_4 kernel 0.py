
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_nll_loss_backward_nll_loss_forward_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const long* in_ptr0,
                       float* out_ptr0,
                       long* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384000L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr0 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0)];
                    auto tmp1 = static_cast<long>(-100);
                    auto tmp2 = tmp0 != tmp1;
                    auto tmp3 = static_cast<long>(0);
                    auto tmp4 = tmp2 ? tmp0 : tmp3;
                    out_ptr1[static_cast<long>(x0)] = tmp4;
                }
            }
        }
    }
}
''')


cpp_fused__log_softmax_backward_data_add_nll_loss_backward_nll_loss_forward_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const long* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(32000L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (32000L*x0)));
                        auto tmp1 = in_ptr1[static_cast<long>(x0)];
                        auto tmp4 = in_ptr2[static_cast<long>(0L)];
                        auto tmp5 = in_ptr3[static_cast<long>(0L)];
                        auto tmp2 = static_cast<int>(-100);
                        auto tmp3 = tmp1 != tmp2;
                        auto tmp6 = tmp4 / tmp5;
                        auto tmp7 = static_cast<float>(0.0);
                        auto tmp8 = tmp3 ? tmp6 : tmp7;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp0 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(32000L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (32000L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (32000L*x0)));
                    auto tmp2 = in_ptr1[static_cast<long>(x0)];
                    auto tmp5 = in_ptr2[static_cast<long>(0L)];
                    auto tmp6 = in_ptr3[static_cast<long>(0L)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (32000L*x0)));
                    auto tmp14 = out_ptr0[static_cast<long>(x0)];
                    auto tmp3 = static_cast<int>(-100);
                    auto tmp4 = tmp2 != tmp3;
                    auto tmp7 = tmp5 / tmp6;
                    auto tmp8 = static_cast<float>(0.0);
                    auto tmp9 = tmp4 ? tmp7 : tmp8;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp1 * tmp10;
                    auto tmp13 = tmp12.exp();
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp11 - tmp16;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (32000L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_native_dropout_backward_native_layer_norm_backward_sum_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32000L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (32000L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x1 + (1024L*x0))];
                        auto tmp1 = in_ptr2[static_cast<long>(x1 + (1024L*x0))];
                        auto tmp6 = in_ptr3[static_cast<long>(x1)];
                        auto tmp8 = in_ptr4[static_cast<long>(x1 + (1024L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        auto tmp9 = decltype(tmp7)(tmp7 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp7;
                        tmp_acc1 = tmp_acc1 + tmp9;
                    }
                    out_ptr1[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr2[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (1024L*x0))];
                    auto tmp2 = in_ptr2[static_cast<long>(x1 + (1024L*x0))];
                    auto tmp7 = in_ptr3[static_cast<long>(x1)];
                    auto tmp11 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = in_ptr4[static_cast<long>(x1 + (1024L*x0))];
                    auto tmp14 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = c10::convert<float>(tmp2);
                    auto tmp4 = static_cast<float>(1.1111111111111112);
                    auto tmp5 = decltype(tmp3)(tmp3 * tmp4);
                    auto tmp6 = decltype(tmp1)(tmp1 * tmp5);
                    auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                    auto tmp9 = static_cast<float>(1024.0);
                    auto tmp10 = decltype(tmp8)(tmp8 * tmp9);
                    auto tmp12 = decltype(tmp10)(tmp10 - tmp11);
                    auto tmp15 = decltype(tmp13)(tmp13 * tmp14);
                    auto tmp16 = decltype(tmp12)(tmp12 - tmp15);
                    auto tmp17 = decltype(tmp0)(tmp0 * tmp16);
                    out_ptr3[static_cast<long>(x1 + (1024L*x0))] = tmp17;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    float tmp_acc1 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x0 + (1024L*x1))];
                        auto tmp1 = in_ptr2[static_cast<long>(x0 + (1024L*x1))];
                        auto tmp6 = in_ptr4[static_cast<long>(x0 + (1024L*x1))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                        tmp_acc1 = tmp_acc1 + tmp5;
                    }
                    out_ptr4[static_cast<long>(x0)] = tmp_acc0;
                    out_ptr5[static_cast<long>(x0)] = tmp_acc1;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_172 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_173 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_174 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_175 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_176 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_177 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_178 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_179 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_180 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_181 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_182 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_183 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_184 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_185 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_186 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_187 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_188 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_189 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_190 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_191 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_192 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_193 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_194 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_195 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_196 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_197 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_198 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_199 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_200 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_201 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_202 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_203 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_204 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_205 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_206 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_207 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_208 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_209 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const bool* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr6[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp5 = out_ptr1[static_cast<long>(x0)];
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp9 = out_ptr2[static_cast<long>(x0)];
                    auto tmp2 = static_cast<float>(1024.0);
                    auto tmp3 = at::vec::Vectorized<float>(tmp2);
                    auto tmp4 = tmp1 * tmp3;
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 * tmp10;
                    auto tmp12 = tmp7 - tmp11;
                    auto tmp13 = at::vec::Vectorized<float>(tmp0);
                    auto tmp14 = tmp13 * tmp12;
                    tmp14.store(in_out_ptr0 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr5[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_210 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (1024L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(x0)];
                auto tmp6 = in_ptr2[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = static_cast<float>(0.7071067811865476);
                auto tmp8 = decltype(tmp6)(tmp6 * tmp7);
                auto tmp9 = std::erf(tmp8);
                auto tmp10 = static_cast<float>(1.0);
                auto tmp11 = decltype(tmp9)(tmp9 + tmp10);
                auto tmp12 = static_cast<float>(0.5);
                auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                auto tmp14 = decltype(tmp6)(tmp6 * tmp6);
                auto tmp15 = static_cast<float>(-0.5);
                auto tmp16 = decltype(tmp14)(tmp14 * tmp15);
                auto tmp17 = std::exp(tmp16);
                auto tmp18 = static_cast<float>(0.3989422804014327);
                auto tmp19 = decltype(tmp17)(tmp17 * tmp18);
                auto tmp20 = decltype(tmp6)(tmp6 * tmp19);
                auto tmp21 = decltype(tmp13)(tmp13 + tmp20);
                auto tmp22 = decltype(tmp5)(tmp5 * tmp21);
                in_out_ptr0[static_cast<long>(x0)] = tmp22;
            }
        }
    }
}
''')


cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_211 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const bool* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        auto tmp6 = tmp4 * tmp5;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr5[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                    auto tmp9 = out_ptr1[static_cast<long>(x0)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (1024L*x0)));
                    auto tmp13 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 + tmp2;
                    auto tmp5 = tmp3 * tmp4;
                    auto tmp6 = static_cast<float>(1024.0);
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp8 - tmp10;
                    auto tmp14 = at::vec::Vectorized<float>(tmp13);
                    auto tmp15 = tmp12 * tmp14;
                    auto tmp16 = tmp11 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp0);
                    auto tmp18 = tmp17 * tmp16;
                    tmp18.store(out_ptr3 + static_cast<long>(x1 + (1024L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (1024L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp4;
                        tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(524288L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = out_ptr3[static_cast<long>(x0)];
                auto tmp1 = in_ptr6[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                out_ptr6[static_cast<long>(x0)] = tmp5;
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_mul_native_dropout_backward_new_zeros_212 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (512L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                        auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                        auto tmp2 = c10::convert<float>(tmp1);
                        auto tmp3 = static_cast<float>(1.1111111111111112);
                        auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                        auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                        auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                        tmp_acc0 = tmp_acc0 + tmp7;
                    }
                    out_ptr0[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8380416L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(8192L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (512L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (512L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (512L*x0))];
                    auto tmp8 = out_ptr0[static_cast<long>(x0)];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                    auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                    auto tmp11 = static_cast<float>(0.125);
                    auto tmp12 = decltype(tmp10)(tmp10 * tmp11);
                    in_out_ptr0[static_cast<long>(x1 + (512L*x0))] = tmp12;
                }
            }
        }
    }
}
''')


cpp_fused_bmm_slice_backward_213 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for  collapse(2)
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = c10::convert<int>(x1);
                        auto tmp1 = static_cast<int>(1);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = masked_load(in_ptr0 + static_cast<long>((-512L) + x2 + (512L*x1) + (523776L*x0)), to_float_mask(tmp2));
                            return tmp4;
                        }
                        ;
                        auto tmp5 = decltype(tmp3())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp3(), to_float_mask(tmp2));
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = to_float_mask(tmp2);
                        auto tmp8 = at::vec::Vectorized<float>(tmp6);
                        auto tmp9 = decltype(tmp5)::blendv(tmp8, tmp5, tmp7);
                        tmp9.store(out_ptr0 + static_cast<long>(x2 + (512L*x1) + (524288L*x0)));
                    }
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(524288L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr1 + static_cast<long>(x1 + (524288L*x0)));
                    tmp0.store(out_ptr2 + static_cast<long>(x1 + (524288L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_sum_214 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_sum_215 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(64L); x1+=static_cast<long>(8L))
                {
                    {
                        #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                        float tmp_acc0 = 0;
                        at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                        for(long x2=static_cast<long>(0L); x2<static_cast<long>(512L); x2+=static_cast<long>(1L))
                        {
                            auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (64L*x2) + (32768L*x0)));
                            tmp_acc0_vec = tmp_acc0_vec + tmp0;
                        }
                        tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x1 + (64L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_216 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x0) + (32768L*x1)));
                        tmp0.store(out_ptr0 + static_cast<long>(x2 + (64L*x1) + (1024L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_clone_217 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(64L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (64L*x1) + (32768L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        tmp2.store(out_ptr0 + static_cast<long>(x2 + (64L*x0) + (1024L*x1)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_embedding_dense_backward_native_dropout_backward_nll_loss_forward_218 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const long* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const bool* in_ptr4,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(32768000L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr0 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(1024L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0)];
                    auto tmp3 = in_out_ptr0[static_cast<long>(x1 + (1024L*x0))];
                    auto tmp4 = in_ptr1[static_cast<long>(x1 + (1024L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (1024L*x0))];
                    auto tmp8 = in_ptr3[static_cast<long>(x1 + (1024L*x0))];
                    auto tmp10 = in_ptr4[static_cast<long>(x1 + (1024L*x0))];
                    auto tmp1 = static_cast<long>(-1);
                    auto tmp2 = tmp0 == tmp1;
                    auto tmp5 = decltype(tmp3)(tmp3 + tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 + tmp6);
                    auto tmp9 = decltype(tmp7)(tmp7 + tmp8);
                    auto tmp11 = c10::convert<float>(tmp10);
                    auto tmp12 = static_cast<float>(1.1111111111111112);
                    auto tmp13 = decltype(tmp11)(tmp11 * tmp12);
                    auto tmp14 = decltype(tmp9)(tmp9 * tmp13);
                    auto tmp15 = static_cast<float>(0.0);
                    auto tmp16 = tmp2 ? tmp15 : tmp14;
                    in_out_ptr0[static_cast<long>(x1 + (1024L*x0))] = tmp16;
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_170, primals_176, primals_178, primals_184, primals_186, primals_192, primals_194, primals_200, primals_202, primals_208, primals_210, primals_216, primals_218, primals_224, primals_226, primals_232, primals_234, primals_240, primals_242, primals_248, primals_250, primals_256, primals_258, primals_264, primals_266, primals_272, primals_274, primals_280, primals_282, primals_288, primals_290, primals_296, primals_298, primals_304, primals_306, primals_312, primals_314, primals_320, primals_322, primals_328, primals_330, primals_336, primals_338, primals_344, primals_346, primals_352, primals_354, primals_360, primals_365, permute, getitem_1, iota, getitem_5, getitem_7, mul_5, view_34, addmm, getitem_11, view_36, getitem_13, mul_10, getitem_17, getitem_19, mul_13, view_72, addmm_2, getitem_23, view_74, getitem_25, mul_18, getitem_29, getitem_31, mul_21, view_110, addmm_4, getitem_35, view_112, getitem_37, mul_26, getitem_41, getitem_43, mul_29, view_148, addmm_6, getitem_47, view_150, getitem_49, mul_34, getitem_53, getitem_55, mul_37, view_186, addmm_8, getitem_59, view_188, getitem_61, mul_42, getitem_65, getitem_67, mul_45, view_224, addmm_10, getitem_71, view_226, getitem_73, mul_50, getitem_77, getitem_79, mul_53, view_262, addmm_12, getitem_83, view_264, getitem_85, mul_58, getitem_89, getitem_91, mul_61, view_300, addmm_14, getitem_95, view_302, getitem_97, mul_66, getitem_101, getitem_103, mul_69, view_338, addmm_16, getitem_107, view_340, getitem_109, mul_74, getitem_113, getitem_115, mul_77, view_376, addmm_18, getitem_119, view_378, getitem_121, mul_82, getitem_125, getitem_127, mul_85, view_414, addmm_20, getitem_131, view_416, getitem_133, mul_90, getitem_137, getitem_139, mul_93, view_452, addmm_22, getitem_143, view_454, getitem_145, mul_98, getitem_149, getitem_151, mul_101, view_490, addmm_24, getitem_155, view_492, getitem_157, mul_106, getitem_161, getitem_163, mul_109, view_528, addmm_26, getitem_167, view_530, getitem_169, mul_114, getitem_173, getitem_175, mul_117, view_566, addmm_28, getitem_179, view_568, getitem_181, mul_122, getitem_185, getitem_187, mul_125, view_604, addmm_30, getitem_191, view_606, getitem_193, mul_130, getitem_197, getitem_199, mul_133, view_642, addmm_32, getitem_203, view_644, getitem_205, mul_138, getitem_209, getitem_211, mul_141, view_680, addmm_34, getitem_215, view_682, getitem_217, mul_146, getitem_221, getitem_223, mul_149, view_718, addmm_36, getitem_227, view_720, getitem_229, mul_154, getitem_233, getitem_235, mul_157, view_756, addmm_38, getitem_239, view_758, getitem_241, mul_162, getitem_245, getitem_247, mul_165, view_794, addmm_40, getitem_251, view_796, getitem_253, mul_170, getitem_257, getitem_259, mul_173, view_832, addmm_42, getitem_263, view_834, getitem_265, mul_178, getitem_269, getitem_271, mul_181, view_870, addmm_44, getitem_275, view_872, getitem_277, mul_186, getitem_281, getitem_283, mul_189, view_908, addmm_46, getitem_287, view_910, getitem_289, mul_194, getitem_293, view_912, sub_73, convert_element_type_4, permute_1013, div_27, permute_1018, permute_1022, div_28, permute_1027, permute_1028, permute_1034, permute_1035, alias_26, permute_1041, permute_1042, permute_1048, permute_1049, permute_1055, permute_1059, permute_1060, permute_1067, permute_1074, div_29, permute_1079, permute_1083, div_30, permute_1088, permute_1089, permute_1095, permute_1096, alias_27, permute_1102, permute_1103, permute_1109, permute_1110, permute_1120, permute_1121, permute_1128, permute_1135, div_31, permute_1140, permute_1144, div_32, permute_1149, permute_1150, permute_1156, permute_1157, alias_28, permute_1163, permute_1164, permute_1170, permute_1171, permute_1181, permute_1182, permute_1189, permute_1196, div_33, permute_1201, permute_1205, div_34, permute_1210, permute_1211, permute_1217, permute_1218, alias_29, permute_1224, permute_1225, permute_1231, permute_1232, permute_1242, permute_1243, permute_1250, permute_1257, div_35, permute_1262, permute_1266, div_36, permute_1271, permute_1272, permute_1278, permute_1279, alias_30, permute_1285, permute_1286, permute_1292, permute_1293, permute_1303, permute_1304, permute_1311, permute_1318, div_37, permute_1323, permute_1327, div_38, permute_1332, permute_1333, permute_1339, permute_1340, alias_31, permute_1346, permute_1347, permute_1353, permute_1354, permute_1364, permute_1365, permute_1372, permute_1379, div_39, permute_1384, permute_1388, div_40, permute_1393, permute_1394, permute_1400, permute_1401, alias_32, permute_1407, permute_1408, permute_1414, permute_1415, permute_1425, permute_1426, permute_1433, permute_1440, div_41, permute_1445, permute_1449, div_42, permute_1454, permute_1455, permute_1461, permute_1462, alias_33, permute_1468, permute_1469, permute_1475, permute_1476, permute_1486, permute_1487, permute_1494, permute_1501, div_43, permute_1506, permute_1510, div_44, permute_1515, permute_1516, permute_1522, permute_1523, alias_34, permute_1529, permute_1530, permute_1536, permute_1537, permute_1547, permute_1548, permute_1555, permute_1562, div_45, permute_1567, permute_1571, div_46, permute_1576, permute_1577, permute_1583, permute_1584, alias_35, permute_1590, permute_1591, permute_1597, permute_1598, permute_1608, permute_1609, permute_1616, permute_1623, div_47, permute_1628, permute_1632, div_48, permute_1637, permute_1638, permute_1644, permute_1645, alias_36, permute_1651, permute_1652, permute_1658, permute_1659, permute_1669, permute_1670, permute_1677, permute_1684, div_49, permute_1689, permute_1693, div_50, permute_1698, permute_1699, permute_1705, permute_1706, alias_37, permute_1712, permute_1713, permute_1719, permute_1720, permute_1730, permute_1731, permute_1738, permute_1745, div_51, permute_1750, permute_1754, div_52, permute_1759, permute_1760, permute_1766, permute_1767, alias_38, permute_1773, permute_1774, permute_1780, permute_1781, permute_1791, permute_1792, permute_1799, permute_1806, div_53, permute_1811, permute_1815, div_54, permute_1820, permute_1821, permute_1827, permute_1828, alias_39, permute_1834, permute_1835, permute_1841, permute_1842, permute_1852, permute_1853, permute_1860, permute_1867, div_55, permute_1872, permute_1876, div_56, permute_1881, permute_1882, permute_1888, permute_1889, alias_40, permute_1895, permute_1896, permute_1902, permute_1903, permute_1913, permute_1914, permute_1921, permute_1928, div_57, permute_1933, permute_1937, div_58, permute_1942, permute_1943, permute_1949, permute_1950, alias_41, permute_1956, permute_1957, permute_1963, permute_1964, permute_1974, permute_1975, permute_1982, permute_1989, div_59, permute_1994, permute_1998, div_60, permute_2003, permute_2004, permute_2010, permute_2011, alias_42, permute_2017, permute_2018, permute_2024, permute_2025, permute_2035, permute_2036, permute_2043, permute_2050, div_61, permute_2055, permute_2059, div_62, permute_2064, permute_2065, permute_2071, permute_2072, alias_43, permute_2078, permute_2079, permute_2085, permute_2086, permute_2096, permute_2097, permute_2104, permute_2111, div_63, permute_2116, permute_2120, div_64, permute_2125, permute_2126, permute_2132, permute_2133, alias_44, permute_2139, permute_2140, permute_2146, permute_2147, permute_2157, permute_2158, permute_2165, permute_2172, div_65, permute_2177, permute_2181, div_66, permute_2186, permute_2187, permute_2193, permute_2194, alias_45, permute_2200, permute_2201, permute_2207, permute_2208, permute_2218, permute_2219, permute_2226, permute_2233, div_67, permute_2238, permute_2242, div_68, permute_2247, permute_2248, permute_2254, permute_2255, alias_46, permute_2261, permute_2262, permute_2268, permute_2269, permute_2279, permute_2280, permute_2287, permute_2294, div_69, permute_2299, permute_2303, div_70, permute_2308, permute_2309, permute_2315, permute_2316, alias_47, permute_2322, permute_2323, permute_2329, permute_2330, permute_2340, permute_2341, permute_2348, permute_2355, div_71, permute_2360, permute_2364, div_72, permute_2369, permute_2370, permute_2376, permute_2377, alias_48, permute_2383, permute_2384, permute_2390, permute_2391, permute_2401, permute_2402, permute_2409, permute_2416, div_73, permute_2421, permute_2425, div_74, permute_2430, permute_2431, permute_2437, permute_2438, alias_49, permute_2444, permute_2445, permute_2451, permute_2452, permute_2462, permute_2463, permute_2470, permute_2477, tangents_1, tangents_2 = args
    args.clear()
    assert_size_stride(primals_170, (1024, ), (1, ))
    assert_size_stride(primals_176, (1024, ), (1, ))
    assert_size_stride(primals_178, (1024, ), (1, ))
    assert_size_stride(primals_184, (1024, ), (1, ))
    assert_size_stride(primals_186, (1024, ), (1, ))
    assert_size_stride(primals_192, (1024, ), (1, ))
    assert_size_stride(primals_194, (1024, ), (1, ))
    assert_size_stride(primals_200, (1024, ), (1, ))
    assert_size_stride(primals_202, (1024, ), (1, ))
    assert_size_stride(primals_208, (1024, ), (1, ))
    assert_size_stride(primals_210, (1024, ), (1, ))
    assert_size_stride(primals_216, (1024, ), (1, ))
    assert_size_stride(primals_218, (1024, ), (1, ))
    assert_size_stride(primals_224, (1024, ), (1, ))
    assert_size_stride(primals_226, (1024, ), (1, ))
    assert_size_stride(primals_232, (1024, ), (1, ))
    assert_size_stride(primals_234, (1024, ), (1, ))
    assert_size_stride(primals_240, (1024, ), (1, ))
    assert_size_stride(primals_242, (1024, ), (1, ))
    assert_size_stride(primals_248, (1024, ), (1, ))
    assert_size_stride(primals_250, (1024, ), (1, ))
    assert_size_stride(primals_256, (1024, ), (1, ))
    assert_size_stride(primals_258, (1024, ), (1, ))
    assert_size_stride(primals_264, (1024, ), (1, ))
    assert_size_stride(primals_266, (1024, ), (1, ))
    assert_size_stride(primals_272, (1024, ), (1, ))
    assert_size_stride(primals_274, (1024, ), (1, ))
    assert_size_stride(primals_280, (1024, ), (1, ))
    assert_size_stride(primals_282, (1024, ), (1, ))
    assert_size_stride(primals_288, (1024, ), (1, ))
    assert_size_stride(primals_290, (1024, ), (1, ))
    assert_size_stride(primals_296, (1024, ), (1, ))
    assert_size_stride(primals_298, (1024, ), (1, ))
    assert_size_stride(primals_304, (1024, ), (1, ))
    assert_size_stride(primals_306, (1024, ), (1, ))
    assert_size_stride(primals_312, (1024, ), (1, ))
    assert_size_stride(primals_314, (1024, ), (1, ))
    assert_size_stride(primals_320, (1024, ), (1, ))
    assert_size_stride(primals_322, (1024, ), (1, ))
    assert_size_stride(primals_328, (1024, ), (1, ))
    assert_size_stride(primals_330, (1024, ), (1, ))
    assert_size_stride(primals_336, (1024, ), (1, ))
    assert_size_stride(primals_338, (1024, ), (1, ))
    assert_size_stride(primals_344, (1024, ), (1, ))
    assert_size_stride(primals_346, (1024, ), (1, ))
    assert_size_stride(primals_352, (1024, ), (1, ))
    assert_size_stride(primals_354, (1024, ), (1, ))
    assert_size_stride(primals_360, (1024, ), (1, ))
    assert_size_stride(primals_365, (1, 512), (512, 1))
    assert_size_stride(permute, (512, 1), (1, 512))
    assert_size_stride(getitem_1, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(iota, (512, ), (1, ))
    assert_size_stride(getitem_5, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_7, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_5, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_34, (512, 1024), (1024, 1))
    assert_size_stride(addmm, (512, 4096), (4096, 1))
    assert_size_stride(getitem_11, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_36, (512, 4096), (4096, 1))
    assert_size_stride(getitem_13, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_10, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_17, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_19, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_13, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_72, (512, 1024), (1024, 1))
    assert_size_stride(addmm_2, (512, 4096), (4096, 1))
    assert_size_stride(getitem_23, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_74, (512, 4096), (4096, 1))
    assert_size_stride(getitem_25, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_18, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_29, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_31, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_21, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_110, (512, 1024), (1024, 1))
    assert_size_stride(addmm_4, (512, 4096), (4096, 1))
    assert_size_stride(getitem_35, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_112, (512, 4096), (4096, 1))
    assert_size_stride(getitem_37, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_26, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_41, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_43, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_29, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_148, (512, 1024), (1024, 1))
    assert_size_stride(addmm_6, (512, 4096), (4096, 1))
    assert_size_stride(getitem_47, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_150, (512, 4096), (4096, 1))
    assert_size_stride(getitem_49, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_34, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_53, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_55, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_37, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_186, (512, 1024), (1024, 1))
    assert_size_stride(addmm_8, (512, 4096), (4096, 1))
    assert_size_stride(getitem_59, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_188, (512, 4096), (4096, 1))
    assert_size_stride(getitem_61, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_42, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_65, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_67, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_45, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_224, (512, 1024), (1024, 1))
    assert_size_stride(addmm_10, (512, 4096), (4096, 1))
    assert_size_stride(getitem_71, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_226, (512, 4096), (4096, 1))
    assert_size_stride(getitem_73, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_50, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_77, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_79, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_53, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_262, (512, 1024), (1024, 1))
    assert_size_stride(addmm_12, (512, 4096), (4096, 1))
    assert_size_stride(getitem_83, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_264, (512, 4096), (4096, 1))
    assert_size_stride(getitem_85, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_58, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_89, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_91, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_61, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_300, (512, 1024), (1024, 1))
    assert_size_stride(addmm_14, (512, 4096), (4096, 1))
    assert_size_stride(getitem_95, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_302, (512, 4096), (4096, 1))
    assert_size_stride(getitem_97, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_66, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_101, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_103, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_69, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_338, (512, 1024), (1024, 1))
    assert_size_stride(addmm_16, (512, 4096), (4096, 1))
    assert_size_stride(getitem_107, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_340, (512, 4096), (4096, 1))
    assert_size_stride(getitem_109, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_74, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_113, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_115, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_77, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_376, (512, 1024), (1024, 1))
    assert_size_stride(addmm_18, (512, 4096), (4096, 1))
    assert_size_stride(getitem_119, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_378, (512, 4096), (4096, 1))
    assert_size_stride(getitem_121, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_82, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_125, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_127, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_85, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_414, (512, 1024), (1024, 1))
    assert_size_stride(addmm_20, (512, 4096), (4096, 1))
    assert_size_stride(getitem_131, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_416, (512, 4096), (4096, 1))
    assert_size_stride(getitem_133, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_90, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_137, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_139, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_93, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_452, (512, 1024), (1024, 1))
    assert_size_stride(addmm_22, (512, 4096), (4096, 1))
    assert_size_stride(getitem_143, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_454, (512, 4096), (4096, 1))
    assert_size_stride(getitem_145, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_98, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_149, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_151, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_101, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_490, (512, 1024), (1024, 1))
    assert_size_stride(addmm_24, (512, 4096), (4096, 1))
    assert_size_stride(getitem_155, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_492, (512, 4096), (4096, 1))
    assert_size_stride(getitem_157, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_106, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_161, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_163, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_109, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_528, (512, 1024), (1024, 1))
    assert_size_stride(addmm_26, (512, 4096), (4096, 1))
    assert_size_stride(getitem_167, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_530, (512, 4096), (4096, 1))
    assert_size_stride(getitem_169, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_114, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_173, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_175, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_117, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_566, (512, 1024), (1024, 1))
    assert_size_stride(addmm_28, (512, 4096), (4096, 1))
    assert_size_stride(getitem_179, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_568, (512, 4096), (4096, 1))
    assert_size_stride(getitem_181, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_122, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_185, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_187, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_125, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_604, (512, 1024), (1024, 1))
    assert_size_stride(addmm_30, (512, 4096), (4096, 1))
    assert_size_stride(getitem_191, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_606, (512, 4096), (4096, 1))
    assert_size_stride(getitem_193, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_130, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_197, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_199, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_133, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_642, (512, 1024), (1024, 1))
    assert_size_stride(addmm_32, (512, 4096), (4096, 1))
    assert_size_stride(getitem_203, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_644, (512, 4096), (4096, 1))
    assert_size_stride(getitem_205, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_138, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_209, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_211, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_141, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_680, (512, 1024), (1024, 1))
    assert_size_stride(addmm_34, (512, 4096), (4096, 1))
    assert_size_stride(getitem_215, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_682, (512, 4096), (4096, 1))
    assert_size_stride(getitem_217, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_146, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_221, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_223, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_149, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_718, (512, 1024), (1024, 1))
    assert_size_stride(addmm_36, (512, 4096), (4096, 1))
    assert_size_stride(getitem_227, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_720, (512, 4096), (4096, 1))
    assert_size_stride(getitem_229, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_154, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_233, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_235, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_157, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_756, (512, 1024), (1024, 1))
    assert_size_stride(addmm_38, (512, 4096), (4096, 1))
    assert_size_stride(getitem_239, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_758, (512, 4096), (4096, 1))
    assert_size_stride(getitem_241, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_162, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_245, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_247, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_165, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_794, (512, 1024), (1024, 1))
    assert_size_stride(addmm_40, (512, 4096), (4096, 1))
    assert_size_stride(getitem_251, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_796, (512, 4096), (4096, 1))
    assert_size_stride(getitem_253, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_170, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_257, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_259, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_173, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_832, (512, 1024), (1024, 1))
    assert_size_stride(addmm_42, (512, 4096), (4096, 1))
    assert_size_stride(getitem_263, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_834, (512, 4096), (4096, 1))
    assert_size_stride(getitem_265, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_178, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_269, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_271, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_181, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_870, (512, 1024), (1024, 1))
    assert_size_stride(addmm_44, (512, 4096), (4096, 1))
    assert_size_stride(getitem_275, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_872, (512, 4096), (4096, 1))
    assert_size_stride(getitem_277, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_186, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_281, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(getitem_283, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_189, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_908, (512, 1024), (1024, 1))
    assert_size_stride(addmm_46, (512, 4096), (4096, 1))
    assert_size_stride(getitem_287, (512, 1, 4096), (4096, 4096, 1))
    assert_size_stride(view_910, (512, 4096), (4096, 1))
    assert_size_stride(getitem_289, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(mul_194, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(getitem_293, (512, 1, 1024), (1024, 1024, 1))
    assert_size_stride(view_912, (512, 1024), (1024, 1))
    assert_size_stride(sub_73, (512, 32000), (32000, 1))
    assert_size_stride(convert_element_type_4, (), ())
    assert_size_stride(permute_1013, (32000, 1024), (1024, 1))
    assert_size_stride(div_27, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1018, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1022, (4096, 1024), (1024, 1))
    assert_size_stride(div_28, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1027, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1028, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1034, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1035, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_26, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1041, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1042, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1048, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1049, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1055, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1059, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1060, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1067, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1074, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_29, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1079, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1083, (4096, 1024), (1024, 1))
    assert_size_stride(div_30, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1088, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1089, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1095, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1096, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_27, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1102, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1103, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1109, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1110, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1120, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1121, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1128, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1135, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_31, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1140, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1144, (4096, 1024), (1024, 1))
    assert_size_stride(div_32, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1149, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1150, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1156, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1157, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_28, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1163, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1164, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1170, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1171, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1181, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1182, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1189, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1196, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_33, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1201, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1205, (4096, 1024), (1024, 1))
    assert_size_stride(div_34, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1210, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1211, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1217, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1218, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_29, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1224, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1225, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1231, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1232, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1242, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1243, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1250, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1257, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_35, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1262, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1266, (4096, 1024), (1024, 1))
    assert_size_stride(div_36, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1271, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1272, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1278, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1279, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_30, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1285, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1286, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1292, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1293, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1303, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1304, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1311, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1318, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_37, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1323, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1327, (4096, 1024), (1024, 1))
    assert_size_stride(div_38, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1332, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1333, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1339, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1340, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_31, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1346, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1347, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1353, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1354, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1364, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1365, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1372, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1379, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_39, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1384, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1388, (4096, 1024), (1024, 1))
    assert_size_stride(div_40, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1393, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1394, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1400, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1401, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_32, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1407, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1408, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1414, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1415, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1425, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1426, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1433, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1440, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_41, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1445, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1449, (4096, 1024), (1024, 1))
    assert_size_stride(div_42, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1454, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1455, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1461, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1462, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_33, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1468, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1469, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1475, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1476, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1486, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1487, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1494, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1501, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_43, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1506, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1510, (4096, 1024), (1024, 1))
    assert_size_stride(div_44, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1515, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1516, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1522, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1523, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_34, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1529, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1530, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1536, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1537, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1547, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1548, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1555, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1562, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_45, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1567, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1571, (4096, 1024), (1024, 1))
    assert_size_stride(div_46, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1576, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1577, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1583, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1584, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_35, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1590, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1591, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1597, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1598, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1608, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1609, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1616, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1623, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_47, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1628, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1632, (4096, 1024), (1024, 1))
    assert_size_stride(div_48, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1637, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1638, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1644, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1645, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_36, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1651, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1652, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1658, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1659, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1669, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1670, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1677, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1684, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_49, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1689, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1693, (4096, 1024), (1024, 1))
    assert_size_stride(div_50, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1698, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1699, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1705, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1706, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_37, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1712, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1713, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1719, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1720, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1730, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1731, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1738, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1745, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_51, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1750, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1754, (4096, 1024), (1024, 1))
    assert_size_stride(div_52, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1759, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1760, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1766, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1767, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_38, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1773, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1774, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1780, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1781, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1791, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1792, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1799, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1806, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_53, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1811, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1815, (4096, 1024), (1024, 1))
    assert_size_stride(div_54, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1820, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1821, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1827, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1828, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_39, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1834, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1835, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1841, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1842, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1852, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1853, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1860, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1867, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_55, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1872, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1876, (4096, 1024), (1024, 1))
    assert_size_stride(div_56, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1881, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1882, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1888, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1889, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_40, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1895, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1896, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1902, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1903, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1913, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1914, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1921, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1928, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_57, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1933, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1937, (4096, 1024), (1024, 1))
    assert_size_stride(div_58, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1942, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1943, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_1949, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_1950, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_41, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_1956, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1957, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_1963, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_1964, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_1974, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_1975, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1982, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_1989, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_59, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_1994, (1024, 4096), (4096, 1))
    assert_size_stride(permute_1998, (4096, 1024), (1024, 1))
    assert_size_stride(div_60, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2003, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2004, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_2010, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_2011, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_42, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_2017, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2018, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_2024, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2025, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_2035, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2036, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2043, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2050, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_61, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2055, (1024, 4096), (4096, 1))
    assert_size_stride(permute_2059, (4096, 1024), (1024, 1))
    assert_size_stride(div_62, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2064, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2065, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_2071, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_2072, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_43, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_2078, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2079, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_2085, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2086, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_2096, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2097, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2104, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2111, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_63, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2116, (1024, 4096), (4096, 1))
    assert_size_stride(permute_2120, (4096, 1024), (1024, 1))
    assert_size_stride(div_64, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2125, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2126, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_2132, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_2133, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_44, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_2139, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2140, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_2146, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2147, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_2157, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2158, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2165, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2172, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_65, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2177, (1024, 4096), (4096, 1))
    assert_size_stride(permute_2181, (4096, 1024), (1024, 1))
    assert_size_stride(div_66, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2186, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2187, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_2193, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_2194, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_45, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_2200, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2201, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_2207, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2208, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_2218, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2219, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2226, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2233, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_67, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2238, (1024, 4096), (4096, 1))
    assert_size_stride(permute_2242, (4096, 1024), (1024, 1))
    assert_size_stride(div_68, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2247, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2248, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_2254, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_2255, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_46, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_2261, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2262, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_2268, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2269, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_2279, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2280, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2287, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2294, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_69, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2299, (1024, 4096), (4096, 1))
    assert_size_stride(permute_2303, (4096, 1024), (1024, 1))
    assert_size_stride(div_70, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2308, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2309, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_2315, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_2316, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_47, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_2322, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2323, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_2329, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2330, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_2340, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2341, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2348, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2355, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_71, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2360, (1024, 4096), (4096, 1))
    assert_size_stride(permute_2364, (4096, 1024), (1024, 1))
    assert_size_stride(div_72, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2369, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2370, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_2376, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_2377, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_48, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_2383, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2384, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_2390, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2391, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_2401, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2402, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2409, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2416, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(div_73, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2421, (1024, 4096), (4096, 1))
    assert_size_stride(permute_2425, (4096, 1024), (1024, 1))
    assert_size_stride(div_74, (512, 1, 1), (1, 1, 1))
    assert_size_stride(permute_2430, (1, 1024, 512), (0, 1, 1024))
    assert_size_stride(permute_2431, (1, 1024, 1024), (0, 1, 1024))
    assert_size_stride(permute_2437, (16, 512, 512), (262144, 1, 512))
    assert_size_stride(permute_2438, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(alias_49, (1, 16, 512, 512), (4194304, 262144, 512, 1))
    assert_size_stride(permute_2444, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2445, (16, 1024, 64), (64, 1024, 1))
    assert_size_stride(permute_2451, (16, 64, 512), (64, 1, 1024))
    assert_size_stride(permute_2452, (16, 512, 64), (64, 1024, 1))
    assert_size_stride(permute_2462, (1, 1024, 512), (524288, 1, 1024))
    assert_size_stride(permute_2463, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2470, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(permute_2477, (1, 1024, 1024), (1048576, 1, 1024))
    assert_size_stride(tangents_1, (), ())
    assert_size_stride(tangents_2, (1, 512, 32000), (16384000, 32000, 1))
    buf0 = empty((512, 32000), device='cpu', dtype=torch.float32)
    buf1 = empty_strided((512, 1), (1, 512), device='cpu', dtype=torch.int64)
    cpp_fused_nll_loss_backward_nll_loss_forward_0(c_void_p(primals_365.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()))
    aten.scatter_(buf0,1,buf1,-1.0)
    del buf1
    buf4 = empty_strided((512, 1), (1, 512), device='cpu', dtype=torch.float32)
    buf3 = empty((512, 32000), device='cpu', dtype=torch.float32)
    buf5 = reinterpret_tensor(buf3, (1, 512, 32000), (16384000, 32000, 1), 0); del buf3  # reuse
    cpp_fused__log_softmax_backward_data_add_nll_loss_backward_nll_loss_forward_1(c_void_p(buf5.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(primals_365.data_ptr()), c_void_p(tangents_1.data_ptr()), c_void_p(convert_element_type_4.data_ptr()), c_void_p(tangents_2.data_ptr()), c_void_p(sub_73.data_ptr()), c_void_p(buf4.data_ptr()))
    del buf0
    del convert_element_type_4
    del primals_365
    del sub_73
    del tangents_1
    del tangents_2
    buf6 = empty((512, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf5, (512, 32000), (32000, 1), 0), permute_1013, out=buf6)
    del permute_1013
    buf7 = empty((32000, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf5, (32000, 512), (1, 32000), 0), view_912, out=buf7)
    del view_912
    buf8 = empty((1, 32000), device='cpu', dtype=torch.float32)
    buf9 = reinterpret_tensor(buf4, (512, 1, 1), (1, 512, 512), 0); del buf4  # reuse
    buf10 = empty_strided((512, 1, 1), (1, 512, 512), device='cpu', dtype=torch.float32)
    buf11 = empty_strided((512, 1, 1024), (1024, 524288, 1), device='cpu', dtype=torch.float32)
    buf12 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf13 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf14 = empty((512, 1, 1024), device='cpu', dtype=torch.float32)
    cpp_fused_native_dropout_backward_native_layer_norm_backward_sum_2(c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(getitem_293.data_ptr()), c_void_p(primals_360.data_ptr()), c_void_p(mul_194.data_ptr()), c_void_p(div_27.data_ptr()), c_void_p(getitem_289.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(buf14.data_ptr()))
    del buf5
    del div_27
    del getitem_289
    del getitem_293
    del mul_194
    del primals_360
    buf15 = empty((512, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf14, (512, 1024), (1024, 1), 0), permute_1018, out=buf15)
    del permute_1018
    buf16 = empty((1024, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf14, (1024, 512), (1, 1024), 0), view_910, out=buf16)
    del view_910
    buf17 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf18 = reinterpret_tensor(buf15, (512, 1, 4096), (4096, 4096, 1), 0); del buf15  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_3(c_void_p(buf18.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(getitem_287.data_ptr()), c_void_p(addmm_46.data_ptr()), c_void_p(buf17.data_ptr()))
    del addmm_46
    del getitem_287
    buf19 = reinterpret_tensor(buf14, (512, 1024), (1024, 1), 0); del buf14  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf18, (512, 4096), (4096, 1), 0), permute_1022, out=buf19)
    del permute_1022
    buf20 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf18, (4096, 512), (1, 4096), 0), view_908, out=buf20)
    del view_908
    buf21 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf22 = buf9; del buf9  # reuse
    buf23 = buf10; del buf10  # reuse
    buf24 = reinterpret_tensor(buf6, (512, 1, 1024), (1024, 524288, 1), 0); del buf6  # reuse
    buf25 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf26 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf27 = empty((512, 1, 1024), device='cpu', dtype=torch.float32)
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_4(c_void_p(buf18.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf19.data_ptr()), c_void_p(primals_354.data_ptr()), c_void_p(mul_189.data_ptr()), c_void_p(div_28.data_ptr()), c_void_p(getitem_283.data_ptr()), c_void_p(buf21.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(buf23.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf25.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(buf27.data_ptr()))
    del div_28
    del getitem_283
    del mul_189
    del primals_354
    buf28 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1027, reinterpret_tensor(buf27, (1, 512, 1024), (0, 1024, 1), 0), out=buf28)
    del permute_1027
    buf29 = reinterpret_tensor(buf19, (1, 512, 1024), (524288, 1024, 1), 0); del buf19  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf27, (1, 512, 1024), (0, 1024, 1), 0), permute_1028, out=buf29)
    del permute_1028
    buf30 = reinterpret_tensor(buf27, (16, 512, 64), (32768, 64, 1), 0); del buf27  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1034, reinterpret_tensor(buf29, (16, 512, 64), (1, 1024, 16), 0), out=buf30)
    del permute_1034
    buf31 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf29, (16, 512, 64), (1, 1024, 16), 0), permute_1035, out=buf31)
    del permute_1035
    buf32 = empty_strided((1, 16, 512, 1), (8192, 512, 1, 8192), device='cpu', dtype=torch.float32)
    buf33 = empty((1, 16, 512, 1023), device='cpu', dtype=torch.float32)
    buf34 = reinterpret_tensor(buf31, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf31  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_5(c_void_p(buf34.data_ptr()), c_void_p(getitem_281.data_ptr()), c_void_p(alias_26.data_ptr()), c_void_p(buf32.data_ptr()), c_void_p(buf33.data_ptr()))
    del alias_26
    del getitem_281
    aten.index_put_(buf33, [None, None, None, iota], buf34, True)
    buf37 = empty((1, 16, 1024, 512), device='cpu', dtype=torch.float32)
    buf38 = empty((16, 512, 1024), device='cpu', dtype=torch.float32)
    buf40 = empty((16, 512, 1024), device='cpu', dtype=torch.float32)
    cpp_fused_bmm_slice_backward_6(c_void_p(buf33.data_ptr()), c_void_p(buf37.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(buf40.data_ptr()))
    buf39 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1041, buf38, out=buf39)
    del permute_1041
    buf41 = reinterpret_tensor(buf29, (16, 512, 64), (32768, 64, 1), 0); del buf29  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf40, permute_1042, out=buf41)
    del permute_1042
    buf42 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_7(c_void_p(buf41.data_ptr()), c_void_p(buf42.data_ptr()))
    buf43 = reinterpret_tensor(buf11, (16, 64, 512), (32768, 512, 1), 0); del buf11  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1048, reinterpret_tensor(buf34, (16, 512, 512), (262144, 512, 1), 0), out=buf43)
    del permute_1048
    buf44 = empty((16, 512, 64), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf34, (16, 512, 512), (262144, 512, 1), 0), permute_1049, out=buf44)
    del permute_1049
    buf45 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_8(c_void_p(buf44.data_ptr()), c_void_p(buf45.data_ptr()))
    buf46 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf39, (1, 1024, 1024), (0, 1, 1024), 0), out=buf46)
    buf47 = empty((512, 1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_clone_9(c_void_p(buf30.data_ptr()), c_void_p(buf47.data_ptr()))
    buf48 = reinterpret_tensor(buf39, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf39  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1059, reinterpret_tensor(buf47, (1, 512, 1024), (0, 1024, 1), 0), out=buf48)
    buf49 = reinterpret_tensor(buf30, (1, 512, 1024), (524288, 1024, 1), 0); del buf30  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf47, (1, 512, 1024), (0, 1024, 1), 0), permute_1060, out=buf49)
    del permute_1060
    buf50 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1059, reinterpret_tensor(buf43, (1, 512, 1024), (0, 1, 512), 0), out=buf50)
    buf51 = reinterpret_tensor(buf47, (1, 512, 1024), (524288, 1024, 1), 0); del buf47  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf43, (1, 512, 1024), (0, 1, 512), 0), permute_1067, out=buf51)
    del permute_1067
    buf52 = reinterpret_tensor(buf43, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf43  # reuse
    cpp_fused_clone_10(c_void_p(buf41.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(buf52.data_ptr()))
    buf53 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1059, reinterpret_tensor(buf52, (1, 512, 1024), (0, 1024, 1), 0), out=buf53)
    del permute_1059
    buf54 = reinterpret_tensor(buf44, (1, 512, 1024), (524288, 1024, 1), 0); del buf44  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf52, (1, 512, 1024), (0, 1024, 1), 0), permute_1074, out=buf54)
    del permute_1074
    buf55 = reinterpret_tensor(buf52, (512, 1, 1024), (1024, 524288, 1), 0); del buf52  # reuse
    buf56 = buf23; del buf23  # reuse
    buf57 = buf22; del buf22  # reuse
    buf58 = buf55; del buf55  # reuse
    buf59 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf60 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf61 = reinterpret_tensor(buf41, (512, 1, 1024), (1024, 1024, 1), 0); del buf41  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_11(c_void_p(buf58.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf49.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(primals_352.data_ptr()), c_void_p(mul_186.data_ptr()), c_void_p(div_29.data_ptr()), c_void_p(getitem_277.data_ptr()), c_void_p(buf56.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf60.data_ptr()), c_void_p(buf61.data_ptr()))
    del div_29
    del getitem_277
    del mul_186
    del primals_352
    buf62 = reinterpret_tensor(buf18, (512, 4096), (4096, 1), 0); del buf18  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf61, (512, 1024), (1024, 1), 0), permute_1079, out=buf62)
    del permute_1079
    buf63 = reinterpret_tensor(buf34, (1024, 4096), (4096, 1), 0); del buf34  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf61, (1024, 512), (1, 1024), 0), view_872, out=buf63)
    del view_872
    buf64 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf65 = reinterpret_tensor(buf62, (512, 1, 4096), (4096, 4096, 1), 0); del buf62  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_12(c_void_p(buf65.data_ptr()), c_void_p(buf61.data_ptr()), c_void_p(getitem_275.data_ptr()), c_void_p(addmm_44.data_ptr()), c_void_p(buf64.data_ptr()))
    del addmm_44
    del getitem_275
    buf66 = reinterpret_tensor(buf61, (512, 1024), (1024, 1), 0); del buf61  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf65, (512, 4096), (4096, 1), 0), permute_1083, out=buf66)
    del permute_1083
    buf67 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf65, (4096, 512), (1, 4096), 0), view_870, out=buf67)
    del view_870
    buf68 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf69 = buf57; del buf57  # reuse
    buf70 = buf56; del buf56  # reuse
    buf71 = reinterpret_tensor(buf54, (512, 1, 1024), (1024, 524288, 1), 0); del buf54  # reuse
    buf72 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf73 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf74 = reinterpret_tensor(buf51, (512, 1, 1024), (1024, 1024, 1), 0); del buf51  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_13(c_void_p(buf65.data_ptr()), c_void_p(buf58.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(primals_346.data_ptr()), c_void_p(mul_181.data_ptr()), c_void_p(div_30.data_ptr()), c_void_p(getitem_271.data_ptr()), c_void_p(buf68.data_ptr()), c_void_p(buf69.data_ptr()), c_void_p(buf70.data_ptr()), c_void_p(buf71.data_ptr()), c_void_p(buf72.data_ptr()), c_void_p(buf73.data_ptr()), c_void_p(buf74.data_ptr()))
    del div_30
    del getitem_271
    del mul_181
    del primals_346
    buf75 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1088, reinterpret_tensor(buf74, (1, 512, 1024), (0, 1024, 1), 0), out=buf75)
    del permute_1088
    buf76 = reinterpret_tensor(buf66, (1, 512, 1024), (524288, 1024, 1), 0); del buf66  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf74, (1, 512, 1024), (0, 1024, 1), 0), permute_1089, out=buf76)
    del permute_1089
    buf77 = reinterpret_tensor(buf74, (16, 512, 64), (32768, 64, 1), 0); del buf74  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1095, reinterpret_tensor(buf76, (16, 512, 64), (1, 1024, 16), 0), out=buf77)
    del permute_1095
    buf78 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf76, (16, 512, 64), (1, 1024, 16), 0), permute_1096, out=buf78)
    del permute_1096
    buf79 = buf32; del buf32  # reuse
    buf80 = buf33; del buf33  # reuse
    buf81 = reinterpret_tensor(buf78, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf78  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_14(c_void_p(buf81.data_ptr()), c_void_p(getitem_269.data_ptr()), c_void_p(alias_27.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(buf80.data_ptr()))
    del alias_27
    del getitem_269
    aten.index_put_(buf80, [None, None, None, iota], buf81, True)
    buf84 = reinterpret_tensor(buf40, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf40  # reuse
    buf85 = buf38; del buf38  # reuse
    buf87 = reinterpret_tensor(buf37, (16, 512, 1024), (524288, 1024, 1), 0); del buf37  # reuse
    cpp_fused_bmm_slice_backward_15(c_void_p(buf80.data_ptr()), c_void_p(buf84.data_ptr()), c_void_p(buf85.data_ptr()), c_void_p(buf87.data_ptr()))
    buf86 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1102, buf85, out=buf86)
    del permute_1102
    buf88 = reinterpret_tensor(buf76, (16, 512, 64), (32768, 64, 1), 0); del buf76  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf87, permute_1103, out=buf88)
    del permute_1103
    buf89 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_16(c_void_p(buf88.data_ptr()), c_void_p(buf89.data_ptr()))
    buf90 = reinterpret_tensor(buf58, (16, 64, 512), (32768, 512, 1), 0); del buf58  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1109, reinterpret_tensor(buf81, (16, 512, 512), (262144, 512, 1), 0), out=buf90)
    del permute_1109
    buf91 = reinterpret_tensor(buf49, (16, 512, 64), (32768, 64, 1), 0); del buf49  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf81, (16, 512, 512), (262144, 512, 1), 0), permute_1110, out=buf91)
    del permute_1110
    buf92 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_17(c_void_p(buf91.data_ptr()), c_void_p(buf92.data_ptr()))
    buf93 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf86, (1, 1024, 1024), (0, 1, 1024), 0), out=buf93)
    buf94 = reinterpret_tensor(buf24, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf24  # reuse
    cpp_fused_clone_18(c_void_p(buf77.data_ptr()), c_void_p(buf94.data_ptr()))
    buf95 = reinterpret_tensor(buf86, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf86  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1120, reinterpret_tensor(buf94, (1, 512, 1024), (0, 1024, 1), 0), out=buf95)
    buf96 = reinterpret_tensor(buf77, (1, 512, 1024), (524288, 1024, 1), 0); del buf77  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf94, (1, 512, 1024), (0, 1024, 1), 0), permute_1121, out=buf96)
    del permute_1121
    buf97 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1120, reinterpret_tensor(buf90, (1, 512, 1024), (0, 1, 512), 0), out=buf97)
    buf98 = reinterpret_tensor(buf94, (1, 512, 1024), (524288, 1024, 1), 0); del buf94  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf90, (1, 512, 1024), (0, 1, 512), 0), permute_1128, out=buf98)
    del permute_1128
    buf99 = reinterpret_tensor(buf90, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf90  # reuse
    cpp_fused_clone_19(c_void_p(buf88.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(buf99.data_ptr()))
    buf100 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1120, reinterpret_tensor(buf99, (1, 512, 1024), (0, 1024, 1), 0), out=buf100)
    del permute_1120
    buf101 = reinterpret_tensor(buf91, (1, 512, 1024), (524288, 1024, 1), 0); del buf91  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf99, (1, 512, 1024), (0, 1024, 1), 0), permute_1135, out=buf101)
    del permute_1135
    buf102 = reinterpret_tensor(buf99, (512, 1, 1024), (1024, 524288, 1), 0); del buf99  # reuse
    buf103 = buf70; del buf70  # reuse
    buf104 = buf69; del buf69  # reuse
    buf105 = buf102; del buf102  # reuse
    buf106 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf107 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf108 = reinterpret_tensor(buf88, (512, 1, 1024), (1024, 1024, 1), 0); del buf88  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_20(c_void_p(buf105.data_ptr()), c_void_p(buf71.data_ptr()), c_void_p(buf96.data_ptr()), c_void_p(buf98.data_ptr()), c_void_p(buf101.data_ptr()), c_void_p(primals_344.data_ptr()), c_void_p(mul_178.data_ptr()), c_void_p(div_31.data_ptr()), c_void_p(getitem_265.data_ptr()), c_void_p(buf103.data_ptr()), c_void_p(buf104.data_ptr()), c_void_p(buf106.data_ptr()), c_void_p(buf107.data_ptr()), c_void_p(buf108.data_ptr()))
    del div_31
    del getitem_265
    del mul_178
    del primals_344
    buf109 = reinterpret_tensor(buf65, (512, 4096), (4096, 1), 0); del buf65  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf108, (512, 1024), (1024, 1), 0), permute_1140, out=buf109)
    del permute_1140
    buf110 = reinterpret_tensor(buf81, (1024, 4096), (4096, 1), 0); del buf81  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf108, (1024, 512), (1, 1024), 0), view_834, out=buf110)
    del view_834
    buf111 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf112 = reinterpret_tensor(buf109, (512, 1, 4096), (4096, 4096, 1), 0); del buf109  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_21(c_void_p(buf112.data_ptr()), c_void_p(buf108.data_ptr()), c_void_p(getitem_263.data_ptr()), c_void_p(addmm_42.data_ptr()), c_void_p(buf111.data_ptr()))
    del addmm_42
    del getitem_263
    buf113 = reinterpret_tensor(buf108, (512, 1024), (1024, 1), 0); del buf108  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf112, (512, 4096), (4096, 1), 0), permute_1144, out=buf113)
    del permute_1144
    buf114 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf112, (4096, 512), (1, 4096), 0), view_832, out=buf114)
    del view_832
    buf115 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf116 = buf104; del buf104  # reuse
    buf117 = buf103; del buf103  # reuse
    buf118 = reinterpret_tensor(buf98, (512, 1, 1024), (1024, 524288, 1), 0); del buf98  # reuse
    buf119 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf120 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf121 = reinterpret_tensor(buf96, (512, 1, 1024), (1024, 1024, 1), 0); del buf96  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_22(c_void_p(buf112.data_ptr()), c_void_p(buf105.data_ptr()), c_void_p(buf113.data_ptr()), c_void_p(primals_338.data_ptr()), c_void_p(mul_173.data_ptr()), c_void_p(div_32.data_ptr()), c_void_p(getitem_259.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(buf116.data_ptr()), c_void_p(buf117.data_ptr()), c_void_p(buf118.data_ptr()), c_void_p(buf119.data_ptr()), c_void_p(buf120.data_ptr()), c_void_p(buf121.data_ptr()))
    del div_32
    del getitem_259
    del mul_173
    del primals_338
    buf122 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1149, reinterpret_tensor(buf121, (1, 512, 1024), (0, 1024, 1), 0), out=buf122)
    del permute_1149
    buf123 = reinterpret_tensor(buf113, (1, 512, 1024), (524288, 1024, 1), 0); del buf113  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf121, (1, 512, 1024), (0, 1024, 1), 0), permute_1150, out=buf123)
    del permute_1150
    buf124 = reinterpret_tensor(buf121, (16, 512, 64), (32768, 64, 1), 0); del buf121  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1156, reinterpret_tensor(buf123, (16, 512, 64), (1, 1024, 16), 0), out=buf124)
    del permute_1156
    buf125 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf123, (16, 512, 64), (1, 1024, 16), 0), permute_1157, out=buf125)
    del permute_1157
    buf126 = buf79; del buf79  # reuse
    buf127 = buf80; del buf80  # reuse
    buf128 = reinterpret_tensor(buf125, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf125  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_23(c_void_p(buf128.data_ptr()), c_void_p(getitem_257.data_ptr()), c_void_p(alias_28.data_ptr()), c_void_p(buf126.data_ptr()), c_void_p(buf127.data_ptr()))
    del alias_28
    del getitem_257
    aten.index_put_(buf127, [None, None, None, iota], buf128, True)
    buf131 = reinterpret_tensor(buf87, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf87  # reuse
    buf132 = buf85; del buf85  # reuse
    buf134 = reinterpret_tensor(buf84, (16, 512, 1024), (524288, 1024, 1), 0); del buf84  # reuse
    cpp_fused_bmm_slice_backward_24(c_void_p(buf127.data_ptr()), c_void_p(buf131.data_ptr()), c_void_p(buf132.data_ptr()), c_void_p(buf134.data_ptr()))
    buf133 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1163, buf132, out=buf133)
    del permute_1163
    buf135 = reinterpret_tensor(buf123, (16, 512, 64), (32768, 64, 1), 0); del buf123  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf134, permute_1164, out=buf135)
    del permute_1164
    buf136 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_25(c_void_p(buf135.data_ptr()), c_void_p(buf136.data_ptr()))
    buf137 = reinterpret_tensor(buf105, (16, 64, 512), (32768, 512, 1), 0); del buf105  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1170, reinterpret_tensor(buf128, (16, 512, 512), (262144, 512, 1), 0), out=buf137)
    del permute_1170
    buf138 = reinterpret_tensor(buf71, (16, 512, 64), (32768, 64, 1), 0); del buf71  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf128, (16, 512, 512), (262144, 512, 1), 0), permute_1171, out=buf138)
    del permute_1171
    buf139 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_26(c_void_p(buf138.data_ptr()), c_void_p(buf139.data_ptr()))
    buf140 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf133, (1, 1024, 1024), (0, 1, 1024), 0), out=buf140)
    buf141 = reinterpret_tensor(buf101, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf101  # reuse
    cpp_fused_clone_27(c_void_p(buf124.data_ptr()), c_void_p(buf141.data_ptr()))
    buf142 = reinterpret_tensor(buf133, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf133  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1181, reinterpret_tensor(buf141, (1, 512, 1024), (0, 1024, 1), 0), out=buf142)
    buf143 = reinterpret_tensor(buf124, (1, 512, 1024), (524288, 1024, 1), 0); del buf124  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf141, (1, 512, 1024), (0, 1024, 1), 0), permute_1182, out=buf143)
    del permute_1182
    buf144 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1181, reinterpret_tensor(buf137, (1, 512, 1024), (0, 1, 512), 0), out=buf144)
    buf145 = reinterpret_tensor(buf141, (1, 512, 1024), (524288, 1024, 1), 0); del buf141  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf137, (1, 512, 1024), (0, 1, 512), 0), permute_1189, out=buf145)
    del permute_1189
    buf146 = reinterpret_tensor(buf137, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf137  # reuse
    cpp_fused_clone_28(c_void_p(buf135.data_ptr()), c_void_p(buf138.data_ptr()), c_void_p(buf146.data_ptr()))
    buf147 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1181, reinterpret_tensor(buf146, (1, 512, 1024), (0, 1024, 1), 0), out=buf147)
    del permute_1181
    buf148 = reinterpret_tensor(buf138, (1, 512, 1024), (524288, 1024, 1), 0); del buf138  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf146, (1, 512, 1024), (0, 1024, 1), 0), permute_1196, out=buf148)
    del permute_1196
    buf149 = reinterpret_tensor(buf146, (512, 1, 1024), (1024, 524288, 1), 0); del buf146  # reuse
    buf150 = buf117; del buf117  # reuse
    buf151 = buf116; del buf116  # reuse
    buf152 = buf149; del buf149  # reuse
    buf153 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf154 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf155 = reinterpret_tensor(buf135, (512, 1, 1024), (1024, 1024, 1), 0); del buf135  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_29(c_void_p(buf152.data_ptr()), c_void_p(buf118.data_ptr()), c_void_p(buf143.data_ptr()), c_void_p(buf145.data_ptr()), c_void_p(buf148.data_ptr()), c_void_p(primals_336.data_ptr()), c_void_p(mul_170.data_ptr()), c_void_p(div_33.data_ptr()), c_void_p(getitem_253.data_ptr()), c_void_p(buf150.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(buf153.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(buf155.data_ptr()))
    del div_33
    del getitem_253
    del mul_170
    del primals_336
    buf156 = reinterpret_tensor(buf112, (512, 4096), (4096, 1), 0); del buf112  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf155, (512, 1024), (1024, 1), 0), permute_1201, out=buf156)
    del permute_1201
    buf157 = reinterpret_tensor(buf128, (1024, 4096), (4096, 1), 0); del buf128  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf155, (1024, 512), (1, 1024), 0), view_796, out=buf157)
    del view_796
    buf158 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf159 = reinterpret_tensor(buf156, (512, 1, 4096), (4096, 4096, 1), 0); del buf156  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_30(c_void_p(buf159.data_ptr()), c_void_p(buf155.data_ptr()), c_void_p(getitem_251.data_ptr()), c_void_p(addmm_40.data_ptr()), c_void_p(buf158.data_ptr()))
    del addmm_40
    del getitem_251
    buf160 = reinterpret_tensor(buf155, (512, 1024), (1024, 1), 0); del buf155  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf159, (512, 4096), (4096, 1), 0), permute_1205, out=buf160)
    del permute_1205
    buf161 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf159, (4096, 512), (1, 4096), 0), view_794, out=buf161)
    del view_794
    buf162 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf163 = buf151; del buf151  # reuse
    buf164 = buf150; del buf150  # reuse
    buf165 = reinterpret_tensor(buf148, (512, 1, 1024), (1024, 524288, 1), 0); del buf148  # reuse
    buf166 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf167 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf168 = reinterpret_tensor(buf145, (512, 1, 1024), (1024, 1024, 1), 0); del buf145  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_31(c_void_p(buf159.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(primals_330.data_ptr()), c_void_p(mul_165.data_ptr()), c_void_p(div_34.data_ptr()), c_void_p(getitem_247.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(buf163.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(buf165.data_ptr()), c_void_p(buf166.data_ptr()), c_void_p(buf167.data_ptr()), c_void_p(buf168.data_ptr()))
    del div_34
    del getitem_247
    del mul_165
    del primals_330
    buf169 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1210, reinterpret_tensor(buf168, (1, 512, 1024), (0, 1024, 1), 0), out=buf169)
    del permute_1210
    buf170 = reinterpret_tensor(buf160, (1, 512, 1024), (524288, 1024, 1), 0); del buf160  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf168, (1, 512, 1024), (0, 1024, 1), 0), permute_1211, out=buf170)
    del permute_1211
    buf171 = reinterpret_tensor(buf168, (16, 512, 64), (32768, 64, 1), 0); del buf168  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1217, reinterpret_tensor(buf170, (16, 512, 64), (1, 1024, 16), 0), out=buf171)
    del permute_1217
    buf172 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf170, (16, 512, 64), (1, 1024, 16), 0), permute_1218, out=buf172)
    del permute_1218
    buf173 = buf126; del buf126  # reuse
    buf174 = buf127; del buf127  # reuse
    buf175 = reinterpret_tensor(buf172, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf172  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_32(c_void_p(buf175.data_ptr()), c_void_p(getitem_245.data_ptr()), c_void_p(alias_29.data_ptr()), c_void_p(buf173.data_ptr()), c_void_p(buf174.data_ptr()))
    del alias_29
    del getitem_245
    aten.index_put_(buf174, [None, None, None, iota], buf175, True)
    buf178 = reinterpret_tensor(buf134, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf134  # reuse
    buf179 = buf132; del buf132  # reuse
    buf181 = reinterpret_tensor(buf131, (16, 512, 1024), (524288, 1024, 1), 0); del buf131  # reuse
    cpp_fused_bmm_slice_backward_33(c_void_p(buf174.data_ptr()), c_void_p(buf178.data_ptr()), c_void_p(buf179.data_ptr()), c_void_p(buf181.data_ptr()))
    buf180 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1224, buf179, out=buf180)
    del permute_1224
    buf182 = reinterpret_tensor(buf170, (16, 512, 64), (32768, 64, 1), 0); del buf170  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf181, permute_1225, out=buf182)
    del permute_1225
    buf183 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_34(c_void_p(buf182.data_ptr()), c_void_p(buf183.data_ptr()))
    buf184 = reinterpret_tensor(buf152, (16, 64, 512), (32768, 512, 1), 0); del buf152  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1231, reinterpret_tensor(buf175, (16, 512, 512), (262144, 512, 1), 0), out=buf184)
    del permute_1231
    buf185 = reinterpret_tensor(buf143, (16, 512, 64), (32768, 64, 1), 0); del buf143  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf175, (16, 512, 512), (262144, 512, 1), 0), permute_1232, out=buf185)
    del permute_1232
    buf186 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_35(c_void_p(buf185.data_ptr()), c_void_p(buf186.data_ptr()))
    buf187 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf180, (1, 1024, 1024), (0, 1, 1024), 0), out=buf187)
    buf188 = reinterpret_tensor(buf118, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf118  # reuse
    cpp_fused_clone_36(c_void_p(buf171.data_ptr()), c_void_p(buf188.data_ptr()))
    buf189 = reinterpret_tensor(buf180, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf180  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1242, reinterpret_tensor(buf188, (1, 512, 1024), (0, 1024, 1), 0), out=buf189)
    buf190 = reinterpret_tensor(buf171, (1, 512, 1024), (524288, 1024, 1), 0); del buf171  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf188, (1, 512, 1024), (0, 1024, 1), 0), permute_1243, out=buf190)
    del permute_1243
    buf191 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1242, reinterpret_tensor(buf184, (1, 512, 1024), (0, 1, 512), 0), out=buf191)
    buf192 = reinterpret_tensor(buf188, (1, 512, 1024), (524288, 1024, 1), 0); del buf188  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf184, (1, 512, 1024), (0, 1, 512), 0), permute_1250, out=buf192)
    del permute_1250
    buf193 = reinterpret_tensor(buf184, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf184  # reuse
    cpp_fused_clone_37(c_void_p(buf182.data_ptr()), c_void_p(buf185.data_ptr()), c_void_p(buf193.data_ptr()))
    buf194 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1242, reinterpret_tensor(buf193, (1, 512, 1024), (0, 1024, 1), 0), out=buf194)
    del permute_1242
    buf195 = reinterpret_tensor(buf185, (1, 512, 1024), (524288, 1024, 1), 0); del buf185  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf193, (1, 512, 1024), (0, 1024, 1), 0), permute_1257, out=buf195)
    del permute_1257
    buf196 = reinterpret_tensor(buf193, (512, 1, 1024), (1024, 524288, 1), 0); del buf193  # reuse
    buf197 = buf164; del buf164  # reuse
    buf198 = buf163; del buf163  # reuse
    buf199 = buf196; del buf196  # reuse
    buf200 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf201 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf202 = reinterpret_tensor(buf182, (512, 1, 1024), (1024, 1024, 1), 0); del buf182  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_38(c_void_p(buf199.data_ptr()), c_void_p(buf165.data_ptr()), c_void_p(buf190.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(buf195.data_ptr()), c_void_p(primals_328.data_ptr()), c_void_p(mul_162.data_ptr()), c_void_p(div_35.data_ptr()), c_void_p(getitem_241.data_ptr()), c_void_p(buf197.data_ptr()), c_void_p(buf198.data_ptr()), c_void_p(buf200.data_ptr()), c_void_p(buf201.data_ptr()), c_void_p(buf202.data_ptr()))
    del div_35
    del getitem_241
    del mul_162
    del primals_328
    buf203 = reinterpret_tensor(buf159, (512, 4096), (4096, 1), 0); del buf159  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf202, (512, 1024), (1024, 1), 0), permute_1262, out=buf203)
    del permute_1262
    buf204 = reinterpret_tensor(buf175, (1024, 4096), (4096, 1), 0); del buf175  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf202, (1024, 512), (1, 1024), 0), view_758, out=buf204)
    del view_758
    buf205 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf206 = reinterpret_tensor(buf203, (512, 1, 4096), (4096, 4096, 1), 0); del buf203  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_39(c_void_p(buf206.data_ptr()), c_void_p(buf202.data_ptr()), c_void_p(getitem_239.data_ptr()), c_void_p(addmm_38.data_ptr()), c_void_p(buf205.data_ptr()))
    del addmm_38
    del getitem_239
    buf207 = reinterpret_tensor(buf202, (512, 1024), (1024, 1), 0); del buf202  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf206, (512, 4096), (4096, 1), 0), permute_1266, out=buf207)
    del permute_1266
    buf208 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf206, (4096, 512), (1, 4096), 0), view_756, out=buf208)
    del view_756
    buf209 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf210 = buf198; del buf198  # reuse
    buf211 = buf197; del buf197  # reuse
    buf212 = reinterpret_tensor(buf195, (512, 1, 1024), (1024, 524288, 1), 0); del buf195  # reuse
    buf213 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf214 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf215 = reinterpret_tensor(buf192, (512, 1, 1024), (1024, 1024, 1), 0); del buf192  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_40(c_void_p(buf206.data_ptr()), c_void_p(buf199.data_ptr()), c_void_p(buf207.data_ptr()), c_void_p(primals_322.data_ptr()), c_void_p(mul_157.data_ptr()), c_void_p(div_36.data_ptr()), c_void_p(getitem_235.data_ptr()), c_void_p(buf209.data_ptr()), c_void_p(buf210.data_ptr()), c_void_p(buf211.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(buf213.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(buf215.data_ptr()))
    del div_36
    del getitem_235
    del mul_157
    del primals_322
    buf216 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1271, reinterpret_tensor(buf215, (1, 512, 1024), (0, 1024, 1), 0), out=buf216)
    del permute_1271
    buf217 = reinterpret_tensor(buf207, (1, 512, 1024), (524288, 1024, 1), 0); del buf207  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf215, (1, 512, 1024), (0, 1024, 1), 0), permute_1272, out=buf217)
    del permute_1272
    buf218 = reinterpret_tensor(buf215, (16, 512, 64), (32768, 64, 1), 0); del buf215  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1278, reinterpret_tensor(buf217, (16, 512, 64), (1, 1024, 16), 0), out=buf218)
    del permute_1278
    buf219 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf217, (16, 512, 64), (1, 1024, 16), 0), permute_1279, out=buf219)
    del permute_1279
    buf220 = buf173; del buf173  # reuse
    buf221 = buf174; del buf174  # reuse
    buf222 = reinterpret_tensor(buf219, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf219  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_41(c_void_p(buf222.data_ptr()), c_void_p(getitem_233.data_ptr()), c_void_p(alias_30.data_ptr()), c_void_p(buf220.data_ptr()), c_void_p(buf221.data_ptr()))
    del alias_30
    del getitem_233
    aten.index_put_(buf221, [None, None, None, iota], buf222, True)
    buf225 = reinterpret_tensor(buf181, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf181  # reuse
    buf226 = buf179; del buf179  # reuse
    buf228 = reinterpret_tensor(buf178, (16, 512, 1024), (524288, 1024, 1), 0); del buf178  # reuse
    cpp_fused_bmm_slice_backward_42(c_void_p(buf221.data_ptr()), c_void_p(buf225.data_ptr()), c_void_p(buf226.data_ptr()), c_void_p(buf228.data_ptr()))
    buf227 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1285, buf226, out=buf227)
    del permute_1285
    buf229 = reinterpret_tensor(buf217, (16, 512, 64), (32768, 64, 1), 0); del buf217  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf228, permute_1286, out=buf229)
    del permute_1286
    buf230 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_43(c_void_p(buf229.data_ptr()), c_void_p(buf230.data_ptr()))
    buf231 = reinterpret_tensor(buf199, (16, 64, 512), (32768, 512, 1), 0); del buf199  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1292, reinterpret_tensor(buf222, (16, 512, 512), (262144, 512, 1), 0), out=buf231)
    del permute_1292
    buf232 = reinterpret_tensor(buf190, (16, 512, 64), (32768, 64, 1), 0); del buf190  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf222, (16, 512, 512), (262144, 512, 1), 0), permute_1293, out=buf232)
    del permute_1293
    buf233 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_44(c_void_p(buf232.data_ptr()), c_void_p(buf233.data_ptr()))
    buf234 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf227, (1, 1024, 1024), (0, 1, 1024), 0), out=buf234)
    buf235 = reinterpret_tensor(buf165, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf165  # reuse
    cpp_fused_clone_45(c_void_p(buf218.data_ptr()), c_void_p(buf235.data_ptr()))
    buf236 = reinterpret_tensor(buf227, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf227  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1303, reinterpret_tensor(buf235, (1, 512, 1024), (0, 1024, 1), 0), out=buf236)
    buf237 = reinterpret_tensor(buf218, (1, 512, 1024), (524288, 1024, 1), 0); del buf218  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf235, (1, 512, 1024), (0, 1024, 1), 0), permute_1304, out=buf237)
    del permute_1304
    buf238 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1303, reinterpret_tensor(buf231, (1, 512, 1024), (0, 1, 512), 0), out=buf238)
    buf239 = reinterpret_tensor(buf235, (1, 512, 1024), (524288, 1024, 1), 0); del buf235  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf231, (1, 512, 1024), (0, 1, 512), 0), permute_1311, out=buf239)
    del permute_1311
    buf240 = reinterpret_tensor(buf231, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf231  # reuse
    cpp_fused_clone_46(c_void_p(buf229.data_ptr()), c_void_p(buf232.data_ptr()), c_void_p(buf240.data_ptr()))
    buf241 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1303, reinterpret_tensor(buf240, (1, 512, 1024), (0, 1024, 1), 0), out=buf241)
    del permute_1303
    buf242 = reinterpret_tensor(buf232, (1, 512, 1024), (524288, 1024, 1), 0); del buf232  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf240, (1, 512, 1024), (0, 1024, 1), 0), permute_1318, out=buf242)
    del permute_1318
    buf243 = reinterpret_tensor(buf240, (512, 1, 1024), (1024, 524288, 1), 0); del buf240  # reuse
    buf244 = buf211; del buf211  # reuse
    buf245 = buf210; del buf210  # reuse
    buf246 = buf243; del buf243  # reuse
    buf247 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf248 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf249 = reinterpret_tensor(buf229, (512, 1, 1024), (1024, 1024, 1), 0); del buf229  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_47(c_void_p(buf246.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(buf239.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(primals_320.data_ptr()), c_void_p(mul_154.data_ptr()), c_void_p(div_37.data_ptr()), c_void_p(getitem_229.data_ptr()), c_void_p(buf244.data_ptr()), c_void_p(buf245.data_ptr()), c_void_p(buf247.data_ptr()), c_void_p(buf248.data_ptr()), c_void_p(buf249.data_ptr()))
    del div_37
    del getitem_229
    del mul_154
    del primals_320
    buf250 = reinterpret_tensor(buf206, (512, 4096), (4096, 1), 0); del buf206  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf249, (512, 1024), (1024, 1), 0), permute_1323, out=buf250)
    del permute_1323
    buf251 = reinterpret_tensor(buf222, (1024, 4096), (4096, 1), 0); del buf222  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf249, (1024, 512), (1, 1024), 0), view_720, out=buf251)
    del view_720
    buf252 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf253 = reinterpret_tensor(buf250, (512, 1, 4096), (4096, 4096, 1), 0); del buf250  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_48(c_void_p(buf253.data_ptr()), c_void_p(buf249.data_ptr()), c_void_p(getitem_227.data_ptr()), c_void_p(addmm_36.data_ptr()), c_void_p(buf252.data_ptr()))
    del addmm_36
    del getitem_227
    buf254 = reinterpret_tensor(buf249, (512, 1024), (1024, 1), 0); del buf249  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf253, (512, 4096), (4096, 1), 0), permute_1327, out=buf254)
    del permute_1327
    buf255 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf253, (4096, 512), (1, 4096), 0), view_718, out=buf255)
    del view_718
    buf256 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf257 = buf245; del buf245  # reuse
    buf258 = buf244; del buf244  # reuse
    buf259 = reinterpret_tensor(buf242, (512, 1, 1024), (1024, 524288, 1), 0); del buf242  # reuse
    buf260 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf261 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf262 = reinterpret_tensor(buf239, (512, 1, 1024), (1024, 1024, 1), 0); del buf239  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_49(c_void_p(buf253.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(buf254.data_ptr()), c_void_p(primals_314.data_ptr()), c_void_p(mul_149.data_ptr()), c_void_p(div_38.data_ptr()), c_void_p(getitem_223.data_ptr()), c_void_p(buf256.data_ptr()), c_void_p(buf257.data_ptr()), c_void_p(buf258.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(buf260.data_ptr()), c_void_p(buf261.data_ptr()), c_void_p(buf262.data_ptr()))
    del div_38
    del getitem_223
    del mul_149
    del primals_314
    buf263 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1332, reinterpret_tensor(buf262, (1, 512, 1024), (0, 1024, 1), 0), out=buf263)
    del permute_1332
    buf264 = reinterpret_tensor(buf254, (1, 512, 1024), (524288, 1024, 1), 0); del buf254  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf262, (1, 512, 1024), (0, 1024, 1), 0), permute_1333, out=buf264)
    del permute_1333
    buf265 = reinterpret_tensor(buf262, (16, 512, 64), (32768, 64, 1), 0); del buf262  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1339, reinterpret_tensor(buf264, (16, 512, 64), (1, 1024, 16), 0), out=buf265)
    del permute_1339
    buf266 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf264, (16, 512, 64), (1, 1024, 16), 0), permute_1340, out=buf266)
    del permute_1340
    buf267 = buf220; del buf220  # reuse
    buf268 = buf221; del buf221  # reuse
    buf269 = reinterpret_tensor(buf266, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf266  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_50(c_void_p(buf269.data_ptr()), c_void_p(getitem_221.data_ptr()), c_void_p(alias_31.data_ptr()), c_void_p(buf267.data_ptr()), c_void_p(buf268.data_ptr()))
    del alias_31
    del getitem_221
    aten.index_put_(buf268, [None, None, None, iota], buf269, True)
    buf272 = reinterpret_tensor(buf228, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf228  # reuse
    buf273 = buf226; del buf226  # reuse
    buf275 = reinterpret_tensor(buf225, (16, 512, 1024), (524288, 1024, 1), 0); del buf225  # reuse
    cpp_fused_bmm_slice_backward_51(c_void_p(buf268.data_ptr()), c_void_p(buf272.data_ptr()), c_void_p(buf273.data_ptr()), c_void_p(buf275.data_ptr()))
    buf274 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1346, buf273, out=buf274)
    del permute_1346
    buf276 = reinterpret_tensor(buf264, (16, 512, 64), (32768, 64, 1), 0); del buf264  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf275, permute_1347, out=buf276)
    del permute_1347
    buf277 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_52(c_void_p(buf276.data_ptr()), c_void_p(buf277.data_ptr()))
    buf278 = reinterpret_tensor(buf246, (16, 64, 512), (32768, 512, 1), 0); del buf246  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1353, reinterpret_tensor(buf269, (16, 512, 512), (262144, 512, 1), 0), out=buf278)
    del permute_1353
    buf279 = reinterpret_tensor(buf237, (16, 512, 64), (32768, 64, 1), 0); del buf237  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf269, (16, 512, 512), (262144, 512, 1), 0), permute_1354, out=buf279)
    del permute_1354
    buf280 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_53(c_void_p(buf279.data_ptr()), c_void_p(buf280.data_ptr()))
    buf281 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf274, (1, 1024, 1024), (0, 1, 1024), 0), out=buf281)
    buf282 = reinterpret_tensor(buf212, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf212  # reuse
    cpp_fused_clone_54(c_void_p(buf265.data_ptr()), c_void_p(buf282.data_ptr()))
    buf283 = reinterpret_tensor(buf274, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf274  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1364, reinterpret_tensor(buf282, (1, 512, 1024), (0, 1024, 1), 0), out=buf283)
    buf284 = reinterpret_tensor(buf265, (1, 512, 1024), (524288, 1024, 1), 0); del buf265  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf282, (1, 512, 1024), (0, 1024, 1), 0), permute_1365, out=buf284)
    del permute_1365
    buf285 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1364, reinterpret_tensor(buf278, (1, 512, 1024), (0, 1, 512), 0), out=buf285)
    buf286 = reinterpret_tensor(buf282, (1, 512, 1024), (524288, 1024, 1), 0); del buf282  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf278, (1, 512, 1024), (0, 1, 512), 0), permute_1372, out=buf286)
    del permute_1372
    buf287 = reinterpret_tensor(buf278, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf278  # reuse
    cpp_fused_clone_55(c_void_p(buf276.data_ptr()), c_void_p(buf279.data_ptr()), c_void_p(buf287.data_ptr()))
    buf288 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1364, reinterpret_tensor(buf287, (1, 512, 1024), (0, 1024, 1), 0), out=buf288)
    del permute_1364
    buf289 = reinterpret_tensor(buf279, (1, 512, 1024), (524288, 1024, 1), 0); del buf279  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf287, (1, 512, 1024), (0, 1024, 1), 0), permute_1379, out=buf289)
    del permute_1379
    buf290 = reinterpret_tensor(buf287, (512, 1, 1024), (1024, 524288, 1), 0); del buf287  # reuse
    buf291 = buf258; del buf258  # reuse
    buf292 = buf257; del buf257  # reuse
    buf293 = buf290; del buf290  # reuse
    buf294 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf295 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf296 = reinterpret_tensor(buf276, (512, 1, 1024), (1024, 1024, 1), 0); del buf276  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_56(c_void_p(buf293.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(buf284.data_ptr()), c_void_p(buf286.data_ptr()), c_void_p(buf289.data_ptr()), c_void_p(primals_312.data_ptr()), c_void_p(mul_146.data_ptr()), c_void_p(div_39.data_ptr()), c_void_p(getitem_217.data_ptr()), c_void_p(buf291.data_ptr()), c_void_p(buf292.data_ptr()), c_void_p(buf294.data_ptr()), c_void_p(buf295.data_ptr()), c_void_p(buf296.data_ptr()))
    del div_39
    del getitem_217
    del mul_146
    del primals_312
    buf297 = reinterpret_tensor(buf253, (512, 4096), (4096, 1), 0); del buf253  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf296, (512, 1024), (1024, 1), 0), permute_1384, out=buf297)
    del permute_1384
    buf298 = reinterpret_tensor(buf269, (1024, 4096), (4096, 1), 0); del buf269  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf296, (1024, 512), (1, 1024), 0), view_682, out=buf298)
    del view_682
    buf299 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf300 = reinterpret_tensor(buf297, (512, 1, 4096), (4096, 4096, 1), 0); del buf297  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_57(c_void_p(buf300.data_ptr()), c_void_p(buf296.data_ptr()), c_void_p(getitem_215.data_ptr()), c_void_p(addmm_34.data_ptr()), c_void_p(buf299.data_ptr()))
    del addmm_34
    del getitem_215
    buf301 = reinterpret_tensor(buf296, (512, 1024), (1024, 1), 0); del buf296  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf300, (512, 4096), (4096, 1), 0), permute_1388, out=buf301)
    del permute_1388
    buf302 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf300, (4096, 512), (1, 4096), 0), view_680, out=buf302)
    del view_680
    buf303 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf304 = buf292; del buf292  # reuse
    buf305 = buf291; del buf291  # reuse
    buf306 = reinterpret_tensor(buf289, (512, 1, 1024), (1024, 524288, 1), 0); del buf289  # reuse
    buf307 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf308 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf309 = reinterpret_tensor(buf286, (512, 1, 1024), (1024, 1024, 1), 0); del buf286  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_58(c_void_p(buf300.data_ptr()), c_void_p(buf293.data_ptr()), c_void_p(buf301.data_ptr()), c_void_p(primals_306.data_ptr()), c_void_p(mul_141.data_ptr()), c_void_p(div_40.data_ptr()), c_void_p(getitem_211.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf306.data_ptr()), c_void_p(buf307.data_ptr()), c_void_p(buf308.data_ptr()), c_void_p(buf309.data_ptr()))
    del div_40
    del getitem_211
    del mul_141
    del primals_306
    buf310 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1393, reinterpret_tensor(buf309, (1, 512, 1024), (0, 1024, 1), 0), out=buf310)
    del permute_1393
    buf311 = reinterpret_tensor(buf301, (1, 512, 1024), (524288, 1024, 1), 0); del buf301  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf309, (1, 512, 1024), (0, 1024, 1), 0), permute_1394, out=buf311)
    del permute_1394
    buf312 = reinterpret_tensor(buf309, (16, 512, 64), (32768, 64, 1), 0); del buf309  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1400, reinterpret_tensor(buf311, (16, 512, 64), (1, 1024, 16), 0), out=buf312)
    del permute_1400
    buf313 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf311, (16, 512, 64), (1, 1024, 16), 0), permute_1401, out=buf313)
    del permute_1401
    buf314 = buf267; del buf267  # reuse
    buf315 = buf268; del buf268  # reuse
    buf316 = reinterpret_tensor(buf313, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf313  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_59(c_void_p(buf316.data_ptr()), c_void_p(getitem_209.data_ptr()), c_void_p(alias_32.data_ptr()), c_void_p(buf314.data_ptr()), c_void_p(buf315.data_ptr()))
    del alias_32
    del getitem_209
    aten.index_put_(buf315, [None, None, None, iota], buf316, True)
    buf319 = reinterpret_tensor(buf275, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf275  # reuse
    buf320 = buf273; del buf273  # reuse
    buf322 = reinterpret_tensor(buf272, (16, 512, 1024), (524288, 1024, 1), 0); del buf272  # reuse
    cpp_fused_bmm_slice_backward_60(c_void_p(buf315.data_ptr()), c_void_p(buf319.data_ptr()), c_void_p(buf320.data_ptr()), c_void_p(buf322.data_ptr()))
    buf321 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1407, buf320, out=buf321)
    del permute_1407
    buf323 = reinterpret_tensor(buf311, (16, 512, 64), (32768, 64, 1), 0); del buf311  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf322, permute_1408, out=buf323)
    del permute_1408
    buf324 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_61(c_void_p(buf323.data_ptr()), c_void_p(buf324.data_ptr()))
    buf325 = reinterpret_tensor(buf293, (16, 64, 512), (32768, 512, 1), 0); del buf293  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1414, reinterpret_tensor(buf316, (16, 512, 512), (262144, 512, 1), 0), out=buf325)
    del permute_1414
    buf326 = reinterpret_tensor(buf284, (16, 512, 64), (32768, 64, 1), 0); del buf284  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf316, (16, 512, 512), (262144, 512, 1), 0), permute_1415, out=buf326)
    del permute_1415
    buf327 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_62(c_void_p(buf326.data_ptr()), c_void_p(buf327.data_ptr()))
    buf328 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf321, (1, 1024, 1024), (0, 1, 1024), 0), out=buf328)
    buf329 = reinterpret_tensor(buf259, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf259  # reuse
    cpp_fused_clone_63(c_void_p(buf312.data_ptr()), c_void_p(buf329.data_ptr()))
    buf330 = reinterpret_tensor(buf321, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf321  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1425, reinterpret_tensor(buf329, (1, 512, 1024), (0, 1024, 1), 0), out=buf330)
    buf331 = reinterpret_tensor(buf312, (1, 512, 1024), (524288, 1024, 1), 0); del buf312  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf329, (1, 512, 1024), (0, 1024, 1), 0), permute_1426, out=buf331)
    del permute_1426
    buf332 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1425, reinterpret_tensor(buf325, (1, 512, 1024), (0, 1, 512), 0), out=buf332)
    buf333 = reinterpret_tensor(buf329, (1, 512, 1024), (524288, 1024, 1), 0); del buf329  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf325, (1, 512, 1024), (0, 1, 512), 0), permute_1433, out=buf333)
    del permute_1433
    buf334 = reinterpret_tensor(buf325, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf325  # reuse
    cpp_fused_clone_64(c_void_p(buf323.data_ptr()), c_void_p(buf326.data_ptr()), c_void_p(buf334.data_ptr()))
    buf335 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1425, reinterpret_tensor(buf334, (1, 512, 1024), (0, 1024, 1), 0), out=buf335)
    del permute_1425
    buf336 = reinterpret_tensor(buf326, (1, 512, 1024), (524288, 1024, 1), 0); del buf326  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf334, (1, 512, 1024), (0, 1024, 1), 0), permute_1440, out=buf336)
    del permute_1440
    buf337 = reinterpret_tensor(buf334, (512, 1, 1024), (1024, 524288, 1), 0); del buf334  # reuse
    buf338 = buf305; del buf305  # reuse
    buf339 = buf304; del buf304  # reuse
    buf340 = buf337; del buf337  # reuse
    buf341 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf342 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf343 = reinterpret_tensor(buf323, (512, 1, 1024), (1024, 1024, 1), 0); del buf323  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_65(c_void_p(buf340.data_ptr()), c_void_p(buf306.data_ptr()), c_void_p(buf331.data_ptr()), c_void_p(buf333.data_ptr()), c_void_p(buf336.data_ptr()), c_void_p(primals_304.data_ptr()), c_void_p(mul_138.data_ptr()), c_void_p(div_41.data_ptr()), c_void_p(getitem_205.data_ptr()), c_void_p(buf338.data_ptr()), c_void_p(buf339.data_ptr()), c_void_p(buf341.data_ptr()), c_void_p(buf342.data_ptr()), c_void_p(buf343.data_ptr()))
    del div_41
    del getitem_205
    del mul_138
    del primals_304
    buf344 = reinterpret_tensor(buf300, (512, 4096), (4096, 1), 0); del buf300  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf343, (512, 1024), (1024, 1), 0), permute_1445, out=buf344)
    del permute_1445
    buf345 = reinterpret_tensor(buf316, (1024, 4096), (4096, 1), 0); del buf316  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf343, (1024, 512), (1, 1024), 0), view_644, out=buf345)
    del view_644
    buf346 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf347 = reinterpret_tensor(buf344, (512, 1, 4096), (4096, 4096, 1), 0); del buf344  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_66(c_void_p(buf347.data_ptr()), c_void_p(buf343.data_ptr()), c_void_p(getitem_203.data_ptr()), c_void_p(addmm_32.data_ptr()), c_void_p(buf346.data_ptr()))
    del addmm_32
    del getitem_203
    buf348 = reinterpret_tensor(buf343, (512, 1024), (1024, 1), 0); del buf343  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf347, (512, 4096), (4096, 1), 0), permute_1449, out=buf348)
    del permute_1449
    buf349 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf347, (4096, 512), (1, 4096), 0), view_642, out=buf349)
    del view_642
    buf350 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf351 = buf339; del buf339  # reuse
    buf352 = buf338; del buf338  # reuse
    buf353 = reinterpret_tensor(buf336, (512, 1, 1024), (1024, 524288, 1), 0); del buf336  # reuse
    buf354 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf355 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf356 = reinterpret_tensor(buf333, (512, 1, 1024), (1024, 1024, 1), 0); del buf333  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_67(c_void_p(buf347.data_ptr()), c_void_p(buf340.data_ptr()), c_void_p(buf348.data_ptr()), c_void_p(primals_298.data_ptr()), c_void_p(mul_133.data_ptr()), c_void_p(div_42.data_ptr()), c_void_p(getitem_199.data_ptr()), c_void_p(buf350.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(buf352.data_ptr()), c_void_p(buf353.data_ptr()), c_void_p(buf354.data_ptr()), c_void_p(buf355.data_ptr()), c_void_p(buf356.data_ptr()))
    del div_42
    del getitem_199
    del mul_133
    del primals_298
    buf357 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1454, reinterpret_tensor(buf356, (1, 512, 1024), (0, 1024, 1), 0), out=buf357)
    del permute_1454
    buf358 = reinterpret_tensor(buf348, (1, 512, 1024), (524288, 1024, 1), 0); del buf348  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf356, (1, 512, 1024), (0, 1024, 1), 0), permute_1455, out=buf358)
    del permute_1455
    buf359 = reinterpret_tensor(buf356, (16, 512, 64), (32768, 64, 1), 0); del buf356  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1461, reinterpret_tensor(buf358, (16, 512, 64), (1, 1024, 16), 0), out=buf359)
    del permute_1461
    buf360 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf358, (16, 512, 64), (1, 1024, 16), 0), permute_1462, out=buf360)
    del permute_1462
    buf361 = buf314; del buf314  # reuse
    buf362 = buf315; del buf315  # reuse
    buf363 = reinterpret_tensor(buf360, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf360  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_68(c_void_p(buf363.data_ptr()), c_void_p(getitem_197.data_ptr()), c_void_p(alias_33.data_ptr()), c_void_p(buf361.data_ptr()), c_void_p(buf362.data_ptr()))
    del alias_33
    del getitem_197
    aten.index_put_(buf362, [None, None, None, iota], buf363, True)
    buf366 = reinterpret_tensor(buf322, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf322  # reuse
    buf367 = buf320; del buf320  # reuse
    buf369 = reinterpret_tensor(buf319, (16, 512, 1024), (524288, 1024, 1), 0); del buf319  # reuse
    cpp_fused_bmm_slice_backward_69(c_void_p(buf362.data_ptr()), c_void_p(buf366.data_ptr()), c_void_p(buf367.data_ptr()), c_void_p(buf369.data_ptr()))
    buf368 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1468, buf367, out=buf368)
    del permute_1468
    buf370 = reinterpret_tensor(buf358, (16, 512, 64), (32768, 64, 1), 0); del buf358  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf369, permute_1469, out=buf370)
    del permute_1469
    buf371 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_70(c_void_p(buf370.data_ptr()), c_void_p(buf371.data_ptr()))
    buf372 = reinterpret_tensor(buf340, (16, 64, 512), (32768, 512, 1), 0); del buf340  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1475, reinterpret_tensor(buf363, (16, 512, 512), (262144, 512, 1), 0), out=buf372)
    del permute_1475
    buf373 = reinterpret_tensor(buf331, (16, 512, 64), (32768, 64, 1), 0); del buf331  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf363, (16, 512, 512), (262144, 512, 1), 0), permute_1476, out=buf373)
    del permute_1476
    buf374 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_71(c_void_p(buf373.data_ptr()), c_void_p(buf374.data_ptr()))
    buf375 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf368, (1, 1024, 1024), (0, 1, 1024), 0), out=buf375)
    buf376 = reinterpret_tensor(buf306, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf306  # reuse
    cpp_fused_clone_72(c_void_p(buf359.data_ptr()), c_void_p(buf376.data_ptr()))
    buf377 = reinterpret_tensor(buf368, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf368  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1486, reinterpret_tensor(buf376, (1, 512, 1024), (0, 1024, 1), 0), out=buf377)
    buf378 = reinterpret_tensor(buf359, (1, 512, 1024), (524288, 1024, 1), 0); del buf359  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf376, (1, 512, 1024), (0, 1024, 1), 0), permute_1487, out=buf378)
    del permute_1487
    buf379 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1486, reinterpret_tensor(buf372, (1, 512, 1024), (0, 1, 512), 0), out=buf379)
    buf380 = reinterpret_tensor(buf376, (1, 512, 1024), (524288, 1024, 1), 0); del buf376  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf372, (1, 512, 1024), (0, 1, 512), 0), permute_1494, out=buf380)
    del permute_1494
    buf381 = reinterpret_tensor(buf372, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf372  # reuse
    cpp_fused_clone_73(c_void_p(buf370.data_ptr()), c_void_p(buf373.data_ptr()), c_void_p(buf381.data_ptr()))
    buf382 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1486, reinterpret_tensor(buf381, (1, 512, 1024), (0, 1024, 1), 0), out=buf382)
    del permute_1486
    buf383 = reinterpret_tensor(buf373, (1, 512, 1024), (524288, 1024, 1), 0); del buf373  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf381, (1, 512, 1024), (0, 1024, 1), 0), permute_1501, out=buf383)
    del permute_1501
    buf384 = reinterpret_tensor(buf381, (512, 1, 1024), (1024, 524288, 1), 0); del buf381  # reuse
    buf385 = buf352; del buf352  # reuse
    buf386 = buf351; del buf351  # reuse
    buf387 = buf384; del buf384  # reuse
    buf388 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf389 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf390 = reinterpret_tensor(buf370, (512, 1, 1024), (1024, 1024, 1), 0); del buf370  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_74(c_void_p(buf387.data_ptr()), c_void_p(buf353.data_ptr()), c_void_p(buf378.data_ptr()), c_void_p(buf380.data_ptr()), c_void_p(buf383.data_ptr()), c_void_p(primals_296.data_ptr()), c_void_p(mul_130.data_ptr()), c_void_p(div_43.data_ptr()), c_void_p(getitem_193.data_ptr()), c_void_p(buf385.data_ptr()), c_void_p(buf386.data_ptr()), c_void_p(buf388.data_ptr()), c_void_p(buf389.data_ptr()), c_void_p(buf390.data_ptr()))
    del div_43
    del getitem_193
    del mul_130
    del primals_296
    buf391 = reinterpret_tensor(buf347, (512, 4096), (4096, 1), 0); del buf347  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf390, (512, 1024), (1024, 1), 0), permute_1506, out=buf391)
    del permute_1506
    buf392 = reinterpret_tensor(buf363, (1024, 4096), (4096, 1), 0); del buf363  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf390, (1024, 512), (1, 1024), 0), view_606, out=buf392)
    del view_606
    buf393 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf394 = reinterpret_tensor(buf391, (512, 1, 4096), (4096, 4096, 1), 0); del buf391  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_75(c_void_p(buf394.data_ptr()), c_void_p(buf390.data_ptr()), c_void_p(getitem_191.data_ptr()), c_void_p(addmm_30.data_ptr()), c_void_p(buf393.data_ptr()))
    del addmm_30
    del getitem_191
    buf395 = reinterpret_tensor(buf390, (512, 1024), (1024, 1), 0); del buf390  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf394, (512, 4096), (4096, 1), 0), permute_1510, out=buf395)
    del permute_1510
    buf396 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf394, (4096, 512), (1, 4096), 0), view_604, out=buf396)
    del view_604
    buf397 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf398 = buf386; del buf386  # reuse
    buf399 = buf385; del buf385  # reuse
    buf400 = reinterpret_tensor(buf383, (512, 1, 1024), (1024, 524288, 1), 0); del buf383  # reuse
    buf401 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf402 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf403 = reinterpret_tensor(buf380, (512, 1, 1024), (1024, 1024, 1), 0); del buf380  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_76(c_void_p(buf394.data_ptr()), c_void_p(buf387.data_ptr()), c_void_p(buf395.data_ptr()), c_void_p(primals_290.data_ptr()), c_void_p(mul_125.data_ptr()), c_void_p(div_44.data_ptr()), c_void_p(getitem_187.data_ptr()), c_void_p(buf397.data_ptr()), c_void_p(buf398.data_ptr()), c_void_p(buf399.data_ptr()), c_void_p(buf400.data_ptr()), c_void_p(buf401.data_ptr()), c_void_p(buf402.data_ptr()), c_void_p(buf403.data_ptr()))
    del div_44
    del getitem_187
    del mul_125
    del primals_290
    buf404 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1515, reinterpret_tensor(buf403, (1, 512, 1024), (0, 1024, 1), 0), out=buf404)
    del permute_1515
    buf405 = reinterpret_tensor(buf395, (1, 512, 1024), (524288, 1024, 1), 0); del buf395  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf403, (1, 512, 1024), (0, 1024, 1), 0), permute_1516, out=buf405)
    del permute_1516
    buf406 = reinterpret_tensor(buf403, (16, 512, 64), (32768, 64, 1), 0); del buf403  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1522, reinterpret_tensor(buf405, (16, 512, 64), (1, 1024, 16), 0), out=buf406)
    del permute_1522
    buf407 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf405, (16, 512, 64), (1, 1024, 16), 0), permute_1523, out=buf407)
    del permute_1523
    buf408 = buf361; del buf361  # reuse
    buf409 = buf362; del buf362  # reuse
    buf410 = reinterpret_tensor(buf407, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf407  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_77(c_void_p(buf410.data_ptr()), c_void_p(getitem_185.data_ptr()), c_void_p(alias_34.data_ptr()), c_void_p(buf408.data_ptr()), c_void_p(buf409.data_ptr()))
    del alias_34
    del getitem_185
    aten.index_put_(buf409, [None, None, None, iota], buf410, True)
    buf413 = reinterpret_tensor(buf369, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf369  # reuse
    buf414 = buf367; del buf367  # reuse
    buf416 = reinterpret_tensor(buf366, (16, 512, 1024), (524288, 1024, 1), 0); del buf366  # reuse
    cpp_fused_bmm_slice_backward_78(c_void_p(buf409.data_ptr()), c_void_p(buf413.data_ptr()), c_void_p(buf414.data_ptr()), c_void_p(buf416.data_ptr()))
    buf415 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1529, buf414, out=buf415)
    del permute_1529
    buf417 = reinterpret_tensor(buf405, (16, 512, 64), (32768, 64, 1), 0); del buf405  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf416, permute_1530, out=buf417)
    del permute_1530
    buf418 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_79(c_void_p(buf417.data_ptr()), c_void_p(buf418.data_ptr()))
    buf419 = reinterpret_tensor(buf387, (16, 64, 512), (32768, 512, 1), 0); del buf387  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1536, reinterpret_tensor(buf410, (16, 512, 512), (262144, 512, 1), 0), out=buf419)
    del permute_1536
    buf420 = reinterpret_tensor(buf378, (16, 512, 64), (32768, 64, 1), 0); del buf378  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf410, (16, 512, 512), (262144, 512, 1), 0), permute_1537, out=buf420)
    del permute_1537
    buf421 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_80(c_void_p(buf420.data_ptr()), c_void_p(buf421.data_ptr()))
    buf422 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf415, (1, 1024, 1024), (0, 1, 1024), 0), out=buf422)
    buf423 = reinterpret_tensor(buf353, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf353  # reuse
    cpp_fused_clone_81(c_void_p(buf406.data_ptr()), c_void_p(buf423.data_ptr()))
    buf424 = reinterpret_tensor(buf415, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf415  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1547, reinterpret_tensor(buf423, (1, 512, 1024), (0, 1024, 1), 0), out=buf424)
    buf425 = reinterpret_tensor(buf406, (1, 512, 1024), (524288, 1024, 1), 0); del buf406  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf423, (1, 512, 1024), (0, 1024, 1), 0), permute_1548, out=buf425)
    del permute_1548
    buf426 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1547, reinterpret_tensor(buf419, (1, 512, 1024), (0, 1, 512), 0), out=buf426)
    buf427 = reinterpret_tensor(buf423, (1, 512, 1024), (524288, 1024, 1), 0); del buf423  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf419, (1, 512, 1024), (0, 1, 512), 0), permute_1555, out=buf427)
    del permute_1555
    buf428 = reinterpret_tensor(buf419, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf419  # reuse
    cpp_fused_clone_82(c_void_p(buf417.data_ptr()), c_void_p(buf420.data_ptr()), c_void_p(buf428.data_ptr()))
    buf429 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1547, reinterpret_tensor(buf428, (1, 512, 1024), (0, 1024, 1), 0), out=buf429)
    del permute_1547
    buf430 = reinterpret_tensor(buf420, (1, 512, 1024), (524288, 1024, 1), 0); del buf420  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf428, (1, 512, 1024), (0, 1024, 1), 0), permute_1562, out=buf430)
    del permute_1562
    buf431 = reinterpret_tensor(buf428, (512, 1, 1024), (1024, 524288, 1), 0); del buf428  # reuse
    buf432 = buf399; del buf399  # reuse
    buf433 = buf398; del buf398  # reuse
    buf434 = buf431; del buf431  # reuse
    buf435 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf436 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf437 = reinterpret_tensor(buf417, (512, 1, 1024), (1024, 1024, 1), 0); del buf417  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_83(c_void_p(buf434.data_ptr()), c_void_p(buf400.data_ptr()), c_void_p(buf425.data_ptr()), c_void_p(buf427.data_ptr()), c_void_p(buf430.data_ptr()), c_void_p(primals_288.data_ptr()), c_void_p(mul_122.data_ptr()), c_void_p(div_45.data_ptr()), c_void_p(getitem_181.data_ptr()), c_void_p(buf432.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(buf435.data_ptr()), c_void_p(buf436.data_ptr()), c_void_p(buf437.data_ptr()))
    del div_45
    del getitem_181
    del mul_122
    del primals_288
    buf438 = reinterpret_tensor(buf394, (512, 4096), (4096, 1), 0); del buf394  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf437, (512, 1024), (1024, 1), 0), permute_1567, out=buf438)
    del permute_1567
    buf439 = reinterpret_tensor(buf410, (1024, 4096), (4096, 1), 0); del buf410  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf437, (1024, 512), (1, 1024), 0), view_568, out=buf439)
    del view_568
    buf440 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf441 = reinterpret_tensor(buf438, (512, 1, 4096), (4096, 4096, 1), 0); del buf438  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_84(c_void_p(buf441.data_ptr()), c_void_p(buf437.data_ptr()), c_void_p(getitem_179.data_ptr()), c_void_p(addmm_28.data_ptr()), c_void_p(buf440.data_ptr()))
    del addmm_28
    del getitem_179
    buf442 = reinterpret_tensor(buf437, (512, 1024), (1024, 1), 0); del buf437  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf441, (512, 4096), (4096, 1), 0), permute_1571, out=buf442)
    del permute_1571
    buf443 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf441, (4096, 512), (1, 4096), 0), view_566, out=buf443)
    del view_566
    buf444 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf445 = buf433; del buf433  # reuse
    buf446 = buf432; del buf432  # reuse
    buf447 = reinterpret_tensor(buf430, (512, 1, 1024), (1024, 524288, 1), 0); del buf430  # reuse
    buf448 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf449 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf450 = reinterpret_tensor(buf427, (512, 1, 1024), (1024, 1024, 1), 0); del buf427  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_85(c_void_p(buf441.data_ptr()), c_void_p(buf434.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(primals_282.data_ptr()), c_void_p(mul_117.data_ptr()), c_void_p(div_46.data_ptr()), c_void_p(getitem_175.data_ptr()), c_void_p(buf444.data_ptr()), c_void_p(buf445.data_ptr()), c_void_p(buf446.data_ptr()), c_void_p(buf447.data_ptr()), c_void_p(buf448.data_ptr()), c_void_p(buf449.data_ptr()), c_void_p(buf450.data_ptr()))
    del div_46
    del getitem_175
    del mul_117
    del primals_282
    buf451 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1576, reinterpret_tensor(buf450, (1, 512, 1024), (0, 1024, 1), 0), out=buf451)
    del permute_1576
    buf452 = reinterpret_tensor(buf442, (1, 512, 1024), (524288, 1024, 1), 0); del buf442  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf450, (1, 512, 1024), (0, 1024, 1), 0), permute_1577, out=buf452)
    del permute_1577
    buf453 = reinterpret_tensor(buf450, (16, 512, 64), (32768, 64, 1), 0); del buf450  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1583, reinterpret_tensor(buf452, (16, 512, 64), (1, 1024, 16), 0), out=buf453)
    del permute_1583
    buf454 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf452, (16, 512, 64), (1, 1024, 16), 0), permute_1584, out=buf454)
    del permute_1584
    buf455 = buf408; del buf408  # reuse
    buf456 = buf409; del buf409  # reuse
    buf457 = reinterpret_tensor(buf454, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf454  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_86(c_void_p(buf457.data_ptr()), c_void_p(getitem_173.data_ptr()), c_void_p(alias_35.data_ptr()), c_void_p(buf455.data_ptr()), c_void_p(buf456.data_ptr()))
    del alias_35
    del getitem_173
    aten.index_put_(buf456, [None, None, None, iota], buf457, True)
    buf460 = reinterpret_tensor(buf416, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf416  # reuse
    buf461 = buf414; del buf414  # reuse
    buf463 = reinterpret_tensor(buf413, (16, 512, 1024), (524288, 1024, 1), 0); del buf413  # reuse
    cpp_fused_bmm_slice_backward_87(c_void_p(buf456.data_ptr()), c_void_p(buf460.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(buf463.data_ptr()))
    buf462 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1590, buf461, out=buf462)
    del permute_1590
    buf464 = reinterpret_tensor(buf452, (16, 512, 64), (32768, 64, 1), 0); del buf452  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf463, permute_1591, out=buf464)
    del permute_1591
    buf465 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_88(c_void_p(buf464.data_ptr()), c_void_p(buf465.data_ptr()))
    buf466 = reinterpret_tensor(buf434, (16, 64, 512), (32768, 512, 1), 0); del buf434  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1597, reinterpret_tensor(buf457, (16, 512, 512), (262144, 512, 1), 0), out=buf466)
    del permute_1597
    buf467 = reinterpret_tensor(buf425, (16, 512, 64), (32768, 64, 1), 0); del buf425  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf457, (16, 512, 512), (262144, 512, 1), 0), permute_1598, out=buf467)
    del permute_1598
    buf468 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_89(c_void_p(buf467.data_ptr()), c_void_p(buf468.data_ptr()))
    buf469 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf462, (1, 1024, 1024), (0, 1, 1024), 0), out=buf469)
    buf470 = reinterpret_tensor(buf400, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf400  # reuse
    cpp_fused_clone_90(c_void_p(buf453.data_ptr()), c_void_p(buf470.data_ptr()))
    buf471 = reinterpret_tensor(buf462, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf462  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1608, reinterpret_tensor(buf470, (1, 512, 1024), (0, 1024, 1), 0), out=buf471)
    buf472 = reinterpret_tensor(buf453, (1, 512, 1024), (524288, 1024, 1), 0); del buf453  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf470, (1, 512, 1024), (0, 1024, 1), 0), permute_1609, out=buf472)
    del permute_1609
    buf473 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1608, reinterpret_tensor(buf466, (1, 512, 1024), (0, 1, 512), 0), out=buf473)
    buf474 = reinterpret_tensor(buf470, (1, 512, 1024), (524288, 1024, 1), 0); del buf470  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf466, (1, 512, 1024), (0, 1, 512), 0), permute_1616, out=buf474)
    del permute_1616
    buf475 = reinterpret_tensor(buf466, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf466  # reuse
    cpp_fused_clone_91(c_void_p(buf464.data_ptr()), c_void_p(buf467.data_ptr()), c_void_p(buf475.data_ptr()))
    buf476 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1608, reinterpret_tensor(buf475, (1, 512, 1024), (0, 1024, 1), 0), out=buf476)
    del permute_1608
    buf477 = reinterpret_tensor(buf467, (1, 512, 1024), (524288, 1024, 1), 0); del buf467  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf475, (1, 512, 1024), (0, 1024, 1), 0), permute_1623, out=buf477)
    del permute_1623
    buf478 = reinterpret_tensor(buf475, (512, 1, 1024), (1024, 524288, 1), 0); del buf475  # reuse
    buf479 = buf446; del buf446  # reuse
    buf480 = buf445; del buf445  # reuse
    buf481 = buf478; del buf478  # reuse
    buf482 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf483 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf484 = reinterpret_tensor(buf464, (512, 1, 1024), (1024, 1024, 1), 0); del buf464  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_92(c_void_p(buf481.data_ptr()), c_void_p(buf447.data_ptr()), c_void_p(buf472.data_ptr()), c_void_p(buf474.data_ptr()), c_void_p(buf477.data_ptr()), c_void_p(primals_280.data_ptr()), c_void_p(mul_114.data_ptr()), c_void_p(div_47.data_ptr()), c_void_p(getitem_169.data_ptr()), c_void_p(buf479.data_ptr()), c_void_p(buf480.data_ptr()), c_void_p(buf482.data_ptr()), c_void_p(buf483.data_ptr()), c_void_p(buf484.data_ptr()))
    del div_47
    del getitem_169
    del mul_114
    del primals_280
    buf485 = reinterpret_tensor(buf441, (512, 4096), (4096, 1), 0); del buf441  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf484, (512, 1024), (1024, 1), 0), permute_1628, out=buf485)
    del permute_1628
    buf486 = reinterpret_tensor(buf457, (1024, 4096), (4096, 1), 0); del buf457  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf484, (1024, 512), (1, 1024), 0), view_530, out=buf486)
    del view_530
    buf487 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf488 = reinterpret_tensor(buf485, (512, 1, 4096), (4096, 4096, 1), 0); del buf485  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_93(c_void_p(buf488.data_ptr()), c_void_p(buf484.data_ptr()), c_void_p(getitem_167.data_ptr()), c_void_p(addmm_26.data_ptr()), c_void_p(buf487.data_ptr()))
    del addmm_26
    del getitem_167
    buf489 = reinterpret_tensor(buf484, (512, 1024), (1024, 1), 0); del buf484  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf488, (512, 4096), (4096, 1), 0), permute_1632, out=buf489)
    del permute_1632
    buf490 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf488, (4096, 512), (1, 4096), 0), view_528, out=buf490)
    del view_528
    buf491 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf492 = buf480; del buf480  # reuse
    buf493 = buf479; del buf479  # reuse
    buf494 = reinterpret_tensor(buf477, (512, 1, 1024), (1024, 524288, 1), 0); del buf477  # reuse
    buf495 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf496 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf497 = reinterpret_tensor(buf474, (512, 1, 1024), (1024, 1024, 1), 0); del buf474  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_94(c_void_p(buf488.data_ptr()), c_void_p(buf481.data_ptr()), c_void_p(buf489.data_ptr()), c_void_p(primals_274.data_ptr()), c_void_p(mul_109.data_ptr()), c_void_p(div_48.data_ptr()), c_void_p(getitem_163.data_ptr()), c_void_p(buf491.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(buf493.data_ptr()), c_void_p(buf494.data_ptr()), c_void_p(buf495.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(buf497.data_ptr()))
    del div_48
    del getitem_163
    del mul_109
    del primals_274
    buf498 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1637, reinterpret_tensor(buf497, (1, 512, 1024), (0, 1024, 1), 0), out=buf498)
    del permute_1637
    buf499 = reinterpret_tensor(buf489, (1, 512, 1024), (524288, 1024, 1), 0); del buf489  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf497, (1, 512, 1024), (0, 1024, 1), 0), permute_1638, out=buf499)
    del permute_1638
    buf500 = reinterpret_tensor(buf497, (16, 512, 64), (32768, 64, 1), 0); del buf497  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1644, reinterpret_tensor(buf499, (16, 512, 64), (1, 1024, 16), 0), out=buf500)
    del permute_1644
    buf501 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf499, (16, 512, 64), (1, 1024, 16), 0), permute_1645, out=buf501)
    del permute_1645
    buf502 = buf455; del buf455  # reuse
    buf503 = buf456; del buf456  # reuse
    buf504 = reinterpret_tensor(buf501, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf501  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_95(c_void_p(buf504.data_ptr()), c_void_p(getitem_161.data_ptr()), c_void_p(alias_36.data_ptr()), c_void_p(buf502.data_ptr()), c_void_p(buf503.data_ptr()))
    del alias_36
    del getitem_161
    aten.index_put_(buf503, [None, None, None, iota], buf504, True)
    buf507 = reinterpret_tensor(buf463, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf463  # reuse
    buf508 = buf461; del buf461  # reuse
    buf510 = reinterpret_tensor(buf460, (16, 512, 1024), (524288, 1024, 1), 0); del buf460  # reuse
    cpp_fused_bmm_slice_backward_96(c_void_p(buf503.data_ptr()), c_void_p(buf507.data_ptr()), c_void_p(buf508.data_ptr()), c_void_p(buf510.data_ptr()))
    buf509 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1651, buf508, out=buf509)
    del permute_1651
    buf511 = reinterpret_tensor(buf499, (16, 512, 64), (32768, 64, 1), 0); del buf499  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf510, permute_1652, out=buf511)
    del permute_1652
    buf512 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_97(c_void_p(buf511.data_ptr()), c_void_p(buf512.data_ptr()))
    buf513 = reinterpret_tensor(buf481, (16, 64, 512), (32768, 512, 1), 0); del buf481  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1658, reinterpret_tensor(buf504, (16, 512, 512), (262144, 512, 1), 0), out=buf513)
    del permute_1658
    buf514 = reinterpret_tensor(buf472, (16, 512, 64), (32768, 64, 1), 0); del buf472  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf504, (16, 512, 512), (262144, 512, 1), 0), permute_1659, out=buf514)
    del permute_1659
    buf515 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_98(c_void_p(buf514.data_ptr()), c_void_p(buf515.data_ptr()))
    buf516 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf509, (1, 1024, 1024), (0, 1, 1024), 0), out=buf516)
    buf517 = reinterpret_tensor(buf447, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf447  # reuse
    cpp_fused_clone_99(c_void_p(buf500.data_ptr()), c_void_p(buf517.data_ptr()))
    buf518 = reinterpret_tensor(buf509, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf509  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1669, reinterpret_tensor(buf517, (1, 512, 1024), (0, 1024, 1), 0), out=buf518)
    buf519 = reinterpret_tensor(buf500, (1, 512, 1024), (524288, 1024, 1), 0); del buf500  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf517, (1, 512, 1024), (0, 1024, 1), 0), permute_1670, out=buf519)
    del permute_1670
    buf520 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1669, reinterpret_tensor(buf513, (1, 512, 1024), (0, 1, 512), 0), out=buf520)
    buf521 = reinterpret_tensor(buf517, (1, 512, 1024), (524288, 1024, 1), 0); del buf517  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf513, (1, 512, 1024), (0, 1, 512), 0), permute_1677, out=buf521)
    del permute_1677
    buf522 = reinterpret_tensor(buf513, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf513  # reuse
    cpp_fused_clone_100(c_void_p(buf511.data_ptr()), c_void_p(buf514.data_ptr()), c_void_p(buf522.data_ptr()))
    buf523 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1669, reinterpret_tensor(buf522, (1, 512, 1024), (0, 1024, 1), 0), out=buf523)
    del permute_1669
    buf524 = reinterpret_tensor(buf514, (1, 512, 1024), (524288, 1024, 1), 0); del buf514  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf522, (1, 512, 1024), (0, 1024, 1), 0), permute_1684, out=buf524)
    del permute_1684
    buf525 = reinterpret_tensor(buf522, (512, 1, 1024), (1024, 524288, 1), 0); del buf522  # reuse
    buf526 = buf493; del buf493  # reuse
    buf527 = buf492; del buf492  # reuse
    buf528 = buf525; del buf525  # reuse
    buf529 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf530 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf531 = reinterpret_tensor(buf511, (512, 1, 1024), (1024, 1024, 1), 0); del buf511  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_101(c_void_p(buf528.data_ptr()), c_void_p(buf494.data_ptr()), c_void_p(buf519.data_ptr()), c_void_p(buf521.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(primals_272.data_ptr()), c_void_p(mul_106.data_ptr()), c_void_p(div_49.data_ptr()), c_void_p(getitem_157.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(buf527.data_ptr()), c_void_p(buf529.data_ptr()), c_void_p(buf530.data_ptr()), c_void_p(buf531.data_ptr()))
    del div_49
    del getitem_157
    del mul_106
    del primals_272
    buf532 = reinterpret_tensor(buf488, (512, 4096), (4096, 1), 0); del buf488  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf531, (512, 1024), (1024, 1), 0), permute_1689, out=buf532)
    del permute_1689
    buf533 = reinterpret_tensor(buf504, (1024, 4096), (4096, 1), 0); del buf504  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf531, (1024, 512), (1, 1024), 0), view_492, out=buf533)
    del view_492
    buf534 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf535 = reinterpret_tensor(buf532, (512, 1, 4096), (4096, 4096, 1), 0); del buf532  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_102(c_void_p(buf535.data_ptr()), c_void_p(buf531.data_ptr()), c_void_p(getitem_155.data_ptr()), c_void_p(addmm_24.data_ptr()), c_void_p(buf534.data_ptr()))
    del addmm_24
    del getitem_155
    buf536 = reinterpret_tensor(buf531, (512, 1024), (1024, 1), 0); del buf531  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf535, (512, 4096), (4096, 1), 0), permute_1693, out=buf536)
    del permute_1693
    buf537 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf535, (4096, 512), (1, 4096), 0), view_490, out=buf537)
    del view_490
    buf538 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf539 = buf527; del buf527  # reuse
    buf540 = buf526; del buf526  # reuse
    buf541 = reinterpret_tensor(buf524, (512, 1, 1024), (1024, 524288, 1), 0); del buf524  # reuse
    buf542 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf543 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf544 = reinterpret_tensor(buf521, (512, 1, 1024), (1024, 1024, 1), 0); del buf521  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_103(c_void_p(buf535.data_ptr()), c_void_p(buf528.data_ptr()), c_void_p(buf536.data_ptr()), c_void_p(primals_266.data_ptr()), c_void_p(mul_101.data_ptr()), c_void_p(div_50.data_ptr()), c_void_p(getitem_151.data_ptr()), c_void_p(buf538.data_ptr()), c_void_p(buf539.data_ptr()), c_void_p(buf540.data_ptr()), c_void_p(buf541.data_ptr()), c_void_p(buf542.data_ptr()), c_void_p(buf543.data_ptr()), c_void_p(buf544.data_ptr()))
    del div_50
    del getitem_151
    del mul_101
    del primals_266
    buf545 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1698, reinterpret_tensor(buf544, (1, 512, 1024), (0, 1024, 1), 0), out=buf545)
    del permute_1698
    buf546 = reinterpret_tensor(buf536, (1, 512, 1024), (524288, 1024, 1), 0); del buf536  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf544, (1, 512, 1024), (0, 1024, 1), 0), permute_1699, out=buf546)
    del permute_1699
    buf547 = reinterpret_tensor(buf544, (16, 512, 64), (32768, 64, 1), 0); del buf544  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1705, reinterpret_tensor(buf546, (16, 512, 64), (1, 1024, 16), 0), out=buf547)
    del permute_1705
    buf548 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf546, (16, 512, 64), (1, 1024, 16), 0), permute_1706, out=buf548)
    del permute_1706
    buf549 = buf502; del buf502  # reuse
    buf550 = buf503; del buf503  # reuse
    buf551 = reinterpret_tensor(buf548, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf548  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_104(c_void_p(buf551.data_ptr()), c_void_p(getitem_149.data_ptr()), c_void_p(alias_37.data_ptr()), c_void_p(buf549.data_ptr()), c_void_p(buf550.data_ptr()))
    del alias_37
    del getitem_149
    aten.index_put_(buf550, [None, None, None, iota], buf551, True)
    buf554 = reinterpret_tensor(buf510, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf510  # reuse
    buf555 = buf508; del buf508  # reuse
    buf557 = reinterpret_tensor(buf507, (16, 512, 1024), (524288, 1024, 1), 0); del buf507  # reuse
    cpp_fused_bmm_slice_backward_105(c_void_p(buf550.data_ptr()), c_void_p(buf554.data_ptr()), c_void_p(buf555.data_ptr()), c_void_p(buf557.data_ptr()))
    buf556 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1712, buf555, out=buf556)
    del permute_1712
    buf558 = reinterpret_tensor(buf546, (16, 512, 64), (32768, 64, 1), 0); del buf546  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf557, permute_1713, out=buf558)
    del permute_1713
    buf559 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_106(c_void_p(buf558.data_ptr()), c_void_p(buf559.data_ptr()))
    buf560 = reinterpret_tensor(buf528, (16, 64, 512), (32768, 512, 1), 0); del buf528  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1719, reinterpret_tensor(buf551, (16, 512, 512), (262144, 512, 1), 0), out=buf560)
    del permute_1719
    buf561 = reinterpret_tensor(buf519, (16, 512, 64), (32768, 64, 1), 0); del buf519  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf551, (16, 512, 512), (262144, 512, 1), 0), permute_1720, out=buf561)
    del permute_1720
    buf562 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_107(c_void_p(buf561.data_ptr()), c_void_p(buf562.data_ptr()))
    buf563 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf556, (1, 1024, 1024), (0, 1, 1024), 0), out=buf563)
    buf564 = reinterpret_tensor(buf494, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf494  # reuse
    cpp_fused_clone_108(c_void_p(buf547.data_ptr()), c_void_p(buf564.data_ptr()))
    buf565 = reinterpret_tensor(buf556, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf556  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1730, reinterpret_tensor(buf564, (1, 512, 1024), (0, 1024, 1), 0), out=buf565)
    buf566 = reinterpret_tensor(buf547, (1, 512, 1024), (524288, 1024, 1), 0); del buf547  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf564, (1, 512, 1024), (0, 1024, 1), 0), permute_1731, out=buf566)
    del permute_1731
    buf567 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1730, reinterpret_tensor(buf560, (1, 512, 1024), (0, 1, 512), 0), out=buf567)
    buf568 = reinterpret_tensor(buf564, (1, 512, 1024), (524288, 1024, 1), 0); del buf564  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf560, (1, 512, 1024), (0, 1, 512), 0), permute_1738, out=buf568)
    del permute_1738
    buf569 = reinterpret_tensor(buf560, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf560  # reuse
    cpp_fused_clone_109(c_void_p(buf558.data_ptr()), c_void_p(buf561.data_ptr()), c_void_p(buf569.data_ptr()))
    buf570 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1730, reinterpret_tensor(buf569, (1, 512, 1024), (0, 1024, 1), 0), out=buf570)
    del permute_1730
    buf571 = reinterpret_tensor(buf561, (1, 512, 1024), (524288, 1024, 1), 0); del buf561  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf569, (1, 512, 1024), (0, 1024, 1), 0), permute_1745, out=buf571)
    del permute_1745
    buf572 = reinterpret_tensor(buf569, (512, 1, 1024), (1024, 524288, 1), 0); del buf569  # reuse
    buf573 = buf540; del buf540  # reuse
    buf574 = buf539; del buf539  # reuse
    buf575 = buf572; del buf572  # reuse
    buf576 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf577 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf578 = reinterpret_tensor(buf558, (512, 1, 1024), (1024, 1024, 1), 0); del buf558  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_110(c_void_p(buf575.data_ptr()), c_void_p(buf541.data_ptr()), c_void_p(buf566.data_ptr()), c_void_p(buf568.data_ptr()), c_void_p(buf571.data_ptr()), c_void_p(primals_264.data_ptr()), c_void_p(mul_98.data_ptr()), c_void_p(div_51.data_ptr()), c_void_p(getitem_145.data_ptr()), c_void_p(buf573.data_ptr()), c_void_p(buf574.data_ptr()), c_void_p(buf576.data_ptr()), c_void_p(buf577.data_ptr()), c_void_p(buf578.data_ptr()))
    del div_51
    del getitem_145
    del mul_98
    del primals_264
    buf579 = reinterpret_tensor(buf535, (512, 4096), (4096, 1), 0); del buf535  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf578, (512, 1024), (1024, 1), 0), permute_1750, out=buf579)
    del permute_1750
    buf580 = reinterpret_tensor(buf551, (1024, 4096), (4096, 1), 0); del buf551  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf578, (1024, 512), (1, 1024), 0), view_454, out=buf580)
    del view_454
    buf581 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf582 = reinterpret_tensor(buf579, (512, 1, 4096), (4096, 4096, 1), 0); del buf579  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_111(c_void_p(buf582.data_ptr()), c_void_p(buf578.data_ptr()), c_void_p(getitem_143.data_ptr()), c_void_p(addmm_22.data_ptr()), c_void_p(buf581.data_ptr()))
    del addmm_22
    del getitem_143
    buf583 = reinterpret_tensor(buf578, (512, 1024), (1024, 1), 0); del buf578  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf582, (512, 4096), (4096, 1), 0), permute_1754, out=buf583)
    del permute_1754
    buf584 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf582, (4096, 512), (1, 4096), 0), view_452, out=buf584)
    del view_452
    buf585 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf586 = buf574; del buf574  # reuse
    buf587 = buf573; del buf573  # reuse
    buf588 = reinterpret_tensor(buf571, (512, 1, 1024), (1024, 524288, 1), 0); del buf571  # reuse
    buf589 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf590 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf591 = reinterpret_tensor(buf568, (512, 1, 1024), (1024, 1024, 1), 0); del buf568  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_112(c_void_p(buf582.data_ptr()), c_void_p(buf575.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(primals_258.data_ptr()), c_void_p(mul_93.data_ptr()), c_void_p(div_52.data_ptr()), c_void_p(getitem_139.data_ptr()), c_void_p(buf585.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(buf587.data_ptr()), c_void_p(buf588.data_ptr()), c_void_p(buf589.data_ptr()), c_void_p(buf590.data_ptr()), c_void_p(buf591.data_ptr()))
    del div_52
    del getitem_139
    del mul_93
    del primals_258
    buf592 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1759, reinterpret_tensor(buf591, (1, 512, 1024), (0, 1024, 1), 0), out=buf592)
    del permute_1759
    buf593 = reinterpret_tensor(buf583, (1, 512, 1024), (524288, 1024, 1), 0); del buf583  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf591, (1, 512, 1024), (0, 1024, 1), 0), permute_1760, out=buf593)
    del permute_1760
    buf594 = reinterpret_tensor(buf591, (16, 512, 64), (32768, 64, 1), 0); del buf591  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1766, reinterpret_tensor(buf593, (16, 512, 64), (1, 1024, 16), 0), out=buf594)
    del permute_1766
    buf595 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf593, (16, 512, 64), (1, 1024, 16), 0), permute_1767, out=buf595)
    del permute_1767
    buf596 = buf549; del buf549  # reuse
    buf597 = buf550; del buf550  # reuse
    buf598 = reinterpret_tensor(buf595, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf595  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_113(c_void_p(buf598.data_ptr()), c_void_p(getitem_137.data_ptr()), c_void_p(alias_38.data_ptr()), c_void_p(buf596.data_ptr()), c_void_p(buf597.data_ptr()))
    del alias_38
    del getitem_137
    aten.index_put_(buf597, [None, None, None, iota], buf598, True)
    buf601 = reinterpret_tensor(buf557, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf557  # reuse
    buf602 = buf555; del buf555  # reuse
    buf604 = reinterpret_tensor(buf554, (16, 512, 1024), (524288, 1024, 1), 0); del buf554  # reuse
    cpp_fused_bmm_slice_backward_114(c_void_p(buf597.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(buf602.data_ptr()), c_void_p(buf604.data_ptr()))
    buf603 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1773, buf602, out=buf603)
    del permute_1773
    buf605 = reinterpret_tensor(buf593, (16, 512, 64), (32768, 64, 1), 0); del buf593  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf604, permute_1774, out=buf605)
    del permute_1774
    buf606 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_115(c_void_p(buf605.data_ptr()), c_void_p(buf606.data_ptr()))
    buf607 = reinterpret_tensor(buf575, (16, 64, 512), (32768, 512, 1), 0); del buf575  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1780, reinterpret_tensor(buf598, (16, 512, 512), (262144, 512, 1), 0), out=buf607)
    del permute_1780
    buf608 = reinterpret_tensor(buf566, (16, 512, 64), (32768, 64, 1), 0); del buf566  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf598, (16, 512, 512), (262144, 512, 1), 0), permute_1781, out=buf608)
    del permute_1781
    buf609 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_116(c_void_p(buf608.data_ptr()), c_void_p(buf609.data_ptr()))
    buf610 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf603, (1, 1024, 1024), (0, 1, 1024), 0), out=buf610)
    buf611 = reinterpret_tensor(buf541, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf541  # reuse
    cpp_fused_clone_117(c_void_p(buf594.data_ptr()), c_void_p(buf611.data_ptr()))
    buf612 = reinterpret_tensor(buf603, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf603  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1791, reinterpret_tensor(buf611, (1, 512, 1024), (0, 1024, 1), 0), out=buf612)
    buf613 = reinterpret_tensor(buf594, (1, 512, 1024), (524288, 1024, 1), 0); del buf594  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf611, (1, 512, 1024), (0, 1024, 1), 0), permute_1792, out=buf613)
    del permute_1792
    buf614 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1791, reinterpret_tensor(buf607, (1, 512, 1024), (0, 1, 512), 0), out=buf614)
    buf615 = reinterpret_tensor(buf611, (1, 512, 1024), (524288, 1024, 1), 0); del buf611  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf607, (1, 512, 1024), (0, 1, 512), 0), permute_1799, out=buf615)
    del permute_1799
    buf616 = reinterpret_tensor(buf607, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf607  # reuse
    cpp_fused_clone_118(c_void_p(buf605.data_ptr()), c_void_p(buf608.data_ptr()), c_void_p(buf616.data_ptr()))
    buf617 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1791, reinterpret_tensor(buf616, (1, 512, 1024), (0, 1024, 1), 0), out=buf617)
    del permute_1791
    buf618 = reinterpret_tensor(buf608, (1, 512, 1024), (524288, 1024, 1), 0); del buf608  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf616, (1, 512, 1024), (0, 1024, 1), 0), permute_1806, out=buf618)
    del permute_1806
    buf619 = reinterpret_tensor(buf616, (512, 1, 1024), (1024, 524288, 1), 0); del buf616  # reuse
    buf620 = buf587; del buf587  # reuse
    buf621 = buf586; del buf586  # reuse
    buf622 = buf619; del buf619  # reuse
    buf623 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf624 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf625 = reinterpret_tensor(buf605, (512, 1, 1024), (1024, 1024, 1), 0); del buf605  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_119(c_void_p(buf622.data_ptr()), c_void_p(buf588.data_ptr()), c_void_p(buf613.data_ptr()), c_void_p(buf615.data_ptr()), c_void_p(buf618.data_ptr()), c_void_p(primals_256.data_ptr()), c_void_p(mul_90.data_ptr()), c_void_p(div_53.data_ptr()), c_void_p(getitem_133.data_ptr()), c_void_p(buf620.data_ptr()), c_void_p(buf621.data_ptr()), c_void_p(buf623.data_ptr()), c_void_p(buf624.data_ptr()), c_void_p(buf625.data_ptr()))
    del div_53
    del getitem_133
    del mul_90
    del primals_256
    buf626 = reinterpret_tensor(buf582, (512, 4096), (4096, 1), 0); del buf582  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf625, (512, 1024), (1024, 1), 0), permute_1811, out=buf626)
    del permute_1811
    buf627 = reinterpret_tensor(buf598, (1024, 4096), (4096, 1), 0); del buf598  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf625, (1024, 512), (1, 1024), 0), view_416, out=buf627)
    del view_416
    buf628 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf629 = reinterpret_tensor(buf626, (512, 1, 4096), (4096, 4096, 1), 0); del buf626  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_120(c_void_p(buf629.data_ptr()), c_void_p(buf625.data_ptr()), c_void_p(getitem_131.data_ptr()), c_void_p(addmm_20.data_ptr()), c_void_p(buf628.data_ptr()))
    del addmm_20
    del getitem_131
    buf630 = reinterpret_tensor(buf625, (512, 1024), (1024, 1), 0); del buf625  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf629, (512, 4096), (4096, 1), 0), permute_1815, out=buf630)
    del permute_1815
    buf631 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf629, (4096, 512), (1, 4096), 0), view_414, out=buf631)
    del view_414
    buf632 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf633 = buf621; del buf621  # reuse
    buf634 = buf620; del buf620  # reuse
    buf635 = reinterpret_tensor(buf618, (512, 1, 1024), (1024, 524288, 1), 0); del buf618  # reuse
    buf636 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf637 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf638 = reinterpret_tensor(buf615, (512, 1, 1024), (1024, 1024, 1), 0); del buf615  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_121(c_void_p(buf629.data_ptr()), c_void_p(buf622.data_ptr()), c_void_p(buf630.data_ptr()), c_void_p(primals_250.data_ptr()), c_void_p(mul_85.data_ptr()), c_void_p(div_54.data_ptr()), c_void_p(getitem_127.data_ptr()), c_void_p(buf632.data_ptr()), c_void_p(buf633.data_ptr()), c_void_p(buf634.data_ptr()), c_void_p(buf635.data_ptr()), c_void_p(buf636.data_ptr()), c_void_p(buf637.data_ptr()), c_void_p(buf638.data_ptr()))
    del div_54
    del getitem_127
    del mul_85
    del primals_250
    buf639 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1820, reinterpret_tensor(buf638, (1, 512, 1024), (0, 1024, 1), 0), out=buf639)
    del permute_1820
    buf640 = reinterpret_tensor(buf630, (1, 512, 1024), (524288, 1024, 1), 0); del buf630  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf638, (1, 512, 1024), (0, 1024, 1), 0), permute_1821, out=buf640)
    del permute_1821
    buf641 = reinterpret_tensor(buf638, (16, 512, 64), (32768, 64, 1), 0); del buf638  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1827, reinterpret_tensor(buf640, (16, 512, 64), (1, 1024, 16), 0), out=buf641)
    del permute_1827
    buf642 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf640, (16, 512, 64), (1, 1024, 16), 0), permute_1828, out=buf642)
    del permute_1828
    buf643 = buf596; del buf596  # reuse
    buf644 = buf597; del buf597  # reuse
    buf645 = reinterpret_tensor(buf642, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf642  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_122(c_void_p(buf645.data_ptr()), c_void_p(getitem_125.data_ptr()), c_void_p(alias_39.data_ptr()), c_void_p(buf643.data_ptr()), c_void_p(buf644.data_ptr()))
    del alias_39
    del getitem_125
    aten.index_put_(buf644, [None, None, None, iota], buf645, True)
    buf648 = reinterpret_tensor(buf604, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf604  # reuse
    buf649 = buf602; del buf602  # reuse
    buf651 = reinterpret_tensor(buf601, (16, 512, 1024), (524288, 1024, 1), 0); del buf601  # reuse
    cpp_fused_bmm_slice_backward_123(c_void_p(buf644.data_ptr()), c_void_p(buf648.data_ptr()), c_void_p(buf649.data_ptr()), c_void_p(buf651.data_ptr()))
    buf650 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1834, buf649, out=buf650)
    del permute_1834
    buf652 = reinterpret_tensor(buf640, (16, 512, 64), (32768, 64, 1), 0); del buf640  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf651, permute_1835, out=buf652)
    del permute_1835
    buf653 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_124(c_void_p(buf652.data_ptr()), c_void_p(buf653.data_ptr()))
    buf654 = reinterpret_tensor(buf622, (16, 64, 512), (32768, 512, 1), 0); del buf622  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1841, reinterpret_tensor(buf645, (16, 512, 512), (262144, 512, 1), 0), out=buf654)
    del permute_1841
    buf655 = reinterpret_tensor(buf613, (16, 512, 64), (32768, 64, 1), 0); del buf613  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf645, (16, 512, 512), (262144, 512, 1), 0), permute_1842, out=buf655)
    del permute_1842
    buf656 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_125(c_void_p(buf655.data_ptr()), c_void_p(buf656.data_ptr()))
    buf657 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf650, (1, 1024, 1024), (0, 1, 1024), 0), out=buf657)
    buf658 = reinterpret_tensor(buf588, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf588  # reuse
    cpp_fused_clone_126(c_void_p(buf641.data_ptr()), c_void_p(buf658.data_ptr()))
    buf659 = reinterpret_tensor(buf650, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf650  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1852, reinterpret_tensor(buf658, (1, 512, 1024), (0, 1024, 1), 0), out=buf659)
    buf660 = reinterpret_tensor(buf641, (1, 512, 1024), (524288, 1024, 1), 0); del buf641  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf658, (1, 512, 1024), (0, 1024, 1), 0), permute_1853, out=buf660)
    del permute_1853
    buf661 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1852, reinterpret_tensor(buf654, (1, 512, 1024), (0, 1, 512), 0), out=buf661)
    buf662 = reinterpret_tensor(buf658, (1, 512, 1024), (524288, 1024, 1), 0); del buf658  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf654, (1, 512, 1024), (0, 1, 512), 0), permute_1860, out=buf662)
    del permute_1860
    buf663 = reinterpret_tensor(buf654, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf654  # reuse
    cpp_fused_clone_127(c_void_p(buf652.data_ptr()), c_void_p(buf655.data_ptr()), c_void_p(buf663.data_ptr()))
    buf664 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1852, reinterpret_tensor(buf663, (1, 512, 1024), (0, 1024, 1), 0), out=buf664)
    del permute_1852
    buf665 = reinterpret_tensor(buf655, (1, 512, 1024), (524288, 1024, 1), 0); del buf655  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf663, (1, 512, 1024), (0, 1024, 1), 0), permute_1867, out=buf665)
    del permute_1867
    buf666 = reinterpret_tensor(buf663, (512, 1, 1024), (1024, 524288, 1), 0); del buf663  # reuse
    buf667 = buf634; del buf634  # reuse
    buf668 = buf633; del buf633  # reuse
    buf669 = buf666; del buf666  # reuse
    buf670 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf671 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf672 = reinterpret_tensor(buf652, (512, 1, 1024), (1024, 1024, 1), 0); del buf652  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_128(c_void_p(buf669.data_ptr()), c_void_p(buf635.data_ptr()), c_void_p(buf660.data_ptr()), c_void_p(buf662.data_ptr()), c_void_p(buf665.data_ptr()), c_void_p(primals_248.data_ptr()), c_void_p(mul_82.data_ptr()), c_void_p(div_55.data_ptr()), c_void_p(getitem_121.data_ptr()), c_void_p(buf667.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(buf670.data_ptr()), c_void_p(buf671.data_ptr()), c_void_p(buf672.data_ptr()))
    del div_55
    del getitem_121
    del mul_82
    del primals_248
    buf673 = reinterpret_tensor(buf629, (512, 4096), (4096, 1), 0); del buf629  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf672, (512, 1024), (1024, 1), 0), permute_1872, out=buf673)
    del permute_1872
    buf674 = reinterpret_tensor(buf645, (1024, 4096), (4096, 1), 0); del buf645  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf672, (1024, 512), (1, 1024), 0), view_378, out=buf674)
    del view_378
    buf675 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf676 = reinterpret_tensor(buf673, (512, 1, 4096), (4096, 4096, 1), 0); del buf673  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_129(c_void_p(buf676.data_ptr()), c_void_p(buf672.data_ptr()), c_void_p(getitem_119.data_ptr()), c_void_p(addmm_18.data_ptr()), c_void_p(buf675.data_ptr()))
    del addmm_18
    del getitem_119
    buf677 = reinterpret_tensor(buf672, (512, 1024), (1024, 1), 0); del buf672  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf676, (512, 4096), (4096, 1), 0), permute_1876, out=buf677)
    del permute_1876
    buf678 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf676, (4096, 512), (1, 4096), 0), view_376, out=buf678)
    del view_376
    buf679 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf680 = buf668; del buf668  # reuse
    buf681 = buf667; del buf667  # reuse
    buf682 = reinterpret_tensor(buf665, (512, 1, 1024), (1024, 524288, 1), 0); del buf665  # reuse
    buf683 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf684 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf685 = reinterpret_tensor(buf662, (512, 1, 1024), (1024, 1024, 1), 0); del buf662  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_130(c_void_p(buf676.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(buf677.data_ptr()), c_void_p(primals_242.data_ptr()), c_void_p(mul_77.data_ptr()), c_void_p(div_56.data_ptr()), c_void_p(getitem_115.data_ptr()), c_void_p(buf679.data_ptr()), c_void_p(buf680.data_ptr()), c_void_p(buf681.data_ptr()), c_void_p(buf682.data_ptr()), c_void_p(buf683.data_ptr()), c_void_p(buf684.data_ptr()), c_void_p(buf685.data_ptr()))
    del div_56
    del getitem_115
    del mul_77
    del primals_242
    buf686 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1881, reinterpret_tensor(buf685, (1, 512, 1024), (0, 1024, 1), 0), out=buf686)
    del permute_1881
    buf687 = reinterpret_tensor(buf677, (1, 512, 1024), (524288, 1024, 1), 0); del buf677  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf685, (1, 512, 1024), (0, 1024, 1), 0), permute_1882, out=buf687)
    del permute_1882
    buf688 = reinterpret_tensor(buf685, (16, 512, 64), (32768, 64, 1), 0); del buf685  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1888, reinterpret_tensor(buf687, (16, 512, 64), (1, 1024, 16), 0), out=buf688)
    del permute_1888
    buf689 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf687, (16, 512, 64), (1, 1024, 16), 0), permute_1889, out=buf689)
    del permute_1889
    buf690 = buf643; del buf643  # reuse
    buf691 = buf644; del buf644  # reuse
    buf692 = reinterpret_tensor(buf689, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf689  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_131(c_void_p(buf692.data_ptr()), c_void_p(getitem_113.data_ptr()), c_void_p(alias_40.data_ptr()), c_void_p(buf690.data_ptr()), c_void_p(buf691.data_ptr()))
    del alias_40
    del getitem_113
    aten.index_put_(buf691, [None, None, None, iota], buf692, True)
    buf695 = reinterpret_tensor(buf651, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf651  # reuse
    buf696 = buf649; del buf649  # reuse
    buf698 = reinterpret_tensor(buf648, (16, 512, 1024), (524288, 1024, 1), 0); del buf648  # reuse
    cpp_fused_bmm_slice_backward_132(c_void_p(buf691.data_ptr()), c_void_p(buf695.data_ptr()), c_void_p(buf696.data_ptr()), c_void_p(buf698.data_ptr()))
    buf697 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1895, buf696, out=buf697)
    del permute_1895
    buf699 = reinterpret_tensor(buf687, (16, 512, 64), (32768, 64, 1), 0); del buf687  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf698, permute_1896, out=buf699)
    del permute_1896
    buf700 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_133(c_void_p(buf699.data_ptr()), c_void_p(buf700.data_ptr()))
    buf701 = reinterpret_tensor(buf669, (16, 64, 512), (32768, 512, 1), 0); del buf669  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1902, reinterpret_tensor(buf692, (16, 512, 512), (262144, 512, 1), 0), out=buf701)
    del permute_1902
    buf702 = reinterpret_tensor(buf660, (16, 512, 64), (32768, 64, 1), 0); del buf660  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf692, (16, 512, 512), (262144, 512, 1), 0), permute_1903, out=buf702)
    del permute_1903
    buf703 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_134(c_void_p(buf702.data_ptr()), c_void_p(buf703.data_ptr()))
    buf704 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf697, (1, 1024, 1024), (0, 1, 1024), 0), out=buf704)
    buf705 = reinterpret_tensor(buf635, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf635  # reuse
    cpp_fused_clone_135(c_void_p(buf688.data_ptr()), c_void_p(buf705.data_ptr()))
    buf706 = reinterpret_tensor(buf697, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf697  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1913, reinterpret_tensor(buf705, (1, 512, 1024), (0, 1024, 1), 0), out=buf706)
    buf707 = reinterpret_tensor(buf688, (1, 512, 1024), (524288, 1024, 1), 0); del buf688  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf705, (1, 512, 1024), (0, 1024, 1), 0), permute_1914, out=buf707)
    del permute_1914
    buf708 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1913, reinterpret_tensor(buf701, (1, 512, 1024), (0, 1, 512), 0), out=buf708)
    buf709 = reinterpret_tensor(buf705, (1, 512, 1024), (524288, 1024, 1), 0); del buf705  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf701, (1, 512, 1024), (0, 1, 512), 0), permute_1921, out=buf709)
    del permute_1921
    buf710 = reinterpret_tensor(buf701, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf701  # reuse
    cpp_fused_clone_136(c_void_p(buf699.data_ptr()), c_void_p(buf702.data_ptr()), c_void_p(buf710.data_ptr()))
    buf711 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1913, reinterpret_tensor(buf710, (1, 512, 1024), (0, 1024, 1), 0), out=buf711)
    del permute_1913
    buf712 = reinterpret_tensor(buf702, (1, 512, 1024), (524288, 1024, 1), 0); del buf702  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf710, (1, 512, 1024), (0, 1024, 1), 0), permute_1928, out=buf712)
    del permute_1928
    buf713 = reinterpret_tensor(buf710, (512, 1, 1024), (1024, 524288, 1), 0); del buf710  # reuse
    buf714 = buf681; del buf681  # reuse
    buf715 = buf680; del buf680  # reuse
    buf716 = buf713; del buf713  # reuse
    buf717 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf718 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf719 = reinterpret_tensor(buf699, (512, 1, 1024), (1024, 1024, 1), 0); del buf699  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_137(c_void_p(buf716.data_ptr()), c_void_p(buf682.data_ptr()), c_void_p(buf707.data_ptr()), c_void_p(buf709.data_ptr()), c_void_p(buf712.data_ptr()), c_void_p(primals_240.data_ptr()), c_void_p(mul_74.data_ptr()), c_void_p(div_57.data_ptr()), c_void_p(getitem_109.data_ptr()), c_void_p(buf714.data_ptr()), c_void_p(buf715.data_ptr()), c_void_p(buf717.data_ptr()), c_void_p(buf718.data_ptr()), c_void_p(buf719.data_ptr()))
    del div_57
    del getitem_109
    del mul_74
    del primals_240
    buf720 = reinterpret_tensor(buf676, (512, 4096), (4096, 1), 0); del buf676  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf719, (512, 1024), (1024, 1), 0), permute_1933, out=buf720)
    del permute_1933
    buf721 = reinterpret_tensor(buf692, (1024, 4096), (4096, 1), 0); del buf692  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf719, (1024, 512), (1, 1024), 0), view_340, out=buf721)
    del view_340
    buf722 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf723 = reinterpret_tensor(buf720, (512, 1, 4096), (4096, 4096, 1), 0); del buf720  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_138(c_void_p(buf723.data_ptr()), c_void_p(buf719.data_ptr()), c_void_p(getitem_107.data_ptr()), c_void_p(addmm_16.data_ptr()), c_void_p(buf722.data_ptr()))
    del addmm_16
    del getitem_107
    buf724 = reinterpret_tensor(buf719, (512, 1024), (1024, 1), 0); del buf719  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf723, (512, 4096), (4096, 1), 0), permute_1937, out=buf724)
    del permute_1937
    buf725 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf723, (4096, 512), (1, 4096), 0), view_338, out=buf725)
    del view_338
    buf726 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf727 = buf715; del buf715  # reuse
    buf728 = buf714; del buf714  # reuse
    buf729 = reinterpret_tensor(buf712, (512, 1, 1024), (1024, 524288, 1), 0); del buf712  # reuse
    buf730 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf731 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf732 = reinterpret_tensor(buf709, (512, 1, 1024), (1024, 1024, 1), 0); del buf709  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_139(c_void_p(buf723.data_ptr()), c_void_p(buf716.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(primals_234.data_ptr()), c_void_p(mul_69.data_ptr()), c_void_p(div_58.data_ptr()), c_void_p(getitem_103.data_ptr()), c_void_p(buf726.data_ptr()), c_void_p(buf727.data_ptr()), c_void_p(buf728.data_ptr()), c_void_p(buf729.data_ptr()), c_void_p(buf730.data_ptr()), c_void_p(buf731.data_ptr()), c_void_p(buf732.data_ptr()))
    del div_58
    del getitem_103
    del mul_69
    del primals_234
    buf733 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1942, reinterpret_tensor(buf732, (1, 512, 1024), (0, 1024, 1), 0), out=buf733)
    del permute_1942
    buf734 = reinterpret_tensor(buf724, (1, 512, 1024), (524288, 1024, 1), 0); del buf724  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf732, (1, 512, 1024), (0, 1024, 1), 0), permute_1943, out=buf734)
    del permute_1943
    buf735 = reinterpret_tensor(buf732, (16, 512, 64), (32768, 64, 1), 0); del buf732  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1949, reinterpret_tensor(buf734, (16, 512, 64), (1, 1024, 16), 0), out=buf735)
    del permute_1949
    buf736 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf734, (16, 512, 64), (1, 1024, 16), 0), permute_1950, out=buf736)
    del permute_1950
    buf737 = buf690; del buf690  # reuse
    buf738 = buf691; del buf691  # reuse
    buf739 = reinterpret_tensor(buf736, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf736  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_140(c_void_p(buf739.data_ptr()), c_void_p(getitem_101.data_ptr()), c_void_p(alias_41.data_ptr()), c_void_p(buf737.data_ptr()), c_void_p(buf738.data_ptr()))
    del alias_41
    del getitem_101
    aten.index_put_(buf738, [None, None, None, iota], buf739, True)
    buf742 = reinterpret_tensor(buf698, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf698  # reuse
    buf743 = buf696; del buf696  # reuse
    buf745 = reinterpret_tensor(buf695, (16, 512, 1024), (524288, 1024, 1), 0); del buf695  # reuse
    cpp_fused_bmm_slice_backward_141(c_void_p(buf738.data_ptr()), c_void_p(buf742.data_ptr()), c_void_p(buf743.data_ptr()), c_void_p(buf745.data_ptr()))
    buf744 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1956, buf743, out=buf744)
    del permute_1956
    buf746 = reinterpret_tensor(buf734, (16, 512, 64), (32768, 64, 1), 0); del buf734  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf745, permute_1957, out=buf746)
    del permute_1957
    buf747 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_142(c_void_p(buf746.data_ptr()), c_void_p(buf747.data_ptr()))
    buf748 = reinterpret_tensor(buf716, (16, 64, 512), (32768, 512, 1), 0); del buf716  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1963, reinterpret_tensor(buf739, (16, 512, 512), (262144, 512, 1), 0), out=buf748)
    del permute_1963
    buf749 = reinterpret_tensor(buf707, (16, 512, 64), (32768, 64, 1), 0); del buf707  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf739, (16, 512, 512), (262144, 512, 1), 0), permute_1964, out=buf749)
    del permute_1964
    buf750 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_143(c_void_p(buf749.data_ptr()), c_void_p(buf750.data_ptr()))
    buf751 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf744, (1, 1024, 1024), (0, 1, 1024), 0), out=buf751)
    buf752 = reinterpret_tensor(buf682, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf682  # reuse
    cpp_fused_clone_144(c_void_p(buf735.data_ptr()), c_void_p(buf752.data_ptr()))
    buf753 = reinterpret_tensor(buf744, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf744  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1974, reinterpret_tensor(buf752, (1, 512, 1024), (0, 1024, 1), 0), out=buf753)
    buf754 = reinterpret_tensor(buf735, (1, 512, 1024), (524288, 1024, 1), 0); del buf735  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf752, (1, 512, 1024), (0, 1024, 1), 0), permute_1975, out=buf754)
    del permute_1975
    buf755 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1974, reinterpret_tensor(buf748, (1, 512, 1024), (0, 1, 512), 0), out=buf755)
    buf756 = reinterpret_tensor(buf752, (1, 512, 1024), (524288, 1024, 1), 0); del buf752  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf748, (1, 512, 1024), (0, 1, 512), 0), permute_1982, out=buf756)
    del permute_1982
    buf757 = reinterpret_tensor(buf748, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf748  # reuse
    cpp_fused_clone_145(c_void_p(buf746.data_ptr()), c_void_p(buf749.data_ptr()), c_void_p(buf757.data_ptr()))
    buf758 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1974, reinterpret_tensor(buf757, (1, 512, 1024), (0, 1024, 1), 0), out=buf758)
    del permute_1974
    buf759 = reinterpret_tensor(buf749, (1, 512, 1024), (524288, 1024, 1), 0); del buf749  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf757, (1, 512, 1024), (0, 1024, 1), 0), permute_1989, out=buf759)
    del permute_1989
    buf760 = reinterpret_tensor(buf757, (512, 1, 1024), (1024, 524288, 1), 0); del buf757  # reuse
    buf761 = buf728; del buf728  # reuse
    buf762 = buf727; del buf727  # reuse
    buf763 = buf760; del buf760  # reuse
    buf764 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf765 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf766 = reinterpret_tensor(buf746, (512, 1, 1024), (1024, 1024, 1), 0); del buf746  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_146(c_void_p(buf763.data_ptr()), c_void_p(buf729.data_ptr()), c_void_p(buf754.data_ptr()), c_void_p(buf756.data_ptr()), c_void_p(buf759.data_ptr()), c_void_p(primals_232.data_ptr()), c_void_p(mul_66.data_ptr()), c_void_p(div_59.data_ptr()), c_void_p(getitem_97.data_ptr()), c_void_p(buf761.data_ptr()), c_void_p(buf762.data_ptr()), c_void_p(buf764.data_ptr()), c_void_p(buf765.data_ptr()), c_void_p(buf766.data_ptr()))
    del div_59
    del getitem_97
    del mul_66
    del primals_232
    buf767 = reinterpret_tensor(buf723, (512, 4096), (4096, 1), 0); del buf723  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (512, 1024), (1024, 1), 0), permute_1994, out=buf767)
    del permute_1994
    buf768 = reinterpret_tensor(buf739, (1024, 4096), (4096, 1), 0); del buf739  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (1024, 512), (1, 1024), 0), view_302, out=buf768)
    del view_302
    buf769 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf770 = reinterpret_tensor(buf767, (512, 1, 4096), (4096, 4096, 1), 0); del buf767  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_147(c_void_p(buf770.data_ptr()), c_void_p(buf766.data_ptr()), c_void_p(getitem_95.data_ptr()), c_void_p(addmm_14.data_ptr()), c_void_p(buf769.data_ptr()))
    del addmm_14
    del getitem_95
    buf771 = reinterpret_tensor(buf766, (512, 1024), (1024, 1), 0); del buf766  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf770, (512, 4096), (4096, 1), 0), permute_1998, out=buf771)
    del permute_1998
    buf772 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf770, (4096, 512), (1, 4096), 0), view_300, out=buf772)
    del view_300
    buf773 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf774 = buf762; del buf762  # reuse
    buf775 = buf761; del buf761  # reuse
    buf776 = reinterpret_tensor(buf759, (512, 1, 1024), (1024, 524288, 1), 0); del buf759  # reuse
    buf777 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf778 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf779 = reinterpret_tensor(buf756, (512, 1, 1024), (1024, 1024, 1), 0); del buf756  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_148(c_void_p(buf770.data_ptr()), c_void_p(buf763.data_ptr()), c_void_p(buf771.data_ptr()), c_void_p(primals_226.data_ptr()), c_void_p(mul_61.data_ptr()), c_void_p(div_60.data_ptr()), c_void_p(getitem_91.data_ptr()), c_void_p(buf773.data_ptr()), c_void_p(buf774.data_ptr()), c_void_p(buf775.data_ptr()), c_void_p(buf776.data_ptr()), c_void_p(buf777.data_ptr()), c_void_p(buf778.data_ptr()), c_void_p(buf779.data_ptr()))
    del div_60
    del getitem_91
    del mul_61
    del primals_226
    buf780 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2003, reinterpret_tensor(buf779, (1, 512, 1024), (0, 1024, 1), 0), out=buf780)
    del permute_2003
    buf781 = reinterpret_tensor(buf771, (1, 512, 1024), (524288, 1024, 1), 0); del buf771  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf779, (1, 512, 1024), (0, 1024, 1), 0), permute_2004, out=buf781)
    del permute_2004
    buf782 = reinterpret_tensor(buf779, (16, 512, 64), (32768, 64, 1), 0); del buf779  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2010, reinterpret_tensor(buf781, (16, 512, 64), (1, 1024, 16), 0), out=buf782)
    del permute_2010
    buf783 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf781, (16, 512, 64), (1, 1024, 16), 0), permute_2011, out=buf783)
    del permute_2011
    buf784 = buf737; del buf737  # reuse
    buf785 = buf738; del buf738  # reuse
    buf786 = reinterpret_tensor(buf783, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf783  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_149(c_void_p(buf786.data_ptr()), c_void_p(getitem_89.data_ptr()), c_void_p(alias_42.data_ptr()), c_void_p(buf784.data_ptr()), c_void_p(buf785.data_ptr()))
    del alias_42
    del getitem_89
    aten.index_put_(buf785, [None, None, None, iota], buf786, True)
    buf789 = reinterpret_tensor(buf745, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf745  # reuse
    buf790 = buf743; del buf743  # reuse
    buf792 = reinterpret_tensor(buf742, (16, 512, 1024), (524288, 1024, 1), 0); del buf742  # reuse
    cpp_fused_bmm_slice_backward_150(c_void_p(buf785.data_ptr()), c_void_p(buf789.data_ptr()), c_void_p(buf790.data_ptr()), c_void_p(buf792.data_ptr()))
    buf791 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2017, buf790, out=buf791)
    del permute_2017
    buf793 = reinterpret_tensor(buf781, (16, 512, 64), (32768, 64, 1), 0); del buf781  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf792, permute_2018, out=buf793)
    del permute_2018
    buf794 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_151(c_void_p(buf793.data_ptr()), c_void_p(buf794.data_ptr()))
    buf795 = reinterpret_tensor(buf763, (16, 64, 512), (32768, 512, 1), 0); del buf763  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2024, reinterpret_tensor(buf786, (16, 512, 512), (262144, 512, 1), 0), out=buf795)
    del permute_2024
    buf796 = reinterpret_tensor(buf754, (16, 512, 64), (32768, 64, 1), 0); del buf754  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf786, (16, 512, 512), (262144, 512, 1), 0), permute_2025, out=buf796)
    del permute_2025
    buf797 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_152(c_void_p(buf796.data_ptr()), c_void_p(buf797.data_ptr()))
    buf798 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf791, (1, 1024, 1024), (0, 1, 1024), 0), out=buf798)
    buf799 = reinterpret_tensor(buf729, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf729  # reuse
    cpp_fused_clone_153(c_void_p(buf782.data_ptr()), c_void_p(buf799.data_ptr()))
    buf800 = reinterpret_tensor(buf791, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf791  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2035, reinterpret_tensor(buf799, (1, 512, 1024), (0, 1024, 1), 0), out=buf800)
    buf801 = reinterpret_tensor(buf782, (1, 512, 1024), (524288, 1024, 1), 0); del buf782  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf799, (1, 512, 1024), (0, 1024, 1), 0), permute_2036, out=buf801)
    del permute_2036
    buf802 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2035, reinterpret_tensor(buf795, (1, 512, 1024), (0, 1, 512), 0), out=buf802)
    buf803 = reinterpret_tensor(buf799, (1, 512, 1024), (524288, 1024, 1), 0); del buf799  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf795, (1, 512, 1024), (0, 1, 512), 0), permute_2043, out=buf803)
    del permute_2043
    buf804 = reinterpret_tensor(buf795, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf795  # reuse
    cpp_fused_clone_154(c_void_p(buf793.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(buf804.data_ptr()))
    buf805 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2035, reinterpret_tensor(buf804, (1, 512, 1024), (0, 1024, 1), 0), out=buf805)
    del permute_2035
    buf806 = reinterpret_tensor(buf796, (1, 512, 1024), (524288, 1024, 1), 0); del buf796  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf804, (1, 512, 1024), (0, 1024, 1), 0), permute_2050, out=buf806)
    del permute_2050
    buf807 = reinterpret_tensor(buf804, (512, 1, 1024), (1024, 524288, 1), 0); del buf804  # reuse
    buf808 = buf775; del buf775  # reuse
    buf809 = buf774; del buf774  # reuse
    buf810 = buf807; del buf807  # reuse
    buf811 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf812 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf813 = reinterpret_tensor(buf793, (512, 1, 1024), (1024, 1024, 1), 0); del buf793  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_155(c_void_p(buf810.data_ptr()), c_void_p(buf776.data_ptr()), c_void_p(buf801.data_ptr()), c_void_p(buf803.data_ptr()), c_void_p(buf806.data_ptr()), c_void_p(primals_224.data_ptr()), c_void_p(mul_58.data_ptr()), c_void_p(div_61.data_ptr()), c_void_p(getitem_85.data_ptr()), c_void_p(buf808.data_ptr()), c_void_p(buf809.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(buf812.data_ptr()), c_void_p(buf813.data_ptr()))
    del div_61
    del getitem_85
    del mul_58
    del primals_224
    buf814 = reinterpret_tensor(buf770, (512, 4096), (4096, 1), 0); del buf770  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf813, (512, 1024), (1024, 1), 0), permute_2055, out=buf814)
    del permute_2055
    buf815 = reinterpret_tensor(buf786, (1024, 4096), (4096, 1), 0); del buf786  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf813, (1024, 512), (1, 1024), 0), view_264, out=buf815)
    del view_264
    buf816 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf817 = reinterpret_tensor(buf814, (512, 1, 4096), (4096, 4096, 1), 0); del buf814  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_156(c_void_p(buf817.data_ptr()), c_void_p(buf813.data_ptr()), c_void_p(getitem_83.data_ptr()), c_void_p(addmm_12.data_ptr()), c_void_p(buf816.data_ptr()))
    del addmm_12
    del getitem_83
    buf818 = reinterpret_tensor(buf813, (512, 1024), (1024, 1), 0); del buf813  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf817, (512, 4096), (4096, 1), 0), permute_2059, out=buf818)
    del permute_2059
    buf819 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf817, (4096, 512), (1, 4096), 0), view_262, out=buf819)
    del view_262
    buf820 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf821 = buf809; del buf809  # reuse
    buf822 = buf808; del buf808  # reuse
    buf823 = reinterpret_tensor(buf806, (512, 1, 1024), (1024, 524288, 1), 0); del buf806  # reuse
    buf824 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf825 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf826 = reinterpret_tensor(buf803, (512, 1, 1024), (1024, 1024, 1), 0); del buf803  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_157(c_void_p(buf817.data_ptr()), c_void_p(buf810.data_ptr()), c_void_p(buf818.data_ptr()), c_void_p(primals_218.data_ptr()), c_void_p(mul_53.data_ptr()), c_void_p(div_62.data_ptr()), c_void_p(getitem_79.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(buf821.data_ptr()), c_void_p(buf822.data_ptr()), c_void_p(buf823.data_ptr()), c_void_p(buf824.data_ptr()), c_void_p(buf825.data_ptr()), c_void_p(buf826.data_ptr()))
    del div_62
    del getitem_79
    del mul_53
    del primals_218
    buf827 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2064, reinterpret_tensor(buf826, (1, 512, 1024), (0, 1024, 1), 0), out=buf827)
    del permute_2064
    buf828 = reinterpret_tensor(buf818, (1, 512, 1024), (524288, 1024, 1), 0); del buf818  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf826, (1, 512, 1024), (0, 1024, 1), 0), permute_2065, out=buf828)
    del permute_2065
    buf829 = reinterpret_tensor(buf826, (16, 512, 64), (32768, 64, 1), 0); del buf826  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2071, reinterpret_tensor(buf828, (16, 512, 64), (1, 1024, 16), 0), out=buf829)
    del permute_2071
    buf830 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf828, (16, 512, 64), (1, 1024, 16), 0), permute_2072, out=buf830)
    del permute_2072
    buf831 = buf784; del buf784  # reuse
    buf832 = buf785; del buf785  # reuse
    buf833 = reinterpret_tensor(buf830, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf830  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_158(c_void_p(buf833.data_ptr()), c_void_p(getitem_77.data_ptr()), c_void_p(alias_43.data_ptr()), c_void_p(buf831.data_ptr()), c_void_p(buf832.data_ptr()))
    del alias_43
    del getitem_77
    aten.index_put_(buf832, [None, None, None, iota], buf833, True)
    buf836 = reinterpret_tensor(buf792, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf792  # reuse
    buf837 = buf790; del buf790  # reuse
    buf839 = reinterpret_tensor(buf789, (16, 512, 1024), (524288, 1024, 1), 0); del buf789  # reuse
    cpp_fused_bmm_slice_backward_159(c_void_p(buf832.data_ptr()), c_void_p(buf836.data_ptr()), c_void_p(buf837.data_ptr()), c_void_p(buf839.data_ptr()))
    buf838 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2078, buf837, out=buf838)
    del permute_2078
    buf840 = reinterpret_tensor(buf828, (16, 512, 64), (32768, 64, 1), 0); del buf828  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf839, permute_2079, out=buf840)
    del permute_2079
    buf841 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_160(c_void_p(buf840.data_ptr()), c_void_p(buf841.data_ptr()))
    buf842 = reinterpret_tensor(buf810, (16, 64, 512), (32768, 512, 1), 0); del buf810  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2085, reinterpret_tensor(buf833, (16, 512, 512), (262144, 512, 1), 0), out=buf842)
    del permute_2085
    buf843 = reinterpret_tensor(buf801, (16, 512, 64), (32768, 64, 1), 0); del buf801  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf833, (16, 512, 512), (262144, 512, 1), 0), permute_2086, out=buf843)
    del permute_2086
    buf844 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_161(c_void_p(buf843.data_ptr()), c_void_p(buf844.data_ptr()))
    buf845 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf838, (1, 1024, 1024), (0, 1, 1024), 0), out=buf845)
    buf846 = reinterpret_tensor(buf776, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf776  # reuse
    cpp_fused_clone_162(c_void_p(buf829.data_ptr()), c_void_p(buf846.data_ptr()))
    buf847 = reinterpret_tensor(buf838, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf838  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2096, reinterpret_tensor(buf846, (1, 512, 1024), (0, 1024, 1), 0), out=buf847)
    buf848 = reinterpret_tensor(buf829, (1, 512, 1024), (524288, 1024, 1), 0); del buf829  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf846, (1, 512, 1024), (0, 1024, 1), 0), permute_2097, out=buf848)
    del permute_2097
    buf849 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2096, reinterpret_tensor(buf842, (1, 512, 1024), (0, 1, 512), 0), out=buf849)
    buf850 = reinterpret_tensor(buf846, (1, 512, 1024), (524288, 1024, 1), 0); del buf846  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf842, (1, 512, 1024), (0, 1, 512), 0), permute_2104, out=buf850)
    del permute_2104
    buf851 = reinterpret_tensor(buf842, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf842  # reuse
    cpp_fused_clone_163(c_void_p(buf840.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(buf851.data_ptr()))
    buf852 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2096, reinterpret_tensor(buf851, (1, 512, 1024), (0, 1024, 1), 0), out=buf852)
    del permute_2096
    buf853 = reinterpret_tensor(buf843, (1, 512, 1024), (524288, 1024, 1), 0); del buf843  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf851, (1, 512, 1024), (0, 1024, 1), 0), permute_2111, out=buf853)
    del permute_2111
    buf854 = reinterpret_tensor(buf851, (512, 1, 1024), (1024, 524288, 1), 0); del buf851  # reuse
    buf855 = buf822; del buf822  # reuse
    buf856 = buf821; del buf821  # reuse
    buf857 = buf854; del buf854  # reuse
    buf858 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf859 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf860 = reinterpret_tensor(buf840, (512, 1, 1024), (1024, 1024, 1), 0); del buf840  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_164(c_void_p(buf857.data_ptr()), c_void_p(buf823.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(buf850.data_ptr()), c_void_p(buf853.data_ptr()), c_void_p(primals_216.data_ptr()), c_void_p(mul_50.data_ptr()), c_void_p(div_63.data_ptr()), c_void_p(getitem_73.data_ptr()), c_void_p(buf855.data_ptr()), c_void_p(buf856.data_ptr()), c_void_p(buf858.data_ptr()), c_void_p(buf859.data_ptr()), c_void_p(buf860.data_ptr()))
    del div_63
    del getitem_73
    del mul_50
    del primals_216
    buf861 = reinterpret_tensor(buf817, (512, 4096), (4096, 1), 0); del buf817  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf860, (512, 1024), (1024, 1), 0), permute_2116, out=buf861)
    del permute_2116
    buf862 = reinterpret_tensor(buf833, (1024, 4096), (4096, 1), 0); del buf833  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf860, (1024, 512), (1, 1024), 0), view_226, out=buf862)
    del view_226
    buf863 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf864 = reinterpret_tensor(buf861, (512, 1, 4096), (4096, 4096, 1), 0); del buf861  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_165(c_void_p(buf864.data_ptr()), c_void_p(buf860.data_ptr()), c_void_p(getitem_71.data_ptr()), c_void_p(addmm_10.data_ptr()), c_void_p(buf863.data_ptr()))
    del addmm_10
    del getitem_71
    buf865 = reinterpret_tensor(buf860, (512, 1024), (1024, 1), 0); del buf860  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf864, (512, 4096), (4096, 1), 0), permute_2120, out=buf865)
    del permute_2120
    buf866 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf864, (4096, 512), (1, 4096), 0), view_224, out=buf866)
    del view_224
    buf867 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf868 = buf856; del buf856  # reuse
    buf869 = buf855; del buf855  # reuse
    buf870 = reinterpret_tensor(buf853, (512, 1, 1024), (1024, 524288, 1), 0); del buf853  # reuse
    buf871 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf872 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf873 = reinterpret_tensor(buf850, (512, 1, 1024), (1024, 1024, 1), 0); del buf850  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_166(c_void_p(buf864.data_ptr()), c_void_p(buf857.data_ptr()), c_void_p(buf865.data_ptr()), c_void_p(primals_210.data_ptr()), c_void_p(mul_45.data_ptr()), c_void_p(div_64.data_ptr()), c_void_p(getitem_67.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(buf868.data_ptr()), c_void_p(buf869.data_ptr()), c_void_p(buf870.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(buf872.data_ptr()), c_void_p(buf873.data_ptr()))
    del div_64
    del getitem_67
    del mul_45
    del primals_210
    buf874 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2125, reinterpret_tensor(buf873, (1, 512, 1024), (0, 1024, 1), 0), out=buf874)
    del permute_2125
    buf875 = reinterpret_tensor(buf865, (1, 512, 1024), (524288, 1024, 1), 0); del buf865  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf873, (1, 512, 1024), (0, 1024, 1), 0), permute_2126, out=buf875)
    del permute_2126
    buf876 = reinterpret_tensor(buf873, (16, 512, 64), (32768, 64, 1), 0); del buf873  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2132, reinterpret_tensor(buf875, (16, 512, 64), (1, 1024, 16), 0), out=buf876)
    del permute_2132
    buf877 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf875, (16, 512, 64), (1, 1024, 16), 0), permute_2133, out=buf877)
    del permute_2133
    buf878 = buf831; del buf831  # reuse
    buf879 = buf832; del buf832  # reuse
    buf880 = reinterpret_tensor(buf877, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf877  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_167(c_void_p(buf880.data_ptr()), c_void_p(getitem_65.data_ptr()), c_void_p(alias_44.data_ptr()), c_void_p(buf878.data_ptr()), c_void_p(buf879.data_ptr()))
    del alias_44
    del getitem_65
    aten.index_put_(buf879, [None, None, None, iota], buf880, True)
    buf883 = reinterpret_tensor(buf839, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf839  # reuse
    buf884 = buf837; del buf837  # reuse
    buf886 = reinterpret_tensor(buf836, (16, 512, 1024), (524288, 1024, 1), 0); del buf836  # reuse
    cpp_fused_bmm_slice_backward_168(c_void_p(buf879.data_ptr()), c_void_p(buf883.data_ptr()), c_void_p(buf884.data_ptr()), c_void_p(buf886.data_ptr()))
    buf885 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2139, buf884, out=buf885)
    del permute_2139
    buf887 = reinterpret_tensor(buf875, (16, 512, 64), (32768, 64, 1), 0); del buf875  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf886, permute_2140, out=buf887)
    del permute_2140
    buf888 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_169(c_void_p(buf887.data_ptr()), c_void_p(buf888.data_ptr()))
    buf889 = reinterpret_tensor(buf857, (16, 64, 512), (32768, 512, 1), 0); del buf857  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2146, reinterpret_tensor(buf880, (16, 512, 512), (262144, 512, 1), 0), out=buf889)
    del permute_2146
    buf890 = reinterpret_tensor(buf848, (16, 512, 64), (32768, 64, 1), 0); del buf848  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf880, (16, 512, 512), (262144, 512, 1), 0), permute_2147, out=buf890)
    del permute_2147
    buf891 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_170(c_void_p(buf890.data_ptr()), c_void_p(buf891.data_ptr()))
    buf892 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf885, (1, 1024, 1024), (0, 1, 1024), 0), out=buf892)
    buf893 = reinterpret_tensor(buf823, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf823  # reuse
    cpp_fused_clone_171(c_void_p(buf876.data_ptr()), c_void_p(buf893.data_ptr()))
    buf894 = reinterpret_tensor(buf885, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf885  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2157, reinterpret_tensor(buf893, (1, 512, 1024), (0, 1024, 1), 0), out=buf894)
    buf895 = reinterpret_tensor(buf876, (1, 512, 1024), (524288, 1024, 1), 0); del buf876  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf893, (1, 512, 1024), (0, 1024, 1), 0), permute_2158, out=buf895)
    del permute_2158
    buf896 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2157, reinterpret_tensor(buf889, (1, 512, 1024), (0, 1, 512), 0), out=buf896)
    buf897 = reinterpret_tensor(buf893, (1, 512, 1024), (524288, 1024, 1), 0); del buf893  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf889, (1, 512, 1024), (0, 1, 512), 0), permute_2165, out=buf897)
    del permute_2165
    buf898 = reinterpret_tensor(buf889, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf889  # reuse
    cpp_fused_clone_172(c_void_p(buf887.data_ptr()), c_void_p(buf890.data_ptr()), c_void_p(buf898.data_ptr()))
    buf899 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2157, reinterpret_tensor(buf898, (1, 512, 1024), (0, 1024, 1), 0), out=buf899)
    del permute_2157
    buf900 = reinterpret_tensor(buf890, (1, 512, 1024), (524288, 1024, 1), 0); del buf890  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf898, (1, 512, 1024), (0, 1024, 1), 0), permute_2172, out=buf900)
    del permute_2172
    buf901 = reinterpret_tensor(buf898, (512, 1, 1024), (1024, 524288, 1), 0); del buf898  # reuse
    buf902 = buf869; del buf869  # reuse
    buf903 = buf868; del buf868  # reuse
    buf904 = buf901; del buf901  # reuse
    buf905 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf906 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf907 = reinterpret_tensor(buf887, (512, 1, 1024), (1024, 1024, 1), 0); del buf887  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_173(c_void_p(buf904.data_ptr()), c_void_p(buf870.data_ptr()), c_void_p(buf895.data_ptr()), c_void_p(buf897.data_ptr()), c_void_p(buf900.data_ptr()), c_void_p(primals_208.data_ptr()), c_void_p(mul_42.data_ptr()), c_void_p(div_65.data_ptr()), c_void_p(getitem_61.data_ptr()), c_void_p(buf902.data_ptr()), c_void_p(buf903.data_ptr()), c_void_p(buf905.data_ptr()), c_void_p(buf906.data_ptr()), c_void_p(buf907.data_ptr()))
    del div_65
    del getitem_61
    del mul_42
    del primals_208
    buf908 = reinterpret_tensor(buf864, (512, 4096), (4096, 1), 0); del buf864  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf907, (512, 1024), (1024, 1), 0), permute_2177, out=buf908)
    del permute_2177
    buf909 = reinterpret_tensor(buf880, (1024, 4096), (4096, 1), 0); del buf880  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf907, (1024, 512), (1, 1024), 0), view_188, out=buf909)
    del view_188
    buf910 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf911 = reinterpret_tensor(buf908, (512, 1, 4096), (4096, 4096, 1), 0); del buf908  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_174(c_void_p(buf911.data_ptr()), c_void_p(buf907.data_ptr()), c_void_p(getitem_59.data_ptr()), c_void_p(addmm_8.data_ptr()), c_void_p(buf910.data_ptr()))
    del addmm_8
    del getitem_59
    buf912 = reinterpret_tensor(buf907, (512, 1024), (1024, 1), 0); del buf907  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf911, (512, 4096), (4096, 1), 0), permute_2181, out=buf912)
    del permute_2181
    buf913 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf911, (4096, 512), (1, 4096), 0), view_186, out=buf913)
    del view_186
    buf914 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf915 = buf903; del buf903  # reuse
    buf916 = buf902; del buf902  # reuse
    buf917 = reinterpret_tensor(buf900, (512, 1, 1024), (1024, 524288, 1), 0); del buf900  # reuse
    buf918 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf919 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf920 = reinterpret_tensor(buf897, (512, 1, 1024), (1024, 1024, 1), 0); del buf897  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_175(c_void_p(buf911.data_ptr()), c_void_p(buf904.data_ptr()), c_void_p(buf912.data_ptr()), c_void_p(primals_202.data_ptr()), c_void_p(mul_37.data_ptr()), c_void_p(div_66.data_ptr()), c_void_p(getitem_55.data_ptr()), c_void_p(buf914.data_ptr()), c_void_p(buf915.data_ptr()), c_void_p(buf916.data_ptr()), c_void_p(buf917.data_ptr()), c_void_p(buf918.data_ptr()), c_void_p(buf919.data_ptr()), c_void_p(buf920.data_ptr()))
    del div_66
    del getitem_55
    del mul_37
    del primals_202
    buf921 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2186, reinterpret_tensor(buf920, (1, 512, 1024), (0, 1024, 1), 0), out=buf921)
    del permute_2186
    buf922 = reinterpret_tensor(buf912, (1, 512, 1024), (524288, 1024, 1), 0); del buf912  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf920, (1, 512, 1024), (0, 1024, 1), 0), permute_2187, out=buf922)
    del permute_2187
    buf923 = reinterpret_tensor(buf920, (16, 512, 64), (32768, 64, 1), 0); del buf920  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2193, reinterpret_tensor(buf922, (16, 512, 64), (1, 1024, 16), 0), out=buf923)
    del permute_2193
    buf924 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf922, (16, 512, 64), (1, 1024, 16), 0), permute_2194, out=buf924)
    del permute_2194
    buf925 = buf878; del buf878  # reuse
    buf926 = buf879; del buf879  # reuse
    buf927 = reinterpret_tensor(buf924, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf924  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_176(c_void_p(buf927.data_ptr()), c_void_p(getitem_53.data_ptr()), c_void_p(alias_45.data_ptr()), c_void_p(buf925.data_ptr()), c_void_p(buf926.data_ptr()))
    del alias_45
    del getitem_53
    aten.index_put_(buf926, [None, None, None, iota], buf927, True)
    buf930 = reinterpret_tensor(buf886, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf886  # reuse
    buf931 = buf884; del buf884  # reuse
    buf933 = reinterpret_tensor(buf883, (16, 512, 1024), (524288, 1024, 1), 0); del buf883  # reuse
    cpp_fused_bmm_slice_backward_177(c_void_p(buf926.data_ptr()), c_void_p(buf930.data_ptr()), c_void_p(buf931.data_ptr()), c_void_p(buf933.data_ptr()))
    buf932 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2200, buf931, out=buf932)
    del permute_2200
    buf934 = reinterpret_tensor(buf922, (16, 512, 64), (32768, 64, 1), 0); del buf922  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf933, permute_2201, out=buf934)
    del permute_2201
    buf935 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_178(c_void_p(buf934.data_ptr()), c_void_p(buf935.data_ptr()))
    buf936 = reinterpret_tensor(buf904, (16, 64, 512), (32768, 512, 1), 0); del buf904  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2207, reinterpret_tensor(buf927, (16, 512, 512), (262144, 512, 1), 0), out=buf936)
    del permute_2207
    buf937 = reinterpret_tensor(buf895, (16, 512, 64), (32768, 64, 1), 0); del buf895  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf927, (16, 512, 512), (262144, 512, 1), 0), permute_2208, out=buf937)
    del permute_2208
    buf938 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_179(c_void_p(buf937.data_ptr()), c_void_p(buf938.data_ptr()))
    buf939 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf932, (1, 1024, 1024), (0, 1, 1024), 0), out=buf939)
    buf940 = reinterpret_tensor(buf870, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf870  # reuse
    cpp_fused_clone_180(c_void_p(buf923.data_ptr()), c_void_p(buf940.data_ptr()))
    buf941 = reinterpret_tensor(buf932, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf932  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2218, reinterpret_tensor(buf940, (1, 512, 1024), (0, 1024, 1), 0), out=buf941)
    buf942 = reinterpret_tensor(buf923, (1, 512, 1024), (524288, 1024, 1), 0); del buf923  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf940, (1, 512, 1024), (0, 1024, 1), 0), permute_2219, out=buf942)
    del permute_2219
    buf943 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2218, reinterpret_tensor(buf936, (1, 512, 1024), (0, 1, 512), 0), out=buf943)
    buf944 = reinterpret_tensor(buf940, (1, 512, 1024), (524288, 1024, 1), 0); del buf940  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf936, (1, 512, 1024), (0, 1, 512), 0), permute_2226, out=buf944)
    del permute_2226
    buf945 = reinterpret_tensor(buf936, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf936  # reuse
    cpp_fused_clone_181(c_void_p(buf934.data_ptr()), c_void_p(buf937.data_ptr()), c_void_p(buf945.data_ptr()))
    buf946 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2218, reinterpret_tensor(buf945, (1, 512, 1024), (0, 1024, 1), 0), out=buf946)
    del permute_2218
    buf947 = reinterpret_tensor(buf937, (1, 512, 1024), (524288, 1024, 1), 0); del buf937  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf945, (1, 512, 1024), (0, 1024, 1), 0), permute_2233, out=buf947)
    del permute_2233
    buf948 = reinterpret_tensor(buf945, (512, 1, 1024), (1024, 524288, 1), 0); del buf945  # reuse
    buf949 = buf916; del buf916  # reuse
    buf950 = buf915; del buf915  # reuse
    buf951 = buf948; del buf948  # reuse
    buf952 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf953 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf954 = reinterpret_tensor(buf934, (512, 1, 1024), (1024, 1024, 1), 0); del buf934  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_182(c_void_p(buf951.data_ptr()), c_void_p(buf917.data_ptr()), c_void_p(buf942.data_ptr()), c_void_p(buf944.data_ptr()), c_void_p(buf947.data_ptr()), c_void_p(primals_200.data_ptr()), c_void_p(mul_34.data_ptr()), c_void_p(div_67.data_ptr()), c_void_p(getitem_49.data_ptr()), c_void_p(buf949.data_ptr()), c_void_p(buf950.data_ptr()), c_void_p(buf952.data_ptr()), c_void_p(buf953.data_ptr()), c_void_p(buf954.data_ptr()))
    del div_67
    del getitem_49
    del mul_34
    del primals_200
    buf955 = reinterpret_tensor(buf911, (512, 4096), (4096, 1), 0); del buf911  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf954, (512, 1024), (1024, 1), 0), permute_2238, out=buf955)
    del permute_2238
    buf956 = reinterpret_tensor(buf927, (1024, 4096), (4096, 1), 0); del buf927  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf954, (1024, 512), (1, 1024), 0), view_150, out=buf956)
    del view_150
    buf957 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf958 = reinterpret_tensor(buf955, (512, 1, 4096), (4096, 4096, 1), 0); del buf955  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_183(c_void_p(buf958.data_ptr()), c_void_p(buf954.data_ptr()), c_void_p(getitem_47.data_ptr()), c_void_p(addmm_6.data_ptr()), c_void_p(buf957.data_ptr()))
    del addmm_6
    del getitem_47
    buf959 = reinterpret_tensor(buf954, (512, 1024), (1024, 1), 0); del buf954  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf958, (512, 4096), (4096, 1), 0), permute_2242, out=buf959)
    del permute_2242
    buf960 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf958, (4096, 512), (1, 4096), 0), view_148, out=buf960)
    del view_148
    buf961 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf962 = buf950; del buf950  # reuse
    buf963 = buf949; del buf949  # reuse
    buf964 = reinterpret_tensor(buf947, (512, 1, 1024), (1024, 524288, 1), 0); del buf947  # reuse
    buf965 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf966 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf967 = reinterpret_tensor(buf944, (512, 1, 1024), (1024, 1024, 1), 0); del buf944  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_184(c_void_p(buf958.data_ptr()), c_void_p(buf951.data_ptr()), c_void_p(buf959.data_ptr()), c_void_p(primals_194.data_ptr()), c_void_p(mul_29.data_ptr()), c_void_p(div_68.data_ptr()), c_void_p(getitem_43.data_ptr()), c_void_p(buf961.data_ptr()), c_void_p(buf962.data_ptr()), c_void_p(buf963.data_ptr()), c_void_p(buf964.data_ptr()), c_void_p(buf965.data_ptr()), c_void_p(buf966.data_ptr()), c_void_p(buf967.data_ptr()))
    del div_68
    del getitem_43
    del mul_29
    del primals_194
    buf968 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2247, reinterpret_tensor(buf967, (1, 512, 1024), (0, 1024, 1), 0), out=buf968)
    del permute_2247
    buf969 = reinterpret_tensor(buf959, (1, 512, 1024), (524288, 1024, 1), 0); del buf959  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf967, (1, 512, 1024), (0, 1024, 1), 0), permute_2248, out=buf969)
    del permute_2248
    buf970 = reinterpret_tensor(buf967, (16, 512, 64), (32768, 64, 1), 0); del buf967  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2254, reinterpret_tensor(buf969, (16, 512, 64), (1, 1024, 16), 0), out=buf970)
    del permute_2254
    buf971 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf969, (16, 512, 64), (1, 1024, 16), 0), permute_2255, out=buf971)
    del permute_2255
    buf972 = buf925; del buf925  # reuse
    buf973 = buf926; del buf926  # reuse
    buf974 = reinterpret_tensor(buf971, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf971  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_185(c_void_p(buf974.data_ptr()), c_void_p(getitem_41.data_ptr()), c_void_p(alias_46.data_ptr()), c_void_p(buf972.data_ptr()), c_void_p(buf973.data_ptr()))
    del alias_46
    del getitem_41
    aten.index_put_(buf973, [None, None, None, iota], buf974, True)
    buf977 = reinterpret_tensor(buf933, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf933  # reuse
    buf978 = buf931; del buf931  # reuse
    buf980 = reinterpret_tensor(buf930, (16, 512, 1024), (524288, 1024, 1), 0); del buf930  # reuse
    cpp_fused_bmm_slice_backward_186(c_void_p(buf973.data_ptr()), c_void_p(buf977.data_ptr()), c_void_p(buf978.data_ptr()), c_void_p(buf980.data_ptr()))
    buf979 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2261, buf978, out=buf979)
    del permute_2261
    buf981 = reinterpret_tensor(buf969, (16, 512, 64), (32768, 64, 1), 0); del buf969  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf980, permute_2262, out=buf981)
    del permute_2262
    buf982 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_187(c_void_p(buf981.data_ptr()), c_void_p(buf982.data_ptr()))
    buf983 = reinterpret_tensor(buf951, (16, 64, 512), (32768, 512, 1), 0); del buf951  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2268, reinterpret_tensor(buf974, (16, 512, 512), (262144, 512, 1), 0), out=buf983)
    del permute_2268
    buf984 = reinterpret_tensor(buf942, (16, 512, 64), (32768, 64, 1), 0); del buf942  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf974, (16, 512, 512), (262144, 512, 1), 0), permute_2269, out=buf984)
    del permute_2269
    buf985 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_188(c_void_p(buf984.data_ptr()), c_void_p(buf985.data_ptr()))
    buf986 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf979, (1, 1024, 1024), (0, 1, 1024), 0), out=buf986)
    buf987 = reinterpret_tensor(buf917, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf917  # reuse
    cpp_fused_clone_189(c_void_p(buf970.data_ptr()), c_void_p(buf987.data_ptr()))
    buf988 = reinterpret_tensor(buf979, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf979  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2279, reinterpret_tensor(buf987, (1, 512, 1024), (0, 1024, 1), 0), out=buf988)
    buf989 = reinterpret_tensor(buf970, (1, 512, 1024), (524288, 1024, 1), 0); del buf970  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf987, (1, 512, 1024), (0, 1024, 1), 0), permute_2280, out=buf989)
    del permute_2280
    buf990 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2279, reinterpret_tensor(buf983, (1, 512, 1024), (0, 1, 512), 0), out=buf990)
    buf991 = reinterpret_tensor(buf987, (1, 512, 1024), (524288, 1024, 1), 0); del buf987  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf983, (1, 512, 1024), (0, 1, 512), 0), permute_2287, out=buf991)
    del permute_2287
    buf992 = reinterpret_tensor(buf983, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf983  # reuse
    cpp_fused_clone_190(c_void_p(buf981.data_ptr()), c_void_p(buf984.data_ptr()), c_void_p(buf992.data_ptr()))
    buf993 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2279, reinterpret_tensor(buf992, (1, 512, 1024), (0, 1024, 1), 0), out=buf993)
    del permute_2279
    buf994 = reinterpret_tensor(buf984, (1, 512, 1024), (524288, 1024, 1), 0); del buf984  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf992, (1, 512, 1024), (0, 1024, 1), 0), permute_2294, out=buf994)
    del permute_2294
    buf995 = reinterpret_tensor(buf992, (512, 1, 1024), (1024, 524288, 1), 0); del buf992  # reuse
    buf996 = buf963; del buf963  # reuse
    buf997 = buf962; del buf962  # reuse
    buf998 = buf995; del buf995  # reuse
    buf999 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1000 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1001 = reinterpret_tensor(buf981, (512, 1, 1024), (1024, 1024, 1), 0); del buf981  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_191(c_void_p(buf998.data_ptr()), c_void_p(buf964.data_ptr()), c_void_p(buf989.data_ptr()), c_void_p(buf991.data_ptr()), c_void_p(buf994.data_ptr()), c_void_p(primals_192.data_ptr()), c_void_p(mul_26.data_ptr()), c_void_p(div_69.data_ptr()), c_void_p(getitem_37.data_ptr()), c_void_p(buf996.data_ptr()), c_void_p(buf997.data_ptr()), c_void_p(buf999.data_ptr()), c_void_p(buf1000.data_ptr()), c_void_p(buf1001.data_ptr()))
    del div_69
    del getitem_37
    del mul_26
    del primals_192
    buf1002 = reinterpret_tensor(buf958, (512, 4096), (4096, 1), 0); del buf958  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1001, (512, 1024), (1024, 1), 0), permute_2299, out=buf1002)
    del permute_2299
    buf1003 = reinterpret_tensor(buf974, (1024, 4096), (4096, 1), 0); del buf974  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1001, (1024, 512), (1, 1024), 0), view_112, out=buf1003)
    del view_112
    buf1004 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf1005 = reinterpret_tensor(buf1002, (512, 1, 4096), (4096, 4096, 1), 0); del buf1002  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_192(c_void_p(buf1005.data_ptr()), c_void_p(buf1001.data_ptr()), c_void_p(getitem_35.data_ptr()), c_void_p(addmm_4.data_ptr()), c_void_p(buf1004.data_ptr()))
    del addmm_4
    del getitem_35
    buf1006 = reinterpret_tensor(buf1001, (512, 1024), (1024, 1), 0); del buf1001  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1005, (512, 4096), (4096, 1), 0), permute_2303, out=buf1006)
    del permute_2303
    buf1007 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1005, (4096, 512), (1, 4096), 0), view_110, out=buf1007)
    del view_110
    buf1008 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf1009 = buf997; del buf997  # reuse
    buf1010 = buf996; del buf996  # reuse
    buf1011 = reinterpret_tensor(buf994, (512, 1, 1024), (1024, 524288, 1), 0); del buf994  # reuse
    buf1012 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1013 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1014 = reinterpret_tensor(buf991, (512, 1, 1024), (1024, 1024, 1), 0); del buf991  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_193(c_void_p(buf1005.data_ptr()), c_void_p(buf998.data_ptr()), c_void_p(buf1006.data_ptr()), c_void_p(primals_186.data_ptr()), c_void_p(mul_21.data_ptr()), c_void_p(div_70.data_ptr()), c_void_p(getitem_31.data_ptr()), c_void_p(buf1008.data_ptr()), c_void_p(buf1009.data_ptr()), c_void_p(buf1010.data_ptr()), c_void_p(buf1011.data_ptr()), c_void_p(buf1012.data_ptr()), c_void_p(buf1013.data_ptr()), c_void_p(buf1014.data_ptr()))
    del div_70
    del getitem_31
    del mul_21
    del primals_186
    buf1015 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2308, reinterpret_tensor(buf1014, (1, 512, 1024), (0, 1024, 1), 0), out=buf1015)
    del permute_2308
    buf1016 = reinterpret_tensor(buf998, (1, 512, 1024), (524288, 1024, 1), 0); del buf998  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1014, (1, 512, 1024), (0, 1024, 1), 0), permute_2309, out=buf1016)
    del permute_2309
    buf1017 = reinterpret_tensor(buf1014, (16, 512, 64), (32768, 64, 1), 0); del buf1014  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2315, reinterpret_tensor(buf1016, (16, 512, 64), (1, 1024, 16), 0), out=buf1017)
    del permute_2315
    buf1018 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1016, (16, 512, 64), (1, 1024, 16), 0), permute_2316, out=buf1018)
    del permute_2316
    buf1019 = buf972; del buf972  # reuse
    buf1020 = buf973; del buf973  # reuse
    buf1021 = reinterpret_tensor(buf1018, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf1018  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_194(c_void_p(buf1021.data_ptr()), c_void_p(getitem_29.data_ptr()), c_void_p(alias_47.data_ptr()), c_void_p(buf1019.data_ptr()), c_void_p(buf1020.data_ptr()))
    del alias_47
    del getitem_29
    aten.index_put_(buf1020, [None, None, None, iota], buf1021, True)
    buf1024 = reinterpret_tensor(buf980, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf980  # reuse
    buf1025 = buf978; del buf978  # reuse
    buf1027 = reinterpret_tensor(buf977, (16, 512, 1024), (524288, 1024, 1), 0); del buf977  # reuse
    cpp_fused_bmm_slice_backward_195(c_void_p(buf1020.data_ptr()), c_void_p(buf1024.data_ptr()), c_void_p(buf1025.data_ptr()), c_void_p(buf1027.data_ptr()))
    buf1026 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2322, buf1025, out=buf1026)
    del permute_2322
    buf1028 = reinterpret_tensor(buf1016, (16, 512, 64), (32768, 64, 1), 0); del buf1016  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf1027, permute_2323, out=buf1028)
    del permute_2323
    buf1029 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_196(c_void_p(buf1028.data_ptr()), c_void_p(buf1029.data_ptr()))
    buf1030 = reinterpret_tensor(buf1006, (16, 64, 512), (32768, 512, 1), 0); del buf1006  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2329, reinterpret_tensor(buf1021, (16, 512, 512), (262144, 512, 1), 0), out=buf1030)
    del permute_2329
    buf1031 = reinterpret_tensor(buf989, (16, 512, 64), (32768, 64, 1), 0); del buf989  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1021, (16, 512, 512), (262144, 512, 1), 0), permute_2330, out=buf1031)
    del permute_2330
    buf1032 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_197(c_void_p(buf1031.data_ptr()), c_void_p(buf1032.data_ptr()))
    buf1033 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf1026, (1, 1024, 1024), (0, 1, 1024), 0), out=buf1033)
    buf1034 = reinterpret_tensor(buf964, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf964  # reuse
    cpp_fused_clone_198(c_void_p(buf1017.data_ptr()), c_void_p(buf1034.data_ptr()))
    buf1035 = reinterpret_tensor(buf1026, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf1026  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2340, reinterpret_tensor(buf1034, (1, 512, 1024), (0, 1024, 1), 0), out=buf1035)
    buf1036 = reinterpret_tensor(buf1017, (1, 512, 1024), (524288, 1024, 1), 0); del buf1017  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1034, (1, 512, 1024), (0, 1024, 1), 0), permute_2341, out=buf1036)
    del permute_2341
    buf1037 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2340, reinterpret_tensor(buf1030, (1, 512, 1024), (0, 1, 512), 0), out=buf1037)
    buf1038 = reinterpret_tensor(buf1034, (1, 512, 1024), (524288, 1024, 1), 0); del buf1034  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1030, (1, 512, 1024), (0, 1, 512), 0), permute_2348, out=buf1038)
    del permute_2348
    buf1039 = reinterpret_tensor(buf1030, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf1030  # reuse
    cpp_fused_clone_199(c_void_p(buf1028.data_ptr()), c_void_p(buf1031.data_ptr()), c_void_p(buf1039.data_ptr()))
    buf1040 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2340, reinterpret_tensor(buf1039, (1, 512, 1024), (0, 1024, 1), 0), out=buf1040)
    del permute_2340
    buf1041 = reinterpret_tensor(buf1031, (1, 512, 1024), (524288, 1024, 1), 0); del buf1031  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1039, (1, 512, 1024), (0, 1024, 1), 0), permute_2355, out=buf1041)
    del permute_2355
    buf1042 = reinterpret_tensor(buf1039, (512, 1, 1024), (1024, 524288, 1), 0); del buf1039  # reuse
    buf1043 = buf1010; del buf1010  # reuse
    buf1044 = buf1009; del buf1009  # reuse
    buf1045 = buf1042; del buf1042  # reuse
    buf1046 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1047 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1048 = reinterpret_tensor(buf1028, (512, 1, 1024), (1024, 1024, 1), 0); del buf1028  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_200(c_void_p(buf1045.data_ptr()), c_void_p(buf1011.data_ptr()), c_void_p(buf1036.data_ptr()), c_void_p(buf1038.data_ptr()), c_void_p(buf1041.data_ptr()), c_void_p(primals_184.data_ptr()), c_void_p(mul_18.data_ptr()), c_void_p(div_71.data_ptr()), c_void_p(getitem_25.data_ptr()), c_void_p(buf1043.data_ptr()), c_void_p(buf1044.data_ptr()), c_void_p(buf1046.data_ptr()), c_void_p(buf1047.data_ptr()), c_void_p(buf1048.data_ptr()))
    del div_71
    del getitem_25
    del mul_18
    del primals_184
    buf1049 = reinterpret_tensor(buf1005, (512, 4096), (4096, 1), 0); del buf1005  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1048, (512, 1024), (1024, 1), 0), permute_2360, out=buf1049)
    del permute_2360
    buf1050 = reinterpret_tensor(buf1021, (1024, 4096), (4096, 1), 0); del buf1021  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1048, (1024, 512), (1, 1024), 0), view_74, out=buf1050)
    del view_74
    buf1051 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf1052 = reinterpret_tensor(buf1049, (512, 1, 4096), (4096, 4096, 1), 0); del buf1049  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_201(c_void_p(buf1052.data_ptr()), c_void_p(buf1048.data_ptr()), c_void_p(getitem_23.data_ptr()), c_void_p(addmm_2.data_ptr()), c_void_p(buf1051.data_ptr()))
    del addmm_2
    del getitem_23
    buf1053 = reinterpret_tensor(buf1048, (512, 1024), (1024, 1), 0); del buf1048  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1052, (512, 4096), (4096, 1), 0), permute_2364, out=buf1053)
    del permute_2364
    buf1054 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1052, (4096, 512), (1, 4096), 0), view_72, out=buf1054)
    del view_72
    buf1055 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf1056 = buf1044; del buf1044  # reuse
    buf1057 = buf1043; del buf1043  # reuse
    buf1058 = reinterpret_tensor(buf1041, (512, 1, 1024), (1024, 524288, 1), 0); del buf1041  # reuse
    buf1059 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1060 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1061 = reinterpret_tensor(buf1038, (512, 1, 1024), (1024, 1024, 1), 0); del buf1038  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_202(c_void_p(buf1052.data_ptr()), c_void_p(buf1045.data_ptr()), c_void_p(buf1053.data_ptr()), c_void_p(primals_178.data_ptr()), c_void_p(mul_13.data_ptr()), c_void_p(div_72.data_ptr()), c_void_p(getitem_19.data_ptr()), c_void_p(buf1055.data_ptr()), c_void_p(buf1056.data_ptr()), c_void_p(buf1057.data_ptr()), c_void_p(buf1058.data_ptr()), c_void_p(buf1059.data_ptr()), c_void_p(buf1060.data_ptr()), c_void_p(buf1061.data_ptr()))
    del div_72
    del getitem_19
    del mul_13
    del primals_178
    buf1062 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2369, reinterpret_tensor(buf1061, (1, 512, 1024), (0, 1024, 1), 0), out=buf1062)
    del permute_2369
    buf1063 = reinterpret_tensor(buf1053, (1, 512, 1024), (524288, 1024, 1), 0); del buf1053  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1061, (1, 512, 1024), (0, 1024, 1), 0), permute_2370, out=buf1063)
    del permute_2370
    buf1064 = reinterpret_tensor(buf1061, (16, 512, 64), (32768, 64, 1), 0); del buf1061  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2376, reinterpret_tensor(buf1063, (16, 512, 64), (1, 1024, 16), 0), out=buf1064)
    del permute_2376
    buf1065 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1063, (16, 512, 64), (1, 1024, 16), 0), permute_2377, out=buf1065)
    del permute_2377
    buf1066 = buf1019; del buf1019  # reuse
    buf1067 = buf1020; del buf1020  # reuse
    buf1068 = reinterpret_tensor(buf1065, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf1065  # reuse
    cpp_fused__softmax_backward_data_index_add_mul_native_dropout_backward_new_zeros_203(c_void_p(buf1068.data_ptr()), c_void_p(getitem_17.data_ptr()), c_void_p(alias_48.data_ptr()), c_void_p(buf1066.data_ptr()), c_void_p(buf1067.data_ptr()))
    del alias_48
    del getitem_17
    aten.index_put_(buf1067, [None, None, None, iota], buf1068, True)
    buf1071 = reinterpret_tensor(buf1027, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf1027  # reuse
    buf1072 = buf1025; del buf1025  # reuse
    buf1074 = reinterpret_tensor(buf1024, (16, 512, 1024), (524288, 1024, 1), 0); del buf1024  # reuse
    cpp_fused_bmm_slice_backward_204(c_void_p(buf1067.data_ptr()), c_void_p(buf1071.data_ptr()), c_void_p(buf1072.data_ptr()), c_void_p(buf1074.data_ptr()))
    buf1073 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2383, buf1072, out=buf1073)
    del permute_2383
    buf1075 = reinterpret_tensor(buf1063, (16, 512, 64), (32768, 64, 1), 0); del buf1063  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf1074, permute_2384, out=buf1075)
    del permute_2384
    buf1076 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_205(c_void_p(buf1075.data_ptr()), c_void_p(buf1076.data_ptr()))
    buf1077 = reinterpret_tensor(buf1045, (16, 64, 512), (32768, 512, 1), 0); del buf1045  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2390, reinterpret_tensor(buf1068, (16, 512, 512), (262144, 512, 1), 0), out=buf1077)
    del permute_2390
    buf1078 = reinterpret_tensor(buf1036, (16, 512, 64), (32768, 64, 1), 0); del buf1036  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1068, (16, 512, 512), (262144, 512, 1), 0), permute_2391, out=buf1078)
    del permute_2391
    buf1079 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_206(c_void_p(buf1078.data_ptr()), c_void_p(buf1079.data_ptr()))
    buf1080 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf1073, (1, 1024, 1024), (0, 1, 1024), 0), out=buf1080)
    buf1081 = reinterpret_tensor(buf1011, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf1011  # reuse
    cpp_fused_clone_207(c_void_p(buf1064.data_ptr()), c_void_p(buf1081.data_ptr()))
    buf1082 = reinterpret_tensor(buf1073, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf1073  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2401, reinterpret_tensor(buf1081, (1, 512, 1024), (0, 1024, 1), 0), out=buf1082)
    buf1083 = reinterpret_tensor(buf1064, (1, 512, 1024), (524288, 1024, 1), 0); del buf1064  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1081, (1, 512, 1024), (0, 1024, 1), 0), permute_2402, out=buf1083)
    del permute_2402
    buf1084 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2401, reinterpret_tensor(buf1077, (1, 512, 1024), (0, 1, 512), 0), out=buf1084)
    buf1085 = reinterpret_tensor(buf1081, (1, 512, 1024), (524288, 1024, 1), 0); del buf1081  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1077, (1, 512, 1024), (0, 1, 512), 0), permute_2409, out=buf1085)
    del permute_2409
    buf1086 = reinterpret_tensor(buf1077, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf1077  # reuse
    cpp_fused_clone_208(c_void_p(buf1075.data_ptr()), c_void_p(buf1078.data_ptr()), c_void_p(buf1086.data_ptr()))
    buf1087 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2401, reinterpret_tensor(buf1086, (1, 512, 1024), (0, 1024, 1), 0), out=buf1087)
    del permute_2401
    buf1088 = reinterpret_tensor(buf1078, (1, 512, 1024), (524288, 1024, 1), 0); del buf1078  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1086, (1, 512, 1024), (0, 1024, 1), 0), permute_2416, out=buf1088)
    del permute_2416
    buf1089 = reinterpret_tensor(buf1086, (512, 1, 1024), (1024, 524288, 1), 0); del buf1086  # reuse
    buf1090 = buf1057; del buf1057  # reuse
    buf1091 = buf1056; del buf1056  # reuse
    buf1092 = buf1089; del buf1089  # reuse
    buf1093 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1094 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1095 = reinterpret_tensor(buf1075, (512, 1, 1024), (1024, 1024, 1), 0); del buf1075  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_209(c_void_p(buf1092.data_ptr()), c_void_p(buf1058.data_ptr()), c_void_p(buf1083.data_ptr()), c_void_p(buf1085.data_ptr()), c_void_p(buf1088.data_ptr()), c_void_p(primals_176.data_ptr()), c_void_p(mul_10.data_ptr()), c_void_p(div_73.data_ptr()), c_void_p(getitem_13.data_ptr()), c_void_p(buf1090.data_ptr()), c_void_p(buf1091.data_ptr()), c_void_p(buf1093.data_ptr()), c_void_p(buf1094.data_ptr()), c_void_p(buf1095.data_ptr()))
    del div_73
    del getitem_13
    del mul_10
    del primals_176
    buf1096 = reinterpret_tensor(buf1052, (512, 4096), (4096, 1), 0); del buf1052  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1095, (512, 1024), (1024, 1), 0), permute_2421, out=buf1096)
    del permute_2421
    buf1097 = reinterpret_tensor(buf1068, (1024, 4096), (4096, 1), 0); del buf1068  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1095, (1024, 512), (1, 1024), 0), view_36, out=buf1097)
    del view_36
    buf1098 = empty((1, 1024), device='cpu', dtype=torch.float32)
    buf1099 = reinterpret_tensor(buf1096, (512, 1, 4096), (4096, 4096, 1), 0); del buf1096  # reuse
    cpp_fused_gelu_gelu_backward_native_dropout_backward_sum_210(c_void_p(buf1099.data_ptr()), c_void_p(buf1095.data_ptr()), c_void_p(getitem_11.data_ptr()), c_void_p(addmm.data_ptr()), c_void_p(buf1098.data_ptr()))
    del addmm
    del getitem_11
    buf1100 = reinterpret_tensor(buf1095, (512, 1024), (1024, 1), 0); del buf1095  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1099, (512, 4096), (4096, 1), 0), permute_2425, out=buf1100)
    del permute_2425
    buf1101 = empty((4096, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1099, (4096, 512), (1, 4096), 0), view_34, out=buf1101)
    del view_34
    buf1102 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf1103 = buf1091; del buf1091  # reuse
    buf1104 = buf1090; del buf1090  # reuse
    buf1105 = reinterpret_tensor(buf1088, (512, 1, 1024), (1024, 524288, 1), 0); del buf1088  # reuse
    buf1106 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1107 = empty((1024, ), device='cpu', dtype=torch.float32)
    buf1108 = reinterpret_tensor(buf1085, (512, 1, 1024), (1024, 1024, 1), 0); del buf1085  # reuse
    cpp_fused_add_native_dropout_backward_native_layer_norm_backward_sum_211(c_void_p(buf1099.data_ptr()), c_void_p(buf1092.data_ptr()), c_void_p(buf1100.data_ptr()), c_void_p(primals_170.data_ptr()), c_void_p(mul_5.data_ptr()), c_void_p(div_74.data_ptr()), c_void_p(getitem_7.data_ptr()), c_void_p(buf1102.data_ptr()), c_void_p(buf1103.data_ptr()), c_void_p(buf1104.data_ptr()), c_void_p(buf1105.data_ptr()), c_void_p(buf1106.data_ptr()), c_void_p(buf1107.data_ptr()), c_void_p(buf1108.data_ptr()))
    del buf1099
    del buf1103
    del buf1104
    del div_74
    del getitem_7
    del mul_5
    del primals_170
    buf1109 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2430, reinterpret_tensor(buf1108, (1, 512, 1024), (0, 1024, 1), 0), out=buf1109)
    del permute_2430
    buf1110 = reinterpret_tensor(buf1100, (1, 512, 1024), (524288, 1024, 1), 0); del buf1100  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1108, (1, 512, 1024), (0, 1024, 1), 0), permute_2431, out=buf1110)
    del permute_2431
    buf1111 = reinterpret_tensor(buf1108, (16, 512, 64), (32768, 64, 1), 0); del buf1108  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2437, reinterpret_tensor(buf1110, (16, 512, 64), (1, 1024, 16), 0), out=buf1111)
    del permute_2437
    buf1112 = empty((16, 512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1110, (16, 512, 64), (1, 1024, 16), 0), permute_2438, out=buf1112)
    del permute_2438
    buf1113 = buf1066; del buf1066  # reuse
    buf1114 = buf1067; del buf1067  # reuse
    buf1115 = reinterpret_tensor(buf1112, (1, 16, 512, 512), (4194304, 262144, 512, 1), 0); del buf1112  # reuse
    cpp_fused__softmax_backward_data_mul_native_dropout_backward_new_zeros_212(c_void_p(buf1115.data_ptr()), c_void_p(getitem_5.data_ptr()), c_void_p(alias_49.data_ptr()), c_void_p(buf1113.data_ptr()), c_void_p(buf1114.data_ptr()))
    del alias_49
    del buf1113
    del getitem_5
    aten.index_put_(buf1114, [None, None, None, iota], buf1115, True)
    del iota
    buf1118 = reinterpret_tensor(buf1074, (1, 16, 1024, 512), (8388608, 524288, 512, 1), 0); del buf1074  # reuse
    buf1119 = buf1072; del buf1072  # reuse
    buf1121 = reinterpret_tensor(buf1071, (16, 512, 1024), (524288, 1024, 1), 0); del buf1071  # reuse
    cpp_fused_bmm_slice_backward_213(c_void_p(buf1114.data_ptr()), c_void_p(buf1118.data_ptr()), c_void_p(buf1119.data_ptr()), c_void_p(buf1121.data_ptr()))
    del buf1114
    del buf1118
    buf1120 = empty((16, 64, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2444, buf1119, out=buf1120)
    del buf1119
    del permute_2444
    buf1122 = reinterpret_tensor(buf1110, (16, 512, 64), (32768, 64, 1), 0); del buf1110  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(buf1121, permute_2445, out=buf1122)
    del buf1121
    del permute_2445
    buf1123 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_214(c_void_p(buf1122.data_ptr()), c_void_p(buf1123.data_ptr()))
    buf1124 = reinterpret_tensor(buf1092, (16, 64, 512), (32768, 512, 1), 0); del buf1092  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2451, reinterpret_tensor(buf1115, (16, 512, 512), (262144, 512, 1), 0), out=buf1124)
    del permute_2451
    buf1125 = reinterpret_tensor(buf1083, (16, 512, 64), (32768, 64, 1), 0); del buf1083  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1115, (16, 512, 512), (262144, 512, 1), 0), permute_2452, out=buf1125)
    del buf1115
    del permute_2452
    buf1126 = empty((1, 1, 16, 64), device='cpu', dtype=torch.float32)
    cpp_fused_sum_215(c_void_p(buf1125.data_ptr()), c_void_p(buf1126.data_ptr()))
    buf1127 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1055, reinterpret_tensor(buf1120, (1, 1024, 1024), (0, 1, 1024), 0), out=buf1127)
    del permute_1055
    buf1128 = reinterpret_tensor(buf1058, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf1058  # reuse
    cpp_fused_clone_216(c_void_p(buf1111.data_ptr()), c_void_p(buf1128.data_ptr()))
    buf1129 = reinterpret_tensor(buf1120, (1, 1024, 1024), (1048576, 1024, 1), 0); del buf1120  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2462, reinterpret_tensor(buf1128, (1, 512, 1024), (0, 1024, 1), 0), out=buf1129)
    buf1130 = reinterpret_tensor(buf1111, (1, 512, 1024), (524288, 1024, 1), 0); del buf1111  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1128, (1, 512, 1024), (0, 1024, 1), 0), permute_2463, out=buf1130)
    del permute_2463
    buf1131 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2462, reinterpret_tensor(buf1124, (1, 512, 1024), (0, 1, 512), 0), out=buf1131)
    buf1132 = reinterpret_tensor(buf1128, (1, 512, 1024), (524288, 1024, 1), 0); del buf1128  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1124, (1, 512, 1024), (0, 1, 512), 0), permute_2470, out=buf1132)
    del permute_2470
    buf1133 = reinterpret_tensor(buf1124, (512, 1, 1, 16, 64), (1024, 1024, 1024, 64, 1), 0); del buf1124  # reuse
    cpp_fused_clone_217(c_void_p(buf1122.data_ptr()), c_void_p(buf1125.data_ptr()), c_void_p(buf1133.data_ptr()))
    del buf1122
    buf1134 = empty((1, 1024, 1024), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_2462, reinterpret_tensor(buf1133, (1, 512, 1024), (0, 1024, 1), 0), out=buf1134)
    del permute_2462
    buf1135 = reinterpret_tensor(buf1125, (1, 512, 1024), (524288, 1024, 1), 0); del buf1125  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf1133, (1, 512, 1024), (0, 1024, 1), 0), permute_2477, out=buf1135)
    del buf1133
    del permute_2477
    buf1136 = empty((32000, 1024), device='cpu', dtype=torch.float32)
    buf1137 = buf1105; del buf1105  # reuse
    cpp_fused_add_embedding_dense_backward_native_dropout_backward_nll_loss_forward_218(c_void_p(buf1137.data_ptr()), c_void_p(permute.data_ptr()), c_void_p(buf1130.data_ptr()), c_void_p(buf1132.data_ptr()), c_void_p(buf1135.data_ptr()), c_void_p(getitem_1.data_ptr()), c_void_p(buf1136.data_ptr()))
    del buf1130
    del buf1132
    del buf1135
    del getitem_1
    aten.index_put_(buf1136, [permute], buf1137, True)
    del buf1137
    del permute
    return (reinterpret_tensor(buf1134, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1131, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1129, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1127, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1126, (16, 64), (64, 1), 0), reinterpret_tensor(buf1123, (16, 64), (64, 1), 0), reinterpret_tensor(buf1109, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf1087, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1084, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1082, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1080, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1079, (16, 64), (64, 1), 0), reinterpret_tensor(buf1076, (16, 64), (64, 1), 0), reinterpret_tensor(buf1062, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf1040, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1037, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1035, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1033, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf1032, (16, 64), (64, 1), 0), reinterpret_tensor(buf1029, (16, 64), (64, 1), 0), reinterpret_tensor(buf1015, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf993, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf990, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf988, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf986, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf985, (16, 64), (64, 1), 0), reinterpret_tensor(buf982, (16, 64), (64, 1), 0), reinterpret_tensor(buf968, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf946, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf943, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf941, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf939, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf938, (16, 64), (64, 1), 0), reinterpret_tensor(buf935, (16, 64), (64, 1), 0), reinterpret_tensor(buf921, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf899, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf896, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf894, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf892, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf891, (16, 64), (64, 1), 0), reinterpret_tensor(buf888, (16, 64), (64, 1), 0), reinterpret_tensor(buf874, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf852, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf849, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf847, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf845, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf844, (16, 64), (64, 1), 0), reinterpret_tensor(buf841, (16, 64), (64, 1), 0), reinterpret_tensor(buf827, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf805, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf802, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf800, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf798, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf797, (16, 64), (64, 1), 0), reinterpret_tensor(buf794, (16, 64), (64, 1), 0), reinterpret_tensor(buf780, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf758, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf755, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf753, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf751, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf750, (16, 64), (64, 1), 0), reinterpret_tensor(buf747, (16, 64), (64, 1), 0), reinterpret_tensor(buf733, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf711, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf708, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf706, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf704, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf703, (16, 64), (64, 1), 0), reinterpret_tensor(buf700, (16, 64), (64, 1), 0), reinterpret_tensor(buf686, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf664, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf661, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf659, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf657, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf656, (16, 64), (64, 1), 0), reinterpret_tensor(buf653, (16, 64), (64, 1), 0), reinterpret_tensor(buf639, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf617, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf614, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf612, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf610, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf609, (16, 64), (64, 1), 0), reinterpret_tensor(buf606, (16, 64), (64, 1), 0), reinterpret_tensor(buf592, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf570, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf567, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf565, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf563, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf562, (16, 64), (64, 1), 0), reinterpret_tensor(buf559, (16, 64), (64, 1), 0), reinterpret_tensor(buf545, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf523, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf520, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf518, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf516, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf515, (16, 64), (64, 1), 0), reinterpret_tensor(buf512, (16, 64), (64, 1), 0), reinterpret_tensor(buf498, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf476, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf473, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf471, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf469, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf468, (16, 64), (64, 1), 0), reinterpret_tensor(buf465, (16, 64), (64, 1), 0), reinterpret_tensor(buf451, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf429, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf426, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf424, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf422, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf421, (16, 64), (64, 1), 0), reinterpret_tensor(buf418, (16, 64), (64, 1), 0), reinterpret_tensor(buf404, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf382, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf379, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf377, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf375, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf374, (16, 64), (64, 1), 0), reinterpret_tensor(buf371, (16, 64), (64, 1), 0), reinterpret_tensor(buf357, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf335, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf332, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf330, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf328, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf327, (16, 64), (64, 1), 0), reinterpret_tensor(buf324, (16, 64), (64, 1), 0), reinterpret_tensor(buf310, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf288, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf285, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf283, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf281, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf280, (16, 64), (64, 1), 0), reinterpret_tensor(buf277, (16, 64), (64, 1), 0), reinterpret_tensor(buf263, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf241, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf238, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf236, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf234, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf233, (16, 64), (64, 1), 0), reinterpret_tensor(buf230, (16, 64), (64, 1), 0), reinterpret_tensor(buf216, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf194, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf191, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf189, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf187, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf186, (16, 64), (64, 1), 0), reinterpret_tensor(buf183, (16, 64), (64, 1), 0), reinterpret_tensor(buf169, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf147, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf144, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf142, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf140, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf139, (16, 64), (64, 1), 0), reinterpret_tensor(buf136, (16, 64), (64, 1), 0), reinterpret_tensor(buf122, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf100, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf97, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf95, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf93, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf92, (16, 64), (64, 1), 0), reinterpret_tensor(buf89, (16, 64), (64, 1), 0), reinterpret_tensor(buf75, (1024, 16, 64), (1, 1024, 16384), 0), reinterpret_tensor(buf53, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf50, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf48, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf46, (1024, 16, 64), (1024, 64, 1), 0), reinterpret_tensor(buf45, (16, 64), (64, 1), 0), reinterpret_tensor(buf42, (16, 64), (64, 1), 0), reinterpret_tensor(buf28, (1024, 16, 64), (1, 1024, 16384), 0), buf1136, buf1106, buf1107, reinterpret_tensor(buf1101, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf1102, (4096, ), (1, ), 0), reinterpret_tensor(buf1097, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf1098, (1024, ), (1, ), 0), buf1093, buf1094, buf1059, buf1060, reinterpret_tensor(buf1054, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf1055, (4096, ), (1, ), 0), reinterpret_tensor(buf1050, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf1051, (1024, ), (1, ), 0), buf1046, buf1047, buf1012, buf1013, reinterpret_tensor(buf1007, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf1008, (4096, ), (1, ), 0), reinterpret_tensor(buf1003, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf1004, (1024, ), (1, ), 0), buf999, buf1000, buf965, buf966, reinterpret_tensor(buf960, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf961, (4096, ), (1, ), 0), reinterpret_tensor(buf956, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf957, (1024, ), (1, ), 0), buf952, buf953, buf918, buf919, reinterpret_tensor(buf913, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf914, (4096, ), (1, ), 0), reinterpret_tensor(buf909, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf910, (1024, ), (1, ), 0), buf905, buf906, buf871, buf872, reinterpret_tensor(buf866, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf867, (4096, ), (1, ), 0), reinterpret_tensor(buf862, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf863, (1024, ), (1, ), 0), buf858, buf859, buf824, buf825, reinterpret_tensor(buf819, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf820, (4096, ), (1, ), 0), reinterpret_tensor(buf815, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf816, (1024, ), (1, ), 0), buf811, buf812, buf777, buf778, reinterpret_tensor(buf772, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf773, (4096, ), (1, ), 0), reinterpret_tensor(buf768, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf769, (1024, ), (1, ), 0), buf764, buf765, buf730, buf731, reinterpret_tensor(buf725, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf726, (4096, ), (1, ), 0), reinterpret_tensor(buf721, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf722, (1024, ), (1, ), 0), buf717, buf718, buf683, buf684, reinterpret_tensor(buf678, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf679, (4096, ), (1, ), 0), reinterpret_tensor(buf674, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf675, (1024, ), (1, ), 0), buf670, buf671, buf636, buf637, reinterpret_tensor(buf631, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf632, (4096, ), (1, ), 0), reinterpret_tensor(buf627, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf628, (1024, ), (1, ), 0), buf623, buf624, buf589, buf590, reinterpret_tensor(buf584, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf585, (4096, ), (1, ), 0), reinterpret_tensor(buf580, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf581, (1024, ), (1, ), 0), buf576, buf577, buf542, buf543, reinterpret_tensor(buf537, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf538, (4096, ), (1, ), 0), reinterpret_tensor(buf533, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf534, (1024, ), (1, ), 0), buf529, buf530, buf495, buf496, reinterpret_tensor(buf490, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf491, (4096, ), (1, ), 0), reinterpret_tensor(buf486, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf487, (1024, ), (1, ), 0), buf482, buf483, buf448, buf449, reinterpret_tensor(buf443, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf444, (4096, ), (1, ), 0), reinterpret_tensor(buf439, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf440, (1024, ), (1, ), 0), buf435, buf436, buf401, buf402, reinterpret_tensor(buf396, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf397, (4096, ), (1, ), 0), reinterpret_tensor(buf392, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf393, (1024, ), (1, ), 0), buf388, buf389, buf354, buf355, reinterpret_tensor(buf349, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf350, (4096, ), (1, ), 0), reinterpret_tensor(buf345, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf346, (1024, ), (1, ), 0), buf341, buf342, buf307, buf308, reinterpret_tensor(buf302, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf303, (4096, ), (1, ), 0), reinterpret_tensor(buf298, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf299, (1024, ), (1, ), 0), buf294, buf295, buf260, buf261, reinterpret_tensor(buf255, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf256, (4096, ), (1, ), 0), reinterpret_tensor(buf251, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf252, (1024, ), (1, ), 0), buf247, buf248, buf213, buf214, reinterpret_tensor(buf208, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf209, (4096, ), (1, ), 0), reinterpret_tensor(buf204, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf205, (1024, ), (1, ), 0), buf200, buf201, buf166, buf167, reinterpret_tensor(buf161, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf162, (4096, ), (1, ), 0), reinterpret_tensor(buf157, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf158, (1024, ), (1, ), 0), buf153, buf154, buf119, buf120, reinterpret_tensor(buf114, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf115, (4096, ), (1, ), 0), reinterpret_tensor(buf110, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf111, (1024, ), (1, ), 0), buf106, buf107, buf72, buf73, reinterpret_tensor(buf67, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf68, (4096, ), (1, ), 0), reinterpret_tensor(buf63, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf64, (1024, ), (1, ), 0), buf59, buf60, buf25, buf26, reinterpret_tensor(buf20, (4096, 1024), (1024, 1), 0), reinterpret_tensor(buf21, (4096, ), (1, ), 0), reinterpret_tensor(buf16, (1024, 4096), (4096, 1), 0), reinterpret_tensor(buf17, (1024, ), (1, ), 0), buf12, buf13, reinterpret_tensor(buf7, (32000, 1024), (1024, 1), 0), reinterpret_tensor(buf8, (32000, ), (1, ), 0), None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_170 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_176 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_178 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_184 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_186 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_192 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_194 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_200 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_208 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_210 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_216 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_218 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_224 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_226 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_232 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_234 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_240 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_242 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_248 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_250 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_256 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_258 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_264 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_266 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_272 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_274 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_280 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_282 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_288 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_290 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_296 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_298 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_304 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_306 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_312 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_314 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_320 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_322 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_328 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_330 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_336 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_338 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_344 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_346 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_352 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_354 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_360 = rand_strided((1024, ), (1, ), device='cpu', dtype=torch.float32)
    primals_365 = rand_strided((1, 512), (512, 1), device='cpu', dtype=torch.int64)
    permute = rand_strided((512, 1), (1, 512), device='cpu', dtype=torch.int64)
    getitem_1 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    iota = rand_strided((512, ), (1, ), device='cpu', dtype=torch.int64)
    getitem_5 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_7 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_5 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_34 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_11 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_36 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_13 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_10 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_17 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_19 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_13 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_72 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_2 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_23 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_74 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_25 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_18 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_29 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_31 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_21 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_110 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_4 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_35 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_112 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_37 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_26 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_41 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_43 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_29 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_148 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_6 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_47 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_150 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_49 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_34 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_53 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_55 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_37 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_186 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_8 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_59 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_188 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_61 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_42 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_65 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_67 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_45 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_224 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_10 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_71 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_226 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_73 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_50 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_77 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_79 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_53 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_262 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_12 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_83 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_264 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_85 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_58 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_89 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_91 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_61 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_300 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_14 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_95 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_302 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_97 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_66 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_101 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_103 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_69 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_338 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_16 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_107 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_340 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_109 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_74 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_113 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_115 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_77 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_376 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_18 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_119 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_378 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_121 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_82 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_125 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_127 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_85 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_414 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_20 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_131 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_416 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_133 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_90 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_137 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_139 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_93 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_452 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_22 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_143 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_454 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_145 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_98 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_149 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_151 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_101 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_490 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_24 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_155 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_492 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_157 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_106 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_161 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_163 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_109 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_528 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_26 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_167 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_530 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_169 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_114 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_173 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_175 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_117 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_566 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_28 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_179 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_568 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_181 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_122 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_185 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_187 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_125 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_604 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_30 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_191 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_606 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_193 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_130 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_197 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_199 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_133 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_642 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_32 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_203 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_644 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_205 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_138 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_209 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_211 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_141 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_680 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_34 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_215 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_682 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_217 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_146 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_221 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_223 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_149 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_718 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_36 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_227 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_720 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_229 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_154 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_233 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_235 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_157 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_756 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_38 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_239 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_758 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_241 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_162 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_245 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_247 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_165 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_794 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_40 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_251 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_796 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_253 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_170 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_257 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_259 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_173 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_832 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_42 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_263 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_834 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_265 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_178 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_269 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_271 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_181 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_870 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_44 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_275 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_872 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_277 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_186 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_281 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.bool)
    getitem_283 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_189 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    view_908 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    addmm_46 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_287 = rand_strided((512, 1, 4096), (4096, 4096, 1), device='cpu', dtype=torch.bool)
    view_910 = rand_strided((512, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    getitem_289 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    mul_194 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.float32)
    getitem_293 = rand_strided((512, 1, 1024), (1024, 1024, 1), device='cpu', dtype=torch.bool)
    view_912 = rand_strided((512, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    sub_73 = rand_strided((512, 32000), (32000, 1), device='cpu', dtype=torch.float32)
    convert_element_type_4 = rand_strided((), (), device='cpu', dtype=torch.float32)
    permute_1013 = rand_strided((32000, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_27 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1018 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1022 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_28 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1027 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1028 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1034 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1035 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_26 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1041 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1042 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1048 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1049 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1055 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1059 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1060 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1067 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1074 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_29 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1079 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1083 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_30 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1088 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1089 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1095 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1096 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_27 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1102 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1103 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1109 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1110 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1120 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1121 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1128 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1135 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_31 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1140 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1144 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_32 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1149 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1150 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1156 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1157 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_28 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1163 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1164 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1170 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1171 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1181 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1182 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1189 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1196 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_33 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1201 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1205 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_34 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1210 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1211 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1217 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1218 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_29 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1224 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1225 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1231 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1232 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1242 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1243 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1250 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1257 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_35 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1262 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1266 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_36 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1271 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1272 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1278 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1279 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_30 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1285 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1286 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1292 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1293 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1303 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1304 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1311 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1318 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_37 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1323 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1327 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_38 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1332 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1333 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1339 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1340 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_31 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1346 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1347 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1353 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1354 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1364 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1365 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1372 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1379 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_39 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1384 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1388 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_40 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1393 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1394 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1400 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1401 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_32 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1407 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1408 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1414 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1415 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1425 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1426 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1433 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1440 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_41 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1445 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1449 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_42 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1454 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1455 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1461 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1462 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_33 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1468 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1469 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1475 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1476 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1486 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1487 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1494 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1501 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_43 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1506 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1510 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_44 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1515 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1516 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1522 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1523 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_34 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1529 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1530 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1536 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1537 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1547 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1548 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1555 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1562 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_45 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1567 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1571 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_46 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1576 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1577 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1583 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1584 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_35 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1590 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1591 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1597 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1598 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1608 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1609 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1616 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1623 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_47 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1628 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1632 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_48 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1637 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1638 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1644 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1645 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_36 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1651 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1652 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1658 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1659 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1669 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1670 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1677 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1684 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_49 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1689 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1693 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_50 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1698 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1699 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1705 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1706 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_37 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1712 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1713 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1719 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1720 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1730 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1731 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1738 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1745 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_51 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1750 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1754 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_52 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1759 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1760 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1766 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1767 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_38 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1773 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1774 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1780 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1781 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1791 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1792 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1799 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1806 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_53 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1811 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1815 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_54 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1820 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1821 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1827 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1828 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_39 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1834 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1835 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1841 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1842 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1852 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1853 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1860 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1867 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_55 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1872 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1876 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_56 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1881 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1882 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1888 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1889 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_40 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1895 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1896 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1902 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1903 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1913 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1914 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1921 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1928 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_57 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1933 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1937 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_58 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1942 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1943 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1949 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_1950 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_41 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_1956 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1957 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1963 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1964 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_1974 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1975 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1982 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_1989 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_59 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_1994 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1998 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_60 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2003 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2004 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2010 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_2011 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_42 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_2017 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2018 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2024 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2025 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2035 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2036 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2043 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2050 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_61 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2055 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_2059 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_62 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2064 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2065 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2071 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_2072 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_43 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_2078 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2079 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2085 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2086 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2096 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2097 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2104 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2111 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_63 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2116 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_2120 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_64 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2125 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2126 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2132 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_2133 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_44 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_2139 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2140 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2146 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2147 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2157 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2158 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2165 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2172 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_65 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2177 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_2181 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_66 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2186 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2187 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2193 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_2194 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_45 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_2200 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2201 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2207 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2208 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2218 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2219 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2226 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2233 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_67 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2238 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_2242 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_68 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2247 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2248 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2254 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_2255 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_46 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_2261 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2262 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2268 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2269 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2279 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2280 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2287 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2294 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_69 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2299 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_2303 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_70 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2308 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2309 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2315 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_2316 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_47 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_2322 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2323 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2329 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2330 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2340 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2341 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2348 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2355 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_71 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2360 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_2364 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_72 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2369 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2370 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2376 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_2377 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_48 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_2383 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2384 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2390 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2391 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2401 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2402 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2409 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2416 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    div_73 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2421 = rand_strided((1024, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_2425 = rand_strided((4096, 1024), (1024, 1), device='cpu', dtype=torch.float32)
    div_74 = rand_strided((512, 1, 1), (1, 1, 1), device='cpu', dtype=torch.float32)
    permute_2430 = rand_strided((1, 1024, 512), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2431 = rand_strided((1, 1024, 1024), (0, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2437 = rand_strided((16, 512, 512), (262144, 1, 512), device='cpu', dtype=torch.float32)
    permute_2438 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    alias_49 = rand_strided((1, 16, 512, 512), (4194304, 262144, 512, 1), device='cpu', dtype=torch.float32)
    permute_2444 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2445 = rand_strided((16, 1024, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2451 = rand_strided((16, 64, 512), (64, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2452 = rand_strided((16, 512, 64), (64, 1024, 1), device='cpu', dtype=torch.float32)
    permute_2462 = rand_strided((1, 1024, 512), (524288, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2463 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2470 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    permute_2477 = rand_strided((1, 1024, 1024), (1048576, 1, 1024), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((), (), device='cpu', dtype=torch.float32)
    tangents_2 = rand_strided((1, 512, 32000), (16384000, 32000, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_170, primals_176, primals_178, primals_184, primals_186, primals_192, primals_194, primals_200, primals_202, primals_208, primals_210, primals_216, primals_218, primals_224, primals_226, primals_232, primals_234, primals_240, primals_242, primals_248, primals_250, primals_256, primals_258, primals_264, primals_266, primals_272, primals_274, primals_280, primals_282, primals_288, primals_290, primals_296, primals_298, primals_304, primals_306, primals_312, primals_314, primals_320, primals_322, primals_328, primals_330, primals_336, primals_338, primals_344, primals_346, primals_352, primals_354, primals_360, primals_365, permute, getitem_1, iota, getitem_5, getitem_7, mul_5, view_34, addmm, getitem_11, view_36, getitem_13, mul_10, getitem_17, getitem_19, mul_13, view_72, addmm_2, getitem_23, view_74, getitem_25, mul_18, getitem_29, getitem_31, mul_21, view_110, addmm_4, getitem_35, view_112, getitem_37, mul_26, getitem_41, getitem_43, mul_29, view_148, addmm_6, getitem_47, view_150, getitem_49, mul_34, getitem_53, getitem_55, mul_37, view_186, addmm_8, getitem_59, view_188, getitem_61, mul_42, getitem_65, getitem_67, mul_45, view_224, addmm_10, getitem_71, view_226, getitem_73, mul_50, getitem_77, getitem_79, mul_53, view_262, addmm_12, getitem_83, view_264, getitem_85, mul_58, getitem_89, getitem_91, mul_61, view_300, addmm_14, getitem_95, view_302, getitem_97, mul_66, getitem_101, getitem_103, mul_69, view_338, addmm_16, getitem_107, view_340, getitem_109, mul_74, getitem_113, getitem_115, mul_77, view_376, addmm_18, getitem_119, view_378, getitem_121, mul_82, getitem_125, getitem_127, mul_85, view_414, addmm_20, getitem_131, view_416, getitem_133, mul_90, getitem_137, getitem_139, mul_93, view_452, addmm_22, getitem_143, view_454, getitem_145, mul_98, getitem_149, getitem_151, mul_101, view_490, addmm_24, getitem_155, view_492, getitem_157, mul_106, getitem_161, getitem_163, mul_109, view_528, addmm_26, getitem_167, view_530, getitem_169, mul_114, getitem_173, getitem_175, mul_117, view_566, addmm_28, getitem_179, view_568, getitem_181, mul_122, getitem_185, getitem_187, mul_125, view_604, addmm_30, getitem_191, view_606, getitem_193, mul_130, getitem_197, getitem_199, mul_133, view_642, addmm_32, getitem_203, view_644, getitem_205, mul_138, getitem_209, getitem_211, mul_141, view_680, addmm_34, getitem_215, view_682, getitem_217, mul_146, getitem_221, getitem_223, mul_149, view_718, addmm_36, getitem_227, view_720, getitem_229, mul_154, getitem_233, getitem_235, mul_157, view_756, addmm_38, getitem_239, view_758, getitem_241, mul_162, getitem_245, getitem_247, mul_165, view_794, addmm_40, getitem_251, view_796, getitem_253, mul_170, getitem_257, getitem_259, mul_173, view_832, addmm_42, getitem_263, view_834, getitem_265, mul_178, getitem_269, getitem_271, mul_181, view_870, addmm_44, getitem_275, view_872, getitem_277, mul_186, getitem_281, getitem_283, mul_189, view_908, addmm_46, getitem_287, view_910, getitem_289, mul_194, getitem_293, view_912, sub_73, convert_element_type_4, permute_1013, div_27, permute_1018, permute_1022, div_28, permute_1027, permute_1028, permute_1034, permute_1035, alias_26, permute_1041, permute_1042, permute_1048, permute_1049, permute_1055, permute_1059, permute_1060, permute_1067, permute_1074, div_29, permute_1079, permute_1083, div_30, permute_1088, permute_1089, permute_1095, permute_1096, alias_27, permute_1102, permute_1103, permute_1109, permute_1110, permute_1120, permute_1121, permute_1128, permute_1135, div_31, permute_1140, permute_1144, div_32, permute_1149, permute_1150, permute_1156, permute_1157, alias_28, permute_1163, permute_1164, permute_1170, permute_1171, permute_1181, permute_1182, permute_1189, permute_1196, div_33, permute_1201, permute_1205, div_34, permute_1210, permute_1211, permute_1217, permute_1218, alias_29, permute_1224, permute_1225, permute_1231, permute_1232, permute_1242, permute_1243, permute_1250, permute_1257, div_35, permute_1262, permute_1266, div_36, permute_1271, permute_1272, permute_1278, permute_1279, alias_30, permute_1285, permute_1286, permute_1292, permute_1293, permute_1303, permute_1304, permute_1311, permute_1318, div_37, permute_1323, permute_1327, div_38, permute_1332, permute_1333, permute_1339, permute_1340, alias_31, permute_1346, permute_1347, permute_1353, permute_1354, permute_1364, permute_1365, permute_1372, permute_1379, div_39, permute_1384, permute_1388, div_40, permute_1393, permute_1394, permute_1400, permute_1401, alias_32, permute_1407, permute_1408, permute_1414, permute_1415, permute_1425, permute_1426, permute_1433, permute_1440, div_41, permute_1445, permute_1449, div_42, permute_1454, permute_1455, permute_1461, permute_1462, alias_33, permute_1468, permute_1469, permute_1475, permute_1476, permute_1486, permute_1487, permute_1494, permute_1501, div_43, permute_1506, permute_1510, div_44, permute_1515, permute_1516, permute_1522, permute_1523, alias_34, permute_1529, permute_1530, permute_1536, permute_1537, permute_1547, permute_1548, permute_1555, permute_1562, div_45, permute_1567, permute_1571, div_46, permute_1576, permute_1577, permute_1583, permute_1584, alias_35, permute_1590, permute_1591, permute_1597, permute_1598, permute_1608, permute_1609, permute_1616, permute_1623, div_47, permute_1628, permute_1632, div_48, permute_1637, permute_1638, permute_1644, permute_1645, alias_36, permute_1651, permute_1652, permute_1658, permute_1659, permute_1669, permute_1670, permute_1677, permute_1684, div_49, permute_1689, permute_1693, div_50, permute_1698, permute_1699, permute_1705, permute_1706, alias_37, permute_1712, permute_1713, permute_1719, permute_1720, permute_1730, permute_1731, permute_1738, permute_1745, div_51, permute_1750, permute_1754, div_52, permute_1759, permute_1760, permute_1766, permute_1767, alias_38, permute_1773, permute_1774, permute_1780, permute_1781, permute_1791, permute_1792, permute_1799, permute_1806, div_53, permute_1811, permute_1815, div_54, permute_1820, permute_1821, permute_1827, permute_1828, alias_39, permute_1834, permute_1835, permute_1841, permute_1842, permute_1852, permute_1853, permute_1860, permute_1867, div_55, permute_1872, permute_1876, div_56, permute_1881, permute_1882, permute_1888, permute_1889, alias_40, permute_1895, permute_1896, permute_1902, permute_1903, permute_1913, permute_1914, permute_1921, permute_1928, div_57, permute_1933, permute_1937, div_58, permute_1942, permute_1943, permute_1949, permute_1950, alias_41, permute_1956, permute_1957, permute_1963, permute_1964, permute_1974, permute_1975, permute_1982, permute_1989, div_59, permute_1994, permute_1998, div_60, permute_2003, permute_2004, permute_2010, permute_2011, alias_42, permute_2017, permute_2018, permute_2024, permute_2025, permute_2035, permute_2036, permute_2043, permute_2050, div_61, permute_2055, permute_2059, div_62, permute_2064, permute_2065, permute_2071, permute_2072, alias_43, permute_2078, permute_2079, permute_2085, permute_2086, permute_2096, permute_2097, permute_2104, permute_2111, div_63, permute_2116, permute_2120, div_64, permute_2125, permute_2126, permute_2132, permute_2133, alias_44, permute_2139, permute_2140, permute_2146, permute_2147, permute_2157, permute_2158, permute_2165, permute_2172, div_65, permute_2177, permute_2181, div_66, permute_2186, permute_2187, permute_2193, permute_2194, alias_45, permute_2200, permute_2201, permute_2207, permute_2208, permute_2218, permute_2219, permute_2226, permute_2233, div_67, permute_2238, permute_2242, div_68, permute_2247, permute_2248, permute_2254, permute_2255, alias_46, permute_2261, permute_2262, permute_2268, permute_2269, permute_2279, permute_2280, permute_2287, permute_2294, div_69, permute_2299, permute_2303, div_70, permute_2308, permute_2309, permute_2315, permute_2316, alias_47, permute_2322, permute_2323, permute_2329, permute_2330, permute_2340, permute_2341, permute_2348, permute_2355, div_71, permute_2360, permute_2364, div_72, permute_2369, permute_2370, permute_2376, permute_2377, alias_48, permute_2383, permute_2384, permute_2390, permute_2391, permute_2401, permute_2402, permute_2409, permute_2416, div_73, permute_2421, permute_2425, div_74, permute_2430, permute_2431, permute_2437, permute_2438, alias_49, permute_2444, permute_2445, permute_2451, permute_2452, permute_2462, permute_2463, permute_2470, permute_2477, tangents_1, tangents_2]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('XLNetLMHeadModel', benchmark_compiled_module)
