
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_nll_loss_backward_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_nll_loss_backward_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused__log_softmax_backward_data_cat_div_nll_loss_backward_nll_loss_forward_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       const bool* in_ptr3,
                       const float* in_ptr4,
                       const bool* in_ptr5,
                       const bool* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        {
            float tmp_acc0 = 0;
            float tmp_acc1 = 0;
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                auto tmp0 = in_ptr0[static_cast<long>(x0)];
                auto tmp1 = in_ptr1[static_cast<long>(0L)];
                auto tmp2 = in_ptr2[static_cast<long>(0L)];
                auto tmp5 = in_ptr3[static_cast<long>(0L)];
                auto tmp12 = in_ptr4[static_cast<long>(x0)];
                auto tmp13 = in_ptr5[static_cast<long>(0L)];
                auto tmp14 = in_ptr6[static_cast<long>(0L)];
                auto tmp3 = static_cast<float>(2.0);
                auto tmp4 = tmp2 / tmp3;
                auto tmp6 = c10::convert<long>(tmp5);
                auto tmp7 = c10::convert<float>(tmp6);
                auto tmp8 = tmp4 / tmp7;
                auto tmp9 = static_cast<float>(0.0);
                auto tmp10 = tmp1 ? tmp8 : tmp9;
                auto tmp11 = decltype(tmp0)(tmp0 * tmp10);
                auto tmp15 = c10::convert<long>(tmp14);
                auto tmp16 = c10::convert<float>(tmp15);
                auto tmp17 = tmp4 / tmp16;
                auto tmp18 = tmp13 ? tmp17 : tmp9;
                auto tmp19 = decltype(tmp12)(tmp12 * tmp18);
                tmp_acc0 = tmp_acc0 + tmp11;
                tmp_acc1 = tmp_acc1 + tmp19;
            }
            out_ptr0[static_cast<long>(0L)] = tmp_acc0;
            out_ptr1[static_cast<long>(0L)] = tmp_acc1;
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(2L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = c10::convert<long>(x1);
                auto tmp1 = static_cast<long>(0);
                auto tmp2 = tmp0 >= tmp1;
                auto tmp3 = static_cast<long>(1);
                auto tmp4 = tmp0 < tmp3;
                auto tmp5 = [&]
                {
                    auto tmp6 = in_ptr7[static_cast<long>(x0)];
                    auto tmp7 = in_ptr4[static_cast<long>(x0)];
                    auto tmp8 = in_ptr5[static_cast<long>(0L)];
                    auto tmp9 = in_ptr2[static_cast<long>(0L)];
                    auto tmp10 = static_cast<float>(2.0);
                    auto tmp11 = tmp9 / tmp10;
                    auto tmp12 = in_ptr6[static_cast<long>(0L)];
                    auto tmp13 = c10::convert<long>(tmp12);
                    auto tmp14 = c10::convert<float>(tmp13);
                    auto tmp15 = tmp11 / tmp14;
                    auto tmp16 = static_cast<float>(0.0);
                    auto tmp17 = tmp8 ? tmp15 : tmp16;
                    auto tmp18 = decltype(tmp7)(tmp7 * tmp17);
                    auto tmp19 = in_ptr8[static_cast<long>(x0)];
                    auto tmp20 = std::exp(tmp19);
                    auto tmp21 = out_ptr1[static_cast<long>(0L)];
                    auto tmp22 = decltype(tmp20)(tmp20 * tmp21);
                    auto tmp23 = decltype(tmp18)(tmp18 - tmp22);
                    auto tmp24 = decltype(tmp6)(tmp6 + tmp23);
                    return tmp24;
                }
                ;
                auto tmp25 = tmp4 ? tmp5() : static_cast<decltype(tmp5())>(0.0);
                auto tmp26 = tmp0 >= tmp3;
                auto tmp27 = static_cast<long>(2);
                auto tmp28 = tmp0 < tmp27;
                auto tmp29 = [&]
                {
                    auto tmp30 = in_ptr9[static_cast<long>(x0)];
                    auto tmp31 = in_ptr0[static_cast<long>(x0)];
                    auto tmp32 = in_ptr1[static_cast<long>(0L)];
                    auto tmp33 = in_ptr2[static_cast<long>(0L)];
                    auto tmp34 = static_cast<float>(2.0);
                    auto tmp35 = tmp33 / tmp34;
                    auto tmp36 = in_ptr3[static_cast<long>(0L)];
                    auto tmp37 = c10::convert<long>(tmp36);
                    auto tmp38 = c10::convert<float>(tmp37);
                    auto tmp39 = tmp35 / tmp38;
                    auto tmp40 = static_cast<float>(0.0);
                    auto tmp41 = tmp32 ? tmp39 : tmp40;
                    auto tmp42 = decltype(tmp31)(tmp31 * tmp41);
                    auto tmp43 = in_ptr10[static_cast<long>(x0)];
                    auto tmp44 = std::exp(tmp43);
                    auto tmp45 = out_ptr0[static_cast<long>(0L)];
                    auto tmp46 = decltype(tmp44)(tmp44 * tmp45);
                    auto tmp47 = decltype(tmp42)(tmp42 - tmp46);
                    auto tmp48 = decltype(tmp30)(tmp30 + tmp47);
                    return tmp48;
                }
                ;
                auto tmp49 = tmp26 ? tmp29() : static_cast<decltype(tmp29())>(0.0);
                auto tmp50 = tmp4 ? tmp25 : tmp49;
                out_ptr2[static_cast<long>(x1 + (2L*x0))] = tmp50;
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_backward_sum_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        #pragma omp simd simdlen(4) 
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(2L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x0 + (2L*x1))];
                    tmp_acc0 = tmp_acc0 + tmp0;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        auto tmp4 = tmp2 * tmp3;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp4;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x0)];
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                    auto tmp7 = out_ptr1[static_cast<long>(x0)];
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp11 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = tmp1 * tmp2;
                    auto tmp4 = static_cast<float>(4096.0);
                    auto tmp5 = at::vec::Vectorized<float>(tmp4);
                    auto tmp6 = tmp3 * tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp7);
                    auto tmp9 = tmp6 - tmp8;
                    auto tmp12 = at::vec::Vectorized<float>(tmp11);
                    auto tmp13 = tmp10 * tmp12;
                    auto tmp14 = tmp9 - tmp13;
                    auto tmp15 = at::vec::Vectorized<float>(tmp0);
                    auto tmp16 = tmp15 * tmp14;
                    tmp16.store(out_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                        tmp_acc1_vec = tmp_acc1_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr4 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr5 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    auto out_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr7[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_native_layer_norm_backward_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp10 = tmp8 * tmp9;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp10;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp1 = in_ptr6[static_cast<long>(x0)];
                    auto tmp2 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp6 = out_ptr1[static_cast<long>(x0)];
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr2[static_cast<long>(x0)];
                    auto tmp3 = static_cast<float>(4096.0);
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 * tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 - tmp7;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 * tmp11;
                    auto tmp13 = tmp8 - tmp12;
                    auto tmp14 = at::vec::Vectorized<float>(tmp1);
                    auto tmp15 = tmp14 * tmp13;
                    auto tmp16 = tmp0 + tmp15;
                    tmp16.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_pow_sum_tanh_backward_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2097152L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0));
                auto tmp6 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0));
                auto tmp2 = static_cast<float>(0.5);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = tmp1 * tmp3;
                auto tmp5 = tmp0 * tmp4;
                auto tmp7 = tmp6 * tmp6;
                auto tmp8 = static_cast<float>(1.0);
                auto tmp9 = at::vec::Vectorized<float>(tmp8);
                auto tmp10 = tmp9 - tmp7;
                auto tmp11 = tmp5 * tmp10;
                auto tmp12 = static_cast<float>(0.7978845608028654);
                auto tmp13 = at::vec::Vectorized<float>(tmp12);
                auto tmp14 = tmp11 * tmp13;
                auto tmp15 = static_cast<float>(0.044715);
                auto tmp16 = at::vec::Vectorized<float>(tmp15);
                auto tmp17 = tmp14 * tmp16;
                auto tmp18 = tmp1 * tmp1;
                auto tmp19 = static_cast<float>(3.0);
                auto tmp20 = at::vec::Vectorized<float>(tmp19);
                auto tmp21 = tmp18 * tmp20;
                auto tmp22 = tmp17 * tmp21;
                auto tmp23 = tmp14 + tmp22;
                auto tmp24 = tmp6 + tmp9;
                auto tmp25 = tmp0 * tmp24;
                auto tmp26 = tmp25 * tmp3;
                auto tmp27 = tmp23 + tmp26;
                tmp27.store(in_out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (16384L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                }
            }
        }
    }
}
''')


cpp_fused__softmax_backward_data_div_nll_loss_forward_where_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr1,
                       const bool* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(2048L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                        auto tmp2 = tmp0 * tmp1;
                        tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(16L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(128L); x2+=static_cast<long>(8L))
                    {
                        auto tmp0 = flag_to_float_vec(in_ptr2 + static_cast<long>(x2 + (2048L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                        auto tmp4 = out_ptr0[static_cast<long>(x1 + (128L*x0))];
                        auto tmp8 = in_ptr3[static_cast<long>(0L)];
                        auto tmp3 = tmp1 * tmp2;
                        auto tmp5 = at::vec::Vectorized<float>(tmp4);
                        auto tmp6 = tmp2 * tmp5;
                        auto tmp7 = tmp3 - tmp6;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 / tmp9;
                        auto tmp11 = static_cast<float>(0.0);
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = decltype(tmp10)::blendv(tmp12, tmp10, tmp0);
                        tmp13.store(in_out_ptr0 + static_cast<long>(x2 + (128L*x1) + (16384L*x0)));
                    }
                }
            }
        }
    }
}
''')


cpp_fused_view_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((256L*x0) + (32768L*(c10::div_floor_integer((x1 + x1_inner), 256L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(256L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                    tmp0.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


cpp_fused_add_mul_neg_slice_backward_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                #pragma GCC ivdep
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(16L); x1+=static_cast<long>(1L))
                {
                    #pragma GCC ivdep
                    for(long x2=static_cast<long>(0L); x2<static_cast<long>(256L); x2+=static_cast<long>(1L))
                    {
                        auto tmp0 = c10::convert<long>(x2);
                        auto tmp1 = static_cast<long>(64);
                        auto tmp2 = tmp0 >= tmp1;
                        auto tmp3 = [&]
                        {
                            auto tmp4 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            return tmp4;
                        }
                        ;
                        auto tmp5 = tmp2 ? tmp3() : static_cast<decltype(tmp3())>(0.0);
                        auto tmp6 = static_cast<float>(0.0);
                        auto tmp7 = tmp2 ? tmp5 : tmp6;
                        auto tmp8 = tmp0 < tmp1;
                        auto tmp9 = [&]
                        {
                            auto tmp10 = c10::convert<long>(x2);
                            auto tmp11 = static_cast<long>(1);
                            auto tmp12 = tmp10 >= tmp11;
                            auto tmp13 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp14 = static_cast<long>(0);
                            auto tmp15 = tmp13 == tmp14;
                            auto tmp16 = tmp12 & tmp15;
                            auto tmp17 = [&]
                            {
                                auto tmp18 = in_ptr0[static_cast<long>(x0 + (256L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (32768L*x1))];
                                auto tmp19 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp20 = decltype(tmp18)(tmp18 * tmp19);
                                auto tmp21 = decltype(tmp20)(-tmp20);
                                return tmp21;
                            }
                            ;
                            auto tmp22 = tmp16 ? tmp17() : static_cast<decltype(tmp17())>(0.0);
                            auto tmp23 = static_cast<float>(0.0);
                            auto tmp24 = tmp16 ? tmp22 : tmp23;
                            auto tmp25 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp26 = tmp25 == tmp14;
                            auto tmp27 = [&]
                            {
                                auto tmp28 = in_ptr0[static_cast<long>(128L + x0 + (256L*(c10::div_floor_integer(x2, 2L))) + (32768L*x1))];
                                auto tmp29 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp30 = decltype(tmp28)(tmp28 * tmp29);
                                return tmp30;
                            }
                            ;
                            auto tmp31 = tmp26 ? tmp27() : static_cast<decltype(tmp27())>(0.0);
                            auto tmp32 = tmp26 ? tmp31 : tmp23;
                            auto tmp33 = decltype(tmp24)(tmp24 + tmp32);
                            auto tmp34 = in_ptr0[static_cast<long>(x0 + (128L*x2) + (32768L*x1))];
                            auto tmp35 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp36 = decltype(tmp34)(tmp34 * tmp35);
                            auto tmp37 = decltype(tmp33)(tmp33 + tmp36);
                            return tmp37;
                        }
                        ;
                        auto tmp38 = tmp8 ? tmp9() : static_cast<decltype(tmp9())>(0.0);
                        auto tmp39 = tmp8 ? tmp38 : tmp6;
                        auto tmp40 = decltype(tmp7)(tmp7 + tmp39);
                        auto tmp41 = [&]
                        {
                            auto tmp42 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            return tmp42;
                        }
                        ;
                        auto tmp43 = tmp2 ? tmp41() : static_cast<decltype(tmp41())>(0.0);
                        auto tmp44 = tmp2 ? tmp43 : tmp6;
                        auto tmp45 = [&]
                        {
                            auto tmp46 = c10::convert<long>(x2);
                            auto tmp47 = static_cast<long>(1);
                            auto tmp48 = tmp46 >= tmp47;
                            auto tmp49 = c10::convert<long>(static_cast<long>(((-1L) + x2)) % static_cast<long>(2L));
                            auto tmp50 = static_cast<long>(0);
                            auto tmp51 = tmp49 == tmp50;
                            auto tmp52 = tmp48 & tmp51;
                            auto tmp53 = [&]
                            {
                                auto tmp54 = in_ptr3[static_cast<long>((2L*(c10::div_floor_integer(((-1L) + x2), 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp55 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(((-1L) + x2), 2L)) % static_cast<long>(32L)))];
                                auto tmp56 = decltype(tmp54)(tmp54 * tmp55);
                                auto tmp57 = decltype(tmp56)(-tmp56);
                                return tmp57;
                            }
                            ;
                            auto tmp58 = tmp52 ? tmp53() : static_cast<decltype(tmp53())>(0.0);
                            auto tmp59 = static_cast<float>(0.0);
                            auto tmp60 = tmp52 ? tmp58 : tmp59;
                            auto tmp61 = c10::convert<long>(static_cast<long>(x2) % static_cast<long>(2L));
                            auto tmp62 = tmp61 == tmp50;
                            auto tmp63 = [&]
                            {
                                auto tmp64 = in_ptr3[static_cast<long>(1L + (2L*(c10::div_floor_integer(x2, 2L))) + (256L*x0) + (32768L*x1))];
                                auto tmp65 = in_ptr1[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer((1L + (2L*(c10::div_floor_integer(x2, 2L)))), 2L)) % static_cast<long>(32L)))];
                                auto tmp66 = decltype(tmp64)(tmp64 * tmp65);
                                return tmp66;
                            }
                            ;
                            auto tmp67 = tmp62 ? tmp63() : static_cast<decltype(tmp63())>(0.0);
                            auto tmp68 = tmp62 ? tmp67 : tmp59;
                            auto tmp69 = decltype(tmp60)(tmp60 + tmp68);
                            auto tmp70 = in_ptr3[static_cast<long>(x2 + (256L*x0) + (32768L*x1))];
                            auto tmp71 = in_ptr2[static_cast<long>((64L*x0) + (static_cast<long>(c10::div_floor_integer(x2, 2L)) % static_cast<long>(32L)))];
                            auto tmp72 = decltype(tmp70)(tmp70 * tmp71);
                            auto tmp73 = decltype(tmp69)(tmp69 + tmp72);
                            return tmp73;
                        }
                        ;
                        auto tmp74 = tmp8 ? tmp45() : static_cast<decltype(tmp45())>(0.0);
                        auto tmp75 = tmp8 ? tmp74 : tmp6;
                        auto tmp76 = decltype(tmp44)(tmp44 + tmp75);
                        out_ptr0[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp40;
                        out_ptr1[static_cast<long>(x2 + (256L*x1) + (4096L*x0))] = tmp76;
                    }
                }
            }
        }
    }
}
''')


cpp_fused_add_embedding_dense_backward_native_layer_norm_native_layer_norm_backward_nll_loss_forward_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const long* in_ptr8,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                        auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                        auto tmp10 = in_ptr6[static_cast<long>(x0)];
                        auto tmp13 = in_ptr7[static_cast<long>(x0)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp8 = tmp6 * tmp7;
                        auto tmp11 = at::vec::Vectorized<float>(tmp10);
                        auto tmp12 = tmp9 - tmp11;
                        auto tmp14 = at::vec::Vectorized<float>(tmp13);
                        auto tmp15 = tmp12 * tmp14;
                        auto tmp16 = tmp8 * tmp15;
                        tmp8.store(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp8;
                        tmp_acc1_vec = tmp_acc1_vec + tmp16;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                    tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                    out_ptr2[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(4096L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    float tmp_acc1 = 0;
                    at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (4096L*x1)));
                        auto tmp8 = in_ptr6[static_cast<long>(x1)];
                        auto tmp11 = in_ptr7[static_cast<long>(x1)];
                        auto tmp2 = tmp0 + tmp1;
                        auto tmp4 = tmp2 + tmp3;
                        auto tmp6 = tmp4 + tmp5;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp7 - tmp9;
                        auto tmp12 = at::vec::Vectorized<float>(tmp11);
                        auto tmp13 = tmp10 * tmp12;
                        auto tmp14 = tmp6 * tmp13;
                        tmp_acc0_vec = tmp_acc0_vec + tmp14;
                        tmp_acc1_vec = tmp_acc1_vec + tmp6;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                    tmp_acc1_vec.store(out_ptr4 + static_cast<long>(x0));
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(206438400L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr5 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(4096L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = in_ptr8[static_cast<long>(x0)];
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp4 = in_ptr7[static_cast<long>(x0)];
                    auto tmp7 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp10 = out_ptr1[static_cast<long>(x0)];
                    auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (4096L*x0)));
                    auto tmp14 = in_ptr6[static_cast<long>(x0)];
                    auto tmp19 = out_ptr2[static_cast<long>(x0)];
                    auto tmp1 = static_cast<int>(-1);
                    auto tmp2 = tmp0 == tmp1;
                    auto tmp5 = static_cast<float>(4096.0);
                    auto tmp6 = tmp4 / tmp5;
                    auto tmp8 = at::vec::Vectorized<float>(tmp5);
                    auto tmp9 = tmp7 * tmp8;
                    auto tmp11 = at::vec::Vectorized<float>(tmp10);
                    auto tmp12 = tmp9 - tmp11;
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 - tmp15;
                    auto tmp17 = at::vec::Vectorized<float>(tmp4);
                    auto tmp18 = tmp16 * tmp17;
                    auto tmp20 = at::vec::Vectorized<float>(tmp19);
                    auto tmp21 = tmp18 * tmp20;
                    auto tmp22 = tmp12 - tmp21;
                    auto tmp23 = at::vec::Vectorized<float>(tmp6);
                    auto tmp24 = tmp23 * tmp22;
                    auto tmp25 = tmp3 + tmp24;
                    auto tmp26 = static_cast<float>(0.0);
                    auto tmp27 = to_float_mask(tmp2);
                    auto tmp28 = at::vec::Vectorized<float>(tmp26);
                    auto tmp29 = decltype(tmp28)::blendv(tmp25, tmp28, tmp27);
                    tmp29.store(in_out_ptr0 + static_cast<long>(x1 + (4096L*x0)));
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_2, primals_12, primals_22, primals_32, primals_42, primals_52, primals_62, primals_72, primals_82, primals_92, primals_102, primals_112, primals_122, primals_132, primals_142, primals_152, primals_162, primals_172, primals_182, primals_192, primals_202, primals_212, primals_222, primals_232, primals_242, primals_252, primals_262, primals_272, primals_282, primals_288, primals_291, primals_294, primals_297, primals_300, primals_303, primals_306, primals_309, primals_312, primals_315, primals_318, primals_321, primals_324, primals_327, primals_330, primals_333, primals_336, primals_339, primals_342, primals_345, primals_348, primals_351, primals_354, primals_357, primals_360, primals_363, primals_366, primals_369, view, embedding, getitem_1, rsqrt, view_2, unsqueeze_3, unsqueeze_5, slice_48, view_24, addmm, tanh, view_28, mul_10, view_30, unsqueeze_16, unsqueeze_18, slice_96, view_52, addmm_2, tanh_1, view_56, mul_20, view_58, unsqueeze_29, unsqueeze_31, slice_144, view_80, addmm_4, tanh_2, view_84, mul_30, view_86, unsqueeze_42, unsqueeze_44, slice_192, view_108, addmm_6, tanh_3, view_112, mul_40, view_114, unsqueeze_55, unsqueeze_57, slice_240, view_136, addmm_8, tanh_4, view_140, mul_50, view_142, unsqueeze_68, unsqueeze_70, slice_288, view_164, addmm_10, tanh_5, view_168, mul_60, view_170, unsqueeze_81, unsqueeze_83, slice_336, view_192, addmm_12, tanh_6, view_196, mul_70, view_198, unsqueeze_94, unsqueeze_96, slice_384, view_220, addmm_14, tanh_7, view_224, mul_80, view_226, unsqueeze_107, unsqueeze_109, slice_432, view_248, addmm_16, tanh_8, view_252, mul_90, view_254, unsqueeze_120, unsqueeze_122, slice_480, view_276, addmm_18, tanh_9, view_280, mul_100, view_282, unsqueeze_133, unsqueeze_135, slice_528, view_304, addmm_20, tanh_10, view_308, mul_110, view_310, unsqueeze_146, unsqueeze_148, slice_576, view_332, addmm_22, tanh_11, view_336, mul_120, view_338, unsqueeze_159, unsqueeze_161, slice_624, view_360, addmm_24, tanh_12, view_364, mul_130, view_366, unsqueeze_172, unsqueeze_174, slice_672, view_388, addmm_26, tanh_13, view_392, mul_140, view_394, unsqueeze_185, unsqueeze_187, slice_720, view_416, addmm_28, tanh_14, view_420, mul_150, view_422, unsqueeze_198, unsqueeze_200, slice_768, view_444, addmm_30, tanh_15, view_448, mul_160, view_450, unsqueeze_211, unsqueeze_213, slice_816, view_472, addmm_32, tanh_16, view_476, mul_170, view_478, unsqueeze_224, unsqueeze_226, slice_864, view_500, addmm_34, tanh_17, view_504, mul_180, view_506, unsqueeze_237, unsqueeze_239, slice_912, view_528, addmm_36, tanh_18, view_532, mul_190, view_534, unsqueeze_250, unsqueeze_252, slice_960, view_556, addmm_38, tanh_19, view_560, mul_200, view_562, unsqueeze_263, unsqueeze_265, slice_1008, view_584, addmm_40, tanh_20, view_588, mul_210, view_590, unsqueeze_276, unsqueeze_278, slice_1056, view_612, addmm_42, tanh_21, view_616, mul_220, view_618, unsqueeze_289, unsqueeze_291, slice_1104, view_640, addmm_44, tanh_22, view_644, mul_230, view_646, unsqueeze_302, unsqueeze_304, slice_1152, view_668, addmm_46, tanh_23, view_672, mul_240, view_674, unsqueeze_315, unsqueeze_317, slice_1200, view_696, addmm_48, tanh_24, view_700, mul_250, view_702, unsqueeze_328, unsqueeze_330, slice_1248, view_724, addmm_50, tanh_25, view_728, mul_260, view_730, unsqueeze_341, unsqueeze_343, slice_1296, view_752, addmm_52, tanh_26, view_756, mul_270, view_758, unsqueeze_354, unsqueeze_356, slice_1344, view_780, addmm_54, tanh_27, view_784, mul_280, view_787, sub_58, ne, sub_60, ne_3, ne_6, where_32, ne_8, where_34, permute_309, div_62, permute_313, permute_317, permute_323, permute_326, permute_327, alias_61, permute_328, permute_329, permute_336, permute_340, permute_344, div_64, permute_346, permute_350, permute_356, permute_359, permute_360, alias_63, permute_361, permute_362, permute_369, permute_373, permute_377, div_66, permute_379, permute_383, permute_389, permute_392, permute_393, alias_65, permute_394, permute_395, permute_402, permute_406, permute_410, div_68, permute_412, permute_416, permute_422, permute_425, permute_426, alias_67, permute_427, permute_428, permute_435, permute_439, permute_443, div_70, permute_445, permute_449, permute_455, permute_458, permute_459, alias_69, permute_460, permute_461, permute_468, permute_472, permute_476, div_72, permute_478, permute_482, permute_488, permute_491, permute_492, alias_71, permute_493, permute_494, permute_501, permute_505, permute_509, div_74, permute_511, permute_515, permute_521, permute_524, permute_525, alias_73, permute_526, permute_527, permute_534, permute_538, permute_542, div_76, permute_544, permute_548, permute_554, permute_557, permute_558, alias_75, permute_559, permute_560, permute_567, permute_571, permute_575, div_78, permute_577, permute_581, permute_587, permute_590, permute_591, alias_77, permute_592, permute_593, permute_600, permute_604, permute_608, div_80, permute_610, permute_614, permute_620, permute_623, permute_624, alias_79, permute_625, permute_626, permute_633, permute_637, permute_641, div_82, permute_643, permute_647, permute_653, permute_656, permute_657, alias_81, permute_658, permute_659, permute_666, permute_670, permute_674, div_84, permute_676, permute_680, permute_686, permute_689, permute_690, alias_83, permute_691, permute_692, permute_699, permute_703, permute_707, div_86, permute_709, permute_713, permute_719, permute_722, permute_723, alias_85, permute_724, permute_725, permute_732, permute_736, permute_740, div_88, permute_742, permute_746, permute_752, permute_755, permute_756, alias_87, permute_757, permute_758, permute_765, permute_769, permute_773, div_90, permute_775, permute_779, permute_785, permute_788, permute_789, alias_89, permute_790, permute_791, permute_798, permute_802, permute_806, div_92, permute_808, permute_812, permute_818, permute_821, permute_822, alias_91, permute_823, permute_824, permute_831, permute_835, permute_839, div_94, permute_841, permute_845, permute_851, permute_854, permute_855, alias_93, permute_856, permute_857, permute_864, permute_868, permute_872, div_96, permute_874, permute_878, permute_884, permute_887, permute_888, alias_95, permute_889, permute_890, permute_897, permute_901, permute_905, div_98, permute_907, permute_911, permute_917, permute_920, permute_921, alias_97, permute_922, permute_923, permute_930, permute_934, permute_938, div_100, permute_940, permute_944, permute_950, permute_953, permute_954, alias_99, permute_955, permute_956, permute_963, permute_967, permute_971, div_102, permute_973, permute_977, permute_983, permute_986, permute_987, alias_101, permute_988, permute_989, permute_996, permute_1000, permute_1004, div_104, permute_1006, permute_1010, permute_1016, permute_1019, permute_1020, alias_103, permute_1021, permute_1022, permute_1029, permute_1033, permute_1037, div_106, permute_1039, permute_1043, permute_1049, permute_1052, permute_1053, alias_105, permute_1054, permute_1055, permute_1062, permute_1066, permute_1070, div_108, permute_1072, permute_1076, permute_1082, permute_1085, permute_1086, alias_107, permute_1087, permute_1088, permute_1095, permute_1099, permute_1103, div_110, permute_1105, permute_1109, permute_1115, permute_1118, permute_1119, alias_109, permute_1120, permute_1121, permute_1128, permute_1132, permute_1136, div_112, permute_1138, permute_1142, permute_1148, permute_1151, permute_1152, alias_111, permute_1153, permute_1154, permute_1161, permute_1165, permute_1169, div_114, permute_1171, permute_1175, permute_1181, permute_1184, permute_1185, alias_113, permute_1186, permute_1187, permute_1194, permute_1198, permute_1202, div_116, permute_1204, permute_1208, permute_1214, permute_1217, permute_1218, alias_115, permute_1219, permute_1220, permute_1227, permute_1231, permute_1235, tangents_1, tangents_2, tangents_3 = args
    args.clear()
    assert_size_stride(primals_2, (4096, ), (1, ))
    assert_size_stride(primals_12, (4096, ), (1, ))
    assert_size_stride(primals_22, (4096, ), (1, ))
    assert_size_stride(primals_32, (4096, ), (1, ))
    assert_size_stride(primals_42, (4096, ), (1, ))
    assert_size_stride(primals_52, (4096, ), (1, ))
    assert_size_stride(primals_62, (4096, ), (1, ))
    assert_size_stride(primals_72, (4096, ), (1, ))
    assert_size_stride(primals_82, (4096, ), (1, ))
    assert_size_stride(primals_92, (4096, ), (1, ))
    assert_size_stride(primals_102, (4096, ), (1, ))
    assert_size_stride(primals_112, (4096, ), (1, ))
    assert_size_stride(primals_122, (4096, ), (1, ))
    assert_size_stride(primals_132, (4096, ), (1, ))
    assert_size_stride(primals_142, (4096, ), (1, ))
    assert_size_stride(primals_152, (4096, ), (1, ))
    assert_size_stride(primals_162, (4096, ), (1, ))
    assert_size_stride(primals_172, (4096, ), (1, ))
    assert_size_stride(primals_182, (4096, ), (1, ))
    assert_size_stride(primals_192, (4096, ), (1, ))
    assert_size_stride(primals_202, (4096, ), (1, ))
    assert_size_stride(primals_212, (4096, ), (1, ))
    assert_size_stride(primals_222, (4096, ), (1, ))
    assert_size_stride(primals_232, (4096, ), (1, ))
    assert_size_stride(primals_242, (4096, ), (1, ))
    assert_size_stride(primals_252, (4096, ), (1, ))
    assert_size_stride(primals_262, (4096, ), (1, ))
    assert_size_stride(primals_272, (4096, ), (1, ))
    assert_size_stride(primals_282, (4096, ), (1, ))
    assert_size_stride(primals_288, (), ())
    assert_size_stride(primals_291, (), ())
    assert_size_stride(primals_294, (), ())
    assert_size_stride(primals_297, (), ())
    assert_size_stride(primals_300, (), ())
    assert_size_stride(primals_303, (), ())
    assert_size_stride(primals_306, (), ())
    assert_size_stride(primals_309, (), ())
    assert_size_stride(primals_312, (), ())
    assert_size_stride(primals_315, (), ())
    assert_size_stride(primals_318, (), ())
    assert_size_stride(primals_321, (), ())
    assert_size_stride(primals_324, (), ())
    assert_size_stride(primals_327, (), ())
    assert_size_stride(primals_330, (), ())
    assert_size_stride(primals_333, (), ())
    assert_size_stride(primals_336, (), ())
    assert_size_stride(primals_339, (), ())
    assert_size_stride(primals_342, (), ())
    assert_size_stride(primals_345, (), ())
    assert_size_stride(primals_348, (), ())
    assert_size_stride(primals_351, (), ())
    assert_size_stride(primals_354, (), ())
    assert_size_stride(primals_357, (), ())
    assert_size_stride(primals_360, (), ())
    assert_size_stride(primals_363, (), ())
    assert_size_stride(primals_366, (), ())
    assert_size_stride(primals_369, (), ())
    assert_size_stride(view, (1, 128), (128, 1))
    assert_size_stride(embedding, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(getitem_1, (1, 128, 1), (128, 1, 1))
    assert_size_stride(rsqrt, (1, 128, 1), (128, 1, 1))
    assert_size_stride(view_2, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_3, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_5, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_48, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_24, (128, 4096), (4096, 1))
    assert_size_stride(addmm, (128, 16384), (16384, 1))
    assert_size_stride(tanh, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_28, (128, 16384), (16384, 1))
    assert_size_stride(mul_10, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_30, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_16, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_18, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_96, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_52, (128, 4096), (4096, 1))
    assert_size_stride(addmm_2, (128, 16384), (16384, 1))
    assert_size_stride(tanh_1, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_56, (128, 16384), (16384, 1))
    assert_size_stride(mul_20, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_58, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_29, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_31, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_144, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_80, (128, 4096), (4096, 1))
    assert_size_stride(addmm_4, (128, 16384), (16384, 1))
    assert_size_stride(tanh_2, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_84, (128, 16384), (16384, 1))
    assert_size_stride(mul_30, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_86, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_42, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_44, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_192, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_108, (128, 4096), (4096, 1))
    assert_size_stride(addmm_6, (128, 16384), (16384, 1))
    assert_size_stride(tanh_3, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_112, (128, 16384), (16384, 1))
    assert_size_stride(mul_40, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_114, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_55, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_57, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_240, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_136, (128, 4096), (4096, 1))
    assert_size_stride(addmm_8, (128, 16384), (16384, 1))
    assert_size_stride(tanh_4, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_140, (128, 16384), (16384, 1))
    assert_size_stride(mul_50, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_142, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_68, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_70, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_288, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_164, (128, 4096), (4096, 1))
    assert_size_stride(addmm_10, (128, 16384), (16384, 1))
    assert_size_stride(tanh_5, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_168, (128, 16384), (16384, 1))
    assert_size_stride(mul_60, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_170, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_81, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_83, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_336, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_192, (128, 4096), (4096, 1))
    assert_size_stride(addmm_12, (128, 16384), (16384, 1))
    assert_size_stride(tanh_6, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_196, (128, 16384), (16384, 1))
    assert_size_stride(mul_70, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_198, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_94, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_96, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_384, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_220, (128, 4096), (4096, 1))
    assert_size_stride(addmm_14, (128, 16384), (16384, 1))
    assert_size_stride(tanh_7, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_224, (128, 16384), (16384, 1))
    assert_size_stride(mul_80, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_226, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_107, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_109, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_432, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_248, (128, 4096), (4096, 1))
    assert_size_stride(addmm_16, (128, 16384), (16384, 1))
    assert_size_stride(tanh_8, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_252, (128, 16384), (16384, 1))
    assert_size_stride(mul_90, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_254, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_120, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_122, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_480, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_276, (128, 4096), (4096, 1))
    assert_size_stride(addmm_18, (128, 16384), (16384, 1))
    assert_size_stride(tanh_9, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_280, (128, 16384), (16384, 1))
    assert_size_stride(mul_100, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_282, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_133, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_135, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_528, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_304, (128, 4096), (4096, 1))
    assert_size_stride(addmm_20, (128, 16384), (16384, 1))
    assert_size_stride(tanh_10, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_308, (128, 16384), (16384, 1))
    assert_size_stride(mul_110, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_310, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_146, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_148, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_576, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_332, (128, 4096), (4096, 1))
    assert_size_stride(addmm_22, (128, 16384), (16384, 1))
    assert_size_stride(tanh_11, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_336, (128, 16384), (16384, 1))
    assert_size_stride(mul_120, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_338, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_159, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_161, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_624, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_360, (128, 4096), (4096, 1))
    assert_size_stride(addmm_24, (128, 16384), (16384, 1))
    assert_size_stride(tanh_12, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_364, (128, 16384), (16384, 1))
    assert_size_stride(mul_130, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_366, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_172, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_174, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_672, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_388, (128, 4096), (4096, 1))
    assert_size_stride(addmm_26, (128, 16384), (16384, 1))
    assert_size_stride(tanh_13, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_392, (128, 16384), (16384, 1))
    assert_size_stride(mul_140, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_394, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_185, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_187, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_720, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_416, (128, 4096), (4096, 1))
    assert_size_stride(addmm_28, (128, 16384), (16384, 1))
    assert_size_stride(tanh_14, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_420, (128, 16384), (16384, 1))
    assert_size_stride(mul_150, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_422, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_198, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_200, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_768, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_444, (128, 4096), (4096, 1))
    assert_size_stride(addmm_30, (128, 16384), (16384, 1))
    assert_size_stride(tanh_15, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_448, (128, 16384), (16384, 1))
    assert_size_stride(mul_160, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_450, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_211, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_213, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_816, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_472, (128, 4096), (4096, 1))
    assert_size_stride(addmm_32, (128, 16384), (16384, 1))
    assert_size_stride(tanh_16, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_476, (128, 16384), (16384, 1))
    assert_size_stride(mul_170, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_478, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_224, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_226, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_864, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_500, (128, 4096), (4096, 1))
    assert_size_stride(addmm_34, (128, 16384), (16384, 1))
    assert_size_stride(tanh_17, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_504, (128, 16384), (16384, 1))
    assert_size_stride(mul_180, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_506, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_237, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_239, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_912, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_528, (128, 4096), (4096, 1))
    assert_size_stride(addmm_36, (128, 16384), (16384, 1))
    assert_size_stride(tanh_18, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_532, (128, 16384), (16384, 1))
    assert_size_stride(mul_190, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_534, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_250, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_252, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_960, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_556, (128, 4096), (4096, 1))
    assert_size_stride(addmm_38, (128, 16384), (16384, 1))
    assert_size_stride(tanh_19, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_560, (128, 16384), (16384, 1))
    assert_size_stride(mul_200, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_562, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_263, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_265, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_1008, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_584, (128, 4096), (4096, 1))
    assert_size_stride(addmm_40, (128, 16384), (16384, 1))
    assert_size_stride(tanh_20, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_588, (128, 16384), (16384, 1))
    assert_size_stride(mul_210, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_590, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_276, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_278, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_1056, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_612, (128, 4096), (4096, 1))
    assert_size_stride(addmm_42, (128, 16384), (16384, 1))
    assert_size_stride(tanh_21, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_616, (128, 16384), (16384, 1))
    assert_size_stride(mul_220, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_618, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_289, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_291, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_1104, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_640, (128, 4096), (4096, 1))
    assert_size_stride(addmm_44, (128, 16384), (16384, 1))
    assert_size_stride(tanh_22, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_644, (128, 16384), (16384, 1))
    assert_size_stride(mul_230, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_646, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_302, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_304, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_1152, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_668, (128, 4096), (4096, 1))
    assert_size_stride(addmm_46, (128, 16384), (16384, 1))
    assert_size_stride(tanh_23, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_672, (128, 16384), (16384, 1))
    assert_size_stride(mul_240, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_674, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_315, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_317, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_1200, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_696, (128, 4096), (4096, 1))
    assert_size_stride(addmm_48, (128, 16384), (16384, 1))
    assert_size_stride(tanh_24, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_700, (128, 16384), (16384, 1))
    assert_size_stride(mul_250, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_702, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_328, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_330, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_1248, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_724, (128, 4096), (4096, 1))
    assert_size_stride(addmm_50, (128, 16384), (16384, 1))
    assert_size_stride(tanh_25, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_728, (128, 16384), (16384, 1))
    assert_size_stride(mul_260, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_730, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_341, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_343, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_1296, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_752, (128, 4096), (4096, 1))
    assert_size_stride(addmm_52, (128, 16384), (16384, 1))
    assert_size_stride(tanh_26, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_756, (128, 16384), (16384, 1))
    assert_size_stride(mul_270, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_758, (128, 4096), (4096, 1))
    assert_size_stride(unsqueeze_354, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(unsqueeze_356, (1, 128, 1, 32, 1), (0, 64, 0, 1, 0))
    assert_size_stride(slice_1344, (1, 1, 128, 128), (4194304, 4194304, 2048, 1))
    assert_size_stride(view_780, (128, 4096), (4096, 1))
    assert_size_stride(addmm_54, (128, 16384), (16384, 1))
    assert_size_stride(tanh_27, (1, 128, 16384), (2097152, 16384, 1))
    assert_size_stride(view_784, (128, 16384), (16384, 1))
    assert_size_stride(mul_280, (1, 128, 4096), (524288, 4096, 1))
    assert_size_stride(view_787, (128, 4096), (4096, 1))
    assert_size_stride(sub_58, (1, 128), (128, 1))
    assert_size_stride(ne, (1, ), (1, ))
    assert_size_stride(sub_60, (1, 128), (128, 1))
    assert_size_stride(ne_3, (1, ), (1, ))
    assert_size_stride(ne_6, (1, 1), (1, 1))
    assert_size_stride(where_32, (1, 1), (1, 1))
    assert_size_stride(ne_8, (1, 1), (1, 1))
    assert_size_stride(where_34, (1, 1), (1, 1))
    assert_size_stride(permute_309, (2, 4096), (4096, 1))
    assert_size_stride(div_62, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_313, (4096, 16384), (16384, 1))
    assert_size_stride(permute_317, (16384, 4096), (4096, 1))
    assert_size_stride(permute_323, (4096, 4096), (4096, 1))
    assert_size_stride(permute_326, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_327, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_61, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_328, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_329, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_336, (4096, 4096), (4096, 1))
    assert_size_stride(permute_340, (4096, 4096), (4096, 1))
    assert_size_stride(permute_344, (4096, 4096), (4096, 1))
    assert_size_stride(div_64, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_346, (4096, 16384), (16384, 1))
    assert_size_stride(permute_350, (16384, 4096), (4096, 1))
    assert_size_stride(permute_356, (4096, 4096), (4096, 1))
    assert_size_stride(permute_359, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_360, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_63, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_361, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_362, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_369, (4096, 4096), (4096, 1))
    assert_size_stride(permute_373, (4096, 4096), (4096, 1))
    assert_size_stride(permute_377, (4096, 4096), (4096, 1))
    assert_size_stride(div_66, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_379, (4096, 16384), (16384, 1))
    assert_size_stride(permute_383, (16384, 4096), (4096, 1))
    assert_size_stride(permute_389, (4096, 4096), (4096, 1))
    assert_size_stride(permute_392, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_393, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_65, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_394, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_395, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_402, (4096, 4096), (4096, 1))
    assert_size_stride(permute_406, (4096, 4096), (4096, 1))
    assert_size_stride(permute_410, (4096, 4096), (4096, 1))
    assert_size_stride(div_68, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_412, (4096, 16384), (16384, 1))
    assert_size_stride(permute_416, (16384, 4096), (4096, 1))
    assert_size_stride(permute_422, (4096, 4096), (4096, 1))
    assert_size_stride(permute_425, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_426, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_67, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_427, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_428, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_435, (4096, 4096), (4096, 1))
    assert_size_stride(permute_439, (4096, 4096), (4096, 1))
    assert_size_stride(permute_443, (4096, 4096), (4096, 1))
    assert_size_stride(div_70, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_445, (4096, 16384), (16384, 1))
    assert_size_stride(permute_449, (16384, 4096), (4096, 1))
    assert_size_stride(permute_455, (4096, 4096), (4096, 1))
    assert_size_stride(permute_458, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_459, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_69, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_460, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_461, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_468, (4096, 4096), (4096, 1))
    assert_size_stride(permute_472, (4096, 4096), (4096, 1))
    assert_size_stride(permute_476, (4096, 4096), (4096, 1))
    assert_size_stride(div_72, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_478, (4096, 16384), (16384, 1))
    assert_size_stride(permute_482, (16384, 4096), (4096, 1))
    assert_size_stride(permute_488, (4096, 4096), (4096, 1))
    assert_size_stride(permute_491, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_492, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_71, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_493, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_494, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_501, (4096, 4096), (4096, 1))
    assert_size_stride(permute_505, (4096, 4096), (4096, 1))
    assert_size_stride(permute_509, (4096, 4096), (4096, 1))
    assert_size_stride(div_74, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_511, (4096, 16384), (16384, 1))
    assert_size_stride(permute_515, (16384, 4096), (4096, 1))
    assert_size_stride(permute_521, (4096, 4096), (4096, 1))
    assert_size_stride(permute_524, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_525, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_73, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_526, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_527, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_534, (4096, 4096), (4096, 1))
    assert_size_stride(permute_538, (4096, 4096), (4096, 1))
    assert_size_stride(permute_542, (4096, 4096), (4096, 1))
    assert_size_stride(div_76, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_544, (4096, 16384), (16384, 1))
    assert_size_stride(permute_548, (16384, 4096), (4096, 1))
    assert_size_stride(permute_554, (4096, 4096), (4096, 1))
    assert_size_stride(permute_557, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_558, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_75, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_559, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_560, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_567, (4096, 4096), (4096, 1))
    assert_size_stride(permute_571, (4096, 4096), (4096, 1))
    assert_size_stride(permute_575, (4096, 4096), (4096, 1))
    assert_size_stride(div_78, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_577, (4096, 16384), (16384, 1))
    assert_size_stride(permute_581, (16384, 4096), (4096, 1))
    assert_size_stride(permute_587, (4096, 4096), (4096, 1))
    assert_size_stride(permute_590, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_591, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_77, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_592, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_593, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_600, (4096, 4096), (4096, 1))
    assert_size_stride(permute_604, (4096, 4096), (4096, 1))
    assert_size_stride(permute_608, (4096, 4096), (4096, 1))
    assert_size_stride(div_80, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_610, (4096, 16384), (16384, 1))
    assert_size_stride(permute_614, (16384, 4096), (4096, 1))
    assert_size_stride(permute_620, (4096, 4096), (4096, 1))
    assert_size_stride(permute_623, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_624, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_79, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_625, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_626, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_633, (4096, 4096), (4096, 1))
    assert_size_stride(permute_637, (4096, 4096), (4096, 1))
    assert_size_stride(permute_641, (4096, 4096), (4096, 1))
    assert_size_stride(div_82, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_643, (4096, 16384), (16384, 1))
    assert_size_stride(permute_647, (16384, 4096), (4096, 1))
    assert_size_stride(permute_653, (4096, 4096), (4096, 1))
    assert_size_stride(permute_656, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_657, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_81, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_658, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_659, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_666, (4096, 4096), (4096, 1))
    assert_size_stride(permute_670, (4096, 4096), (4096, 1))
    assert_size_stride(permute_674, (4096, 4096), (4096, 1))
    assert_size_stride(div_84, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_676, (4096, 16384), (16384, 1))
    assert_size_stride(permute_680, (16384, 4096), (4096, 1))
    assert_size_stride(permute_686, (4096, 4096), (4096, 1))
    assert_size_stride(permute_689, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_690, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_83, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_691, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_692, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_699, (4096, 4096), (4096, 1))
    assert_size_stride(permute_703, (4096, 4096), (4096, 1))
    assert_size_stride(permute_707, (4096, 4096), (4096, 1))
    assert_size_stride(div_86, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_709, (4096, 16384), (16384, 1))
    assert_size_stride(permute_713, (16384, 4096), (4096, 1))
    assert_size_stride(permute_719, (4096, 4096), (4096, 1))
    assert_size_stride(permute_722, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_723, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_85, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_724, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_725, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_732, (4096, 4096), (4096, 1))
    assert_size_stride(permute_736, (4096, 4096), (4096, 1))
    assert_size_stride(permute_740, (4096, 4096), (4096, 1))
    assert_size_stride(div_88, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_742, (4096, 16384), (16384, 1))
    assert_size_stride(permute_746, (16384, 4096), (4096, 1))
    assert_size_stride(permute_752, (4096, 4096), (4096, 1))
    assert_size_stride(permute_755, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_756, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_87, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_757, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_758, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_765, (4096, 4096), (4096, 1))
    assert_size_stride(permute_769, (4096, 4096), (4096, 1))
    assert_size_stride(permute_773, (4096, 4096), (4096, 1))
    assert_size_stride(div_90, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_775, (4096, 16384), (16384, 1))
    assert_size_stride(permute_779, (16384, 4096), (4096, 1))
    assert_size_stride(permute_785, (4096, 4096), (4096, 1))
    assert_size_stride(permute_788, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_789, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_89, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_790, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_791, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_798, (4096, 4096), (4096, 1))
    assert_size_stride(permute_802, (4096, 4096), (4096, 1))
    assert_size_stride(permute_806, (4096, 4096), (4096, 1))
    assert_size_stride(div_92, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_808, (4096, 16384), (16384, 1))
    assert_size_stride(permute_812, (16384, 4096), (4096, 1))
    assert_size_stride(permute_818, (4096, 4096), (4096, 1))
    assert_size_stride(permute_821, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_822, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_91, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_823, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_824, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_831, (4096, 4096), (4096, 1))
    assert_size_stride(permute_835, (4096, 4096), (4096, 1))
    assert_size_stride(permute_839, (4096, 4096), (4096, 1))
    assert_size_stride(div_94, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_841, (4096, 16384), (16384, 1))
    assert_size_stride(permute_845, (16384, 4096), (4096, 1))
    assert_size_stride(permute_851, (4096, 4096), (4096, 1))
    assert_size_stride(permute_854, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_855, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_93, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_856, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_857, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_864, (4096, 4096), (4096, 1))
    assert_size_stride(permute_868, (4096, 4096), (4096, 1))
    assert_size_stride(permute_872, (4096, 4096), (4096, 1))
    assert_size_stride(div_96, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_874, (4096, 16384), (16384, 1))
    assert_size_stride(permute_878, (16384, 4096), (4096, 1))
    assert_size_stride(permute_884, (4096, 4096), (4096, 1))
    assert_size_stride(permute_887, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_888, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_95, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_889, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_890, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_897, (4096, 4096), (4096, 1))
    assert_size_stride(permute_901, (4096, 4096), (4096, 1))
    assert_size_stride(permute_905, (4096, 4096), (4096, 1))
    assert_size_stride(div_98, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_907, (4096, 16384), (16384, 1))
    assert_size_stride(permute_911, (16384, 4096), (4096, 1))
    assert_size_stride(permute_917, (4096, 4096), (4096, 1))
    assert_size_stride(permute_920, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_921, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_97, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_922, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_923, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_930, (4096, 4096), (4096, 1))
    assert_size_stride(permute_934, (4096, 4096), (4096, 1))
    assert_size_stride(permute_938, (4096, 4096), (4096, 1))
    assert_size_stride(div_100, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_940, (4096, 16384), (16384, 1))
    assert_size_stride(permute_944, (16384, 4096), (4096, 1))
    assert_size_stride(permute_950, (4096, 4096), (4096, 1))
    assert_size_stride(permute_953, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_954, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_99, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_955, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_956, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_963, (4096, 4096), (4096, 1))
    assert_size_stride(permute_967, (4096, 4096), (4096, 1))
    assert_size_stride(permute_971, (4096, 4096), (4096, 1))
    assert_size_stride(div_102, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_973, (4096, 16384), (16384, 1))
    assert_size_stride(permute_977, (16384, 4096), (4096, 1))
    assert_size_stride(permute_983, (4096, 4096), (4096, 1))
    assert_size_stride(permute_986, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_987, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_101, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_988, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_989, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_996, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1000, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1004, (4096, 4096), (4096, 1))
    assert_size_stride(div_104, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_1006, (4096, 16384), (16384, 1))
    assert_size_stride(permute_1010, (16384, 4096), (4096, 1))
    assert_size_stride(permute_1016, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1019, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_1020, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_103, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_1021, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_1022, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_1029, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1033, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1037, (4096, 4096), (4096, 1))
    assert_size_stride(div_106, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_1039, (4096, 16384), (16384, 1))
    assert_size_stride(permute_1043, (16384, 4096), (4096, 1))
    assert_size_stride(permute_1049, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1052, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_1053, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_105, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_1054, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_1055, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_1062, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1066, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1070, (4096, 4096), (4096, 1))
    assert_size_stride(div_108, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_1072, (4096, 16384), (16384, 1))
    assert_size_stride(permute_1076, (16384, 4096), (4096, 1))
    assert_size_stride(permute_1082, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1085, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_1086, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_107, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_1087, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_1088, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_1095, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1099, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1103, (4096, 4096), (4096, 1))
    assert_size_stride(div_110, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_1105, (4096, 16384), (16384, 1))
    assert_size_stride(permute_1109, (16384, 4096), (4096, 1))
    assert_size_stride(permute_1115, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1118, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_1119, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_109, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_1120, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_1121, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_1128, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1132, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1136, (4096, 4096), (4096, 1))
    assert_size_stride(div_112, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_1138, (4096, 16384), (16384, 1))
    assert_size_stride(permute_1142, (16384, 4096), (4096, 1))
    assert_size_stride(permute_1148, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1151, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_1152, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_111, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_1153, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_1154, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_1161, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1165, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1169, (4096, 4096), (4096, 1))
    assert_size_stride(div_114, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_1171, (4096, 16384), (16384, 1))
    assert_size_stride(permute_1175, (16384, 4096), (4096, 1))
    assert_size_stride(permute_1181, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1184, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_1185, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_113, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_1186, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_1187, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_1194, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1198, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1202, (4096, 4096), (4096, 1))
    assert_size_stride(div_116, (1, 128, 1), (128, 1, 1))
    assert_size_stride(permute_1204, (4096, 16384), (16384, 1))
    assert_size_stride(permute_1208, (16384, 4096), (4096, 1))
    assert_size_stride(permute_1214, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1217, (16, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_1218, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(alias_115, (1, 16, 128, 128), (262144, 16384, 128, 1))
    assert_size_stride(permute_1219, (16, 256, 128), (256, 1, 4096))
    assert_size_stride(permute_1220, (16, 128, 256), (256, 4096, 1))
    assert_size_stride(permute_1227, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1231, (4096, 4096), (4096, 1))
    assert_size_stride(permute_1235, (4096, 4096), (4096, 1))
    assert_size_stride(tangents_1, (), ())
    assert_size_stride(tangents_2, (1, 128), (128, 1))
    assert_size_stride(tangents_3, (1, 128), (128, 1))
    buf0 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_nll_loss_backward_0(c_void_p(buf0.data_ptr()))
    aten.scatter_(buf0,1,where_32,-1.0)
    del where_32
    buf4 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_nll_loss_backward_1(c_void_p(buf4.data_ptr()))
    aten.scatter_(buf4,1,where_34,-1.0)
    del where_34
    buf3 = empty((1, 1), device='cpu', dtype=torch.float32)
    buf7 = empty((1, 1), device='cpu', dtype=torch.float32)
    buf8 = empty((1, 128, 2), device='cpu', dtype=torch.float32)
    cpp_fused__log_softmax_backward_data_cat_div_nll_loss_backward_nll_loss_forward_2(c_void_p(buf0.data_ptr()), c_void_p(ne_6.data_ptr()), c_void_p(tangents_1.data_ptr()), c_void_p(ne_3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(ne_8.data_ptr()), c_void_p(ne.data_ptr()), c_void_p(tangents_2.data_ptr()), c_void_p(sub_58.data_ptr()), c_void_p(tangents_3.data_ptr()), c_void_p(sub_60.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(buf8.data_ptr()))
    del buf3
    del buf7
    del ne
    del ne_3
    del ne_6
    del ne_8
    del sub_58
    del sub_60
    del tangents_1
    del tangents_2
    del tangents_3
    buf9 = empty((128, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf8, (128, 2), (2, 1), 0), permute_309, out=buf9)
    del permute_309
    buf10 = empty((2, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf8, (2, 128), (1, 2), 0), view_787, out=buf10)
    del view_787
    buf11 = empty((1, 2), device='cpu', dtype=torch.float32)
    buf12 = reinterpret_tensor(buf4, (1, 128, 1), (128, 1, 128), 0); del buf4  # reuse
    buf13 = reinterpret_tensor(buf0, (1, 128, 1), (128, 1, 128), 0); del buf0  # reuse
    buf14 = empty((1, 128, 4096), device='cpu', dtype=torch.float32)
    buf15 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf16 = empty((4096, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_backward_sum_3(c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(primals_282.data_ptr()), c_void_p(mul_280.data_ptr()), c_void_p(div_62.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(buf16.data_ptr()))
    del buf8
    del div_62
    del mul_280
    del primals_282
    buf17 = empty((128, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf14, (128, 4096), (4096, 1), 0), permute_313, out=buf17)
    del permute_313
    buf18 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf14, (4096, 128), (1, 4096), 0), view_784, out=buf18)
    del view_784
    buf19 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf20 = reinterpret_tensor(buf17, (1, 128, 16384), (2097152, 16384, 1), 0); del buf17  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_4(c_void_p(buf20.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(addmm_54.data_ptr()), c_void_p(tanh_27.data_ptr()), c_void_p(buf19.data_ptr()))
    del addmm_54
    del tanh_27
    buf21 = buf9; del buf9  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf20, (128, 16384), (16384, 1), 0), permute_317, out=buf21)
    del permute_317
    buf22 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf20, (16384, 128), (1, 16384), 0), view_758, out=buf22)
    buf23 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_5(c_void_p(buf20.data_ptr()), c_void_p(buf23.data_ptr()))
    buf24 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf14, (4096, 128), (1, 4096), 0), view_780, out=buf24)
    del view_780
    buf25 = empty((128, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf14, (128, 4096), (4096, 1), 0), permute_323, out=buf25)
    del permute_323
    buf26 = empty((16, 128, 256), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_326, reinterpret_tensor(buf25, (16, 128, 256), (256, 4096, 1), 0), out=buf26)
    del permute_326
    buf27 = empty((16, 128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf25, (16, 128, 256), (256, 4096, 1), 0), permute_327, out=buf27)
    del permute_327
    buf28 = empty_strided((1, 16, 128, 1), (2048, 128, 1, 2048), device='cpu', dtype=torch.float32)
    buf29 = reinterpret_tensor(buf27, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf27  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_6(c_void_p(buf29.data_ptr()), c_void_p(alias_61.data_ptr()), c_void_p(slice_1344.data_ptr()), c_void_p(primals_369.data_ptr()), c_void_p(buf28.data_ptr()))
    del alias_61
    del primals_369
    del slice_1344
    buf30 = reinterpret_tensor(buf25, (16, 256, 128), (32768, 128, 1), 0); del buf25  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_328, reinterpret_tensor(buf29, (16, 128, 128), (16384, 128, 1), 0), out=buf30)
    del permute_328
    buf31 = empty((16, 128, 256), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf29, (16, 128, 128), (16384, 128, 1), 0), permute_329, out=buf31)
    del permute_329
    buf32 = empty((128, 4096), device='cpu', dtype=torch.float32)
    cpp_fused_view_7(c_void_p(buf26.data_ptr()), c_void_p(buf32.data_ptr()))
    buf33 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf32, (4096, 128), (1, 4096), 0), view_758, out=buf33)
    buf34 = reinterpret_tensor(buf26, (128, 4096), (4096, 1), 0); del buf26  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf32, permute_336, out=buf34)
    del permute_336
    buf35 = reinterpret_tensor(buf32, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf32  # reuse
    buf38 = empty((1, 128, 16, 256), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_neg_slice_backward_8(c_void_p(buf30.data_ptr()), c_void_p(unsqueeze_354.data_ptr()), c_void_p(unsqueeze_356.data_ptr()), c_void_p(buf31.data_ptr()), c_void_p(buf35.data_ptr()), c_void_p(buf38.data_ptr()))
    del unsqueeze_354
    del unsqueeze_356
    buf36 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf35, (4096, 128), (1, 4096), 0), view_758, out=buf36)
    buf37 = reinterpret_tensor(buf31, (128, 4096), (4096, 1), 0); del buf31  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf35, (128, 4096), (4096, 1), 0), permute_340, out=buf37)
    del permute_340
    buf39 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf38, (4096, 128), (1, 4096), 0), view_758, out=buf39)
    del view_758
    buf40 = reinterpret_tensor(buf35, (128, 4096), (4096, 1), 0); del buf35  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf38, (128, 4096), (4096, 1), 0), permute_344, out=buf40)
    del permute_344
    buf41 = reinterpret_tensor(buf38, (1, 128, 4096), (524288, 4096, 1), 0); del buf38  # reuse
    buf42 = buf13; del buf13  # reuse
    buf43 = buf12; del buf12  # reuse
    buf44 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf45 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf46 = buf14; del buf14  # reuse
    cpp_fused_add_native_layer_norm_backward_9(c_void_p(buf46.data_ptr()), c_void_p(buf21.data_ptr()), c_void_p(buf34.data_ptr()), c_void_p(buf37.data_ptr()), c_void_p(buf40.data_ptr()), c_void_p(primals_272.data_ptr()), c_void_p(mul_270.data_ptr()), c_void_p(div_64.data_ptr()), c_void_p(buf41.data_ptr()), c_void_p(buf42.data_ptr()), c_void_p(buf43.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(buf45.data_ptr()))
    del div_64
    del mul_270
    del primals_272
    buf47 = reinterpret_tensor(buf20, (128, 16384), (16384, 1), 0); del buf20  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf46, (128, 4096), (4096, 1), 0), permute_346, out=buf47)
    del permute_346
    buf48 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf46, (4096, 128), (1, 4096), 0), view_756, out=buf48)
    del view_756
    buf49 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf50 = reinterpret_tensor(buf47, (1, 128, 16384), (2097152, 16384, 1), 0); del buf47  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_10(c_void_p(buf50.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(addmm_52.data_ptr()), c_void_p(tanh_26.data_ptr()), c_void_p(buf49.data_ptr()))
    del addmm_52
    del tanh_26
    buf51 = reinterpret_tensor(buf41, (128, 4096), (4096, 1), 0); del buf41  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf50, (128, 16384), (16384, 1), 0), permute_350, out=buf51)
    del permute_350
    buf52 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf50, (16384, 128), (1, 16384), 0), view_730, out=buf52)
    buf53 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_11(c_void_p(buf50.data_ptr()), c_void_p(buf53.data_ptr()))
    buf54 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf46, (4096, 128), (1, 4096), 0), view_752, out=buf54)
    del view_752
    buf55 = buf40; del buf40  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf46, (128, 4096), (4096, 1), 0), permute_356, out=buf55)
    del permute_356
    buf56 = reinterpret_tensor(buf37, (16, 128, 256), (32768, 256, 1), 0); del buf37  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_359, reinterpret_tensor(buf55, (16, 128, 256), (256, 4096, 1), 0), out=buf56)
    del permute_359
    buf57 = reinterpret_tensor(buf29, (16, 128, 128), (16384, 128, 1), 0); del buf29  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf55, (16, 128, 256), (256, 4096, 1), 0), permute_360, out=buf57)
    del permute_360
    buf58 = buf28; del buf28  # reuse
    buf59 = reinterpret_tensor(buf57, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf57  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_12(c_void_p(buf59.data_ptr()), c_void_p(alias_63.data_ptr()), c_void_p(slice_1296.data_ptr()), c_void_p(primals_366.data_ptr()), c_void_p(buf58.data_ptr()))
    del alias_63
    del primals_366
    del slice_1296
    buf60 = reinterpret_tensor(buf55, (16, 256, 128), (32768, 128, 1), 0); del buf55  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_361, reinterpret_tensor(buf59, (16, 128, 128), (16384, 128, 1), 0), out=buf60)
    del permute_361
    buf61 = reinterpret_tensor(buf34, (16, 128, 256), (32768, 256, 1), 0); del buf34  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf59, (16, 128, 128), (16384, 128, 1), 0), permute_362, out=buf61)
    del permute_362
    buf62 = buf21; del buf21  # reuse
    cpp_fused_view_13(c_void_p(buf56.data_ptr()), c_void_p(buf62.data_ptr()))
    buf63 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf62, (4096, 128), (1, 4096), 0), view_730, out=buf63)
    buf64 = reinterpret_tensor(buf56, (128, 4096), (4096, 1), 0); del buf56  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf62, permute_369, out=buf64)
    del permute_369
    buf65 = reinterpret_tensor(buf62, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf62  # reuse
    buf68 = reinterpret_tensor(buf30, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf30  # reuse
    cpp_fused_add_mul_neg_slice_backward_14(c_void_p(buf60.data_ptr()), c_void_p(unsqueeze_341.data_ptr()), c_void_p(unsqueeze_343.data_ptr()), c_void_p(buf61.data_ptr()), c_void_p(buf65.data_ptr()), c_void_p(buf68.data_ptr()))
    del unsqueeze_341
    del unsqueeze_343
    buf66 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf65, (4096, 128), (1, 4096), 0), view_730, out=buf66)
    buf67 = reinterpret_tensor(buf61, (128, 4096), (4096, 1), 0); del buf61  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf65, (128, 4096), (4096, 1), 0), permute_373, out=buf67)
    del permute_373
    buf69 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf68, (4096, 128), (1, 4096), 0), view_730, out=buf69)
    del view_730
    buf70 = reinterpret_tensor(buf65, (128, 4096), (4096, 1), 0); del buf65  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf68, (128, 4096), (4096, 1), 0), permute_377, out=buf70)
    del permute_377
    buf71 = reinterpret_tensor(buf68, (1, 128, 4096), (524288, 4096, 1), 0); del buf68  # reuse
    buf72 = buf43; del buf43  # reuse
    buf73 = buf42; del buf42  # reuse
    buf74 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf75 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf76 = buf46; del buf46  # reuse
    cpp_fused_add_native_layer_norm_backward_15(c_void_p(buf76.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(buf64.data_ptr()), c_void_p(buf67.data_ptr()), c_void_p(buf70.data_ptr()), c_void_p(primals_262.data_ptr()), c_void_p(mul_260.data_ptr()), c_void_p(div_66.data_ptr()), c_void_p(buf71.data_ptr()), c_void_p(buf72.data_ptr()), c_void_p(buf73.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(buf75.data_ptr()))
    del div_66
    del mul_260
    del primals_262
    buf77 = reinterpret_tensor(buf50, (128, 16384), (16384, 1), 0); del buf50  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf76, (128, 4096), (4096, 1), 0), permute_379, out=buf77)
    del permute_379
    buf78 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf76, (4096, 128), (1, 4096), 0), view_728, out=buf78)
    del view_728
    buf79 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf80 = reinterpret_tensor(buf77, (1, 128, 16384), (2097152, 16384, 1), 0); del buf77  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_16(c_void_p(buf80.data_ptr()), c_void_p(buf76.data_ptr()), c_void_p(addmm_50.data_ptr()), c_void_p(tanh_25.data_ptr()), c_void_p(buf79.data_ptr()))
    del addmm_50
    del tanh_25
    buf81 = reinterpret_tensor(buf71, (128, 4096), (4096, 1), 0); del buf71  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf80, (128, 16384), (16384, 1), 0), permute_383, out=buf81)
    del permute_383
    buf82 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf80, (16384, 128), (1, 16384), 0), view_702, out=buf82)
    buf83 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_17(c_void_p(buf80.data_ptr()), c_void_p(buf83.data_ptr()))
    buf84 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf76, (4096, 128), (1, 4096), 0), view_724, out=buf84)
    del view_724
    buf85 = buf70; del buf70  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf76, (128, 4096), (4096, 1), 0), permute_389, out=buf85)
    del permute_389
    buf86 = reinterpret_tensor(buf67, (16, 128, 256), (32768, 256, 1), 0); del buf67  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_392, reinterpret_tensor(buf85, (16, 128, 256), (256, 4096, 1), 0), out=buf86)
    del permute_392
    buf87 = reinterpret_tensor(buf59, (16, 128, 128), (16384, 128, 1), 0); del buf59  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf85, (16, 128, 256), (256, 4096, 1), 0), permute_393, out=buf87)
    del permute_393
    buf88 = buf58; del buf58  # reuse
    buf89 = reinterpret_tensor(buf87, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf87  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_18(c_void_p(buf89.data_ptr()), c_void_p(alias_65.data_ptr()), c_void_p(slice_1248.data_ptr()), c_void_p(primals_363.data_ptr()), c_void_p(buf88.data_ptr()))
    del alias_65
    del primals_363
    del slice_1248
    buf90 = reinterpret_tensor(buf85, (16, 256, 128), (32768, 128, 1), 0); del buf85  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_394, reinterpret_tensor(buf89, (16, 128, 128), (16384, 128, 1), 0), out=buf90)
    del permute_394
    buf91 = reinterpret_tensor(buf64, (16, 128, 256), (32768, 256, 1), 0); del buf64  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf89, (16, 128, 128), (16384, 128, 1), 0), permute_395, out=buf91)
    del permute_395
    buf92 = buf51; del buf51  # reuse
    cpp_fused_view_19(c_void_p(buf86.data_ptr()), c_void_p(buf92.data_ptr()))
    buf93 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf92, (4096, 128), (1, 4096), 0), view_702, out=buf93)
    buf94 = reinterpret_tensor(buf86, (128, 4096), (4096, 1), 0); del buf86  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf92, permute_402, out=buf94)
    del permute_402
    buf95 = reinterpret_tensor(buf92, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf92  # reuse
    buf98 = reinterpret_tensor(buf60, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf60  # reuse
    cpp_fused_add_mul_neg_slice_backward_20(c_void_p(buf90.data_ptr()), c_void_p(unsqueeze_328.data_ptr()), c_void_p(unsqueeze_330.data_ptr()), c_void_p(buf91.data_ptr()), c_void_p(buf95.data_ptr()), c_void_p(buf98.data_ptr()))
    del unsqueeze_328
    del unsqueeze_330
    buf96 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf95, (4096, 128), (1, 4096), 0), view_702, out=buf96)
    buf97 = reinterpret_tensor(buf91, (128, 4096), (4096, 1), 0); del buf91  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf95, (128, 4096), (4096, 1), 0), permute_406, out=buf97)
    del permute_406
    buf99 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf98, (4096, 128), (1, 4096), 0), view_702, out=buf99)
    del view_702
    buf100 = reinterpret_tensor(buf95, (128, 4096), (4096, 1), 0); del buf95  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf98, (128, 4096), (4096, 1), 0), permute_410, out=buf100)
    del permute_410
    buf101 = reinterpret_tensor(buf98, (1, 128, 4096), (524288, 4096, 1), 0); del buf98  # reuse
    buf102 = buf73; del buf73  # reuse
    buf103 = buf72; del buf72  # reuse
    buf104 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf105 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf106 = buf101; del buf101  # reuse
    cpp_fused_add_native_layer_norm_backward_21(c_void_p(buf106.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf94.data_ptr()), c_void_p(buf97.data_ptr()), c_void_p(buf100.data_ptr()), c_void_p(primals_252.data_ptr()), c_void_p(mul_250.data_ptr()), c_void_p(buf76.data_ptr()), c_void_p(div_68.data_ptr()), c_void_p(buf102.data_ptr()), c_void_p(buf103.data_ptr()), c_void_p(buf104.data_ptr()), c_void_p(buf105.data_ptr()))
    del div_68
    del mul_250
    del primals_252
    buf107 = reinterpret_tensor(buf80, (128, 16384), (16384, 1), 0); del buf80  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf106, (128, 4096), (4096, 1), 0), permute_412, out=buf107)
    del permute_412
    buf108 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf106, (4096, 128), (1, 4096), 0), view_700, out=buf108)
    del view_700
    buf109 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf110 = reinterpret_tensor(buf107, (1, 128, 16384), (2097152, 16384, 1), 0); del buf107  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_22(c_void_p(buf110.data_ptr()), c_void_p(buf106.data_ptr()), c_void_p(addmm_48.data_ptr()), c_void_p(tanh_24.data_ptr()), c_void_p(buf109.data_ptr()))
    del addmm_48
    del tanh_24
    buf111 = buf97; del buf97  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf110, (128, 16384), (16384, 1), 0), permute_416, out=buf111)
    del permute_416
    buf112 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf110, (16384, 128), (1, 16384), 0), view_674, out=buf112)
    buf113 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_23(c_void_p(buf110.data_ptr()), c_void_p(buf113.data_ptr()))
    buf114 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf106, (4096, 128), (1, 4096), 0), view_696, out=buf114)
    del view_696
    buf115 = buf94; del buf94  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf106, (128, 4096), (4096, 1), 0), permute_422, out=buf115)
    del permute_422
    buf116 = reinterpret_tensor(buf81, (16, 128, 256), (32768, 256, 1), 0); del buf81  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_425, reinterpret_tensor(buf115, (16, 128, 256), (256, 4096, 1), 0), out=buf116)
    del permute_425
    buf117 = reinterpret_tensor(buf89, (16, 128, 128), (16384, 128, 1), 0); del buf89  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf115, (16, 128, 256), (256, 4096, 1), 0), permute_426, out=buf117)
    del permute_426
    buf118 = buf88; del buf88  # reuse
    buf119 = reinterpret_tensor(buf117, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf117  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_24(c_void_p(buf119.data_ptr()), c_void_p(alias_67.data_ptr()), c_void_p(slice_1200.data_ptr()), c_void_p(primals_360.data_ptr()), c_void_p(buf118.data_ptr()))
    del alias_67
    del primals_360
    del slice_1200
    buf120 = reinterpret_tensor(buf115, (16, 256, 128), (32768, 128, 1), 0); del buf115  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_427, reinterpret_tensor(buf119, (16, 128, 128), (16384, 128, 1), 0), out=buf120)
    del permute_427
    buf121 = reinterpret_tensor(buf76, (16, 128, 256), (32768, 256, 1), 0); del buf76  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf119, (16, 128, 128), (16384, 128, 1), 0), permute_428, out=buf121)
    del permute_428
    buf122 = buf100; del buf100  # reuse
    cpp_fused_view_25(c_void_p(buf116.data_ptr()), c_void_p(buf122.data_ptr()))
    buf123 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf122, (4096, 128), (1, 4096), 0), view_674, out=buf123)
    buf124 = reinterpret_tensor(buf116, (128, 4096), (4096, 1), 0); del buf116  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf122, permute_435, out=buf124)
    del permute_435
    buf125 = reinterpret_tensor(buf122, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf122  # reuse
    buf128 = reinterpret_tensor(buf90, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf90  # reuse
    cpp_fused_add_mul_neg_slice_backward_26(c_void_p(buf120.data_ptr()), c_void_p(unsqueeze_315.data_ptr()), c_void_p(unsqueeze_317.data_ptr()), c_void_p(buf121.data_ptr()), c_void_p(buf125.data_ptr()), c_void_p(buf128.data_ptr()))
    del unsqueeze_315
    del unsqueeze_317
    buf126 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf125, (4096, 128), (1, 4096), 0), view_674, out=buf126)
    buf127 = reinterpret_tensor(buf121, (128, 4096), (4096, 1), 0); del buf121  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf125, (128, 4096), (4096, 1), 0), permute_439, out=buf127)
    del permute_439
    buf129 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf128, (4096, 128), (1, 4096), 0), view_674, out=buf129)
    del view_674
    buf130 = reinterpret_tensor(buf125, (128, 4096), (4096, 1), 0); del buf125  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf128, (128, 4096), (4096, 1), 0), permute_443, out=buf130)
    del permute_443
    buf131 = reinterpret_tensor(buf128, (1, 128, 4096), (524288, 4096, 1), 0); del buf128  # reuse
    buf132 = buf103; del buf103  # reuse
    buf133 = buf102; del buf102  # reuse
    buf134 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf135 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf136 = buf106; del buf106  # reuse
    cpp_fused_add_native_layer_norm_backward_27(c_void_p(buf136.data_ptr()), c_void_p(buf111.data_ptr()), c_void_p(buf124.data_ptr()), c_void_p(buf127.data_ptr()), c_void_p(buf130.data_ptr()), c_void_p(primals_242.data_ptr()), c_void_p(mul_240.data_ptr()), c_void_p(div_70.data_ptr()), c_void_p(buf131.data_ptr()), c_void_p(buf132.data_ptr()), c_void_p(buf133.data_ptr()), c_void_p(buf134.data_ptr()), c_void_p(buf135.data_ptr()))
    del div_70
    del mul_240
    del primals_242
    buf137 = reinterpret_tensor(buf110, (128, 16384), (16384, 1), 0); del buf110  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf136, (128, 4096), (4096, 1), 0), permute_445, out=buf137)
    del permute_445
    buf138 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf136, (4096, 128), (1, 4096), 0), view_672, out=buf138)
    del view_672
    buf139 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf140 = reinterpret_tensor(buf137, (1, 128, 16384), (2097152, 16384, 1), 0); del buf137  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_28(c_void_p(buf140.data_ptr()), c_void_p(buf136.data_ptr()), c_void_p(addmm_46.data_ptr()), c_void_p(tanh_23.data_ptr()), c_void_p(buf139.data_ptr()))
    del addmm_46
    del tanh_23
    buf141 = reinterpret_tensor(buf131, (128, 4096), (4096, 1), 0); del buf131  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf140, (128, 16384), (16384, 1), 0), permute_449, out=buf141)
    del permute_449
    buf142 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf140, (16384, 128), (1, 16384), 0), view_646, out=buf142)
    buf143 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_29(c_void_p(buf140.data_ptr()), c_void_p(buf143.data_ptr()))
    buf144 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf136, (4096, 128), (1, 4096), 0), view_668, out=buf144)
    del view_668
    buf145 = buf130; del buf130  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf136, (128, 4096), (4096, 1), 0), permute_455, out=buf145)
    del permute_455
    buf146 = reinterpret_tensor(buf127, (16, 128, 256), (32768, 256, 1), 0); del buf127  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_458, reinterpret_tensor(buf145, (16, 128, 256), (256, 4096, 1), 0), out=buf146)
    del permute_458
    buf147 = reinterpret_tensor(buf119, (16, 128, 128), (16384, 128, 1), 0); del buf119  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf145, (16, 128, 256), (256, 4096, 1), 0), permute_459, out=buf147)
    del permute_459
    buf148 = buf118; del buf118  # reuse
    buf149 = reinterpret_tensor(buf147, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf147  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_30(c_void_p(buf149.data_ptr()), c_void_p(alias_69.data_ptr()), c_void_p(slice_1152.data_ptr()), c_void_p(primals_357.data_ptr()), c_void_p(buf148.data_ptr()))
    del alias_69
    del primals_357
    del slice_1152
    buf150 = reinterpret_tensor(buf145, (16, 256, 128), (32768, 128, 1), 0); del buf145  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_460, reinterpret_tensor(buf149, (16, 128, 128), (16384, 128, 1), 0), out=buf150)
    del permute_460
    buf151 = reinterpret_tensor(buf124, (16, 128, 256), (32768, 256, 1), 0); del buf124  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf149, (16, 128, 128), (16384, 128, 1), 0), permute_461, out=buf151)
    del permute_461
    buf152 = buf111; del buf111  # reuse
    cpp_fused_view_31(c_void_p(buf146.data_ptr()), c_void_p(buf152.data_ptr()))
    buf153 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf152, (4096, 128), (1, 4096), 0), view_646, out=buf153)
    buf154 = reinterpret_tensor(buf146, (128, 4096), (4096, 1), 0); del buf146  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf152, permute_468, out=buf154)
    del permute_468
    buf155 = reinterpret_tensor(buf152, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf152  # reuse
    buf158 = reinterpret_tensor(buf120, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf120  # reuse
    cpp_fused_add_mul_neg_slice_backward_32(c_void_p(buf150.data_ptr()), c_void_p(unsqueeze_302.data_ptr()), c_void_p(unsqueeze_304.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(buf155.data_ptr()), c_void_p(buf158.data_ptr()))
    del unsqueeze_302
    del unsqueeze_304
    buf156 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf155, (4096, 128), (1, 4096), 0), view_646, out=buf156)
    buf157 = reinterpret_tensor(buf151, (128, 4096), (4096, 1), 0); del buf151  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf155, (128, 4096), (4096, 1), 0), permute_472, out=buf157)
    del permute_472
    buf159 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf158, (4096, 128), (1, 4096), 0), view_646, out=buf159)
    del view_646
    buf160 = reinterpret_tensor(buf155, (128, 4096), (4096, 1), 0); del buf155  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf158, (128, 4096), (4096, 1), 0), permute_476, out=buf160)
    del permute_476
    buf161 = reinterpret_tensor(buf158, (1, 128, 4096), (524288, 4096, 1), 0); del buf158  # reuse
    buf162 = buf133; del buf133  # reuse
    buf163 = buf132; del buf132  # reuse
    buf164 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf165 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf166 = buf136; del buf136  # reuse
    cpp_fused_add_native_layer_norm_backward_33(c_void_p(buf166.data_ptr()), c_void_p(buf141.data_ptr()), c_void_p(buf154.data_ptr()), c_void_p(buf157.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(primals_232.data_ptr()), c_void_p(mul_230.data_ptr()), c_void_p(div_72.data_ptr()), c_void_p(buf161.data_ptr()), c_void_p(buf162.data_ptr()), c_void_p(buf163.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(buf165.data_ptr()))
    del div_72
    del mul_230
    del primals_232
    buf167 = reinterpret_tensor(buf140, (128, 16384), (16384, 1), 0); del buf140  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf166, (128, 4096), (4096, 1), 0), permute_478, out=buf167)
    del permute_478
    buf168 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf166, (4096, 128), (1, 4096), 0), view_644, out=buf168)
    del view_644
    buf169 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf170 = reinterpret_tensor(buf167, (1, 128, 16384), (2097152, 16384, 1), 0); del buf167  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_34(c_void_p(buf170.data_ptr()), c_void_p(buf166.data_ptr()), c_void_p(addmm_44.data_ptr()), c_void_p(tanh_22.data_ptr()), c_void_p(buf169.data_ptr()))
    del addmm_44
    del tanh_22
    buf171 = reinterpret_tensor(buf161, (128, 4096), (4096, 1), 0); del buf161  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf170, (128, 16384), (16384, 1), 0), permute_482, out=buf171)
    del permute_482
    buf172 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf170, (16384, 128), (1, 16384), 0), view_618, out=buf172)
    buf173 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_35(c_void_p(buf170.data_ptr()), c_void_p(buf173.data_ptr()))
    buf174 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf166, (4096, 128), (1, 4096), 0), view_640, out=buf174)
    del view_640
    buf175 = buf160; del buf160  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf166, (128, 4096), (4096, 1), 0), permute_488, out=buf175)
    del permute_488
    buf176 = reinterpret_tensor(buf157, (16, 128, 256), (32768, 256, 1), 0); del buf157  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_491, reinterpret_tensor(buf175, (16, 128, 256), (256, 4096, 1), 0), out=buf176)
    del permute_491
    buf177 = reinterpret_tensor(buf149, (16, 128, 128), (16384, 128, 1), 0); del buf149  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf175, (16, 128, 256), (256, 4096, 1), 0), permute_492, out=buf177)
    del permute_492
    buf178 = buf148; del buf148  # reuse
    buf179 = reinterpret_tensor(buf177, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf177  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_36(c_void_p(buf179.data_ptr()), c_void_p(alias_71.data_ptr()), c_void_p(slice_1104.data_ptr()), c_void_p(primals_354.data_ptr()), c_void_p(buf178.data_ptr()))
    del alias_71
    del primals_354
    del slice_1104
    buf180 = reinterpret_tensor(buf175, (16, 256, 128), (32768, 128, 1), 0); del buf175  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_493, reinterpret_tensor(buf179, (16, 128, 128), (16384, 128, 1), 0), out=buf180)
    del permute_493
    buf181 = reinterpret_tensor(buf154, (16, 128, 256), (32768, 256, 1), 0); del buf154  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf179, (16, 128, 128), (16384, 128, 1), 0), permute_494, out=buf181)
    del permute_494
    buf182 = buf141; del buf141  # reuse
    cpp_fused_view_37(c_void_p(buf176.data_ptr()), c_void_p(buf182.data_ptr()))
    buf183 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf182, (4096, 128), (1, 4096), 0), view_618, out=buf183)
    buf184 = reinterpret_tensor(buf176, (128, 4096), (4096, 1), 0); del buf176  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf182, permute_501, out=buf184)
    del permute_501
    buf185 = reinterpret_tensor(buf182, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf182  # reuse
    buf188 = reinterpret_tensor(buf150, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf150  # reuse
    cpp_fused_add_mul_neg_slice_backward_38(c_void_p(buf180.data_ptr()), c_void_p(unsqueeze_289.data_ptr()), c_void_p(unsqueeze_291.data_ptr()), c_void_p(buf181.data_ptr()), c_void_p(buf185.data_ptr()), c_void_p(buf188.data_ptr()))
    del unsqueeze_289
    del unsqueeze_291
    buf186 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf185, (4096, 128), (1, 4096), 0), view_618, out=buf186)
    buf187 = reinterpret_tensor(buf181, (128, 4096), (4096, 1), 0); del buf181  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf185, (128, 4096), (4096, 1), 0), permute_505, out=buf187)
    del permute_505
    buf189 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf188, (4096, 128), (1, 4096), 0), view_618, out=buf189)
    del view_618
    buf190 = reinterpret_tensor(buf185, (128, 4096), (4096, 1), 0); del buf185  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf188, (128, 4096), (4096, 1), 0), permute_509, out=buf190)
    del permute_509
    buf191 = reinterpret_tensor(buf188, (1, 128, 4096), (524288, 4096, 1), 0); del buf188  # reuse
    buf192 = buf163; del buf163  # reuse
    buf193 = buf162; del buf162  # reuse
    buf194 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf195 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf196 = buf166; del buf166  # reuse
    cpp_fused_add_native_layer_norm_backward_39(c_void_p(buf196.data_ptr()), c_void_p(buf171.data_ptr()), c_void_p(buf184.data_ptr()), c_void_p(buf187.data_ptr()), c_void_p(buf190.data_ptr()), c_void_p(primals_222.data_ptr()), c_void_p(mul_220.data_ptr()), c_void_p(div_74.data_ptr()), c_void_p(buf191.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(buf193.data_ptr()), c_void_p(buf194.data_ptr()), c_void_p(buf195.data_ptr()))
    del div_74
    del mul_220
    del primals_222
    buf197 = reinterpret_tensor(buf170, (128, 16384), (16384, 1), 0); del buf170  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf196, (128, 4096), (4096, 1), 0), permute_511, out=buf197)
    del permute_511
    buf198 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf196, (4096, 128), (1, 4096), 0), view_616, out=buf198)
    del view_616
    buf199 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf200 = reinterpret_tensor(buf197, (1, 128, 16384), (2097152, 16384, 1), 0); del buf197  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_40(c_void_p(buf200.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(addmm_42.data_ptr()), c_void_p(tanh_21.data_ptr()), c_void_p(buf199.data_ptr()))
    del addmm_42
    del tanh_21
    buf201 = reinterpret_tensor(buf191, (128, 4096), (4096, 1), 0); del buf191  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf200, (128, 16384), (16384, 1), 0), permute_515, out=buf201)
    del permute_515
    buf202 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf200, (16384, 128), (1, 16384), 0), view_590, out=buf202)
    buf203 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_41(c_void_p(buf200.data_ptr()), c_void_p(buf203.data_ptr()))
    buf204 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf196, (4096, 128), (1, 4096), 0), view_612, out=buf204)
    del view_612
    buf205 = buf190; del buf190  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf196, (128, 4096), (4096, 1), 0), permute_521, out=buf205)
    del permute_521
    buf206 = reinterpret_tensor(buf187, (16, 128, 256), (32768, 256, 1), 0); del buf187  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_524, reinterpret_tensor(buf205, (16, 128, 256), (256, 4096, 1), 0), out=buf206)
    del permute_524
    buf207 = reinterpret_tensor(buf179, (16, 128, 128), (16384, 128, 1), 0); del buf179  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf205, (16, 128, 256), (256, 4096, 1), 0), permute_525, out=buf207)
    del permute_525
    buf208 = buf178; del buf178  # reuse
    buf209 = reinterpret_tensor(buf207, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf207  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_42(c_void_p(buf209.data_ptr()), c_void_p(alias_73.data_ptr()), c_void_p(slice_1056.data_ptr()), c_void_p(primals_351.data_ptr()), c_void_p(buf208.data_ptr()))
    del alias_73
    del primals_351
    del slice_1056
    buf210 = reinterpret_tensor(buf205, (16, 256, 128), (32768, 128, 1), 0); del buf205  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_526, reinterpret_tensor(buf209, (16, 128, 128), (16384, 128, 1), 0), out=buf210)
    del permute_526
    buf211 = reinterpret_tensor(buf184, (16, 128, 256), (32768, 256, 1), 0); del buf184  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf209, (16, 128, 128), (16384, 128, 1), 0), permute_527, out=buf211)
    del permute_527
    buf212 = buf171; del buf171  # reuse
    cpp_fused_view_43(c_void_p(buf206.data_ptr()), c_void_p(buf212.data_ptr()))
    buf213 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf212, (4096, 128), (1, 4096), 0), view_590, out=buf213)
    buf214 = reinterpret_tensor(buf206, (128, 4096), (4096, 1), 0); del buf206  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf212, permute_534, out=buf214)
    del permute_534
    buf215 = reinterpret_tensor(buf212, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf212  # reuse
    buf218 = reinterpret_tensor(buf180, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf180  # reuse
    cpp_fused_add_mul_neg_slice_backward_44(c_void_p(buf210.data_ptr()), c_void_p(unsqueeze_276.data_ptr()), c_void_p(unsqueeze_278.data_ptr()), c_void_p(buf211.data_ptr()), c_void_p(buf215.data_ptr()), c_void_p(buf218.data_ptr()))
    del unsqueeze_276
    del unsqueeze_278
    buf216 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf215, (4096, 128), (1, 4096), 0), view_590, out=buf216)
    buf217 = reinterpret_tensor(buf211, (128, 4096), (4096, 1), 0); del buf211  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf215, (128, 4096), (4096, 1), 0), permute_538, out=buf217)
    del permute_538
    buf219 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf218, (4096, 128), (1, 4096), 0), view_590, out=buf219)
    del view_590
    buf220 = reinterpret_tensor(buf215, (128, 4096), (4096, 1), 0); del buf215  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf218, (128, 4096), (4096, 1), 0), permute_542, out=buf220)
    del permute_542
    buf221 = reinterpret_tensor(buf218, (1, 128, 4096), (524288, 4096, 1), 0); del buf218  # reuse
    buf222 = buf193; del buf193  # reuse
    buf223 = buf192; del buf192  # reuse
    buf224 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf225 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf226 = buf196; del buf196  # reuse
    cpp_fused_add_native_layer_norm_backward_45(c_void_p(buf226.data_ptr()), c_void_p(buf201.data_ptr()), c_void_p(buf214.data_ptr()), c_void_p(buf217.data_ptr()), c_void_p(buf220.data_ptr()), c_void_p(primals_212.data_ptr()), c_void_p(mul_210.data_ptr()), c_void_p(div_76.data_ptr()), c_void_p(buf221.data_ptr()), c_void_p(buf222.data_ptr()), c_void_p(buf223.data_ptr()), c_void_p(buf224.data_ptr()), c_void_p(buf225.data_ptr()))
    del div_76
    del mul_210
    del primals_212
    buf227 = reinterpret_tensor(buf200, (128, 16384), (16384, 1), 0); del buf200  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf226, (128, 4096), (4096, 1), 0), permute_544, out=buf227)
    del permute_544
    buf228 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf226, (4096, 128), (1, 4096), 0), view_588, out=buf228)
    del view_588
    buf229 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf230 = reinterpret_tensor(buf227, (1, 128, 16384), (2097152, 16384, 1), 0); del buf227  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_46(c_void_p(buf230.data_ptr()), c_void_p(buf226.data_ptr()), c_void_p(addmm_40.data_ptr()), c_void_p(tanh_20.data_ptr()), c_void_p(buf229.data_ptr()))
    del addmm_40
    del tanh_20
    buf231 = reinterpret_tensor(buf221, (128, 4096), (4096, 1), 0); del buf221  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf230, (128, 16384), (16384, 1), 0), permute_548, out=buf231)
    del permute_548
    buf232 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf230, (16384, 128), (1, 16384), 0), view_562, out=buf232)
    buf233 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_47(c_void_p(buf230.data_ptr()), c_void_p(buf233.data_ptr()))
    buf234 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf226, (4096, 128), (1, 4096), 0), view_584, out=buf234)
    del view_584
    buf235 = buf220; del buf220  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf226, (128, 4096), (4096, 1), 0), permute_554, out=buf235)
    del permute_554
    buf236 = reinterpret_tensor(buf217, (16, 128, 256), (32768, 256, 1), 0); del buf217  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_557, reinterpret_tensor(buf235, (16, 128, 256), (256, 4096, 1), 0), out=buf236)
    del permute_557
    buf237 = reinterpret_tensor(buf209, (16, 128, 128), (16384, 128, 1), 0); del buf209  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf235, (16, 128, 256), (256, 4096, 1), 0), permute_558, out=buf237)
    del permute_558
    buf238 = buf208; del buf208  # reuse
    buf239 = reinterpret_tensor(buf237, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf237  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_48(c_void_p(buf239.data_ptr()), c_void_p(alias_75.data_ptr()), c_void_p(slice_1008.data_ptr()), c_void_p(primals_348.data_ptr()), c_void_p(buf238.data_ptr()))
    del alias_75
    del primals_348
    del slice_1008
    buf240 = reinterpret_tensor(buf235, (16, 256, 128), (32768, 128, 1), 0); del buf235  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_559, reinterpret_tensor(buf239, (16, 128, 128), (16384, 128, 1), 0), out=buf240)
    del permute_559
    buf241 = reinterpret_tensor(buf214, (16, 128, 256), (32768, 256, 1), 0); del buf214  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf239, (16, 128, 128), (16384, 128, 1), 0), permute_560, out=buf241)
    del permute_560
    buf242 = buf201; del buf201  # reuse
    cpp_fused_view_49(c_void_p(buf236.data_ptr()), c_void_p(buf242.data_ptr()))
    buf243 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf242, (4096, 128), (1, 4096), 0), view_562, out=buf243)
    buf244 = reinterpret_tensor(buf236, (128, 4096), (4096, 1), 0); del buf236  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf242, permute_567, out=buf244)
    del permute_567
    buf245 = reinterpret_tensor(buf242, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf242  # reuse
    buf248 = reinterpret_tensor(buf210, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf210  # reuse
    cpp_fused_add_mul_neg_slice_backward_50(c_void_p(buf240.data_ptr()), c_void_p(unsqueeze_263.data_ptr()), c_void_p(unsqueeze_265.data_ptr()), c_void_p(buf241.data_ptr()), c_void_p(buf245.data_ptr()), c_void_p(buf248.data_ptr()))
    del unsqueeze_263
    del unsqueeze_265
    buf246 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf245, (4096, 128), (1, 4096), 0), view_562, out=buf246)
    buf247 = reinterpret_tensor(buf241, (128, 4096), (4096, 1), 0); del buf241  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf245, (128, 4096), (4096, 1), 0), permute_571, out=buf247)
    del permute_571
    buf249 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf248, (4096, 128), (1, 4096), 0), view_562, out=buf249)
    del view_562
    buf250 = reinterpret_tensor(buf245, (128, 4096), (4096, 1), 0); del buf245  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf248, (128, 4096), (4096, 1), 0), permute_575, out=buf250)
    del permute_575
    buf251 = reinterpret_tensor(buf248, (1, 128, 4096), (524288, 4096, 1), 0); del buf248  # reuse
    buf252 = buf223; del buf223  # reuse
    buf253 = buf222; del buf222  # reuse
    buf254 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf255 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf256 = buf226; del buf226  # reuse
    cpp_fused_add_native_layer_norm_backward_51(c_void_p(buf256.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(buf244.data_ptr()), c_void_p(buf247.data_ptr()), c_void_p(buf250.data_ptr()), c_void_p(primals_202.data_ptr()), c_void_p(mul_200.data_ptr()), c_void_p(div_78.data_ptr()), c_void_p(buf251.data_ptr()), c_void_p(buf252.data_ptr()), c_void_p(buf253.data_ptr()), c_void_p(buf254.data_ptr()), c_void_p(buf255.data_ptr()))
    del div_78
    del mul_200
    del primals_202
    buf257 = reinterpret_tensor(buf230, (128, 16384), (16384, 1), 0); del buf230  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf256, (128, 4096), (4096, 1), 0), permute_577, out=buf257)
    del permute_577
    buf258 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf256, (4096, 128), (1, 4096), 0), view_560, out=buf258)
    del view_560
    buf259 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf260 = reinterpret_tensor(buf257, (1, 128, 16384), (2097152, 16384, 1), 0); del buf257  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_52(c_void_p(buf260.data_ptr()), c_void_p(buf256.data_ptr()), c_void_p(addmm_38.data_ptr()), c_void_p(tanh_19.data_ptr()), c_void_p(buf259.data_ptr()))
    del addmm_38
    del tanh_19
    buf261 = reinterpret_tensor(buf251, (128, 4096), (4096, 1), 0); del buf251  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf260, (128, 16384), (16384, 1), 0), permute_581, out=buf261)
    del permute_581
    buf262 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf260, (16384, 128), (1, 16384), 0), view_534, out=buf262)
    buf263 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_53(c_void_p(buf260.data_ptr()), c_void_p(buf263.data_ptr()))
    buf264 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf256, (4096, 128), (1, 4096), 0), view_556, out=buf264)
    del view_556
    buf265 = buf250; del buf250  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf256, (128, 4096), (4096, 1), 0), permute_587, out=buf265)
    del permute_587
    buf266 = reinterpret_tensor(buf247, (16, 128, 256), (32768, 256, 1), 0); del buf247  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_590, reinterpret_tensor(buf265, (16, 128, 256), (256, 4096, 1), 0), out=buf266)
    del permute_590
    buf267 = reinterpret_tensor(buf239, (16, 128, 128), (16384, 128, 1), 0); del buf239  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf265, (16, 128, 256), (256, 4096, 1), 0), permute_591, out=buf267)
    del permute_591
    buf268 = buf238; del buf238  # reuse
    buf269 = reinterpret_tensor(buf267, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf267  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_54(c_void_p(buf269.data_ptr()), c_void_p(alias_77.data_ptr()), c_void_p(slice_960.data_ptr()), c_void_p(primals_345.data_ptr()), c_void_p(buf268.data_ptr()))
    del alias_77
    del primals_345
    del slice_960
    buf270 = reinterpret_tensor(buf265, (16, 256, 128), (32768, 128, 1), 0); del buf265  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_592, reinterpret_tensor(buf269, (16, 128, 128), (16384, 128, 1), 0), out=buf270)
    del permute_592
    buf271 = reinterpret_tensor(buf244, (16, 128, 256), (32768, 256, 1), 0); del buf244  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf269, (16, 128, 128), (16384, 128, 1), 0), permute_593, out=buf271)
    del permute_593
    buf272 = buf231; del buf231  # reuse
    cpp_fused_view_55(c_void_p(buf266.data_ptr()), c_void_p(buf272.data_ptr()))
    buf273 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf272, (4096, 128), (1, 4096), 0), view_534, out=buf273)
    buf274 = reinterpret_tensor(buf266, (128, 4096), (4096, 1), 0); del buf266  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf272, permute_600, out=buf274)
    del permute_600
    buf275 = reinterpret_tensor(buf272, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf272  # reuse
    buf278 = reinterpret_tensor(buf240, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf240  # reuse
    cpp_fused_add_mul_neg_slice_backward_56(c_void_p(buf270.data_ptr()), c_void_p(unsqueeze_250.data_ptr()), c_void_p(unsqueeze_252.data_ptr()), c_void_p(buf271.data_ptr()), c_void_p(buf275.data_ptr()), c_void_p(buf278.data_ptr()))
    del unsqueeze_250
    del unsqueeze_252
    buf276 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf275, (4096, 128), (1, 4096), 0), view_534, out=buf276)
    buf277 = reinterpret_tensor(buf271, (128, 4096), (4096, 1), 0); del buf271  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf275, (128, 4096), (4096, 1), 0), permute_604, out=buf277)
    del permute_604
    buf279 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf278, (4096, 128), (1, 4096), 0), view_534, out=buf279)
    del view_534
    buf280 = reinterpret_tensor(buf275, (128, 4096), (4096, 1), 0); del buf275  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf278, (128, 4096), (4096, 1), 0), permute_608, out=buf280)
    del permute_608
    buf281 = reinterpret_tensor(buf278, (1, 128, 4096), (524288, 4096, 1), 0); del buf278  # reuse
    buf282 = buf253; del buf253  # reuse
    buf283 = buf252; del buf252  # reuse
    buf284 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf285 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf286 = buf256; del buf256  # reuse
    cpp_fused_add_native_layer_norm_backward_57(c_void_p(buf286.data_ptr()), c_void_p(buf261.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(buf277.data_ptr()), c_void_p(buf280.data_ptr()), c_void_p(primals_192.data_ptr()), c_void_p(mul_190.data_ptr()), c_void_p(div_80.data_ptr()), c_void_p(buf281.data_ptr()), c_void_p(buf282.data_ptr()), c_void_p(buf283.data_ptr()), c_void_p(buf284.data_ptr()), c_void_p(buf285.data_ptr()))
    del div_80
    del mul_190
    del primals_192
    buf287 = reinterpret_tensor(buf260, (128, 16384), (16384, 1), 0); del buf260  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf286, (128, 4096), (4096, 1), 0), permute_610, out=buf287)
    del permute_610
    buf288 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf286, (4096, 128), (1, 4096), 0), view_532, out=buf288)
    del view_532
    buf289 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf290 = reinterpret_tensor(buf287, (1, 128, 16384), (2097152, 16384, 1), 0); del buf287  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_58(c_void_p(buf290.data_ptr()), c_void_p(buf286.data_ptr()), c_void_p(addmm_36.data_ptr()), c_void_p(tanh_18.data_ptr()), c_void_p(buf289.data_ptr()))
    del addmm_36
    del tanh_18
    buf291 = reinterpret_tensor(buf281, (128, 4096), (4096, 1), 0); del buf281  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf290, (128, 16384), (16384, 1), 0), permute_614, out=buf291)
    del permute_614
    buf292 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf290, (16384, 128), (1, 16384), 0), view_506, out=buf292)
    buf293 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_59(c_void_p(buf290.data_ptr()), c_void_p(buf293.data_ptr()))
    buf294 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf286, (4096, 128), (1, 4096), 0), view_528, out=buf294)
    del view_528
    buf295 = buf280; del buf280  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf286, (128, 4096), (4096, 1), 0), permute_620, out=buf295)
    del permute_620
    buf296 = reinterpret_tensor(buf277, (16, 128, 256), (32768, 256, 1), 0); del buf277  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_623, reinterpret_tensor(buf295, (16, 128, 256), (256, 4096, 1), 0), out=buf296)
    del permute_623
    buf297 = reinterpret_tensor(buf269, (16, 128, 128), (16384, 128, 1), 0); del buf269  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf295, (16, 128, 256), (256, 4096, 1), 0), permute_624, out=buf297)
    del permute_624
    buf298 = buf268; del buf268  # reuse
    buf299 = reinterpret_tensor(buf297, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf297  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_60(c_void_p(buf299.data_ptr()), c_void_p(alias_79.data_ptr()), c_void_p(slice_912.data_ptr()), c_void_p(primals_342.data_ptr()), c_void_p(buf298.data_ptr()))
    del alias_79
    del primals_342
    del slice_912
    buf300 = reinterpret_tensor(buf295, (16, 256, 128), (32768, 128, 1), 0); del buf295  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_625, reinterpret_tensor(buf299, (16, 128, 128), (16384, 128, 1), 0), out=buf300)
    del permute_625
    buf301 = reinterpret_tensor(buf274, (16, 128, 256), (32768, 256, 1), 0); del buf274  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf299, (16, 128, 128), (16384, 128, 1), 0), permute_626, out=buf301)
    del permute_626
    buf302 = buf261; del buf261  # reuse
    cpp_fused_view_61(c_void_p(buf296.data_ptr()), c_void_p(buf302.data_ptr()))
    buf303 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf302, (4096, 128), (1, 4096), 0), view_506, out=buf303)
    buf304 = reinterpret_tensor(buf296, (128, 4096), (4096, 1), 0); del buf296  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf302, permute_633, out=buf304)
    del permute_633
    buf305 = reinterpret_tensor(buf302, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf302  # reuse
    buf308 = reinterpret_tensor(buf270, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf270  # reuse
    cpp_fused_add_mul_neg_slice_backward_62(c_void_p(buf300.data_ptr()), c_void_p(unsqueeze_237.data_ptr()), c_void_p(unsqueeze_239.data_ptr()), c_void_p(buf301.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf308.data_ptr()))
    del unsqueeze_237
    del unsqueeze_239
    buf306 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf305, (4096, 128), (1, 4096), 0), view_506, out=buf306)
    buf307 = reinterpret_tensor(buf301, (128, 4096), (4096, 1), 0); del buf301  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf305, (128, 4096), (4096, 1), 0), permute_637, out=buf307)
    del permute_637
    buf309 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf308, (4096, 128), (1, 4096), 0), view_506, out=buf309)
    del view_506
    buf310 = reinterpret_tensor(buf305, (128, 4096), (4096, 1), 0); del buf305  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf308, (128, 4096), (4096, 1), 0), permute_641, out=buf310)
    del permute_641
    buf311 = reinterpret_tensor(buf308, (1, 128, 4096), (524288, 4096, 1), 0); del buf308  # reuse
    buf312 = buf283; del buf283  # reuse
    buf313 = buf282; del buf282  # reuse
    buf314 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf315 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf316 = buf286; del buf286  # reuse
    cpp_fused_add_native_layer_norm_backward_63(c_void_p(buf316.data_ptr()), c_void_p(buf291.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf307.data_ptr()), c_void_p(buf310.data_ptr()), c_void_p(primals_182.data_ptr()), c_void_p(mul_180.data_ptr()), c_void_p(div_82.data_ptr()), c_void_p(buf311.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(buf313.data_ptr()), c_void_p(buf314.data_ptr()), c_void_p(buf315.data_ptr()))
    del div_82
    del mul_180
    del primals_182
    buf317 = reinterpret_tensor(buf290, (128, 16384), (16384, 1), 0); del buf290  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf316, (128, 4096), (4096, 1), 0), permute_643, out=buf317)
    del permute_643
    buf318 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf316, (4096, 128), (1, 4096), 0), view_504, out=buf318)
    del view_504
    buf319 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf320 = reinterpret_tensor(buf317, (1, 128, 16384), (2097152, 16384, 1), 0); del buf317  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_64(c_void_p(buf320.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(addmm_34.data_ptr()), c_void_p(tanh_17.data_ptr()), c_void_p(buf319.data_ptr()))
    del addmm_34
    del tanh_17
    buf321 = reinterpret_tensor(buf311, (128, 4096), (4096, 1), 0); del buf311  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf320, (128, 16384), (16384, 1), 0), permute_647, out=buf321)
    del permute_647
    buf322 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf320, (16384, 128), (1, 16384), 0), view_478, out=buf322)
    buf323 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_65(c_void_p(buf320.data_ptr()), c_void_p(buf323.data_ptr()))
    buf324 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf316, (4096, 128), (1, 4096), 0), view_500, out=buf324)
    del view_500
    buf325 = buf310; del buf310  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf316, (128, 4096), (4096, 1), 0), permute_653, out=buf325)
    del permute_653
    buf326 = reinterpret_tensor(buf307, (16, 128, 256), (32768, 256, 1), 0); del buf307  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_656, reinterpret_tensor(buf325, (16, 128, 256), (256, 4096, 1), 0), out=buf326)
    del permute_656
    buf327 = reinterpret_tensor(buf299, (16, 128, 128), (16384, 128, 1), 0); del buf299  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf325, (16, 128, 256), (256, 4096, 1), 0), permute_657, out=buf327)
    del permute_657
    buf328 = buf298; del buf298  # reuse
    buf329 = reinterpret_tensor(buf327, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf327  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_66(c_void_p(buf329.data_ptr()), c_void_p(alias_81.data_ptr()), c_void_p(slice_864.data_ptr()), c_void_p(primals_339.data_ptr()), c_void_p(buf328.data_ptr()))
    del alias_81
    del primals_339
    del slice_864
    buf330 = reinterpret_tensor(buf325, (16, 256, 128), (32768, 128, 1), 0); del buf325  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_658, reinterpret_tensor(buf329, (16, 128, 128), (16384, 128, 1), 0), out=buf330)
    del permute_658
    buf331 = reinterpret_tensor(buf304, (16, 128, 256), (32768, 256, 1), 0); del buf304  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf329, (16, 128, 128), (16384, 128, 1), 0), permute_659, out=buf331)
    del permute_659
    buf332 = buf291; del buf291  # reuse
    cpp_fused_view_67(c_void_p(buf326.data_ptr()), c_void_p(buf332.data_ptr()))
    buf333 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf332, (4096, 128), (1, 4096), 0), view_478, out=buf333)
    buf334 = reinterpret_tensor(buf326, (128, 4096), (4096, 1), 0); del buf326  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf332, permute_666, out=buf334)
    del permute_666
    buf335 = reinterpret_tensor(buf332, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf332  # reuse
    buf338 = reinterpret_tensor(buf300, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf300  # reuse
    cpp_fused_add_mul_neg_slice_backward_68(c_void_p(buf330.data_ptr()), c_void_p(unsqueeze_224.data_ptr()), c_void_p(unsqueeze_226.data_ptr()), c_void_p(buf331.data_ptr()), c_void_p(buf335.data_ptr()), c_void_p(buf338.data_ptr()))
    del unsqueeze_224
    del unsqueeze_226
    buf336 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf335, (4096, 128), (1, 4096), 0), view_478, out=buf336)
    buf337 = reinterpret_tensor(buf331, (128, 4096), (4096, 1), 0); del buf331  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf335, (128, 4096), (4096, 1), 0), permute_670, out=buf337)
    del permute_670
    buf339 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf338, (4096, 128), (1, 4096), 0), view_478, out=buf339)
    del view_478
    buf340 = reinterpret_tensor(buf335, (128, 4096), (4096, 1), 0); del buf335  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf338, (128, 4096), (4096, 1), 0), permute_674, out=buf340)
    del permute_674
    buf341 = reinterpret_tensor(buf338, (1, 128, 4096), (524288, 4096, 1), 0); del buf338  # reuse
    buf342 = buf313; del buf313  # reuse
    buf343 = buf312; del buf312  # reuse
    buf344 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf345 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf346 = buf316; del buf316  # reuse
    cpp_fused_add_native_layer_norm_backward_69(c_void_p(buf346.data_ptr()), c_void_p(buf321.data_ptr()), c_void_p(buf334.data_ptr()), c_void_p(buf337.data_ptr()), c_void_p(buf340.data_ptr()), c_void_p(primals_172.data_ptr()), c_void_p(mul_170.data_ptr()), c_void_p(div_84.data_ptr()), c_void_p(buf341.data_ptr()), c_void_p(buf342.data_ptr()), c_void_p(buf343.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(buf345.data_ptr()))
    del div_84
    del mul_170
    del primals_172
    buf347 = reinterpret_tensor(buf320, (128, 16384), (16384, 1), 0); del buf320  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf346, (128, 4096), (4096, 1), 0), permute_676, out=buf347)
    del permute_676
    buf348 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf346, (4096, 128), (1, 4096), 0), view_476, out=buf348)
    del view_476
    buf349 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf350 = reinterpret_tensor(buf347, (1, 128, 16384), (2097152, 16384, 1), 0); del buf347  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_70(c_void_p(buf350.data_ptr()), c_void_p(buf346.data_ptr()), c_void_p(addmm_32.data_ptr()), c_void_p(tanh_16.data_ptr()), c_void_p(buf349.data_ptr()))
    del addmm_32
    del tanh_16
    buf351 = reinterpret_tensor(buf341, (128, 4096), (4096, 1), 0); del buf341  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf350, (128, 16384), (16384, 1), 0), permute_680, out=buf351)
    del permute_680
    buf352 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf350, (16384, 128), (1, 16384), 0), view_450, out=buf352)
    buf353 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_71(c_void_p(buf350.data_ptr()), c_void_p(buf353.data_ptr()))
    buf354 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf346, (4096, 128), (1, 4096), 0), view_472, out=buf354)
    del view_472
    buf355 = buf340; del buf340  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf346, (128, 4096), (4096, 1), 0), permute_686, out=buf355)
    del permute_686
    buf356 = reinterpret_tensor(buf337, (16, 128, 256), (32768, 256, 1), 0); del buf337  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_689, reinterpret_tensor(buf355, (16, 128, 256), (256, 4096, 1), 0), out=buf356)
    del permute_689
    buf357 = reinterpret_tensor(buf329, (16, 128, 128), (16384, 128, 1), 0); del buf329  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf355, (16, 128, 256), (256, 4096, 1), 0), permute_690, out=buf357)
    del permute_690
    buf358 = buf328; del buf328  # reuse
    buf359 = reinterpret_tensor(buf357, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf357  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_72(c_void_p(buf359.data_ptr()), c_void_p(alias_83.data_ptr()), c_void_p(slice_816.data_ptr()), c_void_p(primals_336.data_ptr()), c_void_p(buf358.data_ptr()))
    del alias_83
    del primals_336
    del slice_816
    buf360 = reinterpret_tensor(buf355, (16, 256, 128), (32768, 128, 1), 0); del buf355  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_691, reinterpret_tensor(buf359, (16, 128, 128), (16384, 128, 1), 0), out=buf360)
    del permute_691
    buf361 = reinterpret_tensor(buf334, (16, 128, 256), (32768, 256, 1), 0); del buf334  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf359, (16, 128, 128), (16384, 128, 1), 0), permute_692, out=buf361)
    del permute_692
    buf362 = buf321; del buf321  # reuse
    cpp_fused_view_73(c_void_p(buf356.data_ptr()), c_void_p(buf362.data_ptr()))
    buf363 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf362, (4096, 128), (1, 4096), 0), view_450, out=buf363)
    buf364 = reinterpret_tensor(buf356, (128, 4096), (4096, 1), 0); del buf356  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf362, permute_699, out=buf364)
    del permute_699
    buf365 = reinterpret_tensor(buf362, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf362  # reuse
    buf368 = reinterpret_tensor(buf330, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf330  # reuse
    cpp_fused_add_mul_neg_slice_backward_74(c_void_p(buf360.data_ptr()), c_void_p(unsqueeze_211.data_ptr()), c_void_p(unsqueeze_213.data_ptr()), c_void_p(buf361.data_ptr()), c_void_p(buf365.data_ptr()), c_void_p(buf368.data_ptr()))
    del unsqueeze_211
    del unsqueeze_213
    buf366 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf365, (4096, 128), (1, 4096), 0), view_450, out=buf366)
    buf367 = reinterpret_tensor(buf361, (128, 4096), (4096, 1), 0); del buf361  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf365, (128, 4096), (4096, 1), 0), permute_703, out=buf367)
    del permute_703
    buf369 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf368, (4096, 128), (1, 4096), 0), view_450, out=buf369)
    del view_450
    buf370 = reinterpret_tensor(buf365, (128, 4096), (4096, 1), 0); del buf365  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf368, (128, 4096), (4096, 1), 0), permute_707, out=buf370)
    del permute_707
    buf371 = reinterpret_tensor(buf368, (1, 128, 4096), (524288, 4096, 1), 0); del buf368  # reuse
    buf372 = buf343; del buf343  # reuse
    buf373 = buf342; del buf342  # reuse
    buf374 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf375 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf376 = buf346; del buf346  # reuse
    cpp_fused_add_native_layer_norm_backward_75(c_void_p(buf376.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(buf364.data_ptr()), c_void_p(buf367.data_ptr()), c_void_p(buf370.data_ptr()), c_void_p(primals_162.data_ptr()), c_void_p(mul_160.data_ptr()), c_void_p(div_86.data_ptr()), c_void_p(buf371.data_ptr()), c_void_p(buf372.data_ptr()), c_void_p(buf373.data_ptr()), c_void_p(buf374.data_ptr()), c_void_p(buf375.data_ptr()))
    del div_86
    del mul_160
    del primals_162
    buf377 = reinterpret_tensor(buf350, (128, 16384), (16384, 1), 0); del buf350  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf376, (128, 4096), (4096, 1), 0), permute_709, out=buf377)
    del permute_709
    buf378 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf376, (4096, 128), (1, 4096), 0), view_448, out=buf378)
    del view_448
    buf379 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf380 = reinterpret_tensor(buf377, (1, 128, 16384), (2097152, 16384, 1), 0); del buf377  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_76(c_void_p(buf380.data_ptr()), c_void_p(buf376.data_ptr()), c_void_p(addmm_30.data_ptr()), c_void_p(tanh_15.data_ptr()), c_void_p(buf379.data_ptr()))
    del addmm_30
    del tanh_15
    buf381 = reinterpret_tensor(buf371, (128, 4096), (4096, 1), 0); del buf371  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf380, (128, 16384), (16384, 1), 0), permute_713, out=buf381)
    del permute_713
    buf382 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf380, (16384, 128), (1, 16384), 0), view_422, out=buf382)
    buf383 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_77(c_void_p(buf380.data_ptr()), c_void_p(buf383.data_ptr()))
    buf384 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf376, (4096, 128), (1, 4096), 0), view_444, out=buf384)
    del view_444
    buf385 = buf370; del buf370  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf376, (128, 4096), (4096, 1), 0), permute_719, out=buf385)
    del permute_719
    buf386 = reinterpret_tensor(buf367, (16, 128, 256), (32768, 256, 1), 0); del buf367  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_722, reinterpret_tensor(buf385, (16, 128, 256), (256, 4096, 1), 0), out=buf386)
    del permute_722
    buf387 = reinterpret_tensor(buf359, (16, 128, 128), (16384, 128, 1), 0); del buf359  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf385, (16, 128, 256), (256, 4096, 1), 0), permute_723, out=buf387)
    del permute_723
    buf388 = buf358; del buf358  # reuse
    buf389 = reinterpret_tensor(buf387, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf387  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_78(c_void_p(buf389.data_ptr()), c_void_p(alias_85.data_ptr()), c_void_p(slice_768.data_ptr()), c_void_p(primals_333.data_ptr()), c_void_p(buf388.data_ptr()))
    del alias_85
    del primals_333
    del slice_768
    buf390 = reinterpret_tensor(buf385, (16, 256, 128), (32768, 128, 1), 0); del buf385  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_724, reinterpret_tensor(buf389, (16, 128, 128), (16384, 128, 1), 0), out=buf390)
    del permute_724
    buf391 = reinterpret_tensor(buf364, (16, 128, 256), (32768, 256, 1), 0); del buf364  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf389, (16, 128, 128), (16384, 128, 1), 0), permute_725, out=buf391)
    del permute_725
    buf392 = buf351; del buf351  # reuse
    cpp_fused_view_79(c_void_p(buf386.data_ptr()), c_void_p(buf392.data_ptr()))
    buf393 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf392, (4096, 128), (1, 4096), 0), view_422, out=buf393)
    buf394 = reinterpret_tensor(buf386, (128, 4096), (4096, 1), 0); del buf386  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf392, permute_732, out=buf394)
    del permute_732
    buf395 = reinterpret_tensor(buf392, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf392  # reuse
    buf398 = reinterpret_tensor(buf360, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf360  # reuse
    cpp_fused_add_mul_neg_slice_backward_80(c_void_p(buf390.data_ptr()), c_void_p(unsqueeze_198.data_ptr()), c_void_p(unsqueeze_200.data_ptr()), c_void_p(buf391.data_ptr()), c_void_p(buf395.data_ptr()), c_void_p(buf398.data_ptr()))
    del unsqueeze_198
    del unsqueeze_200
    buf396 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf395, (4096, 128), (1, 4096), 0), view_422, out=buf396)
    buf397 = reinterpret_tensor(buf391, (128, 4096), (4096, 1), 0); del buf391  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf395, (128, 4096), (4096, 1), 0), permute_736, out=buf397)
    del permute_736
    buf399 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf398, (4096, 128), (1, 4096), 0), view_422, out=buf399)
    del view_422
    buf400 = reinterpret_tensor(buf395, (128, 4096), (4096, 1), 0); del buf395  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf398, (128, 4096), (4096, 1), 0), permute_740, out=buf400)
    del permute_740
    buf401 = reinterpret_tensor(buf398, (1, 128, 4096), (524288, 4096, 1), 0); del buf398  # reuse
    buf402 = buf373; del buf373  # reuse
    buf403 = buf372; del buf372  # reuse
    buf404 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf405 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf406 = buf376; del buf376  # reuse
    cpp_fused_add_native_layer_norm_backward_81(c_void_p(buf406.data_ptr()), c_void_p(buf381.data_ptr()), c_void_p(buf394.data_ptr()), c_void_p(buf397.data_ptr()), c_void_p(buf400.data_ptr()), c_void_p(primals_152.data_ptr()), c_void_p(mul_150.data_ptr()), c_void_p(div_88.data_ptr()), c_void_p(buf401.data_ptr()), c_void_p(buf402.data_ptr()), c_void_p(buf403.data_ptr()), c_void_p(buf404.data_ptr()), c_void_p(buf405.data_ptr()))
    del div_88
    del mul_150
    del primals_152
    buf407 = reinterpret_tensor(buf380, (128, 16384), (16384, 1), 0); del buf380  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf406, (128, 4096), (4096, 1), 0), permute_742, out=buf407)
    del permute_742
    buf408 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf406, (4096, 128), (1, 4096), 0), view_420, out=buf408)
    del view_420
    buf409 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf410 = reinterpret_tensor(buf407, (1, 128, 16384), (2097152, 16384, 1), 0); del buf407  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_82(c_void_p(buf410.data_ptr()), c_void_p(buf406.data_ptr()), c_void_p(addmm_28.data_ptr()), c_void_p(tanh_14.data_ptr()), c_void_p(buf409.data_ptr()))
    del addmm_28
    del tanh_14
    buf411 = reinterpret_tensor(buf401, (128, 4096), (4096, 1), 0); del buf401  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf410, (128, 16384), (16384, 1), 0), permute_746, out=buf411)
    del permute_746
    buf412 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf410, (16384, 128), (1, 16384), 0), view_394, out=buf412)
    buf413 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_83(c_void_p(buf410.data_ptr()), c_void_p(buf413.data_ptr()))
    buf414 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf406, (4096, 128), (1, 4096), 0), view_416, out=buf414)
    del view_416
    buf415 = buf400; del buf400  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf406, (128, 4096), (4096, 1), 0), permute_752, out=buf415)
    del permute_752
    buf416 = reinterpret_tensor(buf397, (16, 128, 256), (32768, 256, 1), 0); del buf397  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_755, reinterpret_tensor(buf415, (16, 128, 256), (256, 4096, 1), 0), out=buf416)
    del permute_755
    buf417 = reinterpret_tensor(buf389, (16, 128, 128), (16384, 128, 1), 0); del buf389  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf415, (16, 128, 256), (256, 4096, 1), 0), permute_756, out=buf417)
    del permute_756
    buf418 = buf388; del buf388  # reuse
    buf419 = reinterpret_tensor(buf417, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf417  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_84(c_void_p(buf419.data_ptr()), c_void_p(alias_87.data_ptr()), c_void_p(slice_720.data_ptr()), c_void_p(primals_330.data_ptr()), c_void_p(buf418.data_ptr()))
    del alias_87
    del primals_330
    del slice_720
    buf420 = reinterpret_tensor(buf415, (16, 256, 128), (32768, 128, 1), 0); del buf415  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_757, reinterpret_tensor(buf419, (16, 128, 128), (16384, 128, 1), 0), out=buf420)
    del permute_757
    buf421 = reinterpret_tensor(buf394, (16, 128, 256), (32768, 256, 1), 0); del buf394  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf419, (16, 128, 128), (16384, 128, 1), 0), permute_758, out=buf421)
    del permute_758
    buf422 = buf381; del buf381  # reuse
    cpp_fused_view_85(c_void_p(buf416.data_ptr()), c_void_p(buf422.data_ptr()))
    buf423 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf422, (4096, 128), (1, 4096), 0), view_394, out=buf423)
    buf424 = reinterpret_tensor(buf416, (128, 4096), (4096, 1), 0); del buf416  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf422, permute_765, out=buf424)
    del permute_765
    buf425 = reinterpret_tensor(buf422, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf422  # reuse
    buf428 = reinterpret_tensor(buf390, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf390  # reuse
    cpp_fused_add_mul_neg_slice_backward_86(c_void_p(buf420.data_ptr()), c_void_p(unsqueeze_185.data_ptr()), c_void_p(unsqueeze_187.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf425.data_ptr()), c_void_p(buf428.data_ptr()))
    del unsqueeze_185
    del unsqueeze_187
    buf426 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf425, (4096, 128), (1, 4096), 0), view_394, out=buf426)
    buf427 = reinterpret_tensor(buf421, (128, 4096), (4096, 1), 0); del buf421  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf425, (128, 4096), (4096, 1), 0), permute_769, out=buf427)
    del permute_769
    buf429 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf428, (4096, 128), (1, 4096), 0), view_394, out=buf429)
    del view_394
    buf430 = reinterpret_tensor(buf425, (128, 4096), (4096, 1), 0); del buf425  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf428, (128, 4096), (4096, 1), 0), permute_773, out=buf430)
    del permute_773
    buf431 = reinterpret_tensor(buf428, (1, 128, 4096), (524288, 4096, 1), 0); del buf428  # reuse
    buf432 = buf403; del buf403  # reuse
    buf433 = buf402; del buf402  # reuse
    buf434 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf435 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf436 = buf406; del buf406  # reuse
    cpp_fused_add_native_layer_norm_backward_87(c_void_p(buf436.data_ptr()), c_void_p(buf411.data_ptr()), c_void_p(buf424.data_ptr()), c_void_p(buf427.data_ptr()), c_void_p(buf430.data_ptr()), c_void_p(primals_142.data_ptr()), c_void_p(mul_140.data_ptr()), c_void_p(div_90.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(buf432.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(buf434.data_ptr()), c_void_p(buf435.data_ptr()))
    del div_90
    del mul_140
    del primals_142
    buf437 = reinterpret_tensor(buf410, (128, 16384), (16384, 1), 0); del buf410  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf436, (128, 4096), (4096, 1), 0), permute_775, out=buf437)
    del permute_775
    buf438 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf436, (4096, 128), (1, 4096), 0), view_392, out=buf438)
    del view_392
    buf439 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf440 = reinterpret_tensor(buf437, (1, 128, 16384), (2097152, 16384, 1), 0); del buf437  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_88(c_void_p(buf440.data_ptr()), c_void_p(buf436.data_ptr()), c_void_p(addmm_26.data_ptr()), c_void_p(tanh_13.data_ptr()), c_void_p(buf439.data_ptr()))
    del addmm_26
    del tanh_13
    buf441 = reinterpret_tensor(buf431, (128, 4096), (4096, 1), 0); del buf431  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf440, (128, 16384), (16384, 1), 0), permute_779, out=buf441)
    del permute_779
    buf442 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf440, (16384, 128), (1, 16384), 0), view_366, out=buf442)
    buf443 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_89(c_void_p(buf440.data_ptr()), c_void_p(buf443.data_ptr()))
    buf444 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf436, (4096, 128), (1, 4096), 0), view_388, out=buf444)
    del view_388
    buf445 = buf430; del buf430  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf436, (128, 4096), (4096, 1), 0), permute_785, out=buf445)
    del permute_785
    buf446 = reinterpret_tensor(buf427, (16, 128, 256), (32768, 256, 1), 0); del buf427  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_788, reinterpret_tensor(buf445, (16, 128, 256), (256, 4096, 1), 0), out=buf446)
    del permute_788
    buf447 = reinterpret_tensor(buf419, (16, 128, 128), (16384, 128, 1), 0); del buf419  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf445, (16, 128, 256), (256, 4096, 1), 0), permute_789, out=buf447)
    del permute_789
    buf448 = buf418; del buf418  # reuse
    buf449 = reinterpret_tensor(buf447, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf447  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_90(c_void_p(buf449.data_ptr()), c_void_p(alias_89.data_ptr()), c_void_p(slice_672.data_ptr()), c_void_p(primals_327.data_ptr()), c_void_p(buf448.data_ptr()))
    del alias_89
    del primals_327
    del slice_672
    buf450 = reinterpret_tensor(buf445, (16, 256, 128), (32768, 128, 1), 0); del buf445  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_790, reinterpret_tensor(buf449, (16, 128, 128), (16384, 128, 1), 0), out=buf450)
    del permute_790
    buf451 = reinterpret_tensor(buf424, (16, 128, 256), (32768, 256, 1), 0); del buf424  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf449, (16, 128, 128), (16384, 128, 1), 0), permute_791, out=buf451)
    del permute_791
    buf452 = buf411; del buf411  # reuse
    cpp_fused_view_91(c_void_p(buf446.data_ptr()), c_void_p(buf452.data_ptr()))
    buf453 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf452, (4096, 128), (1, 4096), 0), view_366, out=buf453)
    buf454 = reinterpret_tensor(buf446, (128, 4096), (4096, 1), 0); del buf446  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf452, permute_798, out=buf454)
    del permute_798
    buf455 = reinterpret_tensor(buf452, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf452  # reuse
    buf458 = reinterpret_tensor(buf420, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf420  # reuse
    cpp_fused_add_mul_neg_slice_backward_92(c_void_p(buf450.data_ptr()), c_void_p(unsqueeze_172.data_ptr()), c_void_p(unsqueeze_174.data_ptr()), c_void_p(buf451.data_ptr()), c_void_p(buf455.data_ptr()), c_void_p(buf458.data_ptr()))
    del unsqueeze_172
    del unsqueeze_174
    buf456 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf455, (4096, 128), (1, 4096), 0), view_366, out=buf456)
    buf457 = reinterpret_tensor(buf451, (128, 4096), (4096, 1), 0); del buf451  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf455, (128, 4096), (4096, 1), 0), permute_802, out=buf457)
    del permute_802
    buf459 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf458, (4096, 128), (1, 4096), 0), view_366, out=buf459)
    del view_366
    buf460 = reinterpret_tensor(buf455, (128, 4096), (4096, 1), 0); del buf455  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf458, (128, 4096), (4096, 1), 0), permute_806, out=buf460)
    del permute_806
    buf461 = reinterpret_tensor(buf458, (1, 128, 4096), (524288, 4096, 1), 0); del buf458  # reuse
    buf462 = buf433; del buf433  # reuse
    buf463 = buf432; del buf432  # reuse
    buf464 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf465 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf466 = buf436; del buf436  # reuse
    cpp_fused_add_native_layer_norm_backward_93(c_void_p(buf466.data_ptr()), c_void_p(buf441.data_ptr()), c_void_p(buf454.data_ptr()), c_void_p(buf457.data_ptr()), c_void_p(buf460.data_ptr()), c_void_p(primals_132.data_ptr()), c_void_p(mul_130.data_ptr()), c_void_p(div_92.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(buf462.data_ptr()), c_void_p(buf463.data_ptr()), c_void_p(buf464.data_ptr()), c_void_p(buf465.data_ptr()))
    del div_92
    del mul_130
    del primals_132
    buf467 = reinterpret_tensor(buf440, (128, 16384), (16384, 1), 0); del buf440  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf466, (128, 4096), (4096, 1), 0), permute_808, out=buf467)
    del permute_808
    buf468 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf466, (4096, 128), (1, 4096), 0), view_364, out=buf468)
    del view_364
    buf469 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf470 = reinterpret_tensor(buf467, (1, 128, 16384), (2097152, 16384, 1), 0); del buf467  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_94(c_void_p(buf470.data_ptr()), c_void_p(buf466.data_ptr()), c_void_p(addmm_24.data_ptr()), c_void_p(tanh_12.data_ptr()), c_void_p(buf469.data_ptr()))
    del addmm_24
    del tanh_12
    buf471 = reinterpret_tensor(buf461, (128, 4096), (4096, 1), 0); del buf461  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf470, (128, 16384), (16384, 1), 0), permute_812, out=buf471)
    del permute_812
    buf472 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf470, (16384, 128), (1, 16384), 0), view_338, out=buf472)
    buf473 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_95(c_void_p(buf470.data_ptr()), c_void_p(buf473.data_ptr()))
    buf474 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf466, (4096, 128), (1, 4096), 0), view_360, out=buf474)
    del view_360
    buf475 = buf460; del buf460  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf466, (128, 4096), (4096, 1), 0), permute_818, out=buf475)
    del permute_818
    buf476 = reinterpret_tensor(buf457, (16, 128, 256), (32768, 256, 1), 0); del buf457  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_821, reinterpret_tensor(buf475, (16, 128, 256), (256, 4096, 1), 0), out=buf476)
    del permute_821
    buf477 = reinterpret_tensor(buf449, (16, 128, 128), (16384, 128, 1), 0); del buf449  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf475, (16, 128, 256), (256, 4096, 1), 0), permute_822, out=buf477)
    del permute_822
    buf478 = buf448; del buf448  # reuse
    buf479 = reinterpret_tensor(buf477, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf477  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_96(c_void_p(buf479.data_ptr()), c_void_p(alias_91.data_ptr()), c_void_p(slice_624.data_ptr()), c_void_p(primals_324.data_ptr()), c_void_p(buf478.data_ptr()))
    del alias_91
    del primals_324
    del slice_624
    buf480 = reinterpret_tensor(buf475, (16, 256, 128), (32768, 128, 1), 0); del buf475  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_823, reinterpret_tensor(buf479, (16, 128, 128), (16384, 128, 1), 0), out=buf480)
    del permute_823
    buf481 = reinterpret_tensor(buf454, (16, 128, 256), (32768, 256, 1), 0); del buf454  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf479, (16, 128, 128), (16384, 128, 1), 0), permute_824, out=buf481)
    del permute_824
    buf482 = buf441; del buf441  # reuse
    cpp_fused_view_97(c_void_p(buf476.data_ptr()), c_void_p(buf482.data_ptr()))
    buf483 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf482, (4096, 128), (1, 4096), 0), view_338, out=buf483)
    buf484 = reinterpret_tensor(buf476, (128, 4096), (4096, 1), 0); del buf476  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf482, permute_831, out=buf484)
    del permute_831
    buf485 = reinterpret_tensor(buf482, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf482  # reuse
    buf488 = reinterpret_tensor(buf450, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf450  # reuse
    cpp_fused_add_mul_neg_slice_backward_98(c_void_p(buf480.data_ptr()), c_void_p(unsqueeze_159.data_ptr()), c_void_p(unsqueeze_161.data_ptr()), c_void_p(buf481.data_ptr()), c_void_p(buf485.data_ptr()), c_void_p(buf488.data_ptr()))
    del unsqueeze_159
    del unsqueeze_161
    buf486 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf485, (4096, 128), (1, 4096), 0), view_338, out=buf486)
    buf487 = reinterpret_tensor(buf481, (128, 4096), (4096, 1), 0); del buf481  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf485, (128, 4096), (4096, 1), 0), permute_835, out=buf487)
    del permute_835
    buf489 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf488, (4096, 128), (1, 4096), 0), view_338, out=buf489)
    del view_338
    buf490 = reinterpret_tensor(buf485, (128, 4096), (4096, 1), 0); del buf485  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf488, (128, 4096), (4096, 1), 0), permute_839, out=buf490)
    del permute_839
    buf491 = reinterpret_tensor(buf488, (1, 128, 4096), (524288, 4096, 1), 0); del buf488  # reuse
    buf492 = buf463; del buf463  # reuse
    buf493 = buf462; del buf462  # reuse
    buf494 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf495 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf496 = buf466; del buf466  # reuse
    cpp_fused_add_native_layer_norm_backward_99(c_void_p(buf496.data_ptr()), c_void_p(buf471.data_ptr()), c_void_p(buf484.data_ptr()), c_void_p(buf487.data_ptr()), c_void_p(buf490.data_ptr()), c_void_p(primals_122.data_ptr()), c_void_p(mul_120.data_ptr()), c_void_p(div_94.data_ptr()), c_void_p(buf491.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(buf493.data_ptr()), c_void_p(buf494.data_ptr()), c_void_p(buf495.data_ptr()))
    del div_94
    del mul_120
    del primals_122
    buf497 = reinterpret_tensor(buf470, (128, 16384), (16384, 1), 0); del buf470  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf496, (128, 4096), (4096, 1), 0), permute_841, out=buf497)
    del permute_841
    buf498 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf496, (4096, 128), (1, 4096), 0), view_336, out=buf498)
    del view_336
    buf499 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf500 = reinterpret_tensor(buf497, (1, 128, 16384), (2097152, 16384, 1), 0); del buf497  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_100(c_void_p(buf500.data_ptr()), c_void_p(buf496.data_ptr()), c_void_p(addmm_22.data_ptr()), c_void_p(tanh_11.data_ptr()), c_void_p(buf499.data_ptr()))
    del addmm_22
    del tanh_11
    buf501 = reinterpret_tensor(buf491, (128, 4096), (4096, 1), 0); del buf491  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf500, (128, 16384), (16384, 1), 0), permute_845, out=buf501)
    del permute_845
    buf502 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf500, (16384, 128), (1, 16384), 0), view_310, out=buf502)
    buf503 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_101(c_void_p(buf500.data_ptr()), c_void_p(buf503.data_ptr()))
    buf504 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf496, (4096, 128), (1, 4096), 0), view_332, out=buf504)
    del view_332
    buf505 = buf490; del buf490  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf496, (128, 4096), (4096, 1), 0), permute_851, out=buf505)
    del permute_851
    buf506 = reinterpret_tensor(buf487, (16, 128, 256), (32768, 256, 1), 0); del buf487  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_854, reinterpret_tensor(buf505, (16, 128, 256), (256, 4096, 1), 0), out=buf506)
    del permute_854
    buf507 = reinterpret_tensor(buf479, (16, 128, 128), (16384, 128, 1), 0); del buf479  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf505, (16, 128, 256), (256, 4096, 1), 0), permute_855, out=buf507)
    del permute_855
    buf508 = buf478; del buf478  # reuse
    buf509 = reinterpret_tensor(buf507, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf507  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_102(c_void_p(buf509.data_ptr()), c_void_p(alias_93.data_ptr()), c_void_p(slice_576.data_ptr()), c_void_p(primals_321.data_ptr()), c_void_p(buf508.data_ptr()))
    del alias_93
    del primals_321
    del slice_576
    buf510 = reinterpret_tensor(buf505, (16, 256, 128), (32768, 128, 1), 0); del buf505  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_856, reinterpret_tensor(buf509, (16, 128, 128), (16384, 128, 1), 0), out=buf510)
    del permute_856
    buf511 = reinterpret_tensor(buf484, (16, 128, 256), (32768, 256, 1), 0); del buf484  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf509, (16, 128, 128), (16384, 128, 1), 0), permute_857, out=buf511)
    del permute_857
    buf512 = buf471; del buf471  # reuse
    cpp_fused_view_103(c_void_p(buf506.data_ptr()), c_void_p(buf512.data_ptr()))
    buf513 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf512, (4096, 128), (1, 4096), 0), view_310, out=buf513)
    buf514 = reinterpret_tensor(buf506, (128, 4096), (4096, 1), 0); del buf506  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf512, permute_864, out=buf514)
    del permute_864
    buf515 = reinterpret_tensor(buf512, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf512  # reuse
    buf518 = reinterpret_tensor(buf480, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf480  # reuse
    cpp_fused_add_mul_neg_slice_backward_104(c_void_p(buf510.data_ptr()), c_void_p(unsqueeze_146.data_ptr()), c_void_p(unsqueeze_148.data_ptr()), c_void_p(buf511.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(buf518.data_ptr()))
    del unsqueeze_146
    del unsqueeze_148
    buf516 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf515, (4096, 128), (1, 4096), 0), view_310, out=buf516)
    buf517 = reinterpret_tensor(buf511, (128, 4096), (4096, 1), 0); del buf511  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf515, (128, 4096), (4096, 1), 0), permute_868, out=buf517)
    del permute_868
    buf519 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf518, (4096, 128), (1, 4096), 0), view_310, out=buf519)
    del view_310
    buf520 = reinterpret_tensor(buf515, (128, 4096), (4096, 1), 0); del buf515  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf518, (128, 4096), (4096, 1), 0), permute_872, out=buf520)
    del permute_872
    buf521 = reinterpret_tensor(buf518, (1, 128, 4096), (524288, 4096, 1), 0); del buf518  # reuse
    buf522 = buf493; del buf493  # reuse
    buf523 = buf492; del buf492  # reuse
    buf524 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf525 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf526 = buf496; del buf496  # reuse
    cpp_fused_add_native_layer_norm_backward_105(c_void_p(buf526.data_ptr()), c_void_p(buf501.data_ptr()), c_void_p(buf514.data_ptr()), c_void_p(buf517.data_ptr()), c_void_p(buf520.data_ptr()), c_void_p(primals_112.data_ptr()), c_void_p(mul_110.data_ptr()), c_void_p(div_96.data_ptr()), c_void_p(buf521.data_ptr()), c_void_p(buf522.data_ptr()), c_void_p(buf523.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(buf525.data_ptr()))
    del div_96
    del mul_110
    del primals_112
    buf527 = reinterpret_tensor(buf500, (128, 16384), (16384, 1), 0); del buf500  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf526, (128, 4096), (4096, 1), 0), permute_874, out=buf527)
    del permute_874
    buf528 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf526, (4096, 128), (1, 4096), 0), view_308, out=buf528)
    del view_308
    buf529 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf530 = reinterpret_tensor(buf527, (1, 128, 16384), (2097152, 16384, 1), 0); del buf527  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_106(c_void_p(buf530.data_ptr()), c_void_p(buf526.data_ptr()), c_void_p(addmm_20.data_ptr()), c_void_p(tanh_10.data_ptr()), c_void_p(buf529.data_ptr()))
    del addmm_20
    del tanh_10
    buf531 = reinterpret_tensor(buf521, (128, 4096), (4096, 1), 0); del buf521  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf530, (128, 16384), (16384, 1), 0), permute_878, out=buf531)
    del permute_878
    buf532 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf530, (16384, 128), (1, 16384), 0), view_282, out=buf532)
    buf533 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_107(c_void_p(buf530.data_ptr()), c_void_p(buf533.data_ptr()))
    buf534 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf526, (4096, 128), (1, 4096), 0), view_304, out=buf534)
    del view_304
    buf535 = buf520; del buf520  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf526, (128, 4096), (4096, 1), 0), permute_884, out=buf535)
    del permute_884
    buf536 = reinterpret_tensor(buf517, (16, 128, 256), (32768, 256, 1), 0); del buf517  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_887, reinterpret_tensor(buf535, (16, 128, 256), (256, 4096, 1), 0), out=buf536)
    del permute_887
    buf537 = reinterpret_tensor(buf509, (16, 128, 128), (16384, 128, 1), 0); del buf509  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf535, (16, 128, 256), (256, 4096, 1), 0), permute_888, out=buf537)
    del permute_888
    buf538 = buf508; del buf508  # reuse
    buf539 = reinterpret_tensor(buf537, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf537  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_108(c_void_p(buf539.data_ptr()), c_void_p(alias_95.data_ptr()), c_void_p(slice_528.data_ptr()), c_void_p(primals_318.data_ptr()), c_void_p(buf538.data_ptr()))
    del alias_95
    del primals_318
    del slice_528
    buf540 = reinterpret_tensor(buf535, (16, 256, 128), (32768, 128, 1), 0); del buf535  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_889, reinterpret_tensor(buf539, (16, 128, 128), (16384, 128, 1), 0), out=buf540)
    del permute_889
    buf541 = reinterpret_tensor(buf514, (16, 128, 256), (32768, 256, 1), 0); del buf514  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf539, (16, 128, 128), (16384, 128, 1), 0), permute_890, out=buf541)
    del permute_890
    buf542 = buf501; del buf501  # reuse
    cpp_fused_view_109(c_void_p(buf536.data_ptr()), c_void_p(buf542.data_ptr()))
    buf543 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf542, (4096, 128), (1, 4096), 0), view_282, out=buf543)
    buf544 = reinterpret_tensor(buf536, (128, 4096), (4096, 1), 0); del buf536  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf542, permute_897, out=buf544)
    del permute_897
    buf545 = reinterpret_tensor(buf542, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf542  # reuse
    buf548 = reinterpret_tensor(buf510, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf510  # reuse
    cpp_fused_add_mul_neg_slice_backward_110(c_void_p(buf540.data_ptr()), c_void_p(unsqueeze_133.data_ptr()), c_void_p(unsqueeze_135.data_ptr()), c_void_p(buf541.data_ptr()), c_void_p(buf545.data_ptr()), c_void_p(buf548.data_ptr()))
    del unsqueeze_133
    del unsqueeze_135
    buf546 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf545, (4096, 128), (1, 4096), 0), view_282, out=buf546)
    buf547 = reinterpret_tensor(buf541, (128, 4096), (4096, 1), 0); del buf541  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf545, (128, 4096), (4096, 1), 0), permute_901, out=buf547)
    del permute_901
    buf549 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf548, (4096, 128), (1, 4096), 0), view_282, out=buf549)
    del view_282
    buf550 = reinterpret_tensor(buf545, (128, 4096), (4096, 1), 0); del buf545  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf548, (128, 4096), (4096, 1), 0), permute_905, out=buf550)
    del permute_905
    buf551 = reinterpret_tensor(buf548, (1, 128, 4096), (524288, 4096, 1), 0); del buf548  # reuse
    buf552 = buf523; del buf523  # reuse
    buf553 = buf522; del buf522  # reuse
    buf554 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf555 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf556 = buf526; del buf526  # reuse
    cpp_fused_add_native_layer_norm_backward_111(c_void_p(buf556.data_ptr()), c_void_p(buf531.data_ptr()), c_void_p(buf544.data_ptr()), c_void_p(buf547.data_ptr()), c_void_p(buf550.data_ptr()), c_void_p(primals_102.data_ptr()), c_void_p(mul_100.data_ptr()), c_void_p(div_98.data_ptr()), c_void_p(buf551.data_ptr()), c_void_p(buf552.data_ptr()), c_void_p(buf553.data_ptr()), c_void_p(buf554.data_ptr()), c_void_p(buf555.data_ptr()))
    del div_98
    del mul_100
    del primals_102
    buf557 = reinterpret_tensor(buf530, (128, 16384), (16384, 1), 0); del buf530  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf556, (128, 4096), (4096, 1), 0), permute_907, out=buf557)
    del permute_907
    buf558 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf556, (4096, 128), (1, 4096), 0), view_280, out=buf558)
    del view_280
    buf559 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf560 = reinterpret_tensor(buf557, (1, 128, 16384), (2097152, 16384, 1), 0); del buf557  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_112(c_void_p(buf560.data_ptr()), c_void_p(buf556.data_ptr()), c_void_p(addmm_18.data_ptr()), c_void_p(tanh_9.data_ptr()), c_void_p(buf559.data_ptr()))
    del addmm_18
    del tanh_9
    buf561 = reinterpret_tensor(buf551, (128, 4096), (4096, 1), 0); del buf551  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf560, (128, 16384), (16384, 1), 0), permute_911, out=buf561)
    del permute_911
    buf562 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf560, (16384, 128), (1, 16384), 0), view_254, out=buf562)
    buf563 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_113(c_void_p(buf560.data_ptr()), c_void_p(buf563.data_ptr()))
    buf564 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf556, (4096, 128), (1, 4096), 0), view_276, out=buf564)
    del view_276
    buf565 = buf550; del buf550  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf556, (128, 4096), (4096, 1), 0), permute_917, out=buf565)
    del permute_917
    buf566 = reinterpret_tensor(buf547, (16, 128, 256), (32768, 256, 1), 0); del buf547  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_920, reinterpret_tensor(buf565, (16, 128, 256), (256, 4096, 1), 0), out=buf566)
    del permute_920
    buf567 = reinterpret_tensor(buf539, (16, 128, 128), (16384, 128, 1), 0); del buf539  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf565, (16, 128, 256), (256, 4096, 1), 0), permute_921, out=buf567)
    del permute_921
    buf568 = buf538; del buf538  # reuse
    buf569 = reinterpret_tensor(buf567, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf567  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_114(c_void_p(buf569.data_ptr()), c_void_p(alias_97.data_ptr()), c_void_p(slice_480.data_ptr()), c_void_p(primals_315.data_ptr()), c_void_p(buf568.data_ptr()))
    del alias_97
    del primals_315
    del slice_480
    buf570 = reinterpret_tensor(buf565, (16, 256, 128), (32768, 128, 1), 0); del buf565  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_922, reinterpret_tensor(buf569, (16, 128, 128), (16384, 128, 1), 0), out=buf570)
    del permute_922
    buf571 = reinterpret_tensor(buf544, (16, 128, 256), (32768, 256, 1), 0); del buf544  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf569, (16, 128, 128), (16384, 128, 1), 0), permute_923, out=buf571)
    del permute_923
    buf572 = buf531; del buf531  # reuse
    cpp_fused_view_115(c_void_p(buf566.data_ptr()), c_void_p(buf572.data_ptr()))
    buf573 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf572, (4096, 128), (1, 4096), 0), view_254, out=buf573)
    buf574 = reinterpret_tensor(buf566, (128, 4096), (4096, 1), 0); del buf566  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf572, permute_930, out=buf574)
    del permute_930
    buf575 = reinterpret_tensor(buf572, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf572  # reuse
    buf578 = reinterpret_tensor(buf540, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf540  # reuse
    cpp_fused_add_mul_neg_slice_backward_116(c_void_p(buf570.data_ptr()), c_void_p(unsqueeze_120.data_ptr()), c_void_p(unsqueeze_122.data_ptr()), c_void_p(buf571.data_ptr()), c_void_p(buf575.data_ptr()), c_void_p(buf578.data_ptr()))
    del unsqueeze_120
    del unsqueeze_122
    buf576 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf575, (4096, 128), (1, 4096), 0), view_254, out=buf576)
    buf577 = reinterpret_tensor(buf571, (128, 4096), (4096, 1), 0); del buf571  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf575, (128, 4096), (4096, 1), 0), permute_934, out=buf577)
    del permute_934
    buf579 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf578, (4096, 128), (1, 4096), 0), view_254, out=buf579)
    del view_254
    buf580 = reinterpret_tensor(buf575, (128, 4096), (4096, 1), 0); del buf575  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf578, (128, 4096), (4096, 1), 0), permute_938, out=buf580)
    del permute_938
    buf581 = reinterpret_tensor(buf578, (1, 128, 4096), (524288, 4096, 1), 0); del buf578  # reuse
    buf582 = buf553; del buf553  # reuse
    buf583 = buf552; del buf552  # reuse
    buf584 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf585 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf586 = buf556; del buf556  # reuse
    cpp_fused_add_native_layer_norm_backward_117(c_void_p(buf586.data_ptr()), c_void_p(buf561.data_ptr()), c_void_p(buf574.data_ptr()), c_void_p(buf577.data_ptr()), c_void_p(buf580.data_ptr()), c_void_p(primals_92.data_ptr()), c_void_p(mul_90.data_ptr()), c_void_p(div_100.data_ptr()), c_void_p(buf581.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(buf583.data_ptr()), c_void_p(buf584.data_ptr()), c_void_p(buf585.data_ptr()))
    del div_100
    del mul_90
    del primals_92
    buf587 = reinterpret_tensor(buf560, (128, 16384), (16384, 1), 0); del buf560  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf586, (128, 4096), (4096, 1), 0), permute_940, out=buf587)
    del permute_940
    buf588 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf586, (4096, 128), (1, 4096), 0), view_252, out=buf588)
    del view_252
    buf589 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf590 = reinterpret_tensor(buf587, (1, 128, 16384), (2097152, 16384, 1), 0); del buf587  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_118(c_void_p(buf590.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(addmm_16.data_ptr()), c_void_p(tanh_8.data_ptr()), c_void_p(buf589.data_ptr()))
    del addmm_16
    del tanh_8
    buf591 = reinterpret_tensor(buf581, (128, 4096), (4096, 1), 0); del buf581  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf590, (128, 16384), (16384, 1), 0), permute_944, out=buf591)
    del permute_944
    buf592 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf590, (16384, 128), (1, 16384), 0), view_226, out=buf592)
    buf593 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_119(c_void_p(buf590.data_ptr()), c_void_p(buf593.data_ptr()))
    buf594 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf586, (4096, 128), (1, 4096), 0), view_248, out=buf594)
    del view_248
    buf595 = buf580; del buf580  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf586, (128, 4096), (4096, 1), 0), permute_950, out=buf595)
    del permute_950
    buf596 = reinterpret_tensor(buf577, (16, 128, 256), (32768, 256, 1), 0); del buf577  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_953, reinterpret_tensor(buf595, (16, 128, 256), (256, 4096, 1), 0), out=buf596)
    del permute_953
    buf597 = reinterpret_tensor(buf569, (16, 128, 128), (16384, 128, 1), 0); del buf569  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf595, (16, 128, 256), (256, 4096, 1), 0), permute_954, out=buf597)
    del permute_954
    buf598 = buf568; del buf568  # reuse
    buf599 = reinterpret_tensor(buf597, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf597  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_120(c_void_p(buf599.data_ptr()), c_void_p(alias_99.data_ptr()), c_void_p(slice_432.data_ptr()), c_void_p(primals_312.data_ptr()), c_void_p(buf598.data_ptr()))
    del alias_99
    del primals_312
    del slice_432
    buf600 = reinterpret_tensor(buf595, (16, 256, 128), (32768, 128, 1), 0); del buf595  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_955, reinterpret_tensor(buf599, (16, 128, 128), (16384, 128, 1), 0), out=buf600)
    del permute_955
    buf601 = reinterpret_tensor(buf574, (16, 128, 256), (32768, 256, 1), 0); del buf574  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf599, (16, 128, 128), (16384, 128, 1), 0), permute_956, out=buf601)
    del permute_956
    buf602 = buf561; del buf561  # reuse
    cpp_fused_view_121(c_void_p(buf596.data_ptr()), c_void_p(buf602.data_ptr()))
    buf603 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf602, (4096, 128), (1, 4096), 0), view_226, out=buf603)
    buf604 = reinterpret_tensor(buf596, (128, 4096), (4096, 1), 0); del buf596  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf602, permute_963, out=buf604)
    del permute_963
    buf605 = reinterpret_tensor(buf602, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf602  # reuse
    buf608 = reinterpret_tensor(buf570, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf570  # reuse
    cpp_fused_add_mul_neg_slice_backward_122(c_void_p(buf600.data_ptr()), c_void_p(unsqueeze_107.data_ptr()), c_void_p(unsqueeze_109.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(buf605.data_ptr()), c_void_p(buf608.data_ptr()))
    del unsqueeze_107
    del unsqueeze_109
    buf606 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf605, (4096, 128), (1, 4096), 0), view_226, out=buf606)
    buf607 = reinterpret_tensor(buf601, (128, 4096), (4096, 1), 0); del buf601  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf605, (128, 4096), (4096, 1), 0), permute_967, out=buf607)
    del permute_967
    buf609 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf608, (4096, 128), (1, 4096), 0), view_226, out=buf609)
    del view_226
    buf610 = reinterpret_tensor(buf605, (128, 4096), (4096, 1), 0); del buf605  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf608, (128, 4096), (4096, 1), 0), permute_971, out=buf610)
    del permute_971
    buf611 = reinterpret_tensor(buf608, (1, 128, 4096), (524288, 4096, 1), 0); del buf608  # reuse
    buf612 = buf583; del buf583  # reuse
    buf613 = buf582; del buf582  # reuse
    buf614 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf615 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf616 = buf586; del buf586  # reuse
    cpp_fused_add_native_layer_norm_backward_123(c_void_p(buf616.data_ptr()), c_void_p(buf591.data_ptr()), c_void_p(buf604.data_ptr()), c_void_p(buf607.data_ptr()), c_void_p(buf610.data_ptr()), c_void_p(primals_82.data_ptr()), c_void_p(mul_80.data_ptr()), c_void_p(div_102.data_ptr()), c_void_p(buf611.data_ptr()), c_void_p(buf612.data_ptr()), c_void_p(buf613.data_ptr()), c_void_p(buf614.data_ptr()), c_void_p(buf615.data_ptr()))
    del div_102
    del mul_80
    del primals_82
    buf617 = reinterpret_tensor(buf590, (128, 16384), (16384, 1), 0); del buf590  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf616, (128, 4096), (4096, 1), 0), permute_973, out=buf617)
    del permute_973
    buf618 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf616, (4096, 128), (1, 4096), 0), view_224, out=buf618)
    del view_224
    buf619 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf620 = reinterpret_tensor(buf617, (1, 128, 16384), (2097152, 16384, 1), 0); del buf617  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_124(c_void_p(buf620.data_ptr()), c_void_p(buf616.data_ptr()), c_void_p(addmm_14.data_ptr()), c_void_p(tanh_7.data_ptr()), c_void_p(buf619.data_ptr()))
    del addmm_14
    del tanh_7
    buf621 = reinterpret_tensor(buf611, (128, 4096), (4096, 1), 0); del buf611  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf620, (128, 16384), (16384, 1), 0), permute_977, out=buf621)
    del permute_977
    buf622 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf620, (16384, 128), (1, 16384), 0), view_198, out=buf622)
    buf623 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_125(c_void_p(buf620.data_ptr()), c_void_p(buf623.data_ptr()))
    buf624 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf616, (4096, 128), (1, 4096), 0), view_220, out=buf624)
    del view_220
    buf625 = buf610; del buf610  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf616, (128, 4096), (4096, 1), 0), permute_983, out=buf625)
    del permute_983
    buf626 = reinterpret_tensor(buf607, (16, 128, 256), (32768, 256, 1), 0); del buf607  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_986, reinterpret_tensor(buf625, (16, 128, 256), (256, 4096, 1), 0), out=buf626)
    del permute_986
    buf627 = reinterpret_tensor(buf599, (16, 128, 128), (16384, 128, 1), 0); del buf599  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf625, (16, 128, 256), (256, 4096, 1), 0), permute_987, out=buf627)
    del permute_987
    buf628 = buf598; del buf598  # reuse
    buf629 = reinterpret_tensor(buf627, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf627  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_126(c_void_p(buf629.data_ptr()), c_void_p(alias_101.data_ptr()), c_void_p(slice_384.data_ptr()), c_void_p(primals_309.data_ptr()), c_void_p(buf628.data_ptr()))
    del alias_101
    del primals_309
    del slice_384
    buf630 = reinterpret_tensor(buf625, (16, 256, 128), (32768, 128, 1), 0); del buf625  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_988, reinterpret_tensor(buf629, (16, 128, 128), (16384, 128, 1), 0), out=buf630)
    del permute_988
    buf631 = reinterpret_tensor(buf604, (16, 128, 256), (32768, 256, 1), 0); del buf604  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf629, (16, 128, 128), (16384, 128, 1), 0), permute_989, out=buf631)
    del permute_989
    buf632 = buf591; del buf591  # reuse
    cpp_fused_view_127(c_void_p(buf626.data_ptr()), c_void_p(buf632.data_ptr()))
    buf633 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf632, (4096, 128), (1, 4096), 0), view_198, out=buf633)
    buf634 = reinterpret_tensor(buf626, (128, 4096), (4096, 1), 0); del buf626  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf632, permute_996, out=buf634)
    del permute_996
    buf635 = reinterpret_tensor(buf632, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf632  # reuse
    buf638 = reinterpret_tensor(buf600, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf600  # reuse
    cpp_fused_add_mul_neg_slice_backward_128(c_void_p(buf630.data_ptr()), c_void_p(unsqueeze_94.data_ptr()), c_void_p(unsqueeze_96.data_ptr()), c_void_p(buf631.data_ptr()), c_void_p(buf635.data_ptr()), c_void_p(buf638.data_ptr()))
    del unsqueeze_94
    del unsqueeze_96
    buf636 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf635, (4096, 128), (1, 4096), 0), view_198, out=buf636)
    buf637 = reinterpret_tensor(buf631, (128, 4096), (4096, 1), 0); del buf631  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf635, (128, 4096), (4096, 1), 0), permute_1000, out=buf637)
    del permute_1000
    buf639 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf638, (4096, 128), (1, 4096), 0), view_198, out=buf639)
    del view_198
    buf640 = reinterpret_tensor(buf635, (128, 4096), (4096, 1), 0); del buf635  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf638, (128, 4096), (4096, 1), 0), permute_1004, out=buf640)
    del permute_1004
    buf641 = reinterpret_tensor(buf638, (1, 128, 4096), (524288, 4096, 1), 0); del buf638  # reuse
    buf642 = buf613; del buf613  # reuse
    buf643 = buf612; del buf612  # reuse
    buf644 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf645 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf646 = buf616; del buf616  # reuse
    cpp_fused_add_native_layer_norm_backward_129(c_void_p(buf646.data_ptr()), c_void_p(buf621.data_ptr()), c_void_p(buf634.data_ptr()), c_void_p(buf637.data_ptr()), c_void_p(buf640.data_ptr()), c_void_p(primals_72.data_ptr()), c_void_p(mul_70.data_ptr()), c_void_p(div_104.data_ptr()), c_void_p(buf641.data_ptr()), c_void_p(buf642.data_ptr()), c_void_p(buf643.data_ptr()), c_void_p(buf644.data_ptr()), c_void_p(buf645.data_ptr()))
    del div_104
    del mul_70
    del primals_72
    buf647 = reinterpret_tensor(buf620, (128, 16384), (16384, 1), 0); del buf620  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf646, (128, 4096), (4096, 1), 0), permute_1006, out=buf647)
    del permute_1006
    buf648 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf646, (4096, 128), (1, 4096), 0), view_196, out=buf648)
    del view_196
    buf649 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf650 = reinterpret_tensor(buf647, (1, 128, 16384), (2097152, 16384, 1), 0); del buf647  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_130(c_void_p(buf650.data_ptr()), c_void_p(buf646.data_ptr()), c_void_p(addmm_12.data_ptr()), c_void_p(tanh_6.data_ptr()), c_void_p(buf649.data_ptr()))
    del addmm_12
    del tanh_6
    buf651 = reinterpret_tensor(buf641, (128, 4096), (4096, 1), 0); del buf641  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf650, (128, 16384), (16384, 1), 0), permute_1010, out=buf651)
    del permute_1010
    buf652 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf650, (16384, 128), (1, 16384), 0), view_170, out=buf652)
    buf653 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_131(c_void_p(buf650.data_ptr()), c_void_p(buf653.data_ptr()))
    buf654 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf646, (4096, 128), (1, 4096), 0), view_192, out=buf654)
    del view_192
    buf655 = buf640; del buf640  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf646, (128, 4096), (4096, 1), 0), permute_1016, out=buf655)
    del permute_1016
    buf656 = reinterpret_tensor(buf637, (16, 128, 256), (32768, 256, 1), 0); del buf637  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1019, reinterpret_tensor(buf655, (16, 128, 256), (256, 4096, 1), 0), out=buf656)
    del permute_1019
    buf657 = reinterpret_tensor(buf629, (16, 128, 128), (16384, 128, 1), 0); del buf629  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf655, (16, 128, 256), (256, 4096, 1), 0), permute_1020, out=buf657)
    del permute_1020
    buf658 = buf628; del buf628  # reuse
    buf659 = reinterpret_tensor(buf657, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf657  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_132(c_void_p(buf659.data_ptr()), c_void_p(alias_103.data_ptr()), c_void_p(slice_336.data_ptr()), c_void_p(primals_306.data_ptr()), c_void_p(buf658.data_ptr()))
    del alias_103
    del primals_306
    del slice_336
    buf660 = reinterpret_tensor(buf655, (16, 256, 128), (32768, 128, 1), 0); del buf655  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1021, reinterpret_tensor(buf659, (16, 128, 128), (16384, 128, 1), 0), out=buf660)
    del permute_1021
    buf661 = reinterpret_tensor(buf634, (16, 128, 256), (32768, 256, 1), 0); del buf634  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf659, (16, 128, 128), (16384, 128, 1), 0), permute_1022, out=buf661)
    del permute_1022
    buf662 = buf621; del buf621  # reuse
    cpp_fused_view_133(c_void_p(buf656.data_ptr()), c_void_p(buf662.data_ptr()))
    buf663 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf662, (4096, 128), (1, 4096), 0), view_170, out=buf663)
    buf664 = reinterpret_tensor(buf656, (128, 4096), (4096, 1), 0); del buf656  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf662, permute_1029, out=buf664)
    del permute_1029
    buf665 = reinterpret_tensor(buf662, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf662  # reuse
    buf668 = reinterpret_tensor(buf630, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf630  # reuse
    cpp_fused_add_mul_neg_slice_backward_134(c_void_p(buf660.data_ptr()), c_void_p(unsqueeze_81.data_ptr()), c_void_p(unsqueeze_83.data_ptr()), c_void_p(buf661.data_ptr()), c_void_p(buf665.data_ptr()), c_void_p(buf668.data_ptr()))
    del unsqueeze_81
    del unsqueeze_83
    buf666 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf665, (4096, 128), (1, 4096), 0), view_170, out=buf666)
    buf667 = reinterpret_tensor(buf661, (128, 4096), (4096, 1), 0); del buf661  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf665, (128, 4096), (4096, 1), 0), permute_1033, out=buf667)
    del permute_1033
    buf669 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf668, (4096, 128), (1, 4096), 0), view_170, out=buf669)
    del view_170
    buf670 = reinterpret_tensor(buf665, (128, 4096), (4096, 1), 0); del buf665  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf668, (128, 4096), (4096, 1), 0), permute_1037, out=buf670)
    del permute_1037
    buf671 = reinterpret_tensor(buf668, (1, 128, 4096), (524288, 4096, 1), 0); del buf668  # reuse
    buf672 = buf643; del buf643  # reuse
    buf673 = buf642; del buf642  # reuse
    buf674 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf675 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf676 = buf646; del buf646  # reuse
    cpp_fused_add_native_layer_norm_backward_135(c_void_p(buf676.data_ptr()), c_void_p(buf651.data_ptr()), c_void_p(buf664.data_ptr()), c_void_p(buf667.data_ptr()), c_void_p(buf670.data_ptr()), c_void_p(primals_62.data_ptr()), c_void_p(mul_60.data_ptr()), c_void_p(div_106.data_ptr()), c_void_p(buf671.data_ptr()), c_void_p(buf672.data_ptr()), c_void_p(buf673.data_ptr()), c_void_p(buf674.data_ptr()), c_void_p(buf675.data_ptr()))
    del div_106
    del mul_60
    del primals_62
    buf677 = reinterpret_tensor(buf650, (128, 16384), (16384, 1), 0); del buf650  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf676, (128, 4096), (4096, 1), 0), permute_1039, out=buf677)
    del permute_1039
    buf678 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf676, (4096, 128), (1, 4096), 0), view_168, out=buf678)
    del view_168
    buf679 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf680 = reinterpret_tensor(buf677, (1, 128, 16384), (2097152, 16384, 1), 0); del buf677  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_136(c_void_p(buf680.data_ptr()), c_void_p(buf676.data_ptr()), c_void_p(addmm_10.data_ptr()), c_void_p(tanh_5.data_ptr()), c_void_p(buf679.data_ptr()))
    del addmm_10
    del tanh_5
    buf681 = reinterpret_tensor(buf671, (128, 4096), (4096, 1), 0); del buf671  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf680, (128, 16384), (16384, 1), 0), permute_1043, out=buf681)
    del permute_1043
    buf682 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf680, (16384, 128), (1, 16384), 0), view_142, out=buf682)
    buf683 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_137(c_void_p(buf680.data_ptr()), c_void_p(buf683.data_ptr()))
    buf684 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf676, (4096, 128), (1, 4096), 0), view_164, out=buf684)
    del view_164
    buf685 = buf670; del buf670  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf676, (128, 4096), (4096, 1), 0), permute_1049, out=buf685)
    del permute_1049
    buf686 = reinterpret_tensor(buf667, (16, 128, 256), (32768, 256, 1), 0); del buf667  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1052, reinterpret_tensor(buf685, (16, 128, 256), (256, 4096, 1), 0), out=buf686)
    del permute_1052
    buf687 = reinterpret_tensor(buf659, (16, 128, 128), (16384, 128, 1), 0); del buf659  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf685, (16, 128, 256), (256, 4096, 1), 0), permute_1053, out=buf687)
    del permute_1053
    buf688 = buf658; del buf658  # reuse
    buf689 = reinterpret_tensor(buf687, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf687  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_138(c_void_p(buf689.data_ptr()), c_void_p(alias_105.data_ptr()), c_void_p(slice_288.data_ptr()), c_void_p(primals_303.data_ptr()), c_void_p(buf688.data_ptr()))
    del alias_105
    del primals_303
    del slice_288
    buf690 = reinterpret_tensor(buf685, (16, 256, 128), (32768, 128, 1), 0); del buf685  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1054, reinterpret_tensor(buf689, (16, 128, 128), (16384, 128, 1), 0), out=buf690)
    del permute_1054
    buf691 = reinterpret_tensor(buf664, (16, 128, 256), (32768, 256, 1), 0); del buf664  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf689, (16, 128, 128), (16384, 128, 1), 0), permute_1055, out=buf691)
    del permute_1055
    buf692 = buf651; del buf651  # reuse
    cpp_fused_view_139(c_void_p(buf686.data_ptr()), c_void_p(buf692.data_ptr()))
    buf693 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf692, (4096, 128), (1, 4096), 0), view_142, out=buf693)
    buf694 = reinterpret_tensor(buf686, (128, 4096), (4096, 1), 0); del buf686  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf692, permute_1062, out=buf694)
    del permute_1062
    buf695 = reinterpret_tensor(buf692, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf692  # reuse
    buf698 = reinterpret_tensor(buf660, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf660  # reuse
    cpp_fused_add_mul_neg_slice_backward_140(c_void_p(buf690.data_ptr()), c_void_p(unsqueeze_68.data_ptr()), c_void_p(unsqueeze_70.data_ptr()), c_void_p(buf691.data_ptr()), c_void_p(buf695.data_ptr()), c_void_p(buf698.data_ptr()))
    del unsqueeze_68
    del unsqueeze_70
    buf696 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf695, (4096, 128), (1, 4096), 0), view_142, out=buf696)
    buf697 = reinterpret_tensor(buf691, (128, 4096), (4096, 1), 0); del buf691  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf695, (128, 4096), (4096, 1), 0), permute_1066, out=buf697)
    del permute_1066
    buf699 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf698, (4096, 128), (1, 4096), 0), view_142, out=buf699)
    del view_142
    buf700 = reinterpret_tensor(buf695, (128, 4096), (4096, 1), 0); del buf695  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf698, (128, 4096), (4096, 1), 0), permute_1070, out=buf700)
    del permute_1070
    buf701 = reinterpret_tensor(buf698, (1, 128, 4096), (524288, 4096, 1), 0); del buf698  # reuse
    buf702 = buf673; del buf673  # reuse
    buf703 = buf672; del buf672  # reuse
    buf704 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf705 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf706 = buf676; del buf676  # reuse
    cpp_fused_add_native_layer_norm_backward_141(c_void_p(buf706.data_ptr()), c_void_p(buf681.data_ptr()), c_void_p(buf694.data_ptr()), c_void_p(buf697.data_ptr()), c_void_p(buf700.data_ptr()), c_void_p(primals_52.data_ptr()), c_void_p(mul_50.data_ptr()), c_void_p(div_108.data_ptr()), c_void_p(buf701.data_ptr()), c_void_p(buf702.data_ptr()), c_void_p(buf703.data_ptr()), c_void_p(buf704.data_ptr()), c_void_p(buf705.data_ptr()))
    del div_108
    del mul_50
    del primals_52
    buf707 = reinterpret_tensor(buf680, (128, 16384), (16384, 1), 0); del buf680  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf706, (128, 4096), (4096, 1), 0), permute_1072, out=buf707)
    del permute_1072
    buf708 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf706, (4096, 128), (1, 4096), 0), view_140, out=buf708)
    del view_140
    buf709 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf710 = reinterpret_tensor(buf707, (1, 128, 16384), (2097152, 16384, 1), 0); del buf707  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_142(c_void_p(buf710.data_ptr()), c_void_p(buf706.data_ptr()), c_void_p(addmm_8.data_ptr()), c_void_p(tanh_4.data_ptr()), c_void_p(buf709.data_ptr()))
    del addmm_8
    del tanh_4
    buf711 = reinterpret_tensor(buf701, (128, 4096), (4096, 1), 0); del buf701  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf710, (128, 16384), (16384, 1), 0), permute_1076, out=buf711)
    del permute_1076
    buf712 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf710, (16384, 128), (1, 16384), 0), view_114, out=buf712)
    buf713 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_143(c_void_p(buf710.data_ptr()), c_void_p(buf713.data_ptr()))
    buf714 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf706, (4096, 128), (1, 4096), 0), view_136, out=buf714)
    del view_136
    buf715 = buf700; del buf700  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf706, (128, 4096), (4096, 1), 0), permute_1082, out=buf715)
    del permute_1082
    buf716 = reinterpret_tensor(buf697, (16, 128, 256), (32768, 256, 1), 0); del buf697  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1085, reinterpret_tensor(buf715, (16, 128, 256), (256, 4096, 1), 0), out=buf716)
    del permute_1085
    buf717 = reinterpret_tensor(buf689, (16, 128, 128), (16384, 128, 1), 0); del buf689  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf715, (16, 128, 256), (256, 4096, 1), 0), permute_1086, out=buf717)
    del permute_1086
    buf718 = buf688; del buf688  # reuse
    buf719 = reinterpret_tensor(buf717, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf717  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_144(c_void_p(buf719.data_ptr()), c_void_p(alias_107.data_ptr()), c_void_p(slice_240.data_ptr()), c_void_p(primals_300.data_ptr()), c_void_p(buf718.data_ptr()))
    del alias_107
    del primals_300
    del slice_240
    buf720 = reinterpret_tensor(buf715, (16, 256, 128), (32768, 128, 1), 0); del buf715  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1087, reinterpret_tensor(buf719, (16, 128, 128), (16384, 128, 1), 0), out=buf720)
    del permute_1087
    buf721 = reinterpret_tensor(buf694, (16, 128, 256), (32768, 256, 1), 0); del buf694  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf719, (16, 128, 128), (16384, 128, 1), 0), permute_1088, out=buf721)
    del permute_1088
    buf722 = buf681; del buf681  # reuse
    cpp_fused_view_145(c_void_p(buf716.data_ptr()), c_void_p(buf722.data_ptr()))
    buf723 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf722, (4096, 128), (1, 4096), 0), view_114, out=buf723)
    buf724 = reinterpret_tensor(buf716, (128, 4096), (4096, 1), 0); del buf716  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf722, permute_1095, out=buf724)
    del permute_1095
    buf725 = reinterpret_tensor(buf722, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf722  # reuse
    buf728 = reinterpret_tensor(buf690, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf690  # reuse
    cpp_fused_add_mul_neg_slice_backward_146(c_void_p(buf720.data_ptr()), c_void_p(unsqueeze_55.data_ptr()), c_void_p(unsqueeze_57.data_ptr()), c_void_p(buf721.data_ptr()), c_void_p(buf725.data_ptr()), c_void_p(buf728.data_ptr()))
    del unsqueeze_55
    del unsqueeze_57
    buf726 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf725, (4096, 128), (1, 4096), 0), view_114, out=buf726)
    buf727 = reinterpret_tensor(buf721, (128, 4096), (4096, 1), 0); del buf721  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf725, (128, 4096), (4096, 1), 0), permute_1099, out=buf727)
    del permute_1099
    buf729 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf728, (4096, 128), (1, 4096), 0), view_114, out=buf729)
    del view_114
    buf730 = reinterpret_tensor(buf725, (128, 4096), (4096, 1), 0); del buf725  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf728, (128, 4096), (4096, 1), 0), permute_1103, out=buf730)
    del permute_1103
    buf731 = reinterpret_tensor(buf728, (1, 128, 4096), (524288, 4096, 1), 0); del buf728  # reuse
    buf732 = buf703; del buf703  # reuse
    buf733 = buf702; del buf702  # reuse
    buf734 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf735 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf736 = buf706; del buf706  # reuse
    cpp_fused_add_native_layer_norm_backward_147(c_void_p(buf736.data_ptr()), c_void_p(buf711.data_ptr()), c_void_p(buf724.data_ptr()), c_void_p(buf727.data_ptr()), c_void_p(buf730.data_ptr()), c_void_p(primals_42.data_ptr()), c_void_p(mul_40.data_ptr()), c_void_p(div_110.data_ptr()), c_void_p(buf731.data_ptr()), c_void_p(buf732.data_ptr()), c_void_p(buf733.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf735.data_ptr()))
    del div_110
    del mul_40
    del primals_42
    buf737 = reinterpret_tensor(buf710, (128, 16384), (16384, 1), 0); del buf710  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf736, (128, 4096), (4096, 1), 0), permute_1105, out=buf737)
    del permute_1105
    buf738 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf736, (4096, 128), (1, 4096), 0), view_112, out=buf738)
    del view_112
    buf739 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf740 = reinterpret_tensor(buf737, (1, 128, 16384), (2097152, 16384, 1), 0); del buf737  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_148(c_void_p(buf740.data_ptr()), c_void_p(buf736.data_ptr()), c_void_p(addmm_6.data_ptr()), c_void_p(tanh_3.data_ptr()), c_void_p(buf739.data_ptr()))
    del addmm_6
    del tanh_3
    buf741 = reinterpret_tensor(buf731, (128, 4096), (4096, 1), 0); del buf731  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf740, (128, 16384), (16384, 1), 0), permute_1109, out=buf741)
    del permute_1109
    buf742 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf740, (16384, 128), (1, 16384), 0), view_86, out=buf742)
    buf743 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_149(c_void_p(buf740.data_ptr()), c_void_p(buf743.data_ptr()))
    buf744 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf736, (4096, 128), (1, 4096), 0), view_108, out=buf744)
    del view_108
    buf745 = buf730; del buf730  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf736, (128, 4096), (4096, 1), 0), permute_1115, out=buf745)
    del permute_1115
    buf746 = reinterpret_tensor(buf727, (16, 128, 256), (32768, 256, 1), 0); del buf727  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1118, reinterpret_tensor(buf745, (16, 128, 256), (256, 4096, 1), 0), out=buf746)
    del permute_1118
    buf747 = reinterpret_tensor(buf719, (16, 128, 128), (16384, 128, 1), 0); del buf719  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf745, (16, 128, 256), (256, 4096, 1), 0), permute_1119, out=buf747)
    del permute_1119
    buf748 = buf718; del buf718  # reuse
    buf749 = reinterpret_tensor(buf747, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf747  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_150(c_void_p(buf749.data_ptr()), c_void_p(alias_109.data_ptr()), c_void_p(slice_192.data_ptr()), c_void_p(primals_297.data_ptr()), c_void_p(buf748.data_ptr()))
    del alias_109
    del primals_297
    del slice_192
    buf750 = reinterpret_tensor(buf745, (16, 256, 128), (32768, 128, 1), 0); del buf745  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1120, reinterpret_tensor(buf749, (16, 128, 128), (16384, 128, 1), 0), out=buf750)
    del permute_1120
    buf751 = reinterpret_tensor(buf724, (16, 128, 256), (32768, 256, 1), 0); del buf724  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf749, (16, 128, 128), (16384, 128, 1), 0), permute_1121, out=buf751)
    del permute_1121
    buf752 = buf711; del buf711  # reuse
    cpp_fused_view_151(c_void_p(buf746.data_ptr()), c_void_p(buf752.data_ptr()))
    buf753 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf752, (4096, 128), (1, 4096), 0), view_86, out=buf753)
    buf754 = reinterpret_tensor(buf746, (128, 4096), (4096, 1), 0); del buf746  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf752, permute_1128, out=buf754)
    del permute_1128
    buf755 = reinterpret_tensor(buf752, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf752  # reuse
    buf758 = reinterpret_tensor(buf720, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf720  # reuse
    cpp_fused_add_mul_neg_slice_backward_152(c_void_p(buf750.data_ptr()), c_void_p(unsqueeze_42.data_ptr()), c_void_p(unsqueeze_44.data_ptr()), c_void_p(buf751.data_ptr()), c_void_p(buf755.data_ptr()), c_void_p(buf758.data_ptr()))
    del unsqueeze_42
    del unsqueeze_44
    buf756 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf755, (4096, 128), (1, 4096), 0), view_86, out=buf756)
    buf757 = reinterpret_tensor(buf751, (128, 4096), (4096, 1), 0); del buf751  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf755, (128, 4096), (4096, 1), 0), permute_1132, out=buf757)
    del permute_1132
    buf759 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf758, (4096, 128), (1, 4096), 0), view_86, out=buf759)
    del view_86
    buf760 = reinterpret_tensor(buf755, (128, 4096), (4096, 1), 0); del buf755  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf758, (128, 4096), (4096, 1), 0), permute_1136, out=buf760)
    del permute_1136
    buf761 = reinterpret_tensor(buf758, (1, 128, 4096), (524288, 4096, 1), 0); del buf758  # reuse
    buf762 = buf733; del buf733  # reuse
    buf763 = buf732; del buf732  # reuse
    buf764 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf765 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf766 = buf736; del buf736  # reuse
    cpp_fused_add_native_layer_norm_backward_153(c_void_p(buf766.data_ptr()), c_void_p(buf741.data_ptr()), c_void_p(buf754.data_ptr()), c_void_p(buf757.data_ptr()), c_void_p(buf760.data_ptr()), c_void_p(primals_32.data_ptr()), c_void_p(mul_30.data_ptr()), c_void_p(div_112.data_ptr()), c_void_p(buf761.data_ptr()), c_void_p(buf762.data_ptr()), c_void_p(buf763.data_ptr()), c_void_p(buf764.data_ptr()), c_void_p(buf765.data_ptr()))
    del div_112
    del mul_30
    del primals_32
    buf767 = reinterpret_tensor(buf740, (128, 16384), (16384, 1), 0); del buf740  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (128, 4096), (4096, 1), 0), permute_1138, out=buf767)
    del permute_1138
    buf768 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (4096, 128), (1, 4096), 0), view_84, out=buf768)
    del view_84
    buf769 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf770 = reinterpret_tensor(buf767, (1, 128, 16384), (2097152, 16384, 1), 0); del buf767  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_154(c_void_p(buf770.data_ptr()), c_void_p(buf766.data_ptr()), c_void_p(addmm_4.data_ptr()), c_void_p(tanh_2.data_ptr()), c_void_p(buf769.data_ptr()))
    del addmm_4
    del tanh_2
    buf771 = reinterpret_tensor(buf761, (128, 4096), (4096, 1), 0); del buf761  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf770, (128, 16384), (16384, 1), 0), permute_1142, out=buf771)
    del permute_1142
    buf772 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf770, (16384, 128), (1, 16384), 0), view_58, out=buf772)
    buf773 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_155(c_void_p(buf770.data_ptr()), c_void_p(buf773.data_ptr()))
    buf774 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (4096, 128), (1, 4096), 0), view_80, out=buf774)
    del view_80
    buf775 = buf760; del buf760  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (128, 4096), (4096, 1), 0), permute_1148, out=buf775)
    del permute_1148
    buf776 = reinterpret_tensor(buf757, (16, 128, 256), (32768, 256, 1), 0); del buf757  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1151, reinterpret_tensor(buf775, (16, 128, 256), (256, 4096, 1), 0), out=buf776)
    del permute_1151
    buf777 = reinterpret_tensor(buf749, (16, 128, 128), (16384, 128, 1), 0); del buf749  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf775, (16, 128, 256), (256, 4096, 1), 0), permute_1152, out=buf777)
    del permute_1152
    buf778 = buf748; del buf748  # reuse
    buf779 = reinterpret_tensor(buf777, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf777  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_156(c_void_p(buf779.data_ptr()), c_void_p(alias_111.data_ptr()), c_void_p(slice_144.data_ptr()), c_void_p(primals_294.data_ptr()), c_void_p(buf778.data_ptr()))
    del alias_111
    del primals_294
    del slice_144
    buf780 = reinterpret_tensor(buf775, (16, 256, 128), (32768, 128, 1), 0); del buf775  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1153, reinterpret_tensor(buf779, (16, 128, 128), (16384, 128, 1), 0), out=buf780)
    del permute_1153
    buf781 = reinterpret_tensor(buf754, (16, 128, 256), (32768, 256, 1), 0); del buf754  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf779, (16, 128, 128), (16384, 128, 1), 0), permute_1154, out=buf781)
    del permute_1154
    buf782 = buf741; del buf741  # reuse
    cpp_fused_view_157(c_void_p(buf776.data_ptr()), c_void_p(buf782.data_ptr()))
    buf783 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf782, (4096, 128), (1, 4096), 0), view_58, out=buf783)
    buf784 = reinterpret_tensor(buf776, (128, 4096), (4096, 1), 0); del buf776  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf782, permute_1161, out=buf784)
    del permute_1161
    buf785 = reinterpret_tensor(buf782, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf782  # reuse
    buf788 = reinterpret_tensor(buf750, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf750  # reuse
    cpp_fused_add_mul_neg_slice_backward_158(c_void_p(buf780.data_ptr()), c_void_p(unsqueeze_29.data_ptr()), c_void_p(unsqueeze_31.data_ptr()), c_void_p(buf781.data_ptr()), c_void_p(buf785.data_ptr()), c_void_p(buf788.data_ptr()))
    del unsqueeze_29
    del unsqueeze_31
    buf786 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf785, (4096, 128), (1, 4096), 0), view_58, out=buf786)
    buf787 = reinterpret_tensor(buf781, (128, 4096), (4096, 1), 0); del buf781  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf785, (128, 4096), (4096, 1), 0), permute_1165, out=buf787)
    del permute_1165
    buf789 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf788, (4096, 128), (1, 4096), 0), view_58, out=buf789)
    del view_58
    buf790 = reinterpret_tensor(buf785, (128, 4096), (4096, 1), 0); del buf785  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf788, (128, 4096), (4096, 1), 0), permute_1169, out=buf790)
    del permute_1169
    buf791 = reinterpret_tensor(buf788, (1, 128, 4096), (524288, 4096, 1), 0); del buf788  # reuse
    buf792 = buf763; del buf763  # reuse
    buf793 = buf762; del buf762  # reuse
    buf794 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf795 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf796 = buf766; del buf766  # reuse
    cpp_fused_add_native_layer_norm_backward_159(c_void_p(buf796.data_ptr()), c_void_p(buf771.data_ptr()), c_void_p(buf784.data_ptr()), c_void_p(buf787.data_ptr()), c_void_p(buf790.data_ptr()), c_void_p(primals_22.data_ptr()), c_void_p(mul_20.data_ptr()), c_void_p(div_114.data_ptr()), c_void_p(buf791.data_ptr()), c_void_p(buf792.data_ptr()), c_void_p(buf793.data_ptr()), c_void_p(buf794.data_ptr()), c_void_p(buf795.data_ptr()))
    del div_114
    del mul_20
    del primals_22
    buf797 = reinterpret_tensor(buf770, (128, 16384), (16384, 1), 0); del buf770  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf796, (128, 4096), (4096, 1), 0), permute_1171, out=buf797)
    del permute_1171
    buf798 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf796, (4096, 128), (1, 4096), 0), view_56, out=buf798)
    del view_56
    buf799 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf800 = reinterpret_tensor(buf797, (1, 128, 16384), (2097152, 16384, 1), 0); del buf797  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_160(c_void_p(buf800.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(addmm_2.data_ptr()), c_void_p(tanh_1.data_ptr()), c_void_p(buf799.data_ptr()))
    del addmm_2
    del tanh_1
    buf801 = reinterpret_tensor(buf791, (128, 4096), (4096, 1), 0); del buf791  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf800, (128, 16384), (16384, 1), 0), permute_1175, out=buf801)
    del permute_1175
    buf802 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf800, (16384, 128), (1, 16384), 0), view_30, out=buf802)
    buf803 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_161(c_void_p(buf800.data_ptr()), c_void_p(buf803.data_ptr()))
    buf804 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf796, (4096, 128), (1, 4096), 0), view_52, out=buf804)
    del view_52
    buf805 = buf790; del buf790  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf796, (128, 4096), (4096, 1), 0), permute_1181, out=buf805)
    del permute_1181
    buf806 = reinterpret_tensor(buf787, (16, 128, 256), (32768, 256, 1), 0); del buf787  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1184, reinterpret_tensor(buf805, (16, 128, 256), (256, 4096, 1), 0), out=buf806)
    del permute_1184
    buf807 = reinterpret_tensor(buf779, (16, 128, 128), (16384, 128, 1), 0); del buf779  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf805, (16, 128, 256), (256, 4096, 1), 0), permute_1185, out=buf807)
    del permute_1185
    buf808 = buf778; del buf778  # reuse
    buf809 = reinterpret_tensor(buf807, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf807  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_162(c_void_p(buf809.data_ptr()), c_void_p(alias_113.data_ptr()), c_void_p(slice_96.data_ptr()), c_void_p(primals_291.data_ptr()), c_void_p(buf808.data_ptr()))
    del alias_113
    del primals_291
    del slice_96
    buf810 = reinterpret_tensor(buf805, (16, 256, 128), (32768, 128, 1), 0); del buf805  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1186, reinterpret_tensor(buf809, (16, 128, 128), (16384, 128, 1), 0), out=buf810)
    del permute_1186
    buf811 = reinterpret_tensor(buf784, (16, 128, 256), (32768, 256, 1), 0); del buf784  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf809, (16, 128, 128), (16384, 128, 1), 0), permute_1187, out=buf811)
    del permute_1187
    buf812 = buf771; del buf771  # reuse
    cpp_fused_view_163(c_void_p(buf806.data_ptr()), c_void_p(buf812.data_ptr()))
    buf813 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf812, (4096, 128), (1, 4096), 0), view_30, out=buf813)
    buf814 = reinterpret_tensor(buf806, (128, 4096), (4096, 1), 0); del buf806  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf812, permute_1194, out=buf814)
    del permute_1194
    buf815 = reinterpret_tensor(buf812, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf812  # reuse
    buf818 = reinterpret_tensor(buf780, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf780  # reuse
    cpp_fused_add_mul_neg_slice_backward_164(c_void_p(buf810.data_ptr()), c_void_p(unsqueeze_16.data_ptr()), c_void_p(unsqueeze_18.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(buf815.data_ptr()), c_void_p(buf818.data_ptr()))
    del unsqueeze_16
    del unsqueeze_18
    buf816 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf815, (4096, 128), (1, 4096), 0), view_30, out=buf816)
    buf817 = reinterpret_tensor(buf811, (128, 4096), (4096, 1), 0); del buf811  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf815, (128, 4096), (4096, 1), 0), permute_1198, out=buf817)
    del permute_1198
    buf819 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf818, (4096, 128), (1, 4096), 0), view_30, out=buf819)
    del view_30
    buf820 = reinterpret_tensor(buf815, (128, 4096), (4096, 1), 0); del buf815  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf818, (128, 4096), (4096, 1), 0), permute_1202, out=buf820)
    del permute_1202
    buf821 = reinterpret_tensor(buf818, (1, 128, 4096), (524288, 4096, 1), 0); del buf818  # reuse
    buf822 = buf793; del buf793  # reuse
    buf823 = buf792; del buf792  # reuse
    buf824 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf825 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf826 = buf796; del buf796  # reuse
    cpp_fused_add_native_layer_norm_backward_165(c_void_p(buf826.data_ptr()), c_void_p(buf801.data_ptr()), c_void_p(buf814.data_ptr()), c_void_p(buf817.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(primals_12.data_ptr()), c_void_p(mul_10.data_ptr()), c_void_p(div_116.data_ptr()), c_void_p(buf821.data_ptr()), c_void_p(buf822.data_ptr()), c_void_p(buf823.data_ptr()), c_void_p(buf824.data_ptr()), c_void_p(buf825.data_ptr()))
    del div_116
    del mul_10
    del primals_12
    buf827 = reinterpret_tensor(buf800, (128, 16384), (16384, 1), 0); del buf800  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf826, (128, 4096), (4096, 1), 0), permute_1204, out=buf827)
    del permute_1204
    buf828 = empty((4096, 16384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf826, (4096, 128), (1, 4096), 0), view_28, out=buf828)
    del view_28
    buf829 = empty((1, 4096), device='cpu', dtype=torch.float32)
    buf830 = reinterpret_tensor(buf827, (1, 128, 16384), (2097152, 16384, 1), 0); del buf827  # reuse
    cpp_fused_add_mul_pow_sum_tanh_backward_166(c_void_p(buf830.data_ptr()), c_void_p(buf826.data_ptr()), c_void_p(addmm.data_ptr()), c_void_p(tanh.data_ptr()), c_void_p(buf829.data_ptr()))
    del addmm
    del tanh
    buf831 = reinterpret_tensor(buf821, (128, 4096), (4096, 1), 0); del buf821  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf830, (128, 16384), (16384, 1), 0), permute_1208, out=buf831)
    del permute_1208
    buf832 = empty((16384, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf830, (16384, 128), (1, 16384), 0), view_2, out=buf832)
    buf833 = empty((1, 16384), device='cpu', dtype=torch.float32)
    cpp_fused_sum_167(c_void_p(buf830.data_ptr()), c_void_p(buf833.data_ptr()))
    del buf830
    buf834 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf826, (4096, 128), (1, 4096), 0), view_24, out=buf834)
    del view_24
    buf835 = buf820; del buf820  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf826, (128, 4096), (4096, 1), 0), permute_1214, out=buf835)
    del permute_1214
    buf836 = reinterpret_tensor(buf817, (16, 128, 256), (32768, 256, 1), 0); del buf817  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1217, reinterpret_tensor(buf835, (16, 128, 256), (256, 4096, 1), 0), out=buf836)
    del permute_1217
    buf837 = reinterpret_tensor(buf809, (16, 128, 128), (16384, 128, 1), 0); del buf809  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf835, (16, 128, 256), (256, 4096, 1), 0), permute_1218, out=buf837)
    del permute_1218
    buf838 = buf808; del buf808  # reuse
    buf839 = reinterpret_tensor(buf837, (1, 16, 128, 128), (262144, 16384, 128, 1), 0); del buf837  # reuse
    cpp_fused__softmax_backward_data_div_nll_loss_forward_where_168(c_void_p(buf839.data_ptr()), c_void_p(alias_115.data_ptr()), c_void_p(slice_48.data_ptr()), c_void_p(primals_288.data_ptr()), c_void_p(buf838.data_ptr()))
    del alias_115
    del buf838
    del primals_288
    del slice_48
    buf840 = reinterpret_tensor(buf835, (16, 256, 128), (32768, 128, 1), 0); del buf835  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(permute_1219, reinterpret_tensor(buf839, (16, 128, 128), (16384, 128, 1), 0), out=buf840)
    del permute_1219
    buf841 = reinterpret_tensor(buf814, (16, 128, 256), (32768, 256, 1), 0); del buf814  # reuse
    # Source Nodes: [], Original ATen: [aten.bmm]
    extern_kernels.bmm(reinterpret_tensor(buf839, (16, 128, 128), (16384, 128, 1), 0), permute_1220, out=buf841)
    del buf839
    del permute_1220
    buf842 = buf801; del buf801  # reuse
    cpp_fused_view_169(c_void_p(buf836.data_ptr()), c_void_p(buf842.data_ptr()))
    buf843 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf842, (4096, 128), (1, 4096), 0), view_2, out=buf843)
    buf844 = reinterpret_tensor(buf836, (128, 4096), (4096, 1), 0); del buf836  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf842, permute_1227, out=buf844)
    del permute_1227
    buf845 = reinterpret_tensor(buf842, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf842  # reuse
    buf848 = reinterpret_tensor(buf810, (1, 128, 16, 256), (524288, 4096, 256, 1), 0); del buf810  # reuse
    cpp_fused_add_mul_neg_slice_backward_170(c_void_p(buf840.data_ptr()), c_void_p(unsqueeze_3.data_ptr()), c_void_p(unsqueeze_5.data_ptr()), c_void_p(buf841.data_ptr()), c_void_p(buf845.data_ptr()), c_void_p(buf848.data_ptr()))
    del buf840
    del unsqueeze_3
    del unsqueeze_5
    buf846 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf845, (4096, 128), (1, 4096), 0), view_2, out=buf846)
    buf847 = reinterpret_tensor(buf841, (128, 4096), (4096, 1), 0); del buf841  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf845, (128, 4096), (4096, 1), 0), permute_1231, out=buf847)
    del permute_1231
    buf849 = empty((4096, 4096), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf848, (4096, 128), (1, 4096), 0), view_2, out=buf849)
    del view_2
    buf850 = reinterpret_tensor(buf845, (128, 4096), (4096, 1), 0); del buf845  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf848, (128, 4096), (4096, 1), 0), permute_1235, out=buf850)
    del permute_1235
    buf851 = reinterpret_tensor(buf848, (1, 128, 4096), (524288, 4096, 1), 0); del buf848  # reuse
    buf852 = buf823; del buf823  # reuse
    buf853 = buf822; del buf822  # reuse
    buf854 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf855 = empty((4096, ), device='cpu', dtype=torch.float32)
    buf856 = empty((50400, 4096), device='cpu', dtype=torch.float32)
    buf857 = buf826; del buf826  # reuse
    cpp_fused_add_embedding_dense_backward_native_layer_norm_native_layer_norm_backward_nll_loss_forward_171(c_void_p(buf857.data_ptr()), c_void_p(buf831.data_ptr()), c_void_p(buf844.data_ptr()), c_void_p(buf847.data_ptr()), c_void_p(buf850.data_ptr()), c_void_p(primals_2.data_ptr()), c_void_p(embedding.data_ptr()), c_void_p(getitem_1.data_ptr()), c_void_p(rsqrt.data_ptr()), c_void_p(view.data_ptr()), c_void_p(buf851.data_ptr()), c_void_p(buf852.data_ptr()), c_void_p(buf853.data_ptr()), c_void_p(buf854.data_ptr()), c_void_p(buf855.data_ptr()), c_void_p(buf856.data_ptr()))
    del buf831
    del buf844
    del buf847
    del buf850
    del buf851
    del buf852
    del buf853
    del embedding
    del getitem_1
    del primals_2
    del rsqrt
    aten.index_put_(buf856, [view], buf857, True)
    del buf857
    del view
    return (buf856, buf854, buf855, reinterpret_tensor(buf849, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf846, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf843, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf834, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf832, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf833, (16384, ), (1, ), 0), reinterpret_tensor(buf828, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf829, (4096, ), (1, ), 0), buf824, buf825, reinterpret_tensor(buf819, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf816, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf813, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf804, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf802, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf803, (16384, ), (1, ), 0), reinterpret_tensor(buf798, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf799, (4096, ), (1, ), 0), buf794, buf795, reinterpret_tensor(buf789, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf786, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf783, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf774, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf772, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf773, (16384, ), (1, ), 0), reinterpret_tensor(buf768, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf769, (4096, ), (1, ), 0), buf764, buf765, reinterpret_tensor(buf759, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf756, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf753, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf744, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf742, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf743, (16384, ), (1, ), 0), reinterpret_tensor(buf738, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf739, (4096, ), (1, ), 0), buf734, buf735, reinterpret_tensor(buf729, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf726, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf723, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf714, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf712, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf713, (16384, ), (1, ), 0), reinterpret_tensor(buf708, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf709, (4096, ), (1, ), 0), buf704, buf705, reinterpret_tensor(buf699, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf696, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf693, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf684, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf682, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf683, (16384, ), (1, ), 0), reinterpret_tensor(buf678, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf679, (4096, ), (1, ), 0), buf674, buf675, reinterpret_tensor(buf669, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf666, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf663, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf654, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf652, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf653, (16384, ), (1, ), 0), reinterpret_tensor(buf648, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf649, (4096, ), (1, ), 0), buf644, buf645, reinterpret_tensor(buf639, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf636, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf633, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf624, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf622, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf623, (16384, ), (1, ), 0), reinterpret_tensor(buf618, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf619, (4096, ), (1, ), 0), buf614, buf615, reinterpret_tensor(buf609, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf606, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf603, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf594, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf592, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf593, (16384, ), (1, ), 0), reinterpret_tensor(buf588, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf589, (4096, ), (1, ), 0), buf584, buf585, reinterpret_tensor(buf579, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf576, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf573, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf564, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf562, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf563, (16384, ), (1, ), 0), reinterpret_tensor(buf558, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf559, (4096, ), (1, ), 0), buf554, buf555, reinterpret_tensor(buf549, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf546, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf543, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf534, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf532, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf533, (16384, ), (1, ), 0), reinterpret_tensor(buf528, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf529, (4096, ), (1, ), 0), buf524, buf525, reinterpret_tensor(buf519, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf516, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf513, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf504, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf502, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf503, (16384, ), (1, ), 0), reinterpret_tensor(buf498, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf499, (4096, ), (1, ), 0), buf494, buf495, reinterpret_tensor(buf489, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf486, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf483, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf474, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf472, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf473, (16384, ), (1, ), 0), reinterpret_tensor(buf468, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf469, (4096, ), (1, ), 0), buf464, buf465, reinterpret_tensor(buf459, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf456, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf453, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf444, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf442, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf443, (16384, ), (1, ), 0), reinterpret_tensor(buf438, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf439, (4096, ), (1, ), 0), buf434, buf435, reinterpret_tensor(buf429, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf426, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf423, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf414, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf412, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf413, (16384, ), (1, ), 0), reinterpret_tensor(buf408, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf409, (4096, ), (1, ), 0), buf404, buf405, reinterpret_tensor(buf399, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf396, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf393, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf384, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf382, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf383, (16384, ), (1, ), 0), reinterpret_tensor(buf378, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf379, (4096, ), (1, ), 0), buf374, buf375, reinterpret_tensor(buf369, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf366, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf363, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf354, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf352, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf353, (16384, ), (1, ), 0), reinterpret_tensor(buf348, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf349, (4096, ), (1, ), 0), buf344, buf345, reinterpret_tensor(buf339, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf336, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf333, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf324, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf322, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf323, (16384, ), (1, ), 0), reinterpret_tensor(buf318, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf319, (4096, ), (1, ), 0), buf314, buf315, reinterpret_tensor(buf309, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf306, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf303, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf294, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf292, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf293, (16384, ), (1, ), 0), reinterpret_tensor(buf288, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf289, (4096, ), (1, ), 0), buf284, buf285, reinterpret_tensor(buf279, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf276, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf273, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf264, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf262, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf263, (16384, ), (1, ), 0), reinterpret_tensor(buf258, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf259, (4096, ), (1, ), 0), buf254, buf255, reinterpret_tensor(buf249, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf246, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf243, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf234, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf232, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf233, (16384, ), (1, ), 0), reinterpret_tensor(buf228, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf229, (4096, ), (1, ), 0), buf224, buf225, reinterpret_tensor(buf219, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf216, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf213, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf204, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf202, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf203, (16384, ), (1, ), 0), reinterpret_tensor(buf198, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf199, (4096, ), (1, ), 0), buf194, buf195, reinterpret_tensor(buf189, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf186, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf183, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf174, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf172, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf173, (16384, ), (1, ), 0), reinterpret_tensor(buf168, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf169, (4096, ), (1, ), 0), buf164, buf165, reinterpret_tensor(buf159, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf156, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf153, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf144, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf142, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf143, (16384, ), (1, ), 0), reinterpret_tensor(buf138, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf139, (4096, ), (1, ), 0), buf134, buf135, reinterpret_tensor(buf129, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf126, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf123, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf114, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf112, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf113, (16384, ), (1, ), 0), reinterpret_tensor(buf108, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf109, (4096, ), (1, ), 0), buf104, buf105, reinterpret_tensor(buf99, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf96, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf93, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf84, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf82, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf83, (16384, ), (1, ), 0), reinterpret_tensor(buf78, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf79, (4096, ), (1, ), 0), buf74, buf75, reinterpret_tensor(buf69, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf66, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf63, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf54, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf52, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf53, (16384, ), (1, ), 0), reinterpret_tensor(buf48, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf49, (4096, ), (1, ), 0), buf44, buf45, reinterpret_tensor(buf39, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf36, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf33, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf24, (4096, 4096), (4096, 1), 0), reinterpret_tensor(buf22, (16384, 4096), (4096, 1), 0), reinterpret_tensor(buf23, (16384, ), (1, ), 0), reinterpret_tensor(buf18, (4096, 16384), (16384, 1), 0), reinterpret_tensor(buf19, (4096, ), (1, ), 0), buf15, buf16, reinterpret_tensor(buf10, (2, 4096), (4096, 1), 0), reinterpret_tensor(buf11, (2, ), (1, ), 0), None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_2 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_12 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_22 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_32 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_42 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_62 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_72 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_82 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_92 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_102 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_112 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_122 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_132 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_142 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_152 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_162 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_172 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_182 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_192 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_212 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_222 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_232 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_242 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_252 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_262 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_272 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_282 = rand_strided((4096, ), (1, ), device='cpu', dtype=torch.float32)
    primals_288 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_291 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_294 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_297 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_300 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_303 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_306 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_309 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_312 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_315 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_318 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_321 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_324 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_327 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_330 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_333 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_336 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_339 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_342 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_345 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_348 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_351 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_354 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_357 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_360 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_363 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_366 = rand_strided((), (), device='cpu', dtype=torch.float32)
    primals_369 = rand_strided((), (), device='cpu', dtype=torch.float32)
    view = rand_strided((1, 128), (128, 1), device='cpu', dtype=torch.int64)
    embedding = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    getitem_1 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    view_2 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_3 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_5 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_48 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_24 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_28 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_10 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_30 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_16 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_18 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_96 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_52 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_2 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_1 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_56 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_20 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_58 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_29 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_31 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_144 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_80 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_4 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_2 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_84 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_30 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_86 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_42 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_44 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_192 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_108 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_6 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_3 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_112 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_40 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_114 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_55 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_57 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_240 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_136 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_8 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_4 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_140 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_50 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_142 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_68 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_70 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_288 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_164 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_10 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_5 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_168 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_60 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_170 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_81 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_83 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_336 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_192 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_12 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_6 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_196 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_70 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_198 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_94 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_96 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_384 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_220 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_14 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_7 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_224 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_80 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_226 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_107 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_109 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_432 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_248 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_16 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_8 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_252 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_90 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_254 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_120 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_122 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_480 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_276 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_18 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_9 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_280 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_100 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_282 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_133 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_135 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_528 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_304 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_20 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_10 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_308 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_110 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_310 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_146 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_148 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_576 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_332 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_22 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_11 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_336 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_120 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_338 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_159 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_161 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_624 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_360 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_24 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_12 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_364 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_130 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_366 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_172 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_174 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_672 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_388 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_26 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_13 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_392 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_140 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_394 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_185 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_187 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_720 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_416 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_28 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_14 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_420 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_150 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_422 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_198 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_200 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_768 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_444 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_30 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_15 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_448 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_160 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_450 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_211 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_213 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_816 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_472 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_32 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_16 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_476 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_170 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_478 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_224 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_226 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_864 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_500 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_34 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_17 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_504 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_180 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_506 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_237 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_239 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_912 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_528 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_36 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_18 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_532 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_190 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_534 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_250 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_252 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_960 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_556 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_38 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_19 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_560 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_200 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_562 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_263 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_265 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_1008 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_584 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_40 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_20 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_588 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_210 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_590 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_276 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_278 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_1056 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_612 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_42 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_21 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_616 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_220 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_618 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_289 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_291 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_1104 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_640 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_44 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_22 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_644 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_230 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_646 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_302 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_304 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_1152 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_668 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_46 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_23 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_672 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_240 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_674 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_315 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_317 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_1200 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_696 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_48 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_24 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_700 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_250 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_702 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_328 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_330 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_1248 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_724 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_50 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_25 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_728 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_260 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_730 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_341 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_343 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_1296 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_752 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_52 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_26 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_756 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_270 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_758 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    unsqueeze_354 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    unsqueeze_356 = rand_strided((1, 128, 1, 32, 1), (0, 64, 0, 1, 0), device='cpu', dtype=torch.float32)
    slice_1344 = rand_strided((1, 1, 128, 128), (4194304, 4194304, 2048, 1), device='cpu', dtype=torch.bool)
    view_780 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    addmm_54 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    tanh_27 = rand_strided((1, 128, 16384), (2097152, 16384, 1), device='cpu', dtype=torch.float32)
    view_784 = rand_strided((128, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    mul_280 = rand_strided((1, 128, 4096), (524288, 4096, 1), device='cpu', dtype=torch.float32)
    view_787 = rand_strided((128, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    sub_58 = rand_strided((1, 128), (128, 1), device='cpu', dtype=torch.float32)
    ne = rand_strided((1, ), (1, ), device='cpu', dtype=torch.bool)
    sub_60 = rand_strided((1, 128), (128, 1), device='cpu', dtype=torch.float32)
    ne_3 = rand_strided((1, ), (1, ), device='cpu', dtype=torch.bool)
    ne_6 = rand_strided((1, 1), (1, 1), device='cpu', dtype=torch.bool)
    where_32 = rand_strided((1, 1), (1, 1), device='cpu', dtype=torch.int64)
    ne_8 = rand_strided((1, 1), (1, 1), device='cpu', dtype=torch.bool)
    where_34 = rand_strided((1, 1), (1, 1), device='cpu', dtype=torch.int64)
    permute_309 = rand_strided((2, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_62 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_313 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_317 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_323 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_326 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_327 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_61 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_328 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_329 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_336 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_340 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_344 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_64 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_346 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_350 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_356 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_359 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_360 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_63 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_361 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_362 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_369 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_373 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_377 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_66 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_379 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_383 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_389 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_392 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_393 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_65 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_394 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_395 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_402 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_406 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_410 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_68 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_412 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_416 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_422 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_425 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_426 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_67 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_427 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_428 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_435 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_439 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_443 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_70 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_445 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_449 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_455 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_458 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_459 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_69 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_460 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_461 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_468 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_472 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_476 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_72 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_478 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_482 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_488 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_491 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_492 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_71 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_493 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_494 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_501 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_505 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_509 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_74 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_511 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_515 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_521 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_524 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_525 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_73 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_526 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_527 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_534 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_538 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_542 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_76 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_544 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_548 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_554 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_557 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_558 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_75 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_559 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_560 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_567 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_571 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_575 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_78 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_577 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_581 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_587 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_590 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_591 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_77 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_592 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_593 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_600 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_604 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_608 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_80 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_610 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_614 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_620 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_623 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_624 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_79 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_625 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_626 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_633 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_637 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_641 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_82 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_643 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_647 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_653 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_656 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_657 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_81 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_658 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_659 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_666 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_670 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_674 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_84 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_676 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_680 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_686 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_689 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_690 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_83 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_691 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_692 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_699 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_703 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_707 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_86 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_709 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_713 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_719 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_722 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_723 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_85 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_724 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_725 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_732 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_736 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_740 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_88 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_742 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_746 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_752 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_755 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_756 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_87 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_757 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_758 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_765 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_769 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_773 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_90 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_775 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_779 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_785 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_788 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_789 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_89 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_790 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_791 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_798 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_802 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_806 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_92 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_808 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_812 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_818 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_821 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_822 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_91 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_823 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_824 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_831 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_835 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_839 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_94 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_841 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_845 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_851 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_854 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_855 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_93 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_856 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_857 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_864 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_868 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_872 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_96 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_874 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_878 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_884 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_887 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_888 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_95 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_889 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_890 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_897 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_901 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_905 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_98 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_907 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_911 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_917 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_920 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_921 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_97 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_922 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_923 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_930 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_934 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_938 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_100 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_940 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_944 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_950 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_953 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_954 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_99 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_955 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_956 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_963 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_967 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_971 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_102 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_973 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_977 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_983 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_986 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_987 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_101 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_988 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_989 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_996 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1000 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1004 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_104 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_1006 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_1010 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1016 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1019 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_1020 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_103 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_1021 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_1022 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_1029 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1033 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1037 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_106 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_1039 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_1043 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1049 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1052 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_1053 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_105 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_1054 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_1055 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_1062 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1066 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1070 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_108 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_1072 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_1076 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1082 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1085 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_1086 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_107 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_1087 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_1088 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_1095 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1099 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1103 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_110 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_1105 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_1109 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1115 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1118 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_1119 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_109 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_1120 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_1121 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_1128 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1132 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1136 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_112 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_1138 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_1142 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1148 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1151 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_1152 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_111 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_1153 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_1154 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_1161 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1165 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1169 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_114 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_1171 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_1175 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1181 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1184 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_1185 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_113 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_1186 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_1187 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_1194 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1198 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1202 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    div_116 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    permute_1204 = rand_strided((4096, 16384), (16384, 1), device='cpu', dtype=torch.float32)
    permute_1208 = rand_strided((16384, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1214 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1217 = rand_strided((16, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_1218 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    alias_115 = rand_strided((1, 16, 128, 128), (262144, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_1219 = rand_strided((16, 256, 128), (256, 1, 4096), device='cpu', dtype=torch.float32)
    permute_1220 = rand_strided((16, 128, 256), (256, 4096, 1), device='cpu', dtype=torch.float32)
    permute_1227 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1231 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    permute_1235 = rand_strided((4096, 4096), (4096, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((), (), device='cpu', dtype=torch.float32)
    tangents_2 = rand_strided((1, 128), (128, 1), device='cpu', dtype=torch.float32)
    tangents_3 = rand_strided((1, 128), (128, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_2, primals_12, primals_22, primals_32, primals_42, primals_52, primals_62, primals_72, primals_82, primals_92, primals_102, primals_112, primals_122, primals_132, primals_142, primals_152, primals_162, primals_172, primals_182, primals_192, primals_202, primals_212, primals_222, primals_232, primals_242, primals_252, primals_262, primals_272, primals_282, primals_288, primals_291, primals_294, primals_297, primals_300, primals_303, primals_306, primals_309, primals_312, primals_315, primals_318, primals_321, primals_324, primals_327, primals_330, primals_333, primals_336, primals_339, primals_342, primals_345, primals_348, primals_351, primals_354, primals_357, primals_360, primals_363, primals_366, primals_369, view, embedding, getitem_1, rsqrt, view_2, unsqueeze_3, unsqueeze_5, slice_48, view_24, addmm, tanh, view_28, mul_10, view_30, unsqueeze_16, unsqueeze_18, slice_96, view_52, addmm_2, tanh_1, view_56, mul_20, view_58, unsqueeze_29, unsqueeze_31, slice_144, view_80, addmm_4, tanh_2, view_84, mul_30, view_86, unsqueeze_42, unsqueeze_44, slice_192, view_108, addmm_6, tanh_3, view_112, mul_40, view_114, unsqueeze_55, unsqueeze_57, slice_240, view_136, addmm_8, tanh_4, view_140, mul_50, view_142, unsqueeze_68, unsqueeze_70, slice_288, view_164, addmm_10, tanh_5, view_168, mul_60, view_170, unsqueeze_81, unsqueeze_83, slice_336, view_192, addmm_12, tanh_6, view_196, mul_70, view_198, unsqueeze_94, unsqueeze_96, slice_384, view_220, addmm_14, tanh_7, view_224, mul_80, view_226, unsqueeze_107, unsqueeze_109, slice_432, view_248, addmm_16, tanh_8, view_252, mul_90, view_254, unsqueeze_120, unsqueeze_122, slice_480, view_276, addmm_18, tanh_9, view_280, mul_100, view_282, unsqueeze_133, unsqueeze_135, slice_528, view_304, addmm_20, tanh_10, view_308, mul_110, view_310, unsqueeze_146, unsqueeze_148, slice_576, view_332, addmm_22, tanh_11, view_336, mul_120, view_338, unsqueeze_159, unsqueeze_161, slice_624, view_360, addmm_24, tanh_12, view_364, mul_130, view_366, unsqueeze_172, unsqueeze_174, slice_672, view_388, addmm_26, tanh_13, view_392, mul_140, view_394, unsqueeze_185, unsqueeze_187, slice_720, view_416, addmm_28, tanh_14, view_420, mul_150, view_422, unsqueeze_198, unsqueeze_200, slice_768, view_444, addmm_30, tanh_15, view_448, mul_160, view_450, unsqueeze_211, unsqueeze_213, slice_816, view_472, addmm_32, tanh_16, view_476, mul_170, view_478, unsqueeze_224, unsqueeze_226, slice_864, view_500, addmm_34, tanh_17, view_504, mul_180, view_506, unsqueeze_237, unsqueeze_239, slice_912, view_528, addmm_36, tanh_18, view_532, mul_190, view_534, unsqueeze_250, unsqueeze_252, slice_960, view_556, addmm_38, tanh_19, view_560, mul_200, view_562, unsqueeze_263, unsqueeze_265, slice_1008, view_584, addmm_40, tanh_20, view_588, mul_210, view_590, unsqueeze_276, unsqueeze_278, slice_1056, view_612, addmm_42, tanh_21, view_616, mul_220, view_618, unsqueeze_289, unsqueeze_291, slice_1104, view_640, addmm_44, tanh_22, view_644, mul_230, view_646, unsqueeze_302, unsqueeze_304, slice_1152, view_668, addmm_46, tanh_23, view_672, mul_240, view_674, unsqueeze_315, unsqueeze_317, slice_1200, view_696, addmm_48, tanh_24, view_700, mul_250, view_702, unsqueeze_328, unsqueeze_330, slice_1248, view_724, addmm_50, tanh_25, view_728, mul_260, view_730, unsqueeze_341, unsqueeze_343, slice_1296, view_752, addmm_52, tanh_26, view_756, mul_270, view_758, unsqueeze_354, unsqueeze_356, slice_1344, view_780, addmm_54, tanh_27, view_784, mul_280, view_787, sub_58, ne, sub_60, ne_3, ne_6, where_32, ne_8, where_34, permute_309, div_62, permute_313, permute_317, permute_323, permute_326, permute_327, alias_61, permute_328, permute_329, permute_336, permute_340, permute_344, div_64, permute_346, permute_350, permute_356, permute_359, permute_360, alias_63, permute_361, permute_362, permute_369, permute_373, permute_377, div_66, permute_379, permute_383, permute_389, permute_392, permute_393, alias_65, permute_394, permute_395, permute_402, permute_406, permute_410, div_68, permute_412, permute_416, permute_422, permute_425, permute_426, alias_67, permute_427, permute_428, permute_435, permute_439, permute_443, div_70, permute_445, permute_449, permute_455, permute_458, permute_459, alias_69, permute_460, permute_461, permute_468, permute_472, permute_476, div_72, permute_478, permute_482, permute_488, permute_491, permute_492, alias_71, permute_493, permute_494, permute_501, permute_505, permute_509, div_74, permute_511, permute_515, permute_521, permute_524, permute_525, alias_73, permute_526, permute_527, permute_534, permute_538, permute_542, div_76, permute_544, permute_548, permute_554, permute_557, permute_558, alias_75, permute_559, permute_560, permute_567, permute_571, permute_575, div_78, permute_577, permute_581, permute_587, permute_590, permute_591, alias_77, permute_592, permute_593, permute_600, permute_604, permute_608, div_80, permute_610, permute_614, permute_620, permute_623, permute_624, alias_79, permute_625, permute_626, permute_633, permute_637, permute_641, div_82, permute_643, permute_647, permute_653, permute_656, permute_657, alias_81, permute_658, permute_659, permute_666, permute_670, permute_674, div_84, permute_676, permute_680, permute_686, permute_689, permute_690, alias_83, permute_691, permute_692, permute_699, permute_703, permute_707, div_86, permute_709, permute_713, permute_719, permute_722, permute_723, alias_85, permute_724, permute_725, permute_732, permute_736, permute_740, div_88, permute_742, permute_746, permute_752, permute_755, permute_756, alias_87, permute_757, permute_758, permute_765, permute_769, permute_773, div_90, permute_775, permute_779, permute_785, permute_788, permute_789, alias_89, permute_790, permute_791, permute_798, permute_802, permute_806, div_92, permute_808, permute_812, permute_818, permute_821, permute_822, alias_91, permute_823, permute_824, permute_831, permute_835, permute_839, div_94, permute_841, permute_845, permute_851, permute_854, permute_855, alias_93, permute_856, permute_857, permute_864, permute_868, permute_872, div_96, permute_874, permute_878, permute_884, permute_887, permute_888, alias_95, permute_889, permute_890, permute_897, permute_901, permute_905, div_98, permute_907, permute_911, permute_917, permute_920, permute_921, alias_97, permute_922, permute_923, permute_930, permute_934, permute_938, div_100, permute_940, permute_944, permute_950, permute_953, permute_954, alias_99, permute_955, permute_956, permute_963, permute_967, permute_971, div_102, permute_973, permute_977, permute_983, permute_986, permute_987, alias_101, permute_988, permute_989, permute_996, permute_1000, permute_1004, div_104, permute_1006, permute_1010, permute_1016, permute_1019, permute_1020, alias_103, permute_1021, permute_1022, permute_1029, permute_1033, permute_1037, div_106, permute_1039, permute_1043, permute_1049, permute_1052, permute_1053, alias_105, permute_1054, permute_1055, permute_1062, permute_1066, permute_1070, div_108, permute_1072, permute_1076, permute_1082, permute_1085, permute_1086, alias_107, permute_1087, permute_1088, permute_1095, permute_1099, permute_1103, div_110, permute_1105, permute_1109, permute_1115, permute_1118, permute_1119, alias_109, permute_1120, permute_1121, permute_1128, permute_1132, permute_1136, div_112, permute_1138, permute_1142, permute_1148, permute_1151, permute_1152, alias_111, permute_1153, permute_1154, permute_1161, permute_1165, permute_1169, div_114, permute_1171, permute_1175, permute_1181, permute_1184, permute_1185, alias_113, permute_1186, permute_1187, permute_1194, permute_1198, permute_1202, div_116, permute_1204, permute_1208, permute_1214, permute_1217, permute_1218, alias_115, permute_1219, permute_1220, permute_1227, permute_1231, permute_1235, tangents_1, tangents_2, tangents_3]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('GPTJForQuestionAnswering', benchmark_compiled_module)
