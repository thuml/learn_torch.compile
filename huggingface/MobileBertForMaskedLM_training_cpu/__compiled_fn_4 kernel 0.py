
from ctypes import c_void_p, c_long
import torch
import math
import random
import os
import tempfile
from math import inf, nan
from torch._inductor.hooks import run_intermediate_hooks
from torch._inductor.utils import maybe_profile
from torch._inductor.codegen.memory_planning import _align as align

from torch import device, empty, empty_strided
from torch._inductor.codecache import AsyncCompile
from torch._inductor.select_algorithm import extern_kernels

aten = torch.ops.aten
inductor_ops = torch.ops.inductor
assert_size_stride = torch._C._dynamo.guards.assert_size_stride
alloc_from_pool = torch.ops.inductor._alloc_from_pool
reinterpret_tensor = torch.ops.inductor._reinterpret_tensor
async_compile = AsyncCompile()


cpp_fused_add_mul_nll_loss_backward_nll_loss_forward_0 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       const float* in_ptr16,
                       const float* in_ptr17,
                       const float* in_ptr18,
                       const float* in_ptr19,
                       const float* in_ptr20,
                       const float* in_ptr21,
                       const float* in_ptr22,
                       const float* in_ptr23,
                       const float* in_ptr24,
                       const float* in_ptr25,
                       const float* in_ptr26,
                       const float* in_ptr27,
                       const float* in_ptr28,
                       const float* in_ptr29,
                       const float* in_ptr30,
                       const float* in_ptr31,
                       const float* in_ptr32,
                       const float* in_ptr33,
                       const float* in_ptr34,
                       const float* in_ptr35,
                       const float* in_ptr36,
                       const float* in_ptr37,
                       const float* in_ptr38,
                       const float* in_ptr39,
                       const float* in_ptr40,
                       const float* in_ptr41,
                       const float* in_ptr42,
                       const float* in_ptr43,
                       const float* in_ptr44,
                       const float* in_ptr45,
                       const float* in_ptr46,
                       const float* in_ptr47,
                       const float* in_ptr48,
                       const float* in_ptr49,
                       const float* in_ptr50,
                       const float* in_ptr51,
                       const float* in_ptr52,
                       const float* in_ptr53,
                       const float* in_ptr54,
                       const float* in_ptr55,
                       const float* in_ptr56,
                       const float* in_ptr57,
                       const float* in_ptr58,
                       const float* in_ptr59,
                       const float* in_ptr60,
                       const float* in_ptr61,
                       const float* in_ptr62,
                       const float* in_ptr63,
                       const float* in_ptr64,
                       const float* in_ptr65,
                       const float* in_ptr66,
                       const float* in_ptr67,
                       const float* in_ptr68,
                       const float* in_ptr69,
                       const float* in_ptr70,
                       const float* in_ptr71,
                       const float* in_ptr72,
                       const float* in_ptr73,
                       const float* in_ptr74,
                       const float* in_ptr75,
                       const float* in_ptr76,
                       const float* in_ptr77,
                       const float* in_ptr78,
                       const float* in_ptr79,
                       const float* in_ptr80,
                       const float* in_ptr81,
                       const float* in_ptr82,
                       const float* in_ptr83,
                       const float* in_ptr84,
                       const float* in_ptr85,
                       const float* in_ptr86,
                       const float* in_ptr87,
                       const float* in_ptr88,
                       const float* in_ptr89,
                       const float* in_ptr90,
                       const float* in_ptr91,
                       const float* in_ptr92,
                       const float* in_ptr93,
                       const float* in_ptr94,
                       const float* in_ptr95,
                       const float* in_ptr96,
                       const float* in_ptr97,
                       const float* in_ptr98,
                       const float* in_ptr99,
                       const float* in_ptr100,
                       const float* in_ptr101,
                       const float* in_ptr102,
                       const float* in_ptr103,
                       const float* in_ptr104,
                       const float* in_ptr105,
                       const float* in_ptr106,
                       const float* in_ptr107,
                       const float* in_ptr108,
                       const float* in_ptr109,
                       const float* in_ptr110,
                       const float* in_ptr111,
                       const float* in_ptr112,
                       const float* in_ptr113,
                       const float* in_ptr114,
                       const float* in_ptr115,
                       const float* in_ptr116,
                       const float* in_ptr117,
                       const float* in_ptr118,
                       const float* in_ptr119,
                       const float* in_ptr120,
                       const float* in_ptr121,
                       const float* in_ptr122,
                       const float* in_ptr123,
                       const float* in_ptr124,
                       const float* in_ptr125,
                       const float* in_ptr126,
                       const float* in_ptr127,
                       const float* in_ptr128,
                       const float* in_ptr129,
                       const float* in_ptr130,
                       const float* in_ptr131,
                       const float* in_ptr132,
                       const float* in_ptr133,
                       const float* in_ptr134,
                       const float* in_ptr135,
                       const float* in_ptr136,
                       const float* in_ptr137,
                       const float* in_ptr138,
                       const float* in_ptr139,
                       const float* in_ptr140,
                       const float* in_ptr141,
                       const float* in_ptr142,
                       const float* in_ptr143,
                       const float* in_ptr144,
                       const float* in_ptr145,
                       const float* in_ptr146,
                       const float* in_ptr147,
                       const float* in_ptr148,
                       const float* in_ptr149,
                       const float* in_ptr150,
                       const float* in_ptr151,
                       const float* in_ptr152,
                       const float* in_ptr153,
                       const float* in_ptr154,
                       const float* in_ptr155,
                       const float* in_ptr156,
                       const float* in_ptr157,
                       const float* in_ptr158,
                       const float* in_ptr159,
                       const float* in_ptr160,
                       const float* in_ptr161,
                       const float* in_ptr162,
                       const float* in_ptr163,
                       const float* in_ptr164,
                       const float* in_ptr165,
                       const float* in_ptr166,
                       const float* in_ptr167,
                       const float* in_ptr168,
                       const float* in_ptr169,
                       const float* in_ptr170,
                       const float* in_ptr171,
                       const float* in_ptr172,
                       const float* in_ptr173,
                       const float* in_ptr174,
                       const float* in_ptr175,
                       const float* in_ptr176,
                       const float* in_ptr177,
                       const float* in_ptr178,
                       const float* in_ptr179,
                       const float* in_ptr180,
                       const float* in_ptr181,
                       const float* in_ptr182,
                       const float* in_ptr183,
                       const float* in_ptr184,
                       const float* in_ptr185,
                       const float* in_ptr186,
                       const float* in_ptr187,
                       const float* in_ptr188,
                       const float* in_ptr189,
                       const float* in_ptr190,
                       const float* in_ptr191,
                       const float* in_ptr192,
                       const float* in_ptr193,
                       const float* in_ptr194,
                       const float* in_ptr195,
                       const float* in_ptr196,
                       const float* in_ptr197,
                       const float* in_ptr198,
                       const float* in_ptr199,
                       const float* in_ptr200,
                       const float* in_ptr201,
                       const float* in_ptr202,
                       const float* in_ptr203,
                       const float* in_ptr204,
                       const float* in_ptr205,
                       const float* in_ptr206,
                       const float* in_ptr207,
                       const float* in_ptr208,
                       const float* in_ptr209,
                       const float* in_ptr210,
                       const float* in_ptr211,
                       const float* in_ptr212,
                       const float* in_ptr213,
                       const float* in_ptr214,
                       const float* in_ptr215,
                       const float* in_ptr216,
                       const float* in_ptr217,
                       const float* in_ptr218,
                       const float* in_ptr219,
                       const float* in_ptr220,
                       const float* in_ptr221,
                       const float* in_ptr222,
                       const float* in_ptr223,
                       const float* in_ptr224,
                       const float* in_ptr225,
                       const float* in_ptr226,
                       const float* in_ptr227,
                       const float* in_ptr228,
                       const float* in_ptr229,
                       const float* in_ptr230,
                       const float* in_ptr231,
                       const float* in_ptr232,
                       const float* in_ptr233,
                       const float* in_ptr234,
                       const float* in_ptr235,
                       const float* in_ptr236,
                       const float* in_ptr237,
                       const float* in_ptr238,
                       const float* in_ptr239,
                       const float* in_ptr240,
                       const float* in_ptr241,
                       const float* in_ptr242,
                       const float* in_ptr243,
                       const float* in_ptr244,
                       const float* in_ptr245,
                       const float* in_ptr246,
                       const float* in_ptr247,
                       const float* in_ptr248,
                       const float* in_ptr249,
                       const float* in_ptr250,
                       const float* in_ptr251,
                       const float* in_ptr252,
                       const float* in_ptr253,
                       const float* in_ptr254,
                       const float* in_ptr255,
                       const float* in_ptr256,
                       const float* in_ptr257,
                       const float* in_ptr258,
                       const float* in_ptr259,
                       const float* in_ptr260,
                       const float* in_ptr261,
                       const float* in_ptr262,
                       const float* in_ptr263,
                       const float* in_ptr264,
                       const float* in_ptr265,
                       const float* in_ptr266,
                       const float* in_ptr267,
                       const float* in_ptr268,
                       const float* in_ptr269,
                       const float* in_ptr270,
                       const float* in_ptr271,
                       const float* in_ptr272,
                       const float* in_ptr273,
                       const float* in_ptr274,
                       const float* in_ptr275,
                       const float* in_ptr276,
                       const float* in_ptr277,
                       const float* in_ptr278,
                       const float* in_ptr279,
                       const float* in_ptr280,
                       const float* in_ptr281,
                       const float* in_ptr282,
                       const float* in_ptr283,
                       const float* in_ptr284,
                       const float* in_ptr285,
                       const float* in_ptr286,
                       const float* in_ptr287,
                       const float* in_ptr288,
                       const float* in_ptr289,
                       const float* in_ptr290,
                       const float* in_ptr291,
                       const float* in_ptr292,
                       const float* in_ptr293,
                       const float* in_ptr294,
                       const float* in_ptr295,
                       const float* in_ptr296,
                       const float* in_ptr297,
                       const float* in_ptr298,
                       const float* in_ptr299,
                       const float* in_ptr300,
                       const float* in_ptr301,
                       const float* in_ptr302,
                       const float* in_ptr303,
                       const float* in_ptr304,
                       const float* in_ptr305,
                       const float* in_ptr306,
                       const float* in_ptr307,
                       const float* in_ptr308,
                       const float* in_ptr309,
                       const float* in_ptr310,
                       const float* in_ptr311,
                       const float* in_ptr312,
                       const float* in_ptr313,
                       const float* in_ptr314,
                       const float* in_ptr315,
                       const float* in_ptr316,
                       const float* in_ptr317,
                       const float* in_ptr318,
                       const float* in_ptr319,
                       const float* in_ptr320,
                       const float* in_ptr321,
                       const float* in_ptr322,
                       const float* in_ptr323,
                       const float* in_ptr324,
                       const float* in_ptr325,
                       const float* in_ptr326,
                       const float* in_ptr327,
                       const float* in_ptr328,
                       const float* in_ptr329,
                       const float* in_ptr330,
                       const float* in_ptr331,
                       const float* in_ptr332,
                       const float* in_ptr333,
                       const float* in_ptr334,
                       const float* in_ptr335,
                       const float* in_ptr336,
                       const float* in_ptr337,
                       const float* in_ptr338,
                       const float* in_ptr339,
                       const float* in_ptr340,
                       const float* in_ptr341,
                       const float* in_ptr342,
                       const float* in_ptr343,
                       const float* in_ptr344,
                       const float* in_ptr345,
                       const float* in_ptr346,
                       const float* in_ptr347,
                       const float* in_ptr348,
                       const float* in_ptr349,
                       const float* in_ptr350,
                       const float* in_ptr351,
                       const float* in_ptr352,
                       const float* in_ptr353,
                       const float* in_ptr354,
                       const float* in_ptr355,
                       const float* in_ptr356,
                       const float* in_ptr357,
                       const float* in_ptr358,
                       const float* in_ptr359,
                       const float* in_ptr360,
                       const float* in_ptr361,
                       const float* in_ptr362,
                       const float* in_ptr363,
                       const float* in_ptr364,
                       const float* in_ptr365,
                       const long* in_ptr366,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7,
                       float* out_ptr8,
                       float* out_ptr9,
                       float* out_ptr10,
                       float* out_ptr11,
                       float* out_ptr12,
                       float* out_ptr13,
                       float* out_ptr14,
                       float* out_ptr15,
                       float* out_ptr16,
                       float* out_ptr17,
                       float* out_ptr18,
                       float* out_ptr19,
                       float* out_ptr20,
                       float* out_ptr21,
                       float* out_ptr22,
                       float* out_ptr23,
                       float* out_ptr24,
                       float* out_ptr25,
                       float* out_ptr26,
                       float* out_ptr27,
                       float* out_ptr28,
                       float* out_ptr29,
                       float* out_ptr30,
                       float* out_ptr31,
                       float* out_ptr32,
                       float* out_ptr33,
                       float* out_ptr34,
                       float* out_ptr35,
                       float* out_ptr36,
                       float* out_ptr37,
                       float* out_ptr38,
                       float* out_ptr39,
                       float* out_ptr40,
                       float* out_ptr41,
                       float* out_ptr42,
                       float* out_ptr43,
                       float* out_ptr44,
                       float* out_ptr45,
                       float* out_ptr46,
                       float* out_ptr47,
                       float* out_ptr48,
                       float* out_ptr49,
                       float* out_ptr50,
                       float* out_ptr51,
                       float* out_ptr52,
                       float* out_ptr53,
                       float* out_ptr54,
                       float* out_ptr55,
                       float* out_ptr56,
                       float* out_ptr57,
                       long* out_ptr58)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr16 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr17 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr18 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr19 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr20 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr21 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr22 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr23 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr24 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr25 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr2 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr3 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr26 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr27 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr28 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr29 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr30 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr31 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr32 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr33 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr34 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr35 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr36 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr37 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr38 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr4 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr5 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr39 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr40 + static_cast<long>(x1 + (512L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr41 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr42 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr43 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr44 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr45 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr46 + static_cast<long>(x1 + (512L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr47 + static_cast<long>(x1 + (512L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr48 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr49 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr50 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr51 + static_cast<long>(x1));
                auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr52 + static_cast<long>(x1 + (512L*x0)));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr53 + static_cast<long>(x1 + (512L*x0)));
                auto tmp27 = at::vec::Vectorized<float>::loadu(in_ptr54 + static_cast<long>(x1));
                auto tmp29 = at::vec::Vectorized<float>::loadu(in_ptr55 + static_cast<long>(x1));
                auto tmp32 = at::vec::Vectorized<float>::loadu(in_ptr56 + static_cast<long>(x1));
                auto tmp34 = at::vec::Vectorized<float>::loadu(in_ptr57 + static_cast<long>(x1));
                auto tmp37 = at::vec::Vectorized<float>::loadu(in_ptr58 + static_cast<long>(x1 + (512L*x0)));
                auto tmp38 = at::vec::Vectorized<float>::loadu(in_ptr59 + static_cast<long>(x1 + (512L*x0)));
                auto tmp39 = at::vec::Vectorized<float>::loadu(in_ptr60 + static_cast<long>(x1));
                auto tmp41 = at::vec::Vectorized<float>::loadu(in_ptr61 + static_cast<long>(x1));
                auto tmp44 = at::vec::Vectorized<float>::loadu(in_ptr62 + static_cast<long>(x1));
                auto tmp46 = at::vec::Vectorized<float>::loadu(in_ptr63 + static_cast<long>(x1));
                auto tmp49 = at::vec::Vectorized<float>::loadu(in_ptr64 + static_cast<long>(x1 + (512L*x0)));
                auto tmp50 = at::vec::Vectorized<float>::loadu(in_ptr65 + static_cast<long>(x1 + (512L*x0)));
                auto tmp51 = at::vec::Vectorized<float>::loadu(in_ptr66 + static_cast<long>(x1));
                auto tmp53 = at::vec::Vectorized<float>::loadu(in_ptr67 + static_cast<long>(x1));
                auto tmp56 = at::vec::Vectorized<float>::loadu(in_ptr68 + static_cast<long>(x1));
                auto tmp58 = at::vec::Vectorized<float>::loadu(in_ptr69 + static_cast<long>(x1));
                auto tmp61 = at::vec::Vectorized<float>::loadu(in_ptr70 + static_cast<long>(x1 + (512L*x0)));
                auto tmp62 = at::vec::Vectorized<float>::loadu(in_ptr71 + static_cast<long>(x1 + (512L*x0)));
                auto tmp63 = at::vec::Vectorized<float>::loadu(in_ptr72 + static_cast<long>(x1));
                auto tmp65 = at::vec::Vectorized<float>::loadu(in_ptr73 + static_cast<long>(x1));
                auto tmp68 = at::vec::Vectorized<float>::loadu(in_ptr74 + static_cast<long>(x1));
                auto tmp70 = at::vec::Vectorized<float>::loadu(in_ptr75 + static_cast<long>(x1));
                auto tmp73 = at::vec::Vectorized<float>::loadu(in_ptr76 + static_cast<long>(x1 + (512L*x0)));
                auto tmp74 = at::vec::Vectorized<float>::loadu(in_ptr77 + static_cast<long>(x1 + (512L*x0)));
                auto tmp75 = at::vec::Vectorized<float>::loadu(in_ptr78 + static_cast<long>(x1));
                auto tmp77 = at::vec::Vectorized<float>::loadu(in_ptr79 + static_cast<long>(x1));
                auto tmp80 = at::vec::Vectorized<float>::loadu(in_ptr80 + static_cast<long>(x1));
                auto tmp82 = at::vec::Vectorized<float>::loadu(in_ptr81 + static_cast<long>(x1));
                auto tmp85 = at::vec::Vectorized<float>::loadu(in_ptr82 + static_cast<long>(x1 + (512L*x0)));
                auto tmp86 = at::vec::Vectorized<float>::loadu(in_ptr83 + static_cast<long>(x1 + (512L*x0)));
                auto tmp87 = at::vec::Vectorized<float>::loadu(in_ptr84 + static_cast<long>(x1));
                auto tmp89 = at::vec::Vectorized<float>::loadu(in_ptr85 + static_cast<long>(x1));
                auto tmp92 = at::vec::Vectorized<float>::loadu(in_ptr86 + static_cast<long>(x1));
                auto tmp94 = at::vec::Vectorized<float>::loadu(in_ptr87 + static_cast<long>(x1));
                auto tmp97 = at::vec::Vectorized<float>::loadu(in_ptr88 + static_cast<long>(x1 + (512L*x0)));
                auto tmp98 = at::vec::Vectorized<float>::loadu(in_ptr89 + static_cast<long>(x1 + (512L*x0)));
                auto tmp99 = at::vec::Vectorized<float>::loadu(in_ptr90 + static_cast<long>(x1));
                auto tmp101 = at::vec::Vectorized<float>::loadu(in_ptr91 + static_cast<long>(x1));
                auto tmp104 = at::vec::Vectorized<float>::loadu(in_ptr92 + static_cast<long>(x1));
                auto tmp106 = at::vec::Vectorized<float>::loadu(in_ptr93 + static_cast<long>(x1));
                auto tmp109 = at::vec::Vectorized<float>::loadu(in_ptr94 + static_cast<long>(x1 + (512L*x0)));
                auto tmp110 = at::vec::Vectorized<float>::loadu(in_ptr95 + static_cast<long>(x1 + (512L*x0)));
                auto tmp111 = at::vec::Vectorized<float>::loadu(in_ptr96 + static_cast<long>(x1));
                auto tmp113 = at::vec::Vectorized<float>::loadu(in_ptr97 + static_cast<long>(x1));
                auto tmp116 = at::vec::Vectorized<float>::loadu(in_ptr98 + static_cast<long>(x1));
                auto tmp118 = at::vec::Vectorized<float>::loadu(in_ptr99 + static_cast<long>(x1));
                auto tmp121 = at::vec::Vectorized<float>::loadu(in_ptr100 + static_cast<long>(x1 + (512L*x0)));
                auto tmp122 = at::vec::Vectorized<float>::loadu(in_ptr101 + static_cast<long>(x1 + (512L*x0)));
                auto tmp123 = at::vec::Vectorized<float>::loadu(in_ptr102 + static_cast<long>(x1));
                auto tmp125 = at::vec::Vectorized<float>::loadu(in_ptr103 + static_cast<long>(x1));
                auto tmp128 = at::vec::Vectorized<float>::loadu(in_ptr104 + static_cast<long>(x1));
                auto tmp130 = at::vec::Vectorized<float>::loadu(in_ptr105 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                auto tmp28 = tmp24 * tmp27;
                auto tmp30 = tmp28 + tmp29;
                auto tmp31 = tmp26 + tmp30;
                auto tmp33 = tmp31 * tmp32;
                auto tmp35 = tmp33 + tmp34;
                auto tmp36 = tmp25 + tmp35;
                auto tmp40 = tmp36 * tmp39;
                auto tmp42 = tmp40 + tmp41;
                auto tmp43 = tmp38 + tmp42;
                auto tmp45 = tmp43 * tmp44;
                auto tmp47 = tmp45 + tmp46;
                auto tmp48 = tmp37 + tmp47;
                auto tmp52 = tmp48 * tmp51;
                auto tmp54 = tmp52 + tmp53;
                auto tmp55 = tmp50 + tmp54;
                auto tmp57 = tmp55 * tmp56;
                auto tmp59 = tmp57 + tmp58;
                auto tmp60 = tmp49 + tmp59;
                auto tmp64 = tmp60 * tmp63;
                auto tmp66 = tmp64 + tmp65;
                auto tmp67 = tmp62 + tmp66;
                auto tmp69 = tmp67 * tmp68;
                auto tmp71 = tmp69 + tmp70;
                auto tmp72 = tmp61 + tmp71;
                auto tmp76 = tmp72 * tmp75;
                auto tmp78 = tmp76 + tmp77;
                auto tmp79 = tmp74 + tmp78;
                auto tmp81 = tmp79 * tmp80;
                auto tmp83 = tmp81 + tmp82;
                auto tmp84 = tmp73 + tmp83;
                auto tmp88 = tmp84 * tmp87;
                auto tmp90 = tmp88 + tmp89;
                auto tmp91 = tmp86 + tmp90;
                auto tmp93 = tmp91 * tmp92;
                auto tmp95 = tmp93 + tmp94;
                auto tmp96 = tmp85 + tmp95;
                auto tmp100 = tmp96 * tmp99;
                auto tmp102 = tmp100 + tmp101;
                auto tmp103 = tmp98 + tmp102;
                auto tmp105 = tmp103 * tmp104;
                auto tmp107 = tmp105 + tmp106;
                auto tmp108 = tmp97 + tmp107;
                auto tmp112 = tmp108 * tmp111;
                auto tmp114 = tmp112 + tmp113;
                auto tmp115 = tmp110 + tmp114;
                auto tmp117 = tmp115 * tmp116;
                auto tmp119 = tmp117 + tmp118;
                auto tmp120 = tmp109 + tmp119;
                auto tmp124 = tmp120 * tmp123;
                auto tmp126 = tmp124 + tmp125;
                auto tmp127 = tmp122 + tmp126;
                auto tmp129 = tmp127 * tmp128;
                auto tmp131 = tmp129 + tmp130;
                auto tmp132 = tmp121 + tmp131;
                tmp12.store(out_ptr6 + static_cast<long>(x1 + (512L*x0)));
                tmp24.store(out_ptr7 + static_cast<long>(x1 + (512L*x0)));
                tmp36.store(out_ptr8 + static_cast<long>(x1 + (512L*x0)));
                tmp48.store(out_ptr9 + static_cast<long>(x1 + (512L*x0)));
                tmp60.store(out_ptr10 + static_cast<long>(x1 + (512L*x0)));
                tmp72.store(out_ptr11 + static_cast<long>(x1 + (512L*x0)));
                tmp84.store(out_ptr12 + static_cast<long>(x1 + (512L*x0)));
                tmp96.store(out_ptr13 + static_cast<long>(x1 + (512L*x0)));
                tmp108.store(out_ptr14 + static_cast<long>(x1 + (512L*x0)));
                tmp120.store(out_ptr15 + static_cast<long>(x1 + (512L*x0)));
                tmp132.store(out_ptr16 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr106 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr107 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr108 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr109 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr110 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr111 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr112 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr113 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr114 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr115 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr116 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr117 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr118 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr17 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr18 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr119 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr120 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr121 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr122 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr123 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr124 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr125 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr126 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr127 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr128 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr129 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr130 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr131 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr19 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr20 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr132 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr133 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr134 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr135 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr136 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr137 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr138 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr139 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr140 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr141 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr142 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr143 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr144 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr21 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr22 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr145 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr146 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr147 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr148 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr149 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr150 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr151 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr152 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr153 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr154 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr155 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr156 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr157 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr23 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr24 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr158 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr159 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr160 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr161 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr162 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr163 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr164 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr165 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr166 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr167 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr168 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr169 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr170 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr25 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr26 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr171 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr172 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr173 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr174 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr175 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr176 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr177 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr178 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr179 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr180 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr181 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr182 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr183 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr27 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr28 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr184 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr185 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr186 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr187 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr188 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr189 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr190 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr191 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr192 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr193 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr194 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr195 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr196 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr29 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr30 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr197 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr198 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr199 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr200 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr201 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr202 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr203 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr204 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr205 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr206 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr207 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr208 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr209 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr31 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr32 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr210 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr211 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr212 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr213 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr214 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr215 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr216 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr217 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr218 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr219 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr220 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr221 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr222 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr33 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr34 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr223 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr224 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr225 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr226 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr227 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr228 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr229 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr230 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr231 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr232 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr233 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr234 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr235 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr35 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr36 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr236 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr237 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr238 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr239 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr240 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr241 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr242 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr243 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr244 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr245 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr246 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr247 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr248 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr37 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr38 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr249 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr250 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr251 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr252 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr253 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr254 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr255 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr256 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr257 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr258 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr259 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr260 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr261 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr39 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr40 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr262 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr263 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr264 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr265 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr266 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr267 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr268 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr269 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr270 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr271 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr272 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr273 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr274 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr41 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr42 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr275 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr276 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr277 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr278 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr279 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr280 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr281 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr282 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr283 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr284 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr285 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr286 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr287 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr43 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr44 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr288 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr289 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr290 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr291 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr292 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr293 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr294 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr295 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr296 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr297 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr298 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr299 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr300 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr45 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr46 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr301 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr302 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr303 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr304 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr305 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr306 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr307 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr308 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr309 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr310 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr311 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr312 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr313 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr47 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr48 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr314 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr315 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr316 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr317 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr318 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr319 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr320 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr321 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr322 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr323 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr324 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr325 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr326 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr49 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr50 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr327 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr328 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr329 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr330 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr331 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr332 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr333 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr334 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr335 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr336 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr337 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr338 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr339 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr51 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr52 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr340 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr341 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr342 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr343 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr344 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr345 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr346 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr347 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr348 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr349 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr350 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr351 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr352 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr53 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr54 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr353 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr354 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr355 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr356 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr357 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr358 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr359 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr360 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr361 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr362 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr363 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr364 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr365 + static_cast<long>(x1));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                tmp12.store(out_ptr55 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr56 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3906816L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr57 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr366[static_cast<long>(x0)];
                    auto tmp1 = static_cast<long>(-100);
                    auto tmp2 = tmp0 != tmp1;
                    auto tmp3 = static_cast<long>(0);
                    auto tmp4 = tmp2 ? tmp0 : tmp3;
                    out_ptr58[static_cast<long>(x0)] = tmp4;
                }
            }
        }
    }
}
''')


cpp_fused__log_softmax_backward_data_add_as_strided_scatter_nll_loss_backward_nll_loss_forward_squeeze_1 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const long* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(30520L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (30522L*x0)));
                        auto tmp1 = in_ptr1[static_cast<long>(x0)];
                        auto tmp4 = in_ptr2[static_cast<long>(0L)];
                        auto tmp5 = in_ptr3[static_cast<long>(0L)];
                        auto tmp2 = static_cast<int>(-100);
                        auto tmp3 = tmp1 != tmp2;
                        auto tmp6 = tmp4 / tmp5;
                        auto tmp7 = static_cast<float>(0.0);
                        auto tmp8 = tmp3 ? tmp6 : tmp7;
                        auto tmp9 = at::vec::Vectorized<float>(tmp8);
                        auto tmp10 = tmp0 * tmp9;
                        tmp_acc0_vec = tmp_acc0_vec + tmp10;
                    }
                    #pragma omp simd simdlen(4)  reduction(+:tmp_acc0)
                    for(long x1=static_cast<long>(30520L); x1<static_cast<long>(30522L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr0[static_cast<long>(x1 + (30522L*x0))];
                        auto tmp1 = in_ptr1[static_cast<long>(x0)];
                        auto tmp4 = in_ptr2[static_cast<long>(0L)];
                        auto tmp5 = in_ptr3[static_cast<long>(0L)];
                        auto tmp2 = static_cast<long>(-100);
                        auto tmp3 = tmp1 != tmp2;
                        auto tmp6 = tmp4 / tmp5;
                        auto tmp7 = static_cast<float>(0.0);
                        auto tmp8 = tmp3 ? tmp6 : tmp7;
                        auto tmp9 = decltype(tmp0)(tmp0 * tmp8);
                        tmp_acc0 = tmp_acc0 + tmp9;
                    }
                    tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                    out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
            {
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(30520L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (30522L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (30522L*x0)));
                    auto tmp2 = in_ptr1[static_cast<long>(x0)];
                    auto tmp5 = in_ptr2[static_cast<long>(0L)];
                    auto tmp6 = in_ptr3[static_cast<long>(0L)];
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1 + (30522L*x0)));
                    auto tmp14 = out_ptr0[static_cast<long>(x0)];
                    auto tmp3 = static_cast<int>(-100);
                    auto tmp4 = tmp2 != tmp3;
                    auto tmp7 = tmp5 / tmp6;
                    auto tmp8 = static_cast<float>(0.0);
                    auto tmp9 = tmp4 ? tmp7 : tmp8;
                    auto tmp10 = at::vec::Vectorized<float>(tmp9);
                    auto tmp11 = tmp1 * tmp10;
                    auto tmp13 = tmp12.exp();
                    auto tmp15 = at::vec::Vectorized<float>(tmp14);
                    auto tmp16 = tmp13 * tmp15;
                    auto tmp17 = tmp11 - tmp16;
                    auto tmp18 = tmp0 + tmp17;
                    tmp18.store(in_out_ptr0 + static_cast<long>(x1 + (30522L*x0)));
                }
                #pragma omp simd simdlen(4) 
                for(long x1=static_cast<long>(30520L); x1<static_cast<long>(30522L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr4[static_cast<long>(x1 + (30522L*x0))];
                    auto tmp1 = in_ptr0[static_cast<long>(x1 + (30522L*x0))];
                    auto tmp2 = in_ptr1[static_cast<long>(x0)];
                    auto tmp5 = in_ptr2[static_cast<long>(0L)];
                    auto tmp6 = in_ptr3[static_cast<long>(0L)];
                    auto tmp11 = in_ptr5[static_cast<long>(x1 + (30522L*x0))];
                    auto tmp13 = out_ptr0[static_cast<long>(x0)];
                    auto tmp3 = static_cast<long>(-100);
                    auto tmp4 = tmp2 != tmp3;
                    auto tmp7 = tmp5 / tmp6;
                    auto tmp8 = static_cast<float>(0.0);
                    auto tmp9 = tmp4 ? tmp7 : tmp8;
                    auto tmp10 = decltype(tmp1)(tmp1 * tmp9);
                    auto tmp12 = std::exp(tmp11);
                    auto tmp14 = decltype(tmp12)(tmp12 * tmp13);
                    auto tmp15 = decltype(tmp10)(tmp10 - tmp14);
                    auto tmp16 = decltype(tmp0)(tmp0 + tmp15);
                    in_out_ptr0[static_cast<long>(x1 + (30522L*x0))] = tmp16;
                }
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3906816L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3906816L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
                tmp0.store(out_ptr1 + static_cast<long>(x0));
                tmp0.store(out_ptr2 + static_cast<long>(x0));
            }
        }
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3906816L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(out_ptr1 + static_cast<long>(x0));
                tmp0.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_native_layer_norm_backward_nll_loss_forward_relu_threshold_backward_2 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                    auto tmp5 = in_ptr3[static_cast<long>(x0)];
                    auto tmp8 = in_ptr4[static_cast<long>(x0)];
                    auto tmp2 = tmp0 * tmp1;
                    auto tmp4 = at::vec::clamp_min(tmp3, decltype(tmp3)(0));
                    auto tmp6 = at::vec::Vectorized<float>(tmp5);
                    auto tmp7 = tmp4 - tmp6;
                    auto tmp9 = at::vec::Vectorized<float>(tmp8);
                    auto tmp10 = tmp7 * tmp9;
                    auto tmp11 = tmp2 * tmp10;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp11;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
                tmp_acc1 = tmp_acc1 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc1_vec);
                out_ptr1[static_cast<long>(x0)] = static_cast<float>(tmp_acc1);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = in_ptr4[static_cast<long>(x0)];
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp13 = out_ptr0[static_cast<long>(x0)];
                auto tmp16 = in_ptr3[static_cast<long>(x0)];
                auto tmp21 = out_ptr1[static_cast<long>(x0)];
                auto tmp1 = at::vec::clamp_min(tmp0, decltype(tmp0)(0));
                auto tmp2 = static_cast<float>(0.0);
                auto tmp3 = at::vec::Vectorized<float>(tmp2);
                auto tmp4 = to_float_mask(tmp1 <= tmp3);
                auto tmp6 = static_cast<float>(512.0);
                auto tmp7 = tmp5 / tmp6;
                auto tmp10 = tmp8 * tmp9;
                auto tmp11 = at::vec::Vectorized<float>(tmp6);
                auto tmp12 = tmp10 * tmp11;
                auto tmp14 = at::vec::Vectorized<float>(tmp13);
                auto tmp15 = tmp12 - tmp14;
                auto tmp17 = at::vec::Vectorized<float>(tmp16);
                auto tmp18 = tmp1 - tmp17;
                auto tmp19 = at::vec::Vectorized<float>(tmp5);
                auto tmp20 = tmp18 * tmp19;
                auto tmp22 = at::vec::Vectorized<float>(tmp21);
                auto tmp23 = tmp20 * tmp22;
                auto tmp24 = tmp15 - tmp23;
                auto tmp25 = at::vec::Vectorized<float>(tmp7);
                auto tmp26 = tmp25 * tmp24;
                auto tmp27 = decltype(tmp3)::blendv(tmp26, tmp3, tmp4);
                tmp27.store(out_ptr2 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_3 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_4 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_5 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_6 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_7 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_8 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       const float* in_ptr10,
                       const float* in_ptr11,
                       const float* in_ptr12,
                       const float* in_ptr13,
                       const float* in_ptr14,
                       const float* in_ptr15,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x1));
                auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp13 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x1 + (128L*x0)));
                auto tmp14 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x1 + (128L*x0)));
                auto tmp15 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp17 = at::vec::Vectorized<float>::loadu(in_ptr10 + static_cast<long>(x1));
                auto tmp20 = at::vec::Vectorized<float>::loadu(in_ptr11 + static_cast<long>(x1));
                auto tmp22 = at::vec::Vectorized<float>::loadu(in_ptr12 + static_cast<long>(x1));
                auto tmp25 = at::vec::Vectorized<float>::loadu(in_ptr13 + static_cast<long>(x1 + (128L*x0)));
                auto tmp26 = at::vec::Vectorized<float>::loadu(in_ptr14 + static_cast<long>(x1 + (128L*x0)));
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp7 = tmp1 + tmp6;
                auto tmp9 = tmp7 * tmp8;
                auto tmp11 = tmp9 + tmp10;
                auto tmp12 = tmp0 + tmp11;
                auto tmp16 = tmp12 * tmp15;
                auto tmp18 = tmp16 + tmp17;
                auto tmp19 = tmp14 + tmp18;
                auto tmp21 = tmp19 * tmp20;
                auto tmp23 = tmp21 + tmp22;
                auto tmp24 = tmp13 + tmp23;
                auto tmp27 = tmp25 + tmp26;
                auto tmp28 = tmp27 * tmp20;
                tmp12.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp24.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
                tmp28.store(out_ptr2 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(30520L); x0+=static_cast<long>(8L))
            {
                {
                    #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                    float tmp_acc0 = 0;
                    at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr15 + static_cast<long>(x0 + (30522L*x1)));
                        tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    }
                    tmp_acc0_vec.store(out_ptr3 + static_cast<long>(x0));
                }
            }
            #pragma omp for simd simdlen(4) 
            for(long x0=static_cast<long>(30520L); x0<static_cast<long>(30522L); x0+=static_cast<long>(1L))
            {
                {
                    float tmp_acc0 = 0;
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                    {
                        auto tmp0 = in_ptr15[static_cast<long>(x0 + (30522L*x1))];
                        tmp_acc0 = tmp_acc0 + tmp0;
                    }
                    out_ptr3[static_cast<long>(x0)] = tmp_acc0;
                }
            }
        }
    }
}
''')


cpp_fused_native_layer_norm_native_layer_norm_backward_relu_9 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = in_ptr2[static_cast<long>(x1)];
                    auto tmp6 = in_ptr3[static_cast<long>(x1)];
                    auto tmp2 = at::vec::clamp_min(tmp1, decltype(tmp1)(0));
                    auto tmp4 = at::vec::Vectorized<float>(tmp3);
                    auto tmp5 = tmp2 - tmp4;
                    auto tmp7 = at::vec::Vectorized<float>(tmp6);
                    auto tmp8 = tmp5 * tmp7;
                    auto tmp9 = tmp0 * tmp8;
                    tmp_acc0_vec = tmp_acc0_vec + tmp9;
                    tmp_acc1_vec = tmp_acc1_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_10 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_11 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_12 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_13 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_14 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_15 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_16 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_17 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_18 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_19 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_20 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_21 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_22 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_23 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_24 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_25 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_26 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr2 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_27 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_28 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_29 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_30 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_31 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_32 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_33 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_34 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_35 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_36 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_37 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_38 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_39 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_40 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_41 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_42 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_43 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_44 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_45 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_46 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_47 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_48 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_49 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_50 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_51 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_52 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_53 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_54 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_55 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_56 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_57 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_58 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_59 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_60 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_61 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_62 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_63 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_64 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_65 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_66 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_67 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_68 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_69 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_70 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_71 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_72 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_73 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_74 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_75 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_76 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_77 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_78 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_79 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_80 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_81 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_82 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_83 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_84 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_85 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_86 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_87 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_88 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_89 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_90 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_91 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_92 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_93 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_94 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_95 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_96 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_97 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_98 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_99 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_100 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_101 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_102 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_103 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_104 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_105 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_106 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_107 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_108 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_109 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_110 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_111 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_112 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_113 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_114 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_115 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_116 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_117 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_118 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_119 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_120 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_121 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_122 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_123 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_124 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_125 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_126 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_127 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_128 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_129 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_130 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_131 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_132 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_133 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_134 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_135 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_136 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_137 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_138 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_139 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_140 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_141 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_142 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_143 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_144 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_145 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_146 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_147 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_148 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_149 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_150 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_151 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_152 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_153 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_154 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_155 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_156 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_157 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_158 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_159 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_160 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_161 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_162 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_163 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_164 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_165 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_166 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_167 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_168 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_169 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_170 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_171 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_172 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_173 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_174 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_175 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_176 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_177 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_178 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_179 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_180 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_181 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_182 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_183 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_184 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_185 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_186 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_187 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_188 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_189 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_190 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_191 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_192 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_193 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_194 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_195 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_196 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_197 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_198 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_199 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_200 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_201 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_202 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_203 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_204 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_205 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_206 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_207 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_208 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_209 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_210 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_211 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_212 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_213 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_214 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_215 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_216 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_217 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_218 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_219 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_220 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_221 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_222 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_223 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_224 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_225 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_226 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_227 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_228 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_229 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_230 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_231 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_232 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_233 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_234 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_235 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_236 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_237 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_238 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_239 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_240 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_241 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_242 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_243 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_244 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_245 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_246 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr2 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_247 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_248 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_249 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_250 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_251 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_252 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_253 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_254 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_255 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_256 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_257 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_258 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_259 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_260 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_261 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_262 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_263 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_264 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_265 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_266 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_267 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_268 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_269 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_270 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_271 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_272 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_273 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_274 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_275 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_276 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_277 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_278 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_279 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_280 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_281 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_282 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_283 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_284 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_285 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_286 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_287 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_288 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_289 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_290 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_291 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_292 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_293 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_294 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_295 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_296 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_297 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_298 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_299 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_300 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_301 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_302 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_303 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_304 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_305 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_306 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_307 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_308 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_309 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_310 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_311 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_312 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_313 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_314 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_315 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_316 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_317 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_318 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_319 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_320 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_321 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_322 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_323 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_324 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_325 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_326 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_327 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_328 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_329 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_330 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_331 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_332 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_333 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_334 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_335 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_336 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_337 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_338 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_339 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_340 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_341 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_342 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_343 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_344 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_345 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_346 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_347 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_348 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_349 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_350 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_351 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_352 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_353 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_354 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_355 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_356 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_357 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_358 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_359 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_360 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_361 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_362 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_363 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_364 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_365 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_366 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_367 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_368 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_369 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_370 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_371 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_372 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_373 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_374 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_375 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_376 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_377 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_378 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_379 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_380 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_381 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_382 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_383 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_384 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_385 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_386 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_387 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_388 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_389 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_390 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_391 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_392 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_393 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_394 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_395 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_396 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_397 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_398 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_399 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_400 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_401 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_402 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_403 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_404 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_405 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_406 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_407 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_408 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_409 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_410 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_411 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_412 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_413 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_414 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_415 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_416 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_417 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_418 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_419 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_420 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_421 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_422 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_423 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_424 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_425 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_426 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_427 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_428 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_429 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_430 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_431 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_432 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_433 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_434 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_435 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_436 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_437 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_438 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_439 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_440 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_441 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_442 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_443 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_444 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_445 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_446 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       const float* in_ptr8,
                       const float* in_ptr9,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp8 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr8 + static_cast<long>(x0));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp10 = tmp8 * tmp9;
                    auto tmp12 = tmp10 + tmp11;
                    auto tmp13 = tmp7 + tmp12;
                    auto tmp14 = tmp6 * tmp13;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr9 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_447 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_448 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_449 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_450 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_451 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_452 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_453 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_454 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_455 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_456 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_457 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_458 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_459 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_460 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_461 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_462 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_463 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_464 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_465 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_466 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
}
''')


cpp_fused_mul_sum_467 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 * tmp1;
                tmp2.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_468 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_469 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp9 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp10 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = tmp2 * tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp7 = tmp1 + tmp6;
                    auto tmp8 = tmp0 * tmp7;
                    auto tmp11 = tmp9 + tmp10;
                    auto tmp12 = tmp11 * tmp2;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                    tmp_acc2_vec = tmp_acc2_vec + tmp9;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_470 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_471 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_472 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_473 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_474 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const float* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                float tmp_acc5 = 0;
                at::vec::Vectorized<float> tmp_acc5_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp12 = at::vec::Vectorized<float>::loadu(in_ptr7 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp13 = tmp11 + tmp12;
                    auto tmp14 = tmp13 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp13;
                    tmp_acc5_vec = tmp_acc5_vec + tmp14;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc5_vec.store(out_ptr5 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_475 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_476 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_nll_loss_forward_threshold_backward_477 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = flag_to_float_vec(in_ptr0 + static_cast<long>(x0));
            auto tmp1 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = at::vec::Vectorized<float>(tmp2);
            auto tmp4 = decltype(tmp3)::blendv(tmp1, tmp3, tmp0);
            tmp4.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_add_mul_sum_478 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5,
                       float* out_ptr6,
                       float* out_ptr7)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                auto tmp6 = tmp4 * tmp5;
                tmp4.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                tmp6.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                float tmp_acc2 = 0;
                at::vec::Vectorized<float> tmp_acc2_vec = at::vec::Vectorized<float>(0);
                float tmp_acc3 = 0;
                at::vec::Vectorized<float> tmp_acc3_vec = at::vec::Vectorized<float>(0);
                float tmp_acc4 = 0;
                at::vec::Vectorized<float> tmp_acc4_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp4 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x0));
                    auto tmp11 = at::vec::Vectorized<float>::loadu(out_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp6 = tmp4 * tmp5;
                    auto tmp8 = tmp6 + tmp7;
                    auto tmp9 = tmp3 + tmp8;
                    auto tmp10 = tmp2 * tmp9;
                    auto tmp12 = tmp11 * tmp4;
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                    tmp_acc1_vec = tmp_acc1_vec + tmp2;
                    tmp_acc2_vec = tmp_acc2_vec + tmp10;
                    tmp_acc3_vec = tmp_acc3_vec + tmp11;
                    tmp_acc4_vec = tmp_acc4_vec + tmp12;
                }
                tmp_acc0_vec.store(out_ptr2 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr3 + static_cast<long>(x0));
                tmp_acc2_vec.store(out_ptr4 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr5 + static_cast<long>(x0));
                tmp_acc3_vec.store(out_ptr6 + static_cast<long>(x0));
                tmp_acc4_vec.store(out_ptr7 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_sum_479 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_480 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const bool* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0)
{
    auto in_ptr0 = in_out_ptr0;
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            {
                float tmp_acc0 = 0;
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = in_ptr0[static_cast<long>(x1 + (128L*x0))];
                    auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                    auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                    auto tmp2 = c10::convert<float>(tmp1);
                    auto tmp3 = static_cast<float>(1.1111111111111112);
                    auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                    auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                    auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                    tmp_acc0 = tmp_acc0 + tmp7;
                }
                out_ptr0[static_cast<long>(x0)] = tmp_acc0;
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(1L))
        {
            #pragma GCC ivdep
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
            {
                auto tmp0 = in_out_ptr0[static_cast<long>(x1 + (128L*x0))];
                auto tmp1 = in_ptr1[static_cast<long>(x1 + (128L*x0))];
                auto tmp6 = in_ptr2[static_cast<long>(x1 + (128L*x0))];
                auto tmp8 = out_ptr0[static_cast<long>(x0)];
                auto tmp2 = c10::convert<float>(tmp1);
                auto tmp3 = static_cast<float>(1.1111111111111112);
                auto tmp4 = decltype(tmp2)(tmp2 * tmp3);
                auto tmp5 = decltype(tmp0)(tmp0 * tmp4);
                auto tmp7 = decltype(tmp5)(tmp5 * tmp6);
                auto tmp9 = decltype(tmp6)(tmp6 * tmp8);
                auto tmp10 = decltype(tmp7)(tmp7 - tmp9);
                in_out_ptr0[static_cast<long>(x1 + (128L*x0))] = tmp10;
            }
        }
    }
}
''')


cpp_fused_view_481 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr0[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                tmp0.store(out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_view_482 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(16384L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x0));
            auto tmp1 = static_cast<float>(0.42044820762685725);
            auto tmp2 = at::vec::Vectorized<float>(tmp1);
            auto tmp3 = tmp0 * tmp2;
            tmp3.store(in_out_ptr0 + static_cast<long>(x0));
        }
    }
}
''')


cpp_fused_sum_view_483 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const float* in_ptr1,
                       float* out_ptr0,
                       float* out_ptr1)
{
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x1 + (128L*x0)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0 = tmp_acc0 + at::vec::vec_reduce_all<float>([](at::vec::Vectorized<float>& x, at::vec::Vectorized<float>& y) { return x + y; }, tmp_acc0_vec);
                out_ptr0[static_cast<long>(x0)] = static_cast<float>(tmp_acc0);
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = ([&]() { __at_align__ float tmpbuf[8]; for (long x1_inner = 0; x1_inner < 8; x1_inner++) tmpbuf[x1_inner] = in_ptr1[static_cast<long>((32L*x0) + (4096L*(c10::div_floor_integer((x1 + x1_inner), 32L))) + (static_cast<long>((x1 + x1_inner)) % static_cast<long>(32L)))]; return at::vec::Vectorized<float>::loadu(tmpbuf); })();
                auto tmp1 = static_cast<float>(0.42044820762685725);
                auto tmp2 = at::vec::Vectorized<float>(tmp1);
                auto tmp3 = tmp0 * tmp2;
                tmp3.store(out_ptr1 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_add_mul_sum_484 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (128L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 * tmp3;
                    tmp_acc0_vec = tmp_acc0_vec + tmp2;
                    tmp_acc1_vec = tmp_acc1_vec + tmp4;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (128L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1));
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 * tmp3;
                tmp4.store(in_out_ptr0 + static_cast<long>(x1 + (128L*x0)));
            }
        }
    }
}
''')


cpp_fused_sum_485 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       float* out_ptr0)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_embedding_dense_backward_mul_nll_loss_forward_sum_486 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* in_out_ptr0,
                       const float* in_ptr0,
                       const float* in_ptr2,
                       const float* in_ptr3,
                       const float* in_ptr4,
                       const float* in_ptr5,
                       const float* in_ptr6,
                       const long* in_ptr7,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2,
                       float* out_ptr3,
                       float* out_ptr4,
                       float* out_ptr5)
{
    auto in_ptr1 = in_out_ptr0;
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (128L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                float tmp_acc1 = 0;
                at::vec::Vectorized<float> tmp_acc1_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr1 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr5 + static_cast<long>(x0 + (512L*x1)));
                    auto tmp2 = tmp0 + tmp1;
                    auto tmp4 = tmp2 + tmp3;
                    auto tmp6 = tmp4 + tmp5;
                    auto tmp8 = tmp6 * tmp7;
                    tmp_acc0_vec = tmp_acc0_vec + tmp6;
                    tmp_acc1_vec = tmp_acc1_vec + tmp8;
                }
                tmp_acc0_vec.store(out_ptr1 + static_cast<long>(x0));
                tmp_acc1_vec.store(out_ptr2 + static_cast<long>(x0));
            }
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
        {
            for(long x1=static_cast<long>(0L); x1<static_cast<long>(512L); x1+=static_cast<long>(8L))
            {
                auto tmp0 = at::vec::Vectorized<float>::loadu(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                auto tmp1 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(x1 + (512L*x0)));
                auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr3 + static_cast<long>(x1 + (512L*x0)));
                auto tmp5 = at::vec::Vectorized<float>::loadu(in_ptr4 + static_cast<long>(x1 + (512L*x0)));
                auto tmp7 = at::vec::Vectorized<float>::loadu(in_ptr6 + static_cast<long>(x1));
                auto tmp9 = in_ptr7[static_cast<long>(x0)];
                auto tmp2 = tmp0 + tmp1;
                auto tmp4 = tmp2 + tmp3;
                auto tmp6 = tmp4 + tmp5;
                auto tmp8 = tmp6 * tmp7;
                auto tmp10 = static_cast<int>(-1);
                auto tmp11 = tmp9 == tmp10;
                auto tmp12 = static_cast<float>(0.0);
                auto tmp13 = to_float_mask(tmp11);
                auto tmp14 = at::vec::Vectorized<float>(tmp12);
                auto tmp15 = decltype(tmp14)::blendv(tmp8, tmp14, tmp13);
                tmp8.store(in_out_ptr0 + static_cast<long>(x1 + (512L*x0)));
                tmp15.store(out_ptr3 + static_cast<long>(x1 + (512L*x0)));
            }
        }
    }
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(1024L); x0+=static_cast<long>(8L))
        {
            auto tmp0 = static_cast<float>(0.0);
            auto tmp1 = at::vec::Vectorized<float>(tmp0);
            tmp1.store(out_ptr4 + static_cast<long>(x0));
        }
    }
    {
        #pragma GCC ivdep
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(65536L); x0+=static_cast<long>(1L))
        {
            auto tmp0 = in_out_ptr0[static_cast<long>(x0)];
            auto tmp1 = static_cast<bool>(0);
            auto tmp2 = static_cast<float>(0.0);
            auto tmp3 = tmp1 ? tmp2 : tmp0;
            out_ptr5[static_cast<long>(x0)] = tmp3;
        }
    }
}
''')


cpp_fused_embedding_dense_backward_487 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(float* out_ptr0)
{
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(262144L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
}
''')


cpp_fused_add_constant_pad_nd_embedding_dense_backward_nll_loss_forward_slice_backward_sum_488 = async_compile.cpp('''
#include "/tmp/torchinductor_youkaichao/2l/c2ljzlm4sosod7u6lyrroqdba6hmfcyijrric6p4t3fhbcmw6osp.h"
extern "C" void kernel(const float* in_ptr0,
                       const long* in_ptr1,
                       const float* in_ptr2,
                       float* out_ptr0,
                       float* out_ptr1,
                       float* out_ptr2)
{
    {
        for(long x0=static_cast<long>(0L); x0<static_cast<long>(512L); x0+=static_cast<long>(8L))
        {
            {
                #pragma omp declare reduction(+:at::vec::Vectorized<float>:omp_out = omp_out + omp_in) initializer(omp_priv={at::vec::Vectorized<float>(0)})
                float tmp_acc0 = 0;
                at::vec::Vectorized<float> tmp_acc0_vec = at::vec::Vectorized<float>(0);
                for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(1L))
                {
                    auto tmp0 = at::vec::Vectorized<float>::loadu(in_ptr0 + static_cast<long>(x0 + (512L*x1)));
                    tmp_acc0_vec = tmp_acc0_vec + tmp0;
                }
                tmp_acc0_vec.store(out_ptr0 + static_cast<long>(x0));
            }
        }
    }
    #pragma omp parallel num_threads(28)
    {
        {
            #pragma omp for 
            for(long x0=static_cast<long>(0L); x0<static_cast<long>(3906816L); x0+=static_cast<long>(8L))
            {
                auto tmp0 = static_cast<float>(0.0);
                auto tmp1 = at::vec::Vectorized<float>(tmp0);
                tmp1.store(out_ptr1 + static_cast<long>(x0));
            }
        }
        #pragma omp single
        {
            {
                #pragma GCC ivdep
                for(long x0=static_cast<long>(0L); x0<static_cast<long>(128L); x0+=static_cast<long>(1L))
                {
                    for(long x1=static_cast<long>(0L); x1<static_cast<long>(128L); x1+=static_cast<long>(8L))
                    {
                        auto tmp0 = in_ptr1[static_cast<long>(x0)];
                        auto tmp3 = at::vec::Vectorized<float>::loadu(in_ptr2 + static_cast<long>(128L + x1 + (384L*x0)));
                        auto tmp1 = static_cast<int>(0);
                        auto tmp2 = tmp0 == tmp1;
                        auto tmp4 = c10::convert<int>(x0);
                        auto tmp5 = static_cast<int>(127);
                        auto tmp6 = tmp4 < tmp5;
                        auto tmp7 = [&]
                        {
                            auto tmp8 = c10::convert<int>(1L + x0);
                            auto tmp9 = static_cast<int>(0);
                            auto tmp10 = tmp8 >= tmp9;
                            auto tmp12 = tmp10 & tmp6;
                            auto tmp11 = [&]
                            {
                                auto tmp13 = masked_load(in_ptr2 + static_cast<long>(640L + x1 + (384L*x0)), to_float_mask(tmp12));
                                return tmp13;
                            }
                            ;
                            auto tmp14 = decltype(tmp11())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp11(), to_float_mask(tmp12));
                            return tmp14;
                        }
                        ;
                        auto tmp15 = decltype(tmp7())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp7(), to_float_mask(tmp6));
                        auto tmp16 = static_cast<float>(0.0);
                        auto tmp17 = to_float_mask(tmp6);
                        auto tmp18 = at::vec::Vectorized<float>(tmp16);
                        auto tmp19 = decltype(tmp15)::blendv(tmp18, tmp15, tmp17);
                        auto tmp20 = tmp3 + tmp19;
                        auto tmp21 = static_cast<int>(1);
                        auto tmp22 = tmp4 >= tmp21;
                        auto tmp23 = [&]
                        {
                            auto tmp24 = c10::convert<int>((-1L) + x0);
                            auto tmp25 = static_cast<int>(128);
                            auto tmp26 = tmp24 < tmp25;
                            auto tmp28 = tmp26 & tmp22;
                            auto tmp27 = [&]
                            {
                                auto tmp29 = masked_load(in_ptr2 + static_cast<long>((-384L) + x1 + (384L*x0)), to_float_mask(tmp28));
                                return tmp29;
                            }
                            ;
                            auto tmp30 = decltype(tmp27())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp27(), to_float_mask(tmp28));
                            return tmp30;
                        }
                        ;
                        auto tmp31 = decltype(tmp23())::blendv(at::vec::Vectorized<float>(static_cast<float>(0.0)), tmp23(), to_float_mask(tmp22));
                        auto tmp32 = to_float_mask(tmp22);
                        auto tmp33 = decltype(tmp31)::blendv(tmp18, tmp31, tmp32);
                        auto tmp34 = tmp20 + tmp33;
                        auto tmp35 = to_float_mask(tmp2);
                        auto tmp36 = decltype(tmp18)::blendv(tmp34, tmp18, tmp35);
                        tmp36.store(out_ptr2 + static_cast<long>(x1 + (128L*x0)));
                    }
                }
            }
        }
    }
}
''')


async_compile.wait(globals())
del async_compile

def call(args):
    primals_1, primals_3, primals_4, primals_5, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_17, primals_18, primals_19, primals_20, primals_21, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_33, primals_34, primals_35, primals_36, primals_37, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_49, primals_50, primals_51, primals_52, primals_53, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_65, primals_66, primals_67, primals_68, primals_69, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_81, primals_82, primals_83, primals_84, primals_85, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_97, primals_98, primals_99, primals_100, primals_101, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_113, primals_114, primals_115, primals_116, primals_117, primals_119, primals_120, primals_121, primals_122, primals_123, primals_124, primals_125, primals_126, primals_127, primals_129, primals_130, primals_131, primals_132, primals_133, primals_135, primals_136, primals_137, primals_138, primals_139, primals_140, primals_141, primals_142, primals_143, primals_145, primals_146, primals_147, primals_148, primals_149, primals_151, primals_152, primals_153, primals_154, primals_155, primals_156, primals_157, primals_158, primals_159, primals_161, primals_162, primals_163, primals_164, primals_165, primals_167, primals_168, primals_169, primals_170, primals_171, primals_172, primals_173, primals_174, primals_175, primals_177, primals_178, primals_179, primals_180, primals_181, primals_183, primals_184, primals_185, primals_186, primals_187, primals_188, primals_189, primals_190, primals_191, primals_193, primals_194, primals_195, primals_196, primals_197, primals_199, primals_200, primals_201, primals_202, primals_203, primals_204, primals_205, primals_206, primals_207, primals_209, primals_210, primals_211, primals_212, primals_213, primals_215, primals_216, primals_217, primals_218, primals_219, primals_220, primals_221, primals_222, primals_223, primals_225, primals_226, primals_227, primals_228, primals_229, primals_231, primals_232, primals_233, primals_234, primals_235, primals_236, primals_237, primals_238, primals_239, primals_241, primals_242, primals_243, primals_244, primals_245, primals_247, primals_248, primals_249, primals_250, primals_251, primals_252, primals_253, primals_254, primals_255, primals_257, primals_258, primals_259, primals_260, primals_261, primals_263, primals_264, primals_265, primals_266, primals_267, primals_268, primals_269, primals_270, primals_271, primals_273, primals_274, primals_275, primals_276, primals_277, primals_279, primals_280, primals_281, primals_282, primals_283, primals_284, primals_285, primals_286, primals_287, primals_289, primals_290, primals_291, primals_292, primals_293, primals_295, primals_296, primals_297, primals_298, primals_299, primals_300, primals_301, primals_302, primals_303, primals_305, primals_306, primals_307, primals_308, primals_309, primals_311, primals_312, primals_313, primals_314, primals_315, primals_316, primals_317, primals_318, primals_319, primals_321, primals_322, primals_323, primals_324, primals_325, primals_327, primals_328, primals_329, primals_330, primals_331, primals_332, primals_333, primals_334, primals_335, primals_337, primals_338, primals_339, primals_340, primals_341, primals_343, primals_344, primals_345, primals_346, primals_347, primals_348, primals_349, primals_350, primals_351, primals_353, primals_354, primals_355, primals_356, primals_357, primals_359, primals_360, primals_361, primals_362, primals_363, primals_364, primals_365, primals_366, primals_367, primals_369, primals_370, primals_371, primals_372, primals_373, primals_375, primals_376, primals_377, primals_378, primals_379, primals_380, primals_381, primals_382, primals_383, primals_385, primals_1117, primals_1120, primals_1121, full_default, slice_4, view, add_1, view_2, addmm_1, addmm_2, view_6, getitem_97, permute_default_139, permute_default_140, alias_default_47, permute_default_141, permute_default_142, view_22, addmm_6, view_24, view_26, addmm_8, view_28, view_30, addmm_10, view_32, view_34, addmm_12, view_36, view_38, addmm_14, view_40, add_16, view_42, addmm_16, addmm_17, view_46, getitem_95, permute_default_133, permute_default_134, alias_default_45, permute_default_135, permute_default_136, view_62, addmm_21, view_64, view_66, addmm_23, view_68, view_70, addmm_25, view_72, view_74, addmm_27, view_76, view_78, addmm_29, view_80, addmm_30, view_82, addmm_31, addmm_32, view_86, getitem_93, permute_default_127, permute_default_128, alias_default_43, permute_default_129, permute_default_130, view_102, addmm_36, view_104, view_106, addmm_38, view_108, view_110, addmm_40, view_112, view_114, addmm_42, view_116, view_118, addmm_44, view_120, addmm_45, view_122, addmm_46, addmm_47, view_126, getitem_91, permute_default_121, permute_default_122, alias_default_41, permute_default_123, permute_default_124, view_142, addmm_51, view_144, view_146, addmm_53, view_148, view_150, addmm_55, view_152, view_154, addmm_57, view_156, view_158, addmm_59, view_160, addmm_60, view_162, addmm_61, addmm_62, view_166, getitem_89, permute_default_115, permute_default_116, alias_default_39, permute_default_117, permute_default_118, view_182, addmm_66, view_184, view_186, addmm_68, view_188, view_190, addmm_70, view_192, view_194, addmm_72, view_196, view_198, addmm_74, view_200, addmm_75, view_202, addmm_76, addmm_77, view_206, getitem_87, permute_default_109, permute_default_110, alias_default_37, permute_default_111, permute_default_112, view_222, addmm_81, view_224, view_226, addmm_83, view_228, view_230, addmm_85, view_232, view_234, addmm_87, view_236, view_238, addmm_89, view_240, addmm_90, view_242, addmm_91, addmm_92, view_246, getitem_85, permute_default_103, permute_default_104, alias_default_35, permute_default_105, permute_default_106, view_262, addmm_96, view_264, view_266, addmm_98, view_268, view_270, addmm_100, view_272, view_274, addmm_102, view_276, view_278, addmm_104, view_280, addmm_105, view_282, addmm_106, addmm_107, view_286, getitem_83, permute_default_97, permute_default_98, alias_default_33, permute_default_99, permute_default_100, view_302, addmm_111, view_304, view_306, addmm_113, view_308, view_310, addmm_115, view_312, view_314, addmm_117, view_316, view_318, addmm_119, view_320, addmm_120, view_322, addmm_121, addmm_122, view_326, getitem_81, permute_default_91, permute_default_92, alias_default_31, permute_default_93, permute_default_94, view_342, addmm_126, view_344, view_346, addmm_128, view_348, view_350, addmm_130, view_352, view_354, addmm_132, view_356, view_358, addmm_134, view_360, addmm_135, view_362, addmm_136, addmm_137, view_366, getitem_79, permute_default_85, permute_default_86, alias_default_29, permute_default_87, permute_default_88, view_382, addmm_141, view_384, view_386, addmm_143, view_388, view_390, addmm_145, view_392, view_394, addmm_147, view_396, view_398, addmm_149, view_400, addmm_150, view_402, addmm_151, addmm_152, view_406, getitem_77, permute_default_79, permute_default_80, alias_default_27, permute_default_81, permute_default_82, view_422, addmm_156, view_424, view_426, addmm_158, view_428, view_430, addmm_160, view_432, view_434, addmm_162, view_436, view_438, addmm_164, view_440, addmm_165, view_442, addmm_166, addmm_167, view_446, getitem_75, permute_default_73, permute_default_74, alias_default_25, permute_default_75, permute_default_76, view_462, addmm_171, view_464, view_466, addmm_173, view_468, view_470, addmm_175, view_472, view_474, addmm_177, view_476, view_478, addmm_179, view_480, addmm_180, view_482, addmm_181, addmm_182, view_486, getitem_73, permute_default_67, permute_default_68, alias_default_23, permute_default_69, permute_default_70, view_502, addmm_186, view_504, view_506, addmm_188, view_508, view_510, addmm_190, view_512, view_514, addmm_192, view_516, view_518, addmm_194, view_520, addmm_195, view_522, addmm_196, addmm_197, view_526, getitem_71, permute_default_61, permute_default_62, alias_default_21, permute_default_63, permute_default_64, view_542, addmm_201, view_544, view_546, addmm_203, view_548, view_550, addmm_205, view_552, view_554, addmm_207, view_556, view_558, addmm_209, view_560, addmm_210, view_562, addmm_211, addmm_212, view_566, getitem_69, permute_default_55, permute_default_56, alias_default_19, permute_default_57, permute_default_58, view_582, addmm_216, view_584, view_586, addmm_218, view_588, view_590, addmm_220, view_592, view_594, addmm_222, view_596, view_598, addmm_224, view_600, addmm_225, view_602, addmm_226, addmm_227, view_606, getitem_67, permute_default_49, permute_default_50, alias_default_17, permute_default_51, permute_default_52, view_622, addmm_231, view_624, view_626, addmm_233, view_628, view_630, addmm_235, view_632, view_634, addmm_237, view_636, view_638, addmm_239, view_640, addmm_240, view_642, addmm_241, addmm_242, view_646, getitem_65, permute_default_43, permute_default_44, alias_default_15, permute_default_45, permute_default_46, view_662, addmm_246, view_664, view_666, addmm_248, view_668, view_670, addmm_250, view_672, view_674, addmm_252, view_676, view_678, addmm_254, view_680, addmm_255, view_682, addmm_256, addmm_257, view_686, getitem_63, permute_default_37, permute_default_38, alias_default_13, permute_default_39, permute_default_40, view_702, addmm_261, view_704, view_706, addmm_263, view_708, view_710, addmm_265, view_712, view_714, addmm_267, view_716, view_718, addmm_269, view_720, addmm_270, view_722, addmm_271, addmm_272, view_726, getitem_61, permute_default_31, permute_default_32, alias_default_11, permute_default_33, permute_default_34, view_742, addmm_276, view_744, view_746, addmm_278, view_748, view_750, addmm_280, view_752, view_754, addmm_282, view_756, view_758, addmm_284, view_760, addmm_285, view_762, addmm_286, addmm_287, view_766, getitem_59, permute_default_25, permute_default_26, alias_default_9, permute_default_27, permute_default_28, view_782, addmm_291, view_784, view_786, addmm_293, view_788, view_790, addmm_295, view_792, view_794, addmm_297, view_796, view_798, addmm_299, view_800, addmm_300, view_802, addmm_301, addmm_302, view_806, getitem_57, permute_default_19, permute_default_20, alias_default_7, permute_default_21, permute_default_22, view_822, addmm_306, view_824, view_826, addmm_308, view_828, view_830, addmm_310, view_832, view_834, addmm_312, view_836, view_838, addmm_314, view_840, addmm_315, view_842, addmm_316, addmm_317, view_846, getitem_55, permute_default_13, permute_default_14, alias_default_5, permute_default_15, permute_default_16, view_862, addmm_321, view_864, view_866, addmm_323, view_868, view_870, addmm_325, view_872, view_874, addmm_327, view_876, view_878, addmm_329, view_880, addmm_330, view_882, addmm_331, addmm_332, view_886, getitem_53, permute_default_7, permute_default_8, alias_default_3, permute_default_9, permute_default_10, view_902, addmm_336, view_904, view_906, addmm_338, view_908, view_910, addmm_340, view_912, view_914, addmm_342, view_916, view_918, addmm_344, view_920, addmm_345, view_922, addmm_346, addmm_347, view_926, getitem_51, permute_default_1, permute_default_2, alias_default_1, permute_default_3, permute_default_4, view_942, addmm_351, view_944, view_946, addmm_353, view_948, view_950, addmm_355, view_952, view_954, addmm_357, view_956, view_958, addmm_359, view_960, addmm_360, view_962, addmm_361, getitem_49, rsqrt, sub_27, convert_element_type, permute_483, permute_484, permute_486, permute_490, permute_494, le_1, permute_498, permute_502, le_2, permute_506, permute_510, le_3, permute_514, permute_518, le_4, permute_522, permute_526, permute_539, permute_543, permute_547, permute_551, permute_555, permute_559, permute_563, le_5, permute_567, permute_571, le_6, permute_575, permute_579, le_7, permute_583, permute_587, le_8, permute_591, permute_595, permute_608, permute_612, permute_616, permute_620, permute_624, permute_628, permute_632, le_9, permute_636, permute_640, le_10, permute_644, permute_648, le_11, permute_652, permute_656, le_12, permute_660, permute_664, permute_677, permute_681, permute_685, permute_689, permute_693, permute_697, permute_701, le_13, permute_705, permute_709, le_14, permute_713, permute_717, le_15, permute_721, permute_725, le_16, permute_729, permute_733, permute_746, permute_750, permute_754, permute_758, permute_762, permute_766, permute_770, le_17, permute_774, permute_778, le_18, permute_782, permute_786, le_19, permute_790, permute_794, le_20, permute_798, permute_802, permute_815, permute_819, permute_823, permute_827, permute_831, permute_835, permute_839, le_21, permute_843, permute_847, le_22, permute_851, permute_855, le_23, permute_859, permute_863, le_24, permute_867, permute_871, permute_884, permute_888, permute_892, permute_896, permute_900, permute_904, permute_908, le_25, permute_912, permute_916, le_26, permute_920, permute_924, le_27, permute_928, permute_932, le_28, permute_936, permute_940, permute_953, permute_957, permute_961, permute_965, permute_969, permute_973, permute_977, le_29, permute_981, permute_985, le_30, permute_989, permute_993, le_31, permute_997, permute_1001, le_32, permute_1005, permute_1009, permute_1022, permute_1026, permute_1030, permute_1034, permute_1038, permute_1042, permute_1046, le_33, permute_1050, permute_1054, le_34, permute_1058, permute_1062, le_35, permute_1066, permute_1070, le_36, permute_1074, permute_1078, permute_1091, permute_1095, permute_1099, permute_1103, permute_1107, permute_1111, permute_1115, le_37, permute_1119, permute_1123, le_38, permute_1127, permute_1131, le_39, permute_1135, permute_1139, le_40, permute_1143, permute_1147, permute_1160, permute_1164, permute_1168, permute_1172, permute_1176, permute_1180, permute_1184, le_41, permute_1188, permute_1192, le_42, permute_1196, permute_1200, le_43, permute_1204, permute_1208, le_44, permute_1212, permute_1216, permute_1229, permute_1233, permute_1237, permute_1241, permute_1245, permute_1249, permute_1253, le_45, permute_1257, permute_1261, le_46, permute_1265, permute_1269, le_47, permute_1273, permute_1277, le_48, permute_1281, permute_1285, permute_1298, permute_1302, permute_1306, permute_1310, permute_1314, permute_1318, permute_1322, le_49, permute_1326, permute_1330, le_50, permute_1334, permute_1338, le_51, permute_1342, permute_1346, le_52, permute_1350, permute_1354, permute_1367, permute_1371, permute_1375, permute_1379, permute_1383, permute_1387, permute_1391, le_53, permute_1395, permute_1399, le_54, permute_1403, permute_1407, le_55, permute_1411, permute_1415, le_56, permute_1419, permute_1423, permute_1436, permute_1440, permute_1444, permute_1448, permute_1452, permute_1456, permute_1460, le_57, permute_1464, permute_1468, le_58, permute_1472, permute_1476, le_59, permute_1480, permute_1484, le_60, permute_1488, permute_1492, permute_1505, permute_1509, permute_1513, permute_1517, permute_1521, permute_1525, permute_1529, le_61, permute_1533, permute_1537, le_62, permute_1541, permute_1545, le_63, permute_1549, permute_1553, le_64, permute_1557, permute_1561, permute_1574, permute_1578, permute_1582, permute_1586, permute_1590, permute_1594, permute_1598, le_65, permute_1602, permute_1606, le_66, permute_1610, permute_1614, le_67, permute_1618, permute_1622, le_68, permute_1626, permute_1630, permute_1643, permute_1647, permute_1651, permute_1655, permute_1659, permute_1663, permute_1667, le_69, permute_1671, permute_1675, le_70, permute_1679, permute_1683, le_71, permute_1687, permute_1691, le_72, permute_1695, permute_1699, permute_1712, permute_1716, permute_1720, permute_1724, permute_1728, permute_1732, permute_1736, le_73, permute_1740, permute_1744, le_74, permute_1748, permute_1752, le_75, permute_1756, permute_1760, le_76, permute_1764, permute_1768, permute_1781, permute_1785, permute_1789, permute_1793, permute_1797, permute_1801, permute_1805, le_77, permute_1809, permute_1813, le_78, permute_1817, permute_1821, le_79, permute_1825, permute_1829, le_80, permute_1833, permute_1837, permute_1850, permute_1854, permute_1858, permute_1862, permute_1866, permute_1870, permute_1874, le_81, permute_1878, permute_1882, le_82, permute_1886, permute_1890, le_83, permute_1894, permute_1898, le_84, permute_1902, permute_1906, permute_1919, permute_1923, permute_1927, permute_1931, permute_1935, permute_1939, permute_1943, le_85, permute_1947, permute_1951, le_86, permute_1955, permute_1959, le_87, permute_1963, permute_1967, le_88, permute_1971, permute_1975, permute_1988, permute_1992, permute_1996, permute_2000, permute_2004, permute_2008, permute_2012, le_89, permute_2016, permute_2020, le_90, permute_2024, permute_2028, le_91, permute_2032, permute_2036, le_92, permute_2040, permute_2044, permute_2057, permute_2061, permute_2065, permute_2069, permute_2073, permute_2077, permute_2081, le_93, permute_2085, permute_2089, le_94, permute_2093, permute_2097, le_95, permute_2101, permute_2105, le_96, permute_2109, permute_2113, permute_2126, permute_2130, permute_2134, permute_2138, permute_2142, permute_2146, tangents_1, tangents_2 = args
    args.clear()
    assert_size_stride(primals_1, (512, ), (1, ))
    assert_size_stride(primals_3, (128, ), (1, ))
    assert_size_stride(primals_4, (128, ), (1, ))
    assert_size_stride(primals_5, (128, ), (1, ))
    assert_size_stride(primals_7, (128, ), (1, ))
    assert_size_stride(primals_8, (128, ), (1, ))
    assert_size_stride(primals_9, (128, ), (1, ))
    assert_size_stride(primals_10, (128, ), (1, ))
    assert_size_stride(primals_11, (128, ), (1, ))
    assert_size_stride(primals_12, (128, ), (1, ))
    assert_size_stride(primals_13, (128, ), (1, ))
    assert_size_stride(primals_14, (128, ), (1, ))
    assert_size_stride(primals_15, (128, ), (1, ))
    assert_size_stride(primals_17, (512, ), (1, ))
    assert_size_stride(primals_18, (512, ), (1, ))
    assert_size_stride(primals_19, (128, ), (1, ))
    assert_size_stride(primals_20, (128, ), (1, ))
    assert_size_stride(primals_21, (128, ), (1, ))
    assert_size_stride(primals_23, (128, ), (1, ))
    assert_size_stride(primals_24, (128, ), (1, ))
    assert_size_stride(primals_25, (128, ), (1, ))
    assert_size_stride(primals_26, (128, ), (1, ))
    assert_size_stride(primals_27, (128, ), (1, ))
    assert_size_stride(primals_28, (128, ), (1, ))
    assert_size_stride(primals_29, (128, ), (1, ))
    assert_size_stride(primals_30, (128, ), (1, ))
    assert_size_stride(primals_31, (128, ), (1, ))
    assert_size_stride(primals_33, (512, ), (1, ))
    assert_size_stride(primals_34, (512, ), (1, ))
    assert_size_stride(primals_35, (128, ), (1, ))
    assert_size_stride(primals_36, (128, ), (1, ))
    assert_size_stride(primals_37, (128, ), (1, ))
    assert_size_stride(primals_39, (128, ), (1, ))
    assert_size_stride(primals_40, (128, ), (1, ))
    assert_size_stride(primals_41, (128, ), (1, ))
    assert_size_stride(primals_42, (128, ), (1, ))
    assert_size_stride(primals_43, (128, ), (1, ))
    assert_size_stride(primals_44, (128, ), (1, ))
    assert_size_stride(primals_45, (128, ), (1, ))
    assert_size_stride(primals_46, (128, ), (1, ))
    assert_size_stride(primals_47, (128, ), (1, ))
    assert_size_stride(primals_49, (512, ), (1, ))
    assert_size_stride(primals_50, (512, ), (1, ))
    assert_size_stride(primals_51, (128, ), (1, ))
    assert_size_stride(primals_52, (128, ), (1, ))
    assert_size_stride(primals_53, (128, ), (1, ))
    assert_size_stride(primals_55, (128, ), (1, ))
    assert_size_stride(primals_56, (128, ), (1, ))
    assert_size_stride(primals_57, (128, ), (1, ))
    assert_size_stride(primals_58, (128, ), (1, ))
    assert_size_stride(primals_59, (128, ), (1, ))
    assert_size_stride(primals_60, (128, ), (1, ))
    assert_size_stride(primals_61, (128, ), (1, ))
    assert_size_stride(primals_62, (128, ), (1, ))
    assert_size_stride(primals_63, (128, ), (1, ))
    assert_size_stride(primals_65, (512, ), (1, ))
    assert_size_stride(primals_66, (512, ), (1, ))
    assert_size_stride(primals_67, (128, ), (1, ))
    assert_size_stride(primals_68, (128, ), (1, ))
    assert_size_stride(primals_69, (128, ), (1, ))
    assert_size_stride(primals_71, (128, ), (1, ))
    assert_size_stride(primals_72, (128, ), (1, ))
    assert_size_stride(primals_73, (128, ), (1, ))
    assert_size_stride(primals_74, (128, ), (1, ))
    assert_size_stride(primals_75, (128, ), (1, ))
    assert_size_stride(primals_76, (128, ), (1, ))
    assert_size_stride(primals_77, (128, ), (1, ))
    assert_size_stride(primals_78, (128, ), (1, ))
    assert_size_stride(primals_79, (128, ), (1, ))
    assert_size_stride(primals_81, (512, ), (1, ))
    assert_size_stride(primals_82, (512, ), (1, ))
    assert_size_stride(primals_83, (128, ), (1, ))
    assert_size_stride(primals_84, (128, ), (1, ))
    assert_size_stride(primals_85, (128, ), (1, ))
    assert_size_stride(primals_87, (128, ), (1, ))
    assert_size_stride(primals_88, (128, ), (1, ))
    assert_size_stride(primals_89, (128, ), (1, ))
    assert_size_stride(primals_90, (128, ), (1, ))
    assert_size_stride(primals_91, (128, ), (1, ))
    assert_size_stride(primals_92, (128, ), (1, ))
    assert_size_stride(primals_93, (128, ), (1, ))
    assert_size_stride(primals_94, (128, ), (1, ))
    assert_size_stride(primals_95, (128, ), (1, ))
    assert_size_stride(primals_97, (512, ), (1, ))
    assert_size_stride(primals_98, (512, ), (1, ))
    assert_size_stride(primals_99, (128, ), (1, ))
    assert_size_stride(primals_100, (128, ), (1, ))
    assert_size_stride(primals_101, (128, ), (1, ))
    assert_size_stride(primals_103, (128, ), (1, ))
    assert_size_stride(primals_104, (128, ), (1, ))
    assert_size_stride(primals_105, (128, ), (1, ))
    assert_size_stride(primals_106, (128, ), (1, ))
    assert_size_stride(primals_107, (128, ), (1, ))
    assert_size_stride(primals_108, (128, ), (1, ))
    assert_size_stride(primals_109, (128, ), (1, ))
    assert_size_stride(primals_110, (128, ), (1, ))
    assert_size_stride(primals_111, (128, ), (1, ))
    assert_size_stride(primals_113, (512, ), (1, ))
    assert_size_stride(primals_114, (512, ), (1, ))
    assert_size_stride(primals_115, (128, ), (1, ))
    assert_size_stride(primals_116, (128, ), (1, ))
    assert_size_stride(primals_117, (128, ), (1, ))
    assert_size_stride(primals_119, (128, ), (1, ))
    assert_size_stride(primals_120, (128, ), (1, ))
    assert_size_stride(primals_121, (128, ), (1, ))
    assert_size_stride(primals_122, (128, ), (1, ))
    assert_size_stride(primals_123, (128, ), (1, ))
    assert_size_stride(primals_124, (128, ), (1, ))
    assert_size_stride(primals_125, (128, ), (1, ))
    assert_size_stride(primals_126, (128, ), (1, ))
    assert_size_stride(primals_127, (128, ), (1, ))
    assert_size_stride(primals_129, (512, ), (1, ))
    assert_size_stride(primals_130, (512, ), (1, ))
    assert_size_stride(primals_131, (128, ), (1, ))
    assert_size_stride(primals_132, (128, ), (1, ))
    assert_size_stride(primals_133, (128, ), (1, ))
    assert_size_stride(primals_135, (128, ), (1, ))
    assert_size_stride(primals_136, (128, ), (1, ))
    assert_size_stride(primals_137, (128, ), (1, ))
    assert_size_stride(primals_138, (128, ), (1, ))
    assert_size_stride(primals_139, (128, ), (1, ))
    assert_size_stride(primals_140, (128, ), (1, ))
    assert_size_stride(primals_141, (128, ), (1, ))
    assert_size_stride(primals_142, (128, ), (1, ))
    assert_size_stride(primals_143, (128, ), (1, ))
    assert_size_stride(primals_145, (512, ), (1, ))
    assert_size_stride(primals_146, (512, ), (1, ))
    assert_size_stride(primals_147, (128, ), (1, ))
    assert_size_stride(primals_148, (128, ), (1, ))
    assert_size_stride(primals_149, (128, ), (1, ))
    assert_size_stride(primals_151, (128, ), (1, ))
    assert_size_stride(primals_152, (128, ), (1, ))
    assert_size_stride(primals_153, (128, ), (1, ))
    assert_size_stride(primals_154, (128, ), (1, ))
    assert_size_stride(primals_155, (128, ), (1, ))
    assert_size_stride(primals_156, (128, ), (1, ))
    assert_size_stride(primals_157, (128, ), (1, ))
    assert_size_stride(primals_158, (128, ), (1, ))
    assert_size_stride(primals_159, (128, ), (1, ))
    assert_size_stride(primals_161, (512, ), (1, ))
    assert_size_stride(primals_162, (512, ), (1, ))
    assert_size_stride(primals_163, (128, ), (1, ))
    assert_size_stride(primals_164, (128, ), (1, ))
    assert_size_stride(primals_165, (128, ), (1, ))
    assert_size_stride(primals_167, (128, ), (1, ))
    assert_size_stride(primals_168, (128, ), (1, ))
    assert_size_stride(primals_169, (128, ), (1, ))
    assert_size_stride(primals_170, (128, ), (1, ))
    assert_size_stride(primals_171, (128, ), (1, ))
    assert_size_stride(primals_172, (128, ), (1, ))
    assert_size_stride(primals_173, (128, ), (1, ))
    assert_size_stride(primals_174, (128, ), (1, ))
    assert_size_stride(primals_175, (128, ), (1, ))
    assert_size_stride(primals_177, (512, ), (1, ))
    assert_size_stride(primals_178, (512, ), (1, ))
    assert_size_stride(primals_179, (128, ), (1, ))
    assert_size_stride(primals_180, (128, ), (1, ))
    assert_size_stride(primals_181, (128, ), (1, ))
    assert_size_stride(primals_183, (128, ), (1, ))
    assert_size_stride(primals_184, (128, ), (1, ))
    assert_size_stride(primals_185, (128, ), (1, ))
    assert_size_stride(primals_186, (128, ), (1, ))
    assert_size_stride(primals_187, (128, ), (1, ))
    assert_size_stride(primals_188, (128, ), (1, ))
    assert_size_stride(primals_189, (128, ), (1, ))
    assert_size_stride(primals_190, (128, ), (1, ))
    assert_size_stride(primals_191, (128, ), (1, ))
    assert_size_stride(primals_193, (512, ), (1, ))
    assert_size_stride(primals_194, (512, ), (1, ))
    assert_size_stride(primals_195, (128, ), (1, ))
    assert_size_stride(primals_196, (128, ), (1, ))
    assert_size_stride(primals_197, (128, ), (1, ))
    assert_size_stride(primals_199, (128, ), (1, ))
    assert_size_stride(primals_200, (128, ), (1, ))
    assert_size_stride(primals_201, (128, ), (1, ))
    assert_size_stride(primals_202, (128, ), (1, ))
    assert_size_stride(primals_203, (128, ), (1, ))
    assert_size_stride(primals_204, (128, ), (1, ))
    assert_size_stride(primals_205, (128, ), (1, ))
    assert_size_stride(primals_206, (128, ), (1, ))
    assert_size_stride(primals_207, (128, ), (1, ))
    assert_size_stride(primals_209, (512, ), (1, ))
    assert_size_stride(primals_210, (512, ), (1, ))
    assert_size_stride(primals_211, (128, ), (1, ))
    assert_size_stride(primals_212, (128, ), (1, ))
    assert_size_stride(primals_213, (128, ), (1, ))
    assert_size_stride(primals_215, (128, ), (1, ))
    assert_size_stride(primals_216, (128, ), (1, ))
    assert_size_stride(primals_217, (128, ), (1, ))
    assert_size_stride(primals_218, (128, ), (1, ))
    assert_size_stride(primals_219, (128, ), (1, ))
    assert_size_stride(primals_220, (128, ), (1, ))
    assert_size_stride(primals_221, (128, ), (1, ))
    assert_size_stride(primals_222, (128, ), (1, ))
    assert_size_stride(primals_223, (128, ), (1, ))
    assert_size_stride(primals_225, (512, ), (1, ))
    assert_size_stride(primals_226, (512, ), (1, ))
    assert_size_stride(primals_227, (128, ), (1, ))
    assert_size_stride(primals_228, (128, ), (1, ))
    assert_size_stride(primals_229, (128, ), (1, ))
    assert_size_stride(primals_231, (128, ), (1, ))
    assert_size_stride(primals_232, (128, ), (1, ))
    assert_size_stride(primals_233, (128, ), (1, ))
    assert_size_stride(primals_234, (128, ), (1, ))
    assert_size_stride(primals_235, (128, ), (1, ))
    assert_size_stride(primals_236, (128, ), (1, ))
    assert_size_stride(primals_237, (128, ), (1, ))
    assert_size_stride(primals_238, (128, ), (1, ))
    assert_size_stride(primals_239, (128, ), (1, ))
    assert_size_stride(primals_241, (512, ), (1, ))
    assert_size_stride(primals_242, (512, ), (1, ))
    assert_size_stride(primals_243, (128, ), (1, ))
    assert_size_stride(primals_244, (128, ), (1, ))
    assert_size_stride(primals_245, (128, ), (1, ))
    assert_size_stride(primals_247, (128, ), (1, ))
    assert_size_stride(primals_248, (128, ), (1, ))
    assert_size_stride(primals_249, (128, ), (1, ))
    assert_size_stride(primals_250, (128, ), (1, ))
    assert_size_stride(primals_251, (128, ), (1, ))
    assert_size_stride(primals_252, (128, ), (1, ))
    assert_size_stride(primals_253, (128, ), (1, ))
    assert_size_stride(primals_254, (128, ), (1, ))
    assert_size_stride(primals_255, (128, ), (1, ))
    assert_size_stride(primals_257, (512, ), (1, ))
    assert_size_stride(primals_258, (512, ), (1, ))
    assert_size_stride(primals_259, (128, ), (1, ))
    assert_size_stride(primals_260, (128, ), (1, ))
    assert_size_stride(primals_261, (128, ), (1, ))
    assert_size_stride(primals_263, (128, ), (1, ))
    assert_size_stride(primals_264, (128, ), (1, ))
    assert_size_stride(primals_265, (128, ), (1, ))
    assert_size_stride(primals_266, (128, ), (1, ))
    assert_size_stride(primals_267, (128, ), (1, ))
    assert_size_stride(primals_268, (128, ), (1, ))
    assert_size_stride(primals_269, (128, ), (1, ))
    assert_size_stride(primals_270, (128, ), (1, ))
    assert_size_stride(primals_271, (128, ), (1, ))
    assert_size_stride(primals_273, (512, ), (1, ))
    assert_size_stride(primals_274, (512, ), (1, ))
    assert_size_stride(primals_275, (128, ), (1, ))
    assert_size_stride(primals_276, (128, ), (1, ))
    assert_size_stride(primals_277, (128, ), (1, ))
    assert_size_stride(primals_279, (128, ), (1, ))
    assert_size_stride(primals_280, (128, ), (1, ))
    assert_size_stride(primals_281, (128, ), (1, ))
    assert_size_stride(primals_282, (128, ), (1, ))
    assert_size_stride(primals_283, (128, ), (1, ))
    assert_size_stride(primals_284, (128, ), (1, ))
    assert_size_stride(primals_285, (128, ), (1, ))
    assert_size_stride(primals_286, (128, ), (1, ))
    assert_size_stride(primals_287, (128, ), (1, ))
    assert_size_stride(primals_289, (512, ), (1, ))
    assert_size_stride(primals_290, (512, ), (1, ))
    assert_size_stride(primals_291, (128, ), (1, ))
    assert_size_stride(primals_292, (128, ), (1, ))
    assert_size_stride(primals_293, (128, ), (1, ))
    assert_size_stride(primals_295, (128, ), (1, ))
    assert_size_stride(primals_296, (128, ), (1, ))
    assert_size_stride(primals_297, (128, ), (1, ))
    assert_size_stride(primals_298, (128, ), (1, ))
    assert_size_stride(primals_299, (128, ), (1, ))
    assert_size_stride(primals_300, (128, ), (1, ))
    assert_size_stride(primals_301, (128, ), (1, ))
    assert_size_stride(primals_302, (128, ), (1, ))
    assert_size_stride(primals_303, (128, ), (1, ))
    assert_size_stride(primals_305, (512, ), (1, ))
    assert_size_stride(primals_306, (512, ), (1, ))
    assert_size_stride(primals_307, (128, ), (1, ))
    assert_size_stride(primals_308, (128, ), (1, ))
    assert_size_stride(primals_309, (128, ), (1, ))
    assert_size_stride(primals_311, (128, ), (1, ))
    assert_size_stride(primals_312, (128, ), (1, ))
    assert_size_stride(primals_313, (128, ), (1, ))
    assert_size_stride(primals_314, (128, ), (1, ))
    assert_size_stride(primals_315, (128, ), (1, ))
    assert_size_stride(primals_316, (128, ), (1, ))
    assert_size_stride(primals_317, (128, ), (1, ))
    assert_size_stride(primals_318, (128, ), (1, ))
    assert_size_stride(primals_319, (128, ), (1, ))
    assert_size_stride(primals_321, (512, ), (1, ))
    assert_size_stride(primals_322, (512, ), (1, ))
    assert_size_stride(primals_323, (128, ), (1, ))
    assert_size_stride(primals_324, (128, ), (1, ))
    assert_size_stride(primals_325, (128, ), (1, ))
    assert_size_stride(primals_327, (128, ), (1, ))
    assert_size_stride(primals_328, (128, ), (1, ))
    assert_size_stride(primals_329, (128, ), (1, ))
    assert_size_stride(primals_330, (128, ), (1, ))
    assert_size_stride(primals_331, (128, ), (1, ))
    assert_size_stride(primals_332, (128, ), (1, ))
    assert_size_stride(primals_333, (128, ), (1, ))
    assert_size_stride(primals_334, (128, ), (1, ))
    assert_size_stride(primals_335, (128, ), (1, ))
    assert_size_stride(primals_337, (512, ), (1, ))
    assert_size_stride(primals_338, (512, ), (1, ))
    assert_size_stride(primals_339, (128, ), (1, ))
    assert_size_stride(primals_340, (128, ), (1, ))
    assert_size_stride(primals_341, (128, ), (1, ))
    assert_size_stride(primals_343, (128, ), (1, ))
    assert_size_stride(primals_344, (128, ), (1, ))
    assert_size_stride(primals_345, (128, ), (1, ))
    assert_size_stride(primals_346, (128, ), (1, ))
    assert_size_stride(primals_347, (128, ), (1, ))
    assert_size_stride(primals_348, (128, ), (1, ))
    assert_size_stride(primals_349, (128, ), (1, ))
    assert_size_stride(primals_350, (128, ), (1, ))
    assert_size_stride(primals_351, (128, ), (1, ))
    assert_size_stride(primals_353, (512, ), (1, ))
    assert_size_stride(primals_354, (512, ), (1, ))
    assert_size_stride(primals_355, (128, ), (1, ))
    assert_size_stride(primals_356, (128, ), (1, ))
    assert_size_stride(primals_357, (128, ), (1, ))
    assert_size_stride(primals_359, (128, ), (1, ))
    assert_size_stride(primals_360, (128, ), (1, ))
    assert_size_stride(primals_361, (128, ), (1, ))
    assert_size_stride(primals_362, (128, ), (1, ))
    assert_size_stride(primals_363, (128, ), (1, ))
    assert_size_stride(primals_364, (128, ), (1, ))
    assert_size_stride(primals_365, (128, ), (1, ))
    assert_size_stride(primals_366, (128, ), (1, ))
    assert_size_stride(primals_367, (128, ), (1, ))
    assert_size_stride(primals_369, (512, ), (1, ))
    assert_size_stride(primals_370, (512, ), (1, ))
    assert_size_stride(primals_371, (128, ), (1, ))
    assert_size_stride(primals_372, (128, ), (1, ))
    assert_size_stride(primals_373, (128, ), (1, ))
    assert_size_stride(primals_375, (128, ), (1, ))
    assert_size_stride(primals_376, (128, ), (1, ))
    assert_size_stride(primals_377, (128, ), (1, ))
    assert_size_stride(primals_378, (128, ), (1, ))
    assert_size_stride(primals_379, (128, ), (1, ))
    assert_size_stride(primals_380, (128, ), (1, ))
    assert_size_stride(primals_381, (128, ), (1, ))
    assert_size_stride(primals_382, (128, ), (1, ))
    assert_size_stride(primals_383, (128, ), (1, ))
    assert_size_stride(primals_385, (512, ), (1, ))
    assert_size_stride(primals_1117, (512, ), (1, ))
    assert_size_stride(primals_1120, (1, 128), (128, 1))
    assert_size_stride(primals_1121, (1, 128), (128, 1))
    assert_size_stride(full_default, (1, 128), (128, 1))
    assert_size_stride(slice_4, (1, 128), (512, 1))
    assert_size_stride(view, (128, 384), (384, 1))
    assert_size_stride(add_1, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(view_2, (128, 512), (512, 1))
    assert_size_stride(addmm_1, (128, 128), (128, 1))
    assert_size_stride(addmm_2, (128, 128), (128, 1))
    assert_size_stride(view_6, (128, 128), (128, 1))
    assert_size_stride(getitem_97, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_139, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_140, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_47, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_141, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_142, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_22, (128, 128), (128, 1))
    assert_size_stride(addmm_6, (128, 128), (128, 1))
    assert_size_stride(view_24, (128, 128), (128, 1))
    assert_size_stride(view_26, (128, 512), (512, 1))
    assert_size_stride(addmm_8, (128, 128), (128, 1))
    assert_size_stride(view_28, (128, 128), (128, 1))
    assert_size_stride(view_30, (128, 512), (512, 1))
    assert_size_stride(addmm_10, (128, 128), (128, 1))
    assert_size_stride(view_32, (128, 128), (128, 1))
    assert_size_stride(view_34, (128, 512), (512, 1))
    assert_size_stride(addmm_12, (128, 128), (128, 1))
    assert_size_stride(view_36, (128, 128), (128, 1))
    assert_size_stride(view_38, (128, 512), (512, 1))
    assert_size_stride(addmm_14, (128, 128), (128, 1))
    assert_size_stride(view_40, (128, 128), (128, 1))
    assert_size_stride(add_16, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(view_42, (128, 512), (512, 1))
    assert_size_stride(addmm_16, (128, 128), (128, 1))
    assert_size_stride(addmm_17, (128, 128), (128, 1))
    assert_size_stride(view_46, (128, 128), (128, 1))
    assert_size_stride(getitem_95, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_133, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_134, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_45, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_135, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_136, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_62, (128, 128), (128, 1))
    assert_size_stride(addmm_21, (128, 128), (128, 1))
    assert_size_stride(view_64, (128, 128), (128, 1))
    assert_size_stride(view_66, (128, 512), (512, 1))
    assert_size_stride(addmm_23, (128, 128), (128, 1))
    assert_size_stride(view_68, (128, 128), (128, 1))
    assert_size_stride(view_70, (128, 512), (512, 1))
    assert_size_stride(addmm_25, (128, 128), (128, 1))
    assert_size_stride(view_72, (128, 128), (128, 1))
    assert_size_stride(view_74, (128, 512), (512, 1))
    assert_size_stride(addmm_27, (128, 128), (128, 1))
    assert_size_stride(view_76, (128, 128), (128, 1))
    assert_size_stride(view_78, (128, 512), (512, 1))
    assert_size_stride(addmm_29, (128, 128), (128, 1))
    assert_size_stride(view_80, (128, 128), (128, 1))
    assert_size_stride(addmm_30, (128, 512), (512, 1))
    assert_size_stride(view_82, (128, 512), (512, 1))
    assert_size_stride(addmm_31, (128, 128), (128, 1))
    assert_size_stride(addmm_32, (128, 128), (128, 1))
    assert_size_stride(view_86, (128, 128), (128, 1))
    assert_size_stride(getitem_93, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_127, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_128, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_43, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_129, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_130, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_102, (128, 128), (128, 1))
    assert_size_stride(addmm_36, (128, 128), (128, 1))
    assert_size_stride(view_104, (128, 128), (128, 1))
    assert_size_stride(view_106, (128, 512), (512, 1))
    assert_size_stride(addmm_38, (128, 128), (128, 1))
    assert_size_stride(view_108, (128, 128), (128, 1))
    assert_size_stride(view_110, (128, 512), (512, 1))
    assert_size_stride(addmm_40, (128, 128), (128, 1))
    assert_size_stride(view_112, (128, 128), (128, 1))
    assert_size_stride(view_114, (128, 512), (512, 1))
    assert_size_stride(addmm_42, (128, 128), (128, 1))
    assert_size_stride(view_116, (128, 128), (128, 1))
    assert_size_stride(view_118, (128, 512), (512, 1))
    assert_size_stride(addmm_44, (128, 128), (128, 1))
    assert_size_stride(view_120, (128, 128), (128, 1))
    assert_size_stride(addmm_45, (128, 512), (512, 1))
    assert_size_stride(view_122, (128, 512), (512, 1))
    assert_size_stride(addmm_46, (128, 128), (128, 1))
    assert_size_stride(addmm_47, (128, 128), (128, 1))
    assert_size_stride(view_126, (128, 128), (128, 1))
    assert_size_stride(getitem_91, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_121, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_122, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_41, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_123, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_124, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_142, (128, 128), (128, 1))
    assert_size_stride(addmm_51, (128, 128), (128, 1))
    assert_size_stride(view_144, (128, 128), (128, 1))
    assert_size_stride(view_146, (128, 512), (512, 1))
    assert_size_stride(addmm_53, (128, 128), (128, 1))
    assert_size_stride(view_148, (128, 128), (128, 1))
    assert_size_stride(view_150, (128, 512), (512, 1))
    assert_size_stride(addmm_55, (128, 128), (128, 1))
    assert_size_stride(view_152, (128, 128), (128, 1))
    assert_size_stride(view_154, (128, 512), (512, 1))
    assert_size_stride(addmm_57, (128, 128), (128, 1))
    assert_size_stride(view_156, (128, 128), (128, 1))
    assert_size_stride(view_158, (128, 512), (512, 1))
    assert_size_stride(addmm_59, (128, 128), (128, 1))
    assert_size_stride(view_160, (128, 128), (128, 1))
    assert_size_stride(addmm_60, (128, 512), (512, 1))
    assert_size_stride(view_162, (128, 512), (512, 1))
    assert_size_stride(addmm_61, (128, 128), (128, 1))
    assert_size_stride(addmm_62, (128, 128), (128, 1))
    assert_size_stride(view_166, (128, 128), (128, 1))
    assert_size_stride(getitem_89, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_115, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_116, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_39, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_117, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_118, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_182, (128, 128), (128, 1))
    assert_size_stride(addmm_66, (128, 128), (128, 1))
    assert_size_stride(view_184, (128, 128), (128, 1))
    assert_size_stride(view_186, (128, 512), (512, 1))
    assert_size_stride(addmm_68, (128, 128), (128, 1))
    assert_size_stride(view_188, (128, 128), (128, 1))
    assert_size_stride(view_190, (128, 512), (512, 1))
    assert_size_stride(addmm_70, (128, 128), (128, 1))
    assert_size_stride(view_192, (128, 128), (128, 1))
    assert_size_stride(view_194, (128, 512), (512, 1))
    assert_size_stride(addmm_72, (128, 128), (128, 1))
    assert_size_stride(view_196, (128, 128), (128, 1))
    assert_size_stride(view_198, (128, 512), (512, 1))
    assert_size_stride(addmm_74, (128, 128), (128, 1))
    assert_size_stride(view_200, (128, 128), (128, 1))
    assert_size_stride(addmm_75, (128, 512), (512, 1))
    assert_size_stride(view_202, (128, 512), (512, 1))
    assert_size_stride(addmm_76, (128, 128), (128, 1))
    assert_size_stride(addmm_77, (128, 128), (128, 1))
    assert_size_stride(view_206, (128, 128), (128, 1))
    assert_size_stride(getitem_87, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_109, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_110, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_37, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_111, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_112, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_222, (128, 128), (128, 1))
    assert_size_stride(addmm_81, (128, 128), (128, 1))
    assert_size_stride(view_224, (128, 128), (128, 1))
    assert_size_stride(view_226, (128, 512), (512, 1))
    assert_size_stride(addmm_83, (128, 128), (128, 1))
    assert_size_stride(view_228, (128, 128), (128, 1))
    assert_size_stride(view_230, (128, 512), (512, 1))
    assert_size_stride(addmm_85, (128, 128), (128, 1))
    assert_size_stride(view_232, (128, 128), (128, 1))
    assert_size_stride(view_234, (128, 512), (512, 1))
    assert_size_stride(addmm_87, (128, 128), (128, 1))
    assert_size_stride(view_236, (128, 128), (128, 1))
    assert_size_stride(view_238, (128, 512), (512, 1))
    assert_size_stride(addmm_89, (128, 128), (128, 1))
    assert_size_stride(view_240, (128, 128), (128, 1))
    assert_size_stride(addmm_90, (128, 512), (512, 1))
    assert_size_stride(view_242, (128, 512), (512, 1))
    assert_size_stride(addmm_91, (128, 128), (128, 1))
    assert_size_stride(addmm_92, (128, 128), (128, 1))
    assert_size_stride(view_246, (128, 128), (128, 1))
    assert_size_stride(getitem_85, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_103, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_104, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_35, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_105, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_106, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_262, (128, 128), (128, 1))
    assert_size_stride(addmm_96, (128, 128), (128, 1))
    assert_size_stride(view_264, (128, 128), (128, 1))
    assert_size_stride(view_266, (128, 512), (512, 1))
    assert_size_stride(addmm_98, (128, 128), (128, 1))
    assert_size_stride(view_268, (128, 128), (128, 1))
    assert_size_stride(view_270, (128, 512), (512, 1))
    assert_size_stride(addmm_100, (128, 128), (128, 1))
    assert_size_stride(view_272, (128, 128), (128, 1))
    assert_size_stride(view_274, (128, 512), (512, 1))
    assert_size_stride(addmm_102, (128, 128), (128, 1))
    assert_size_stride(view_276, (128, 128), (128, 1))
    assert_size_stride(view_278, (128, 512), (512, 1))
    assert_size_stride(addmm_104, (128, 128), (128, 1))
    assert_size_stride(view_280, (128, 128), (128, 1))
    assert_size_stride(addmm_105, (128, 512), (512, 1))
    assert_size_stride(view_282, (128, 512), (512, 1))
    assert_size_stride(addmm_106, (128, 128), (128, 1))
    assert_size_stride(addmm_107, (128, 128), (128, 1))
    assert_size_stride(view_286, (128, 128), (128, 1))
    assert_size_stride(getitem_83, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_97, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_98, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_33, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_99, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_100, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_302, (128, 128), (128, 1))
    assert_size_stride(addmm_111, (128, 128), (128, 1))
    assert_size_stride(view_304, (128, 128), (128, 1))
    assert_size_stride(view_306, (128, 512), (512, 1))
    assert_size_stride(addmm_113, (128, 128), (128, 1))
    assert_size_stride(view_308, (128, 128), (128, 1))
    assert_size_stride(view_310, (128, 512), (512, 1))
    assert_size_stride(addmm_115, (128, 128), (128, 1))
    assert_size_stride(view_312, (128, 128), (128, 1))
    assert_size_stride(view_314, (128, 512), (512, 1))
    assert_size_stride(addmm_117, (128, 128), (128, 1))
    assert_size_stride(view_316, (128, 128), (128, 1))
    assert_size_stride(view_318, (128, 512), (512, 1))
    assert_size_stride(addmm_119, (128, 128), (128, 1))
    assert_size_stride(view_320, (128, 128), (128, 1))
    assert_size_stride(addmm_120, (128, 512), (512, 1))
    assert_size_stride(view_322, (128, 512), (512, 1))
    assert_size_stride(addmm_121, (128, 128), (128, 1))
    assert_size_stride(addmm_122, (128, 128), (128, 1))
    assert_size_stride(view_326, (128, 128), (128, 1))
    assert_size_stride(getitem_81, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_91, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_92, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_31, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_93, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_94, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_342, (128, 128), (128, 1))
    assert_size_stride(addmm_126, (128, 128), (128, 1))
    assert_size_stride(view_344, (128, 128), (128, 1))
    assert_size_stride(view_346, (128, 512), (512, 1))
    assert_size_stride(addmm_128, (128, 128), (128, 1))
    assert_size_stride(view_348, (128, 128), (128, 1))
    assert_size_stride(view_350, (128, 512), (512, 1))
    assert_size_stride(addmm_130, (128, 128), (128, 1))
    assert_size_stride(view_352, (128, 128), (128, 1))
    assert_size_stride(view_354, (128, 512), (512, 1))
    assert_size_stride(addmm_132, (128, 128), (128, 1))
    assert_size_stride(view_356, (128, 128), (128, 1))
    assert_size_stride(view_358, (128, 512), (512, 1))
    assert_size_stride(addmm_134, (128, 128), (128, 1))
    assert_size_stride(view_360, (128, 128), (128, 1))
    assert_size_stride(addmm_135, (128, 512), (512, 1))
    assert_size_stride(view_362, (128, 512), (512, 1))
    assert_size_stride(addmm_136, (128, 128), (128, 1))
    assert_size_stride(addmm_137, (128, 128), (128, 1))
    assert_size_stride(view_366, (128, 128), (128, 1))
    assert_size_stride(getitem_79, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_85, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_86, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_29, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_87, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_88, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_382, (128, 128), (128, 1))
    assert_size_stride(addmm_141, (128, 128), (128, 1))
    assert_size_stride(view_384, (128, 128), (128, 1))
    assert_size_stride(view_386, (128, 512), (512, 1))
    assert_size_stride(addmm_143, (128, 128), (128, 1))
    assert_size_stride(view_388, (128, 128), (128, 1))
    assert_size_stride(view_390, (128, 512), (512, 1))
    assert_size_stride(addmm_145, (128, 128), (128, 1))
    assert_size_stride(view_392, (128, 128), (128, 1))
    assert_size_stride(view_394, (128, 512), (512, 1))
    assert_size_stride(addmm_147, (128, 128), (128, 1))
    assert_size_stride(view_396, (128, 128), (128, 1))
    assert_size_stride(view_398, (128, 512), (512, 1))
    assert_size_stride(addmm_149, (128, 128), (128, 1))
    assert_size_stride(view_400, (128, 128), (128, 1))
    assert_size_stride(addmm_150, (128, 512), (512, 1))
    assert_size_stride(view_402, (128, 512), (512, 1))
    assert_size_stride(addmm_151, (128, 128), (128, 1))
    assert_size_stride(addmm_152, (128, 128), (128, 1))
    assert_size_stride(view_406, (128, 128), (128, 1))
    assert_size_stride(getitem_77, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_79, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_80, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_27, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_81, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_82, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_422, (128, 128), (128, 1))
    assert_size_stride(addmm_156, (128, 128), (128, 1))
    assert_size_stride(view_424, (128, 128), (128, 1))
    assert_size_stride(view_426, (128, 512), (512, 1))
    assert_size_stride(addmm_158, (128, 128), (128, 1))
    assert_size_stride(view_428, (128, 128), (128, 1))
    assert_size_stride(view_430, (128, 512), (512, 1))
    assert_size_stride(addmm_160, (128, 128), (128, 1))
    assert_size_stride(view_432, (128, 128), (128, 1))
    assert_size_stride(view_434, (128, 512), (512, 1))
    assert_size_stride(addmm_162, (128, 128), (128, 1))
    assert_size_stride(view_436, (128, 128), (128, 1))
    assert_size_stride(view_438, (128, 512), (512, 1))
    assert_size_stride(addmm_164, (128, 128), (128, 1))
    assert_size_stride(view_440, (128, 128), (128, 1))
    assert_size_stride(addmm_165, (128, 512), (512, 1))
    assert_size_stride(view_442, (128, 512), (512, 1))
    assert_size_stride(addmm_166, (128, 128), (128, 1))
    assert_size_stride(addmm_167, (128, 128), (128, 1))
    assert_size_stride(view_446, (128, 128), (128, 1))
    assert_size_stride(getitem_75, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_73, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_74, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_25, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_75, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_76, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_462, (128, 128), (128, 1))
    assert_size_stride(addmm_171, (128, 128), (128, 1))
    assert_size_stride(view_464, (128, 128), (128, 1))
    assert_size_stride(view_466, (128, 512), (512, 1))
    assert_size_stride(addmm_173, (128, 128), (128, 1))
    assert_size_stride(view_468, (128, 128), (128, 1))
    assert_size_stride(view_470, (128, 512), (512, 1))
    assert_size_stride(addmm_175, (128, 128), (128, 1))
    assert_size_stride(view_472, (128, 128), (128, 1))
    assert_size_stride(view_474, (128, 512), (512, 1))
    assert_size_stride(addmm_177, (128, 128), (128, 1))
    assert_size_stride(view_476, (128, 128), (128, 1))
    assert_size_stride(view_478, (128, 512), (512, 1))
    assert_size_stride(addmm_179, (128, 128), (128, 1))
    assert_size_stride(view_480, (128, 128), (128, 1))
    assert_size_stride(addmm_180, (128, 512), (512, 1))
    assert_size_stride(view_482, (128, 512), (512, 1))
    assert_size_stride(addmm_181, (128, 128), (128, 1))
    assert_size_stride(addmm_182, (128, 128), (128, 1))
    assert_size_stride(view_486, (128, 128), (128, 1))
    assert_size_stride(getitem_73, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_67, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_68, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_23, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_69, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_70, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_502, (128, 128), (128, 1))
    assert_size_stride(addmm_186, (128, 128), (128, 1))
    assert_size_stride(view_504, (128, 128), (128, 1))
    assert_size_stride(view_506, (128, 512), (512, 1))
    assert_size_stride(addmm_188, (128, 128), (128, 1))
    assert_size_stride(view_508, (128, 128), (128, 1))
    assert_size_stride(view_510, (128, 512), (512, 1))
    assert_size_stride(addmm_190, (128, 128), (128, 1))
    assert_size_stride(view_512, (128, 128), (128, 1))
    assert_size_stride(view_514, (128, 512), (512, 1))
    assert_size_stride(addmm_192, (128, 128), (128, 1))
    assert_size_stride(view_516, (128, 128), (128, 1))
    assert_size_stride(view_518, (128, 512), (512, 1))
    assert_size_stride(addmm_194, (128, 128), (128, 1))
    assert_size_stride(view_520, (128, 128), (128, 1))
    assert_size_stride(addmm_195, (128, 512), (512, 1))
    assert_size_stride(view_522, (128, 512), (512, 1))
    assert_size_stride(addmm_196, (128, 128), (128, 1))
    assert_size_stride(addmm_197, (128, 128), (128, 1))
    assert_size_stride(view_526, (128, 128), (128, 1))
    assert_size_stride(getitem_71, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_61, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_62, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_21, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_63, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_64, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_542, (128, 128), (128, 1))
    assert_size_stride(addmm_201, (128, 128), (128, 1))
    assert_size_stride(view_544, (128, 128), (128, 1))
    assert_size_stride(view_546, (128, 512), (512, 1))
    assert_size_stride(addmm_203, (128, 128), (128, 1))
    assert_size_stride(view_548, (128, 128), (128, 1))
    assert_size_stride(view_550, (128, 512), (512, 1))
    assert_size_stride(addmm_205, (128, 128), (128, 1))
    assert_size_stride(view_552, (128, 128), (128, 1))
    assert_size_stride(view_554, (128, 512), (512, 1))
    assert_size_stride(addmm_207, (128, 128), (128, 1))
    assert_size_stride(view_556, (128, 128), (128, 1))
    assert_size_stride(view_558, (128, 512), (512, 1))
    assert_size_stride(addmm_209, (128, 128), (128, 1))
    assert_size_stride(view_560, (128, 128), (128, 1))
    assert_size_stride(addmm_210, (128, 512), (512, 1))
    assert_size_stride(view_562, (128, 512), (512, 1))
    assert_size_stride(addmm_211, (128, 128), (128, 1))
    assert_size_stride(addmm_212, (128, 128), (128, 1))
    assert_size_stride(view_566, (128, 128), (128, 1))
    assert_size_stride(getitem_69, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_55, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_56, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_19, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_57, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_58, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_582, (128, 128), (128, 1))
    assert_size_stride(addmm_216, (128, 128), (128, 1))
    assert_size_stride(view_584, (128, 128), (128, 1))
    assert_size_stride(view_586, (128, 512), (512, 1))
    assert_size_stride(addmm_218, (128, 128), (128, 1))
    assert_size_stride(view_588, (128, 128), (128, 1))
    assert_size_stride(view_590, (128, 512), (512, 1))
    assert_size_stride(addmm_220, (128, 128), (128, 1))
    assert_size_stride(view_592, (128, 128), (128, 1))
    assert_size_stride(view_594, (128, 512), (512, 1))
    assert_size_stride(addmm_222, (128, 128), (128, 1))
    assert_size_stride(view_596, (128, 128), (128, 1))
    assert_size_stride(view_598, (128, 512), (512, 1))
    assert_size_stride(addmm_224, (128, 128), (128, 1))
    assert_size_stride(view_600, (128, 128), (128, 1))
    assert_size_stride(addmm_225, (128, 512), (512, 1))
    assert_size_stride(view_602, (128, 512), (512, 1))
    assert_size_stride(addmm_226, (128, 128), (128, 1))
    assert_size_stride(addmm_227, (128, 128), (128, 1))
    assert_size_stride(view_606, (128, 128), (128, 1))
    assert_size_stride(getitem_67, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_49, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_50, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_17, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_51, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_52, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_622, (128, 128), (128, 1))
    assert_size_stride(addmm_231, (128, 128), (128, 1))
    assert_size_stride(view_624, (128, 128), (128, 1))
    assert_size_stride(view_626, (128, 512), (512, 1))
    assert_size_stride(addmm_233, (128, 128), (128, 1))
    assert_size_stride(view_628, (128, 128), (128, 1))
    assert_size_stride(view_630, (128, 512), (512, 1))
    assert_size_stride(addmm_235, (128, 128), (128, 1))
    assert_size_stride(view_632, (128, 128), (128, 1))
    assert_size_stride(view_634, (128, 512), (512, 1))
    assert_size_stride(addmm_237, (128, 128), (128, 1))
    assert_size_stride(view_636, (128, 128), (128, 1))
    assert_size_stride(view_638, (128, 512), (512, 1))
    assert_size_stride(addmm_239, (128, 128), (128, 1))
    assert_size_stride(view_640, (128, 128), (128, 1))
    assert_size_stride(addmm_240, (128, 512), (512, 1))
    assert_size_stride(view_642, (128, 512), (512, 1))
    assert_size_stride(addmm_241, (128, 128), (128, 1))
    assert_size_stride(addmm_242, (128, 128), (128, 1))
    assert_size_stride(view_646, (128, 128), (128, 1))
    assert_size_stride(getitem_65, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_43, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_44, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_15, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_45, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_46, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_662, (128, 128), (128, 1))
    assert_size_stride(addmm_246, (128, 128), (128, 1))
    assert_size_stride(view_664, (128, 128), (128, 1))
    assert_size_stride(view_666, (128, 512), (512, 1))
    assert_size_stride(addmm_248, (128, 128), (128, 1))
    assert_size_stride(view_668, (128, 128), (128, 1))
    assert_size_stride(view_670, (128, 512), (512, 1))
    assert_size_stride(addmm_250, (128, 128), (128, 1))
    assert_size_stride(view_672, (128, 128), (128, 1))
    assert_size_stride(view_674, (128, 512), (512, 1))
    assert_size_stride(addmm_252, (128, 128), (128, 1))
    assert_size_stride(view_676, (128, 128), (128, 1))
    assert_size_stride(view_678, (128, 512), (512, 1))
    assert_size_stride(addmm_254, (128, 128), (128, 1))
    assert_size_stride(view_680, (128, 128), (128, 1))
    assert_size_stride(addmm_255, (128, 512), (512, 1))
    assert_size_stride(view_682, (128, 512), (512, 1))
    assert_size_stride(addmm_256, (128, 128), (128, 1))
    assert_size_stride(addmm_257, (128, 128), (128, 1))
    assert_size_stride(view_686, (128, 128), (128, 1))
    assert_size_stride(getitem_63, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_37, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_38, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_13, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_39, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_40, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_702, (128, 128), (128, 1))
    assert_size_stride(addmm_261, (128, 128), (128, 1))
    assert_size_stride(view_704, (128, 128), (128, 1))
    assert_size_stride(view_706, (128, 512), (512, 1))
    assert_size_stride(addmm_263, (128, 128), (128, 1))
    assert_size_stride(view_708, (128, 128), (128, 1))
    assert_size_stride(view_710, (128, 512), (512, 1))
    assert_size_stride(addmm_265, (128, 128), (128, 1))
    assert_size_stride(view_712, (128, 128), (128, 1))
    assert_size_stride(view_714, (128, 512), (512, 1))
    assert_size_stride(addmm_267, (128, 128), (128, 1))
    assert_size_stride(view_716, (128, 128), (128, 1))
    assert_size_stride(view_718, (128, 512), (512, 1))
    assert_size_stride(addmm_269, (128, 128), (128, 1))
    assert_size_stride(view_720, (128, 128), (128, 1))
    assert_size_stride(addmm_270, (128, 512), (512, 1))
    assert_size_stride(view_722, (128, 512), (512, 1))
    assert_size_stride(addmm_271, (128, 128), (128, 1))
    assert_size_stride(addmm_272, (128, 128), (128, 1))
    assert_size_stride(view_726, (128, 128), (128, 1))
    assert_size_stride(getitem_61, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_31, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_32, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_11, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_33, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_34, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_742, (128, 128), (128, 1))
    assert_size_stride(addmm_276, (128, 128), (128, 1))
    assert_size_stride(view_744, (128, 128), (128, 1))
    assert_size_stride(view_746, (128, 512), (512, 1))
    assert_size_stride(addmm_278, (128, 128), (128, 1))
    assert_size_stride(view_748, (128, 128), (128, 1))
    assert_size_stride(view_750, (128, 512), (512, 1))
    assert_size_stride(addmm_280, (128, 128), (128, 1))
    assert_size_stride(view_752, (128, 128), (128, 1))
    assert_size_stride(view_754, (128, 512), (512, 1))
    assert_size_stride(addmm_282, (128, 128), (128, 1))
    assert_size_stride(view_756, (128, 128), (128, 1))
    assert_size_stride(view_758, (128, 512), (512, 1))
    assert_size_stride(addmm_284, (128, 128), (128, 1))
    assert_size_stride(view_760, (128, 128), (128, 1))
    assert_size_stride(addmm_285, (128, 512), (512, 1))
    assert_size_stride(view_762, (128, 512), (512, 1))
    assert_size_stride(addmm_286, (128, 128), (128, 1))
    assert_size_stride(addmm_287, (128, 128), (128, 1))
    assert_size_stride(view_766, (128, 128), (128, 1))
    assert_size_stride(getitem_59, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_25, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_26, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_9, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_27, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_28, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_782, (128, 128), (128, 1))
    assert_size_stride(addmm_291, (128, 128), (128, 1))
    assert_size_stride(view_784, (128, 128), (128, 1))
    assert_size_stride(view_786, (128, 512), (512, 1))
    assert_size_stride(addmm_293, (128, 128), (128, 1))
    assert_size_stride(view_788, (128, 128), (128, 1))
    assert_size_stride(view_790, (128, 512), (512, 1))
    assert_size_stride(addmm_295, (128, 128), (128, 1))
    assert_size_stride(view_792, (128, 128), (128, 1))
    assert_size_stride(view_794, (128, 512), (512, 1))
    assert_size_stride(addmm_297, (128, 128), (128, 1))
    assert_size_stride(view_796, (128, 128), (128, 1))
    assert_size_stride(view_798, (128, 512), (512, 1))
    assert_size_stride(addmm_299, (128, 128), (128, 1))
    assert_size_stride(view_800, (128, 128), (128, 1))
    assert_size_stride(addmm_300, (128, 512), (512, 1))
    assert_size_stride(view_802, (128, 512), (512, 1))
    assert_size_stride(addmm_301, (128, 128), (128, 1))
    assert_size_stride(addmm_302, (128, 128), (128, 1))
    assert_size_stride(view_806, (128, 128), (128, 1))
    assert_size_stride(getitem_57, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_19, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_20, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_7, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_21, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_22, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_822, (128, 128), (128, 1))
    assert_size_stride(addmm_306, (128, 128), (128, 1))
    assert_size_stride(view_824, (128, 128), (128, 1))
    assert_size_stride(view_826, (128, 512), (512, 1))
    assert_size_stride(addmm_308, (128, 128), (128, 1))
    assert_size_stride(view_828, (128, 128), (128, 1))
    assert_size_stride(view_830, (128, 512), (512, 1))
    assert_size_stride(addmm_310, (128, 128), (128, 1))
    assert_size_stride(view_832, (128, 128), (128, 1))
    assert_size_stride(view_834, (128, 512), (512, 1))
    assert_size_stride(addmm_312, (128, 128), (128, 1))
    assert_size_stride(view_836, (128, 128), (128, 1))
    assert_size_stride(view_838, (128, 512), (512, 1))
    assert_size_stride(addmm_314, (128, 128), (128, 1))
    assert_size_stride(view_840, (128, 128), (128, 1))
    assert_size_stride(addmm_315, (128, 512), (512, 1))
    assert_size_stride(view_842, (128, 512), (512, 1))
    assert_size_stride(addmm_316, (128, 128), (128, 1))
    assert_size_stride(addmm_317, (128, 128), (128, 1))
    assert_size_stride(view_846, (128, 128), (128, 1))
    assert_size_stride(getitem_55, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_13, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_14, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_5, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_15, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_16, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_862, (128, 128), (128, 1))
    assert_size_stride(addmm_321, (128, 128), (128, 1))
    assert_size_stride(view_864, (128, 128), (128, 1))
    assert_size_stride(view_866, (128, 512), (512, 1))
    assert_size_stride(addmm_323, (128, 128), (128, 1))
    assert_size_stride(view_868, (128, 128), (128, 1))
    assert_size_stride(view_870, (128, 512), (512, 1))
    assert_size_stride(addmm_325, (128, 128), (128, 1))
    assert_size_stride(view_872, (128, 128), (128, 1))
    assert_size_stride(view_874, (128, 512), (512, 1))
    assert_size_stride(addmm_327, (128, 128), (128, 1))
    assert_size_stride(view_876, (128, 128), (128, 1))
    assert_size_stride(view_878, (128, 512), (512, 1))
    assert_size_stride(addmm_329, (128, 128), (128, 1))
    assert_size_stride(view_880, (128, 128), (128, 1))
    assert_size_stride(addmm_330, (128, 512), (512, 1))
    assert_size_stride(view_882, (128, 512), (512, 1))
    assert_size_stride(addmm_331, (128, 128), (128, 1))
    assert_size_stride(addmm_332, (128, 128), (128, 1))
    assert_size_stride(view_886, (128, 128), (128, 1))
    assert_size_stride(getitem_53, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_7, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_8, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_3, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_9, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_10, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_902, (128, 128), (128, 1))
    assert_size_stride(addmm_336, (128, 128), (128, 1))
    assert_size_stride(view_904, (128, 128), (128, 1))
    assert_size_stride(view_906, (128, 512), (512, 1))
    assert_size_stride(addmm_338, (128, 128), (128, 1))
    assert_size_stride(view_908, (128, 128), (128, 1))
    assert_size_stride(view_910, (128, 512), (512, 1))
    assert_size_stride(addmm_340, (128, 128), (128, 1))
    assert_size_stride(view_912, (128, 128), (128, 1))
    assert_size_stride(view_914, (128, 512), (512, 1))
    assert_size_stride(addmm_342, (128, 128), (128, 1))
    assert_size_stride(view_916, (128, 128), (128, 1))
    assert_size_stride(view_918, (128, 512), (512, 1))
    assert_size_stride(addmm_344, (128, 128), (128, 1))
    assert_size_stride(view_920, (128, 128), (128, 1))
    assert_size_stride(addmm_345, (128, 512), (512, 1))
    assert_size_stride(view_922, (128, 512), (512, 1))
    assert_size_stride(addmm_346, (128, 128), (128, 1))
    assert_size_stride(addmm_347, (128, 128), (128, 1))
    assert_size_stride(view_926, (128, 128), (128, 1))
    assert_size_stride(getitem_51, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_1, (4, 128, 128), (16384, 1, 128))
    assert_size_stride(permute_default_2, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(alias_default_1, (1, 4, 128, 128), (65536, 16384, 128, 1))
    assert_size_stride(permute_default_3, (4, 32, 128), (4096, 1, 32))
    assert_size_stride(permute_default_4, (4, 128, 32), (4096, 32, 1))
    assert_size_stride(view_942, (128, 128), (128, 1))
    assert_size_stride(addmm_351, (128, 128), (128, 1))
    assert_size_stride(view_944, (128, 128), (128, 1))
    assert_size_stride(view_946, (128, 512), (512, 1))
    assert_size_stride(addmm_353, (128, 128), (128, 1))
    assert_size_stride(view_948, (128, 128), (128, 1))
    assert_size_stride(view_950, (128, 512), (512, 1))
    assert_size_stride(addmm_355, (128, 128), (128, 1))
    assert_size_stride(view_952, (128, 128), (128, 1))
    assert_size_stride(view_954, (128, 512), (512, 1))
    assert_size_stride(addmm_357, (128, 128), (128, 1))
    assert_size_stride(view_956, (128, 128), (128, 1))
    assert_size_stride(view_958, (128, 512), (512, 1))
    assert_size_stride(addmm_359, (128, 128), (128, 1))
    assert_size_stride(view_960, (128, 128), (128, 1))
    assert_size_stride(addmm_360, (128, 512), (512, 1))
    assert_size_stride(view_962, (128, 512), (512, 1))
    assert_size_stride(addmm_361, (128, 512), (512, 1))
    assert_size_stride(getitem_49, (1, 128, 1), (128, 1, 1))
    assert_size_stride(rsqrt, (1, 128, 1), (128, 1, 1))
    assert_size_stride(sub_27, (128, 30522), (30522, 1))
    assert_size_stride(convert_element_type, (), ())
    assert_size_stride(permute_483, (512, 128), (1, 512))
    assert_size_stride(permute_484, (30522, 512), (1, 30522))
    assert_size_stride(permute_486, (512, 512), (512, 1))
    assert_size_stride(permute_490, (512, 128), (128, 1))
    assert_size_stride(permute_494, (128, 512), (512, 1))
    assert_size_stride(le_1, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_498, (512, 128), (128, 1))
    assert_size_stride(permute_502, (128, 512), (512, 1))
    assert_size_stride(le_2, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_506, (512, 128), (128, 1))
    assert_size_stride(permute_510, (128, 512), (512, 1))
    assert_size_stride(le_3, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_514, (512, 128), (128, 1))
    assert_size_stride(permute_518, (128, 512), (512, 1))
    assert_size_stride(le_4, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_522, (512, 128), (128, 1))
    assert_size_stride(permute_526, (128, 128), (128, 1))
    assert_size_stride(permute_539, (128, 512), (512, 1))
    assert_size_stride(permute_543, (128, 128), (128, 1))
    assert_size_stride(permute_547, (128, 128), (128, 1))
    assert_size_stride(permute_551, (128, 512), (512, 1))
    assert_size_stride(permute_555, (128, 512), (512, 1))
    assert_size_stride(permute_559, (512, 128), (128, 1))
    assert_size_stride(permute_563, (128, 512), (512, 1))
    assert_size_stride(le_5, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_567, (512, 128), (128, 1))
    assert_size_stride(permute_571, (128, 512), (512, 1))
    assert_size_stride(le_6, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_575, (512, 128), (128, 1))
    assert_size_stride(permute_579, (128, 512), (512, 1))
    assert_size_stride(le_7, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_583, (512, 128), (128, 1))
    assert_size_stride(permute_587, (128, 512), (512, 1))
    assert_size_stride(le_8, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_591, (512, 128), (128, 1))
    assert_size_stride(permute_595, (128, 128), (128, 1))
    assert_size_stride(permute_608, (128, 512), (512, 1))
    assert_size_stride(permute_612, (128, 128), (128, 1))
    assert_size_stride(permute_616, (128, 128), (128, 1))
    assert_size_stride(permute_620, (128, 512), (512, 1))
    assert_size_stride(permute_624, (128, 512), (512, 1))
    assert_size_stride(permute_628, (512, 128), (128, 1))
    assert_size_stride(permute_632, (128, 512), (512, 1))
    assert_size_stride(le_9, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_636, (512, 128), (128, 1))
    assert_size_stride(permute_640, (128, 512), (512, 1))
    assert_size_stride(le_10, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_644, (512, 128), (128, 1))
    assert_size_stride(permute_648, (128, 512), (512, 1))
    assert_size_stride(le_11, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_652, (512, 128), (128, 1))
    assert_size_stride(permute_656, (128, 512), (512, 1))
    assert_size_stride(le_12, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_660, (512, 128), (128, 1))
    assert_size_stride(permute_664, (128, 128), (128, 1))
    assert_size_stride(permute_677, (128, 512), (512, 1))
    assert_size_stride(permute_681, (128, 128), (128, 1))
    assert_size_stride(permute_685, (128, 128), (128, 1))
    assert_size_stride(permute_689, (128, 512), (512, 1))
    assert_size_stride(permute_693, (128, 512), (512, 1))
    assert_size_stride(permute_697, (512, 128), (128, 1))
    assert_size_stride(permute_701, (128, 512), (512, 1))
    assert_size_stride(le_13, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_705, (512, 128), (128, 1))
    assert_size_stride(permute_709, (128, 512), (512, 1))
    assert_size_stride(le_14, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_713, (512, 128), (128, 1))
    assert_size_stride(permute_717, (128, 512), (512, 1))
    assert_size_stride(le_15, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_721, (512, 128), (128, 1))
    assert_size_stride(permute_725, (128, 512), (512, 1))
    assert_size_stride(le_16, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_729, (512, 128), (128, 1))
    assert_size_stride(permute_733, (128, 128), (128, 1))
    assert_size_stride(permute_746, (128, 512), (512, 1))
    assert_size_stride(permute_750, (128, 128), (128, 1))
    assert_size_stride(permute_754, (128, 128), (128, 1))
    assert_size_stride(permute_758, (128, 512), (512, 1))
    assert_size_stride(permute_762, (128, 512), (512, 1))
    assert_size_stride(permute_766, (512, 128), (128, 1))
    assert_size_stride(permute_770, (128, 512), (512, 1))
    assert_size_stride(le_17, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_774, (512, 128), (128, 1))
    assert_size_stride(permute_778, (128, 512), (512, 1))
    assert_size_stride(le_18, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_782, (512, 128), (128, 1))
    assert_size_stride(permute_786, (128, 512), (512, 1))
    assert_size_stride(le_19, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_790, (512, 128), (128, 1))
    assert_size_stride(permute_794, (128, 512), (512, 1))
    assert_size_stride(le_20, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_798, (512, 128), (128, 1))
    assert_size_stride(permute_802, (128, 128), (128, 1))
    assert_size_stride(permute_815, (128, 512), (512, 1))
    assert_size_stride(permute_819, (128, 128), (128, 1))
    assert_size_stride(permute_823, (128, 128), (128, 1))
    assert_size_stride(permute_827, (128, 512), (512, 1))
    assert_size_stride(permute_831, (128, 512), (512, 1))
    assert_size_stride(permute_835, (512, 128), (128, 1))
    assert_size_stride(permute_839, (128, 512), (512, 1))
    assert_size_stride(le_21, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_843, (512, 128), (128, 1))
    assert_size_stride(permute_847, (128, 512), (512, 1))
    assert_size_stride(le_22, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_851, (512, 128), (128, 1))
    assert_size_stride(permute_855, (128, 512), (512, 1))
    assert_size_stride(le_23, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_859, (512, 128), (128, 1))
    assert_size_stride(permute_863, (128, 512), (512, 1))
    assert_size_stride(le_24, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_867, (512, 128), (128, 1))
    assert_size_stride(permute_871, (128, 128), (128, 1))
    assert_size_stride(permute_884, (128, 512), (512, 1))
    assert_size_stride(permute_888, (128, 128), (128, 1))
    assert_size_stride(permute_892, (128, 128), (128, 1))
    assert_size_stride(permute_896, (128, 512), (512, 1))
    assert_size_stride(permute_900, (128, 512), (512, 1))
    assert_size_stride(permute_904, (512, 128), (128, 1))
    assert_size_stride(permute_908, (128, 512), (512, 1))
    assert_size_stride(le_25, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_912, (512, 128), (128, 1))
    assert_size_stride(permute_916, (128, 512), (512, 1))
    assert_size_stride(le_26, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_920, (512, 128), (128, 1))
    assert_size_stride(permute_924, (128, 512), (512, 1))
    assert_size_stride(le_27, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_928, (512, 128), (128, 1))
    assert_size_stride(permute_932, (128, 512), (512, 1))
    assert_size_stride(le_28, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_936, (512, 128), (128, 1))
    assert_size_stride(permute_940, (128, 128), (128, 1))
    assert_size_stride(permute_953, (128, 512), (512, 1))
    assert_size_stride(permute_957, (128, 128), (128, 1))
    assert_size_stride(permute_961, (128, 128), (128, 1))
    assert_size_stride(permute_965, (128, 512), (512, 1))
    assert_size_stride(permute_969, (128, 512), (512, 1))
    assert_size_stride(permute_973, (512, 128), (128, 1))
    assert_size_stride(permute_977, (128, 512), (512, 1))
    assert_size_stride(le_29, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_981, (512, 128), (128, 1))
    assert_size_stride(permute_985, (128, 512), (512, 1))
    assert_size_stride(le_30, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_989, (512, 128), (128, 1))
    assert_size_stride(permute_993, (128, 512), (512, 1))
    assert_size_stride(le_31, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_997, (512, 128), (128, 1))
    assert_size_stride(permute_1001, (128, 512), (512, 1))
    assert_size_stride(le_32, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1005, (512, 128), (128, 1))
    assert_size_stride(permute_1009, (128, 128), (128, 1))
    assert_size_stride(permute_1022, (128, 512), (512, 1))
    assert_size_stride(permute_1026, (128, 128), (128, 1))
    assert_size_stride(permute_1030, (128, 128), (128, 1))
    assert_size_stride(permute_1034, (128, 512), (512, 1))
    assert_size_stride(permute_1038, (128, 512), (512, 1))
    assert_size_stride(permute_1042, (512, 128), (128, 1))
    assert_size_stride(permute_1046, (128, 512), (512, 1))
    assert_size_stride(le_33, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1050, (512, 128), (128, 1))
    assert_size_stride(permute_1054, (128, 512), (512, 1))
    assert_size_stride(le_34, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1058, (512, 128), (128, 1))
    assert_size_stride(permute_1062, (128, 512), (512, 1))
    assert_size_stride(le_35, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1066, (512, 128), (128, 1))
    assert_size_stride(permute_1070, (128, 512), (512, 1))
    assert_size_stride(le_36, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1074, (512, 128), (128, 1))
    assert_size_stride(permute_1078, (128, 128), (128, 1))
    assert_size_stride(permute_1091, (128, 512), (512, 1))
    assert_size_stride(permute_1095, (128, 128), (128, 1))
    assert_size_stride(permute_1099, (128, 128), (128, 1))
    assert_size_stride(permute_1103, (128, 512), (512, 1))
    assert_size_stride(permute_1107, (128, 512), (512, 1))
    assert_size_stride(permute_1111, (512, 128), (128, 1))
    assert_size_stride(permute_1115, (128, 512), (512, 1))
    assert_size_stride(le_37, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1119, (512, 128), (128, 1))
    assert_size_stride(permute_1123, (128, 512), (512, 1))
    assert_size_stride(le_38, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1127, (512, 128), (128, 1))
    assert_size_stride(permute_1131, (128, 512), (512, 1))
    assert_size_stride(le_39, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1135, (512, 128), (128, 1))
    assert_size_stride(permute_1139, (128, 512), (512, 1))
    assert_size_stride(le_40, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1143, (512, 128), (128, 1))
    assert_size_stride(permute_1147, (128, 128), (128, 1))
    assert_size_stride(permute_1160, (128, 512), (512, 1))
    assert_size_stride(permute_1164, (128, 128), (128, 1))
    assert_size_stride(permute_1168, (128, 128), (128, 1))
    assert_size_stride(permute_1172, (128, 512), (512, 1))
    assert_size_stride(permute_1176, (128, 512), (512, 1))
    assert_size_stride(permute_1180, (512, 128), (128, 1))
    assert_size_stride(permute_1184, (128, 512), (512, 1))
    assert_size_stride(le_41, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1188, (512, 128), (128, 1))
    assert_size_stride(permute_1192, (128, 512), (512, 1))
    assert_size_stride(le_42, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1196, (512, 128), (128, 1))
    assert_size_stride(permute_1200, (128, 512), (512, 1))
    assert_size_stride(le_43, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1204, (512, 128), (128, 1))
    assert_size_stride(permute_1208, (128, 512), (512, 1))
    assert_size_stride(le_44, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1212, (512, 128), (128, 1))
    assert_size_stride(permute_1216, (128, 128), (128, 1))
    assert_size_stride(permute_1229, (128, 512), (512, 1))
    assert_size_stride(permute_1233, (128, 128), (128, 1))
    assert_size_stride(permute_1237, (128, 128), (128, 1))
    assert_size_stride(permute_1241, (128, 512), (512, 1))
    assert_size_stride(permute_1245, (128, 512), (512, 1))
    assert_size_stride(permute_1249, (512, 128), (128, 1))
    assert_size_stride(permute_1253, (128, 512), (512, 1))
    assert_size_stride(le_45, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1257, (512, 128), (128, 1))
    assert_size_stride(permute_1261, (128, 512), (512, 1))
    assert_size_stride(le_46, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1265, (512, 128), (128, 1))
    assert_size_stride(permute_1269, (128, 512), (512, 1))
    assert_size_stride(le_47, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1273, (512, 128), (128, 1))
    assert_size_stride(permute_1277, (128, 512), (512, 1))
    assert_size_stride(le_48, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1281, (512, 128), (128, 1))
    assert_size_stride(permute_1285, (128, 128), (128, 1))
    assert_size_stride(permute_1298, (128, 512), (512, 1))
    assert_size_stride(permute_1302, (128, 128), (128, 1))
    assert_size_stride(permute_1306, (128, 128), (128, 1))
    assert_size_stride(permute_1310, (128, 512), (512, 1))
    assert_size_stride(permute_1314, (128, 512), (512, 1))
    assert_size_stride(permute_1318, (512, 128), (128, 1))
    assert_size_stride(permute_1322, (128, 512), (512, 1))
    assert_size_stride(le_49, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1326, (512, 128), (128, 1))
    assert_size_stride(permute_1330, (128, 512), (512, 1))
    assert_size_stride(le_50, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1334, (512, 128), (128, 1))
    assert_size_stride(permute_1338, (128, 512), (512, 1))
    assert_size_stride(le_51, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1342, (512, 128), (128, 1))
    assert_size_stride(permute_1346, (128, 512), (512, 1))
    assert_size_stride(le_52, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1350, (512, 128), (128, 1))
    assert_size_stride(permute_1354, (128, 128), (128, 1))
    assert_size_stride(permute_1367, (128, 512), (512, 1))
    assert_size_stride(permute_1371, (128, 128), (128, 1))
    assert_size_stride(permute_1375, (128, 128), (128, 1))
    assert_size_stride(permute_1379, (128, 512), (512, 1))
    assert_size_stride(permute_1383, (128, 512), (512, 1))
    assert_size_stride(permute_1387, (512, 128), (128, 1))
    assert_size_stride(permute_1391, (128, 512), (512, 1))
    assert_size_stride(le_53, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1395, (512, 128), (128, 1))
    assert_size_stride(permute_1399, (128, 512), (512, 1))
    assert_size_stride(le_54, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1403, (512, 128), (128, 1))
    assert_size_stride(permute_1407, (128, 512), (512, 1))
    assert_size_stride(le_55, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1411, (512, 128), (128, 1))
    assert_size_stride(permute_1415, (128, 512), (512, 1))
    assert_size_stride(le_56, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1419, (512, 128), (128, 1))
    assert_size_stride(permute_1423, (128, 128), (128, 1))
    assert_size_stride(permute_1436, (128, 512), (512, 1))
    assert_size_stride(permute_1440, (128, 128), (128, 1))
    assert_size_stride(permute_1444, (128, 128), (128, 1))
    assert_size_stride(permute_1448, (128, 512), (512, 1))
    assert_size_stride(permute_1452, (128, 512), (512, 1))
    assert_size_stride(permute_1456, (512, 128), (128, 1))
    assert_size_stride(permute_1460, (128, 512), (512, 1))
    assert_size_stride(le_57, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1464, (512, 128), (128, 1))
    assert_size_stride(permute_1468, (128, 512), (512, 1))
    assert_size_stride(le_58, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1472, (512, 128), (128, 1))
    assert_size_stride(permute_1476, (128, 512), (512, 1))
    assert_size_stride(le_59, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1480, (512, 128), (128, 1))
    assert_size_stride(permute_1484, (128, 512), (512, 1))
    assert_size_stride(le_60, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1488, (512, 128), (128, 1))
    assert_size_stride(permute_1492, (128, 128), (128, 1))
    assert_size_stride(permute_1505, (128, 512), (512, 1))
    assert_size_stride(permute_1509, (128, 128), (128, 1))
    assert_size_stride(permute_1513, (128, 128), (128, 1))
    assert_size_stride(permute_1517, (128, 512), (512, 1))
    assert_size_stride(permute_1521, (128, 512), (512, 1))
    assert_size_stride(permute_1525, (512, 128), (128, 1))
    assert_size_stride(permute_1529, (128, 512), (512, 1))
    assert_size_stride(le_61, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1533, (512, 128), (128, 1))
    assert_size_stride(permute_1537, (128, 512), (512, 1))
    assert_size_stride(le_62, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1541, (512, 128), (128, 1))
    assert_size_stride(permute_1545, (128, 512), (512, 1))
    assert_size_stride(le_63, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1549, (512, 128), (128, 1))
    assert_size_stride(permute_1553, (128, 512), (512, 1))
    assert_size_stride(le_64, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1557, (512, 128), (128, 1))
    assert_size_stride(permute_1561, (128, 128), (128, 1))
    assert_size_stride(permute_1574, (128, 512), (512, 1))
    assert_size_stride(permute_1578, (128, 128), (128, 1))
    assert_size_stride(permute_1582, (128, 128), (128, 1))
    assert_size_stride(permute_1586, (128, 512), (512, 1))
    assert_size_stride(permute_1590, (128, 512), (512, 1))
    assert_size_stride(permute_1594, (512, 128), (128, 1))
    assert_size_stride(permute_1598, (128, 512), (512, 1))
    assert_size_stride(le_65, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1602, (512, 128), (128, 1))
    assert_size_stride(permute_1606, (128, 512), (512, 1))
    assert_size_stride(le_66, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1610, (512, 128), (128, 1))
    assert_size_stride(permute_1614, (128, 512), (512, 1))
    assert_size_stride(le_67, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1618, (512, 128), (128, 1))
    assert_size_stride(permute_1622, (128, 512), (512, 1))
    assert_size_stride(le_68, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1626, (512, 128), (128, 1))
    assert_size_stride(permute_1630, (128, 128), (128, 1))
    assert_size_stride(permute_1643, (128, 512), (512, 1))
    assert_size_stride(permute_1647, (128, 128), (128, 1))
    assert_size_stride(permute_1651, (128, 128), (128, 1))
    assert_size_stride(permute_1655, (128, 512), (512, 1))
    assert_size_stride(permute_1659, (128, 512), (512, 1))
    assert_size_stride(permute_1663, (512, 128), (128, 1))
    assert_size_stride(permute_1667, (128, 512), (512, 1))
    assert_size_stride(le_69, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1671, (512, 128), (128, 1))
    assert_size_stride(permute_1675, (128, 512), (512, 1))
    assert_size_stride(le_70, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1679, (512, 128), (128, 1))
    assert_size_stride(permute_1683, (128, 512), (512, 1))
    assert_size_stride(le_71, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1687, (512, 128), (128, 1))
    assert_size_stride(permute_1691, (128, 512), (512, 1))
    assert_size_stride(le_72, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1695, (512, 128), (128, 1))
    assert_size_stride(permute_1699, (128, 128), (128, 1))
    assert_size_stride(permute_1712, (128, 512), (512, 1))
    assert_size_stride(permute_1716, (128, 128), (128, 1))
    assert_size_stride(permute_1720, (128, 128), (128, 1))
    assert_size_stride(permute_1724, (128, 512), (512, 1))
    assert_size_stride(permute_1728, (128, 512), (512, 1))
    assert_size_stride(permute_1732, (512, 128), (128, 1))
    assert_size_stride(permute_1736, (128, 512), (512, 1))
    assert_size_stride(le_73, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1740, (512, 128), (128, 1))
    assert_size_stride(permute_1744, (128, 512), (512, 1))
    assert_size_stride(le_74, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1748, (512, 128), (128, 1))
    assert_size_stride(permute_1752, (128, 512), (512, 1))
    assert_size_stride(le_75, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1756, (512, 128), (128, 1))
    assert_size_stride(permute_1760, (128, 512), (512, 1))
    assert_size_stride(le_76, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1764, (512, 128), (128, 1))
    assert_size_stride(permute_1768, (128, 128), (128, 1))
    assert_size_stride(permute_1781, (128, 512), (512, 1))
    assert_size_stride(permute_1785, (128, 128), (128, 1))
    assert_size_stride(permute_1789, (128, 128), (128, 1))
    assert_size_stride(permute_1793, (128, 512), (512, 1))
    assert_size_stride(permute_1797, (128, 512), (512, 1))
    assert_size_stride(permute_1801, (512, 128), (128, 1))
    assert_size_stride(permute_1805, (128, 512), (512, 1))
    assert_size_stride(le_77, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1809, (512, 128), (128, 1))
    assert_size_stride(permute_1813, (128, 512), (512, 1))
    assert_size_stride(le_78, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1817, (512, 128), (128, 1))
    assert_size_stride(permute_1821, (128, 512), (512, 1))
    assert_size_stride(le_79, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1825, (512, 128), (128, 1))
    assert_size_stride(permute_1829, (128, 512), (512, 1))
    assert_size_stride(le_80, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1833, (512, 128), (128, 1))
    assert_size_stride(permute_1837, (128, 128), (128, 1))
    assert_size_stride(permute_1850, (128, 512), (512, 1))
    assert_size_stride(permute_1854, (128, 128), (128, 1))
    assert_size_stride(permute_1858, (128, 128), (128, 1))
    assert_size_stride(permute_1862, (128, 512), (512, 1))
    assert_size_stride(permute_1866, (128, 512), (512, 1))
    assert_size_stride(permute_1870, (512, 128), (128, 1))
    assert_size_stride(permute_1874, (128, 512), (512, 1))
    assert_size_stride(le_81, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1878, (512, 128), (128, 1))
    assert_size_stride(permute_1882, (128, 512), (512, 1))
    assert_size_stride(le_82, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1886, (512, 128), (128, 1))
    assert_size_stride(permute_1890, (128, 512), (512, 1))
    assert_size_stride(le_83, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1894, (512, 128), (128, 1))
    assert_size_stride(permute_1898, (128, 512), (512, 1))
    assert_size_stride(le_84, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1902, (512, 128), (128, 1))
    assert_size_stride(permute_1906, (128, 128), (128, 1))
    assert_size_stride(permute_1919, (128, 512), (512, 1))
    assert_size_stride(permute_1923, (128, 128), (128, 1))
    assert_size_stride(permute_1927, (128, 128), (128, 1))
    assert_size_stride(permute_1931, (128, 512), (512, 1))
    assert_size_stride(permute_1935, (128, 512), (512, 1))
    assert_size_stride(permute_1939, (512, 128), (128, 1))
    assert_size_stride(permute_1943, (128, 512), (512, 1))
    assert_size_stride(le_85, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1947, (512, 128), (128, 1))
    assert_size_stride(permute_1951, (128, 512), (512, 1))
    assert_size_stride(le_86, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1955, (512, 128), (128, 1))
    assert_size_stride(permute_1959, (128, 512), (512, 1))
    assert_size_stride(le_87, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1963, (512, 128), (128, 1))
    assert_size_stride(permute_1967, (128, 512), (512, 1))
    assert_size_stride(le_88, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_1971, (512, 128), (128, 1))
    assert_size_stride(permute_1975, (128, 128), (128, 1))
    assert_size_stride(permute_1988, (128, 512), (512, 1))
    assert_size_stride(permute_1992, (128, 128), (128, 1))
    assert_size_stride(permute_1996, (128, 128), (128, 1))
    assert_size_stride(permute_2000, (128, 512), (512, 1))
    assert_size_stride(permute_2004, (128, 512), (512, 1))
    assert_size_stride(permute_2008, (512, 128), (128, 1))
    assert_size_stride(permute_2012, (128, 512), (512, 1))
    assert_size_stride(le_89, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_2016, (512, 128), (128, 1))
    assert_size_stride(permute_2020, (128, 512), (512, 1))
    assert_size_stride(le_90, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_2024, (512, 128), (128, 1))
    assert_size_stride(permute_2028, (128, 512), (512, 1))
    assert_size_stride(le_91, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_2032, (512, 128), (128, 1))
    assert_size_stride(permute_2036, (128, 512), (512, 1))
    assert_size_stride(le_92, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_2040, (512, 128), (128, 1))
    assert_size_stride(permute_2044, (128, 128), (128, 1))
    assert_size_stride(permute_2057, (128, 512), (512, 1))
    assert_size_stride(permute_2061, (128, 128), (128, 1))
    assert_size_stride(permute_2065, (128, 128), (128, 1))
    assert_size_stride(permute_2069, (128, 512), (512, 1))
    assert_size_stride(permute_2073, (128, 512), (512, 1))
    assert_size_stride(permute_2077, (512, 128), (128, 1))
    assert_size_stride(permute_2081, (128, 512), (512, 1))
    assert_size_stride(le_93, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_2085, (512, 128), (128, 1))
    assert_size_stride(permute_2089, (128, 512), (512, 1))
    assert_size_stride(le_94, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_2093, (512, 128), (128, 1))
    assert_size_stride(permute_2097, (128, 512), (512, 1))
    assert_size_stride(le_95, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_2101, (512, 128), (128, 1))
    assert_size_stride(permute_2105, (128, 512), (512, 1))
    assert_size_stride(le_96, (1, 128, 512), (65536, 512, 1))
    assert_size_stride(permute_2109, (512, 128), (128, 1))
    assert_size_stride(permute_2113, (128, 128), (128, 1))
    assert_size_stride(permute_2126, (128, 512), (512, 1))
    assert_size_stride(permute_2130, (128, 128), (128, 1))
    assert_size_stride(permute_2134, (128, 128), (128, 1))
    assert_size_stride(permute_2138, (128, 512), (512, 1))
    assert_size_stride(permute_2142, (128, 512), (512, 1))
    assert_size_stride(permute_2146, (512, 384), (384, 1))
    assert_size_stride(tangents_1, (), ())
    assert_size_stride(tangents_2, (1, 128, 30522), (3906816, 30522, 1))
    buf0 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf1 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf2 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf3 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf4 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf5 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf6 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf11 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf16 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf21 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf26 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf31 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf36 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf41 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf46 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf51 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf56 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf7 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf8 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf9 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf10 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf12 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf13 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf14 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf15 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf17 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf18 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf19 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf20 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf22 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf23 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf24 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf25 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf27 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf28 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf29 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf30 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf32 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf33 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf34 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf35 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf37 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf38 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf39 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf40 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf42 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf43 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf44 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf45 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf47 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf48 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf49 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf50 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf52 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf53 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf54 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf55 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf59 = empty((128, 30522), device='cpu', dtype=torch.float32)
    buf60 = empty_strided((128, 1), (1, 128), device='cpu', dtype=torch.int64)
    cpp_fused_add_mul_nll_loss_backward_nll_loss_forward_0(c_void_p(addmm_8.data_ptr()), c_void_p(addmm_6.data_ptr()), c_void_p(addmm_1.data_ptr()), c_void_p(primals_3.data_ptr()), c_void_p(primals_4.data_ptr()), c_void_p(primals_7.data_ptr()), c_void_p(primals_8.data_ptr()), c_void_p(addmm_12.data_ptr()), c_void_p(addmm_10.data_ptr()), c_void_p(primals_9.data_ptr()), c_void_p(primals_10.data_ptr()), c_void_p(primals_11.data_ptr()), c_void_p(primals_12.data_ptr()), c_void_p(addmm_23.data_ptr()), c_void_p(addmm_21.data_ptr()), c_void_p(addmm_16.data_ptr()), c_void_p(primals_19.data_ptr()), c_void_p(primals_20.data_ptr()), c_void_p(primals_23.data_ptr()), c_void_p(primals_24.data_ptr()), c_void_p(addmm_27.data_ptr()), c_void_p(addmm_25.data_ptr()), c_void_p(primals_25.data_ptr()), c_void_p(primals_26.data_ptr()), c_void_p(primals_27.data_ptr()), c_void_p(primals_28.data_ptr()), c_void_p(addmm_38.data_ptr()), c_void_p(addmm_36.data_ptr()), c_void_p(addmm_31.data_ptr()), c_void_p(primals_35.data_ptr()), c_void_p(primals_36.data_ptr()), c_void_p(primals_39.data_ptr()), c_void_p(primals_40.data_ptr()), c_void_p(addmm_42.data_ptr()), c_void_p(addmm_40.data_ptr()), c_void_p(primals_41.data_ptr()), c_void_p(primals_42.data_ptr()), c_void_p(primals_43.data_ptr()), c_void_p(primals_44.data_ptr()), c_void_p(addmm_45.data_ptr()), c_void_p(addmm_30.data_ptr()), c_void_p(add_16.data_ptr()), c_void_p(primals_17.data_ptr()), c_void_p(primals_18.data_ptr()), c_void_p(primals_33.data_ptr()), c_void_p(primals_34.data_ptr()), c_void_p(addmm_75.data_ptr()), c_void_p(addmm_60.data_ptr()), c_void_p(primals_49.data_ptr()), c_void_p(primals_50.data_ptr()), c_void_p(primals_65.data_ptr()), c_void_p(primals_66.data_ptr()), c_void_p(addmm_105.data_ptr()), c_void_p(addmm_90.data_ptr()), c_void_p(primals_81.data_ptr()), c_void_p(primals_82.data_ptr()), c_void_p(primals_97.data_ptr()), c_void_p(primals_98.data_ptr()), c_void_p(addmm_135.data_ptr()), c_void_p(addmm_120.data_ptr()), c_void_p(primals_113.data_ptr()), c_void_p(primals_114.data_ptr()), c_void_p(primals_129.data_ptr()), c_void_p(primals_130.data_ptr()), c_void_p(addmm_165.data_ptr()), c_void_p(addmm_150.data_ptr()), c_void_p(primals_145.data_ptr()), c_void_p(primals_146.data_ptr()), c_void_p(primals_161.data_ptr()), c_void_p(primals_162.data_ptr()), c_void_p(addmm_195.data_ptr()), c_void_p(addmm_180.data_ptr()), c_void_p(primals_177.data_ptr()), c_void_p(primals_178.data_ptr()), c_void_p(primals_193.data_ptr()), c_void_p(primals_194.data_ptr()), c_void_p(addmm_225.data_ptr()), c_void_p(addmm_210.data_ptr()), c_void_p(primals_209.data_ptr()), c_void_p(primals_210.data_ptr()), c_void_p(primals_225.data_ptr()), c_void_p(primals_226.data_ptr()), c_void_p(addmm_255.data_ptr()), c_void_p(addmm_240.data_ptr()), c_void_p(primals_241.data_ptr()), c_void_p(primals_242.data_ptr()), c_void_p(primals_257.data_ptr()), c_void_p(primals_258.data_ptr()), c_void_p(addmm_285.data_ptr()), c_void_p(addmm_270.data_ptr()), c_void_p(primals_273.data_ptr()), c_void_p(primals_274.data_ptr()), c_void_p(primals_289.data_ptr()), c_void_p(primals_290.data_ptr()), c_void_p(addmm_315.data_ptr()), c_void_p(addmm_300.data_ptr()), c_void_p(primals_305.data_ptr()), c_void_p(primals_306.data_ptr()), c_void_p(primals_321.data_ptr()), c_void_p(primals_322.data_ptr()), c_void_p(addmm_345.data_ptr()), c_void_p(addmm_330.data_ptr()), c_void_p(primals_337.data_ptr()), c_void_p(primals_338.data_ptr()), c_void_p(primals_353.data_ptr()), c_void_p(primals_354.data_ptr()), c_void_p(addmm_53.data_ptr()), c_void_p(addmm_51.data_ptr()), c_void_p(addmm_46.data_ptr()), c_void_p(primals_51.data_ptr()), c_void_p(primals_52.data_ptr()), c_void_p(primals_55.data_ptr()), c_void_p(primals_56.data_ptr()), c_void_p(addmm_57.data_ptr()), c_void_p(addmm_55.data_ptr()), c_void_p(primals_57.data_ptr()), c_void_p(primals_58.data_ptr()), c_void_p(primals_59.data_ptr()), c_void_p(primals_60.data_ptr()), c_void_p(addmm_68.data_ptr()), c_void_p(addmm_66.data_ptr()), c_void_p(addmm_61.data_ptr()), c_void_p(primals_67.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(primals_71.data_ptr()), c_void_p(primals_72.data_ptr()), c_void_p(addmm_72.data_ptr()), c_void_p(addmm_70.data_ptr()), c_void_p(primals_73.data_ptr()), c_void_p(primals_74.data_ptr()), c_void_p(primals_75.data_ptr()), c_void_p(primals_76.data_ptr()), c_void_p(addmm_83.data_ptr()), c_void_p(addmm_81.data_ptr()), c_void_p(addmm_76.data_ptr()), c_void_p(primals_83.data_ptr()), c_void_p(primals_84.data_ptr()), c_void_p(primals_87.data_ptr()), c_void_p(primals_88.data_ptr()), c_void_p(addmm_87.data_ptr()), c_void_p(addmm_85.data_ptr()), c_void_p(primals_89.data_ptr()), c_void_p(primals_90.data_ptr()), c_void_p(primals_91.data_ptr()), c_void_p(primals_92.data_ptr()), c_void_p(addmm_98.data_ptr()), c_void_p(addmm_96.data_ptr()), c_void_p(addmm_91.data_ptr()), c_void_p(primals_99.data_ptr()), c_void_p(primals_100.data_ptr()), c_void_p(primals_103.data_ptr()), c_void_p(primals_104.data_ptr()), c_void_p(addmm_102.data_ptr()), c_void_p(addmm_100.data_ptr()), c_void_p(primals_105.data_ptr()), c_void_p(primals_106.data_ptr()), c_void_p(primals_107.data_ptr()), c_void_p(primals_108.data_ptr()), c_void_p(addmm_113.data_ptr()), c_void_p(addmm_111.data_ptr()), c_void_p(addmm_106.data_ptr()), c_void_p(primals_115.data_ptr()), c_void_p(primals_116.data_ptr()), c_void_p(primals_119.data_ptr()), c_void_p(primals_120.data_ptr()), c_void_p(addmm_117.data_ptr()), c_void_p(addmm_115.data_ptr()), c_void_p(primals_121.data_ptr()), c_void_p(primals_122.data_ptr()), c_void_p(primals_123.data_ptr()), c_void_p(primals_124.data_ptr()), c_void_p(addmm_128.data_ptr()), c_void_p(addmm_126.data_ptr()), c_void_p(addmm_121.data_ptr()), c_void_p(primals_131.data_ptr()), c_void_p(primals_132.data_ptr()), c_void_p(primals_135.data_ptr()), c_void_p(primals_136.data_ptr()), c_void_p(addmm_132.data_ptr()), c_void_p(addmm_130.data_ptr()), c_void_p(primals_137.data_ptr()), c_void_p(primals_138.data_ptr()), c_void_p(primals_139.data_ptr()), c_void_p(primals_140.data_ptr()), c_void_p(addmm_143.data_ptr()), c_void_p(addmm_141.data_ptr()), c_void_p(addmm_136.data_ptr()), c_void_p(primals_147.data_ptr()), c_void_p(primals_148.data_ptr()), c_void_p(primals_151.data_ptr()), c_void_p(primals_152.data_ptr()), c_void_p(addmm_147.data_ptr()), c_void_p(addmm_145.data_ptr()), c_void_p(primals_153.data_ptr()), c_void_p(primals_154.data_ptr()), c_void_p(primals_155.data_ptr()), c_void_p(primals_156.data_ptr()), c_void_p(addmm_158.data_ptr()), c_void_p(addmm_156.data_ptr()), c_void_p(addmm_151.data_ptr()), c_void_p(primals_163.data_ptr()), c_void_p(primals_164.data_ptr()), c_void_p(primals_167.data_ptr()), c_void_p(primals_168.data_ptr()), c_void_p(addmm_162.data_ptr()), c_void_p(addmm_160.data_ptr()), c_void_p(primals_169.data_ptr()), c_void_p(primals_170.data_ptr()), c_void_p(primals_171.data_ptr()), c_void_p(primals_172.data_ptr()), c_void_p(addmm_173.data_ptr()), c_void_p(addmm_171.data_ptr()), c_void_p(addmm_166.data_ptr()), c_void_p(primals_179.data_ptr()), c_void_p(primals_180.data_ptr()), c_void_p(primals_183.data_ptr()), c_void_p(primals_184.data_ptr()), c_void_p(addmm_177.data_ptr()), c_void_p(addmm_175.data_ptr()), c_void_p(primals_185.data_ptr()), c_void_p(primals_186.data_ptr()), c_void_p(primals_187.data_ptr()), c_void_p(primals_188.data_ptr()), c_void_p(addmm_188.data_ptr()), c_void_p(addmm_186.data_ptr()), c_void_p(addmm_181.data_ptr()), c_void_p(primals_195.data_ptr()), c_void_p(primals_196.data_ptr()), c_void_p(primals_199.data_ptr()), c_void_p(primals_200.data_ptr()), c_void_p(addmm_192.data_ptr()), c_void_p(addmm_190.data_ptr()), c_void_p(primals_201.data_ptr()), c_void_p(primals_202.data_ptr()), c_void_p(primals_203.data_ptr()), c_void_p(primals_204.data_ptr()), c_void_p(addmm_203.data_ptr()), c_void_p(addmm_201.data_ptr()), c_void_p(addmm_196.data_ptr()), c_void_p(primals_211.data_ptr()), c_void_p(primals_212.data_ptr()), c_void_p(primals_215.data_ptr()), c_void_p(primals_216.data_ptr()), c_void_p(addmm_207.data_ptr()), c_void_p(addmm_205.data_ptr()), c_void_p(primals_217.data_ptr()), c_void_p(primals_218.data_ptr()), c_void_p(primals_219.data_ptr()), c_void_p(primals_220.data_ptr()), c_void_p(addmm_218.data_ptr()), c_void_p(addmm_216.data_ptr()), c_void_p(addmm_211.data_ptr()), c_void_p(primals_227.data_ptr()), c_void_p(primals_228.data_ptr()), c_void_p(primals_231.data_ptr()), c_void_p(primals_232.data_ptr()), c_void_p(addmm_222.data_ptr()), c_void_p(addmm_220.data_ptr()), c_void_p(primals_233.data_ptr()), c_void_p(primals_234.data_ptr()), c_void_p(primals_235.data_ptr()), c_void_p(primals_236.data_ptr()), c_void_p(addmm_233.data_ptr()), c_void_p(addmm_231.data_ptr()), c_void_p(addmm_226.data_ptr()), c_void_p(primals_243.data_ptr()), c_void_p(primals_244.data_ptr()), c_void_p(primals_247.data_ptr()), c_void_p(primals_248.data_ptr()), c_void_p(addmm_237.data_ptr()), c_void_p(addmm_235.data_ptr()), c_void_p(primals_249.data_ptr()), c_void_p(primals_250.data_ptr()), c_void_p(primals_251.data_ptr()), c_void_p(primals_252.data_ptr()), c_void_p(addmm_248.data_ptr()), c_void_p(addmm_246.data_ptr()), c_void_p(addmm_241.data_ptr()), c_void_p(primals_259.data_ptr()), c_void_p(primals_260.data_ptr()), c_void_p(primals_263.data_ptr()), c_void_p(primals_264.data_ptr()), c_void_p(addmm_252.data_ptr()), c_void_p(addmm_250.data_ptr()), c_void_p(primals_265.data_ptr()), c_void_p(primals_266.data_ptr()), c_void_p(primals_267.data_ptr()), c_void_p(primals_268.data_ptr()), c_void_p(addmm_263.data_ptr()), c_void_p(addmm_261.data_ptr()), c_void_p(addmm_256.data_ptr()), c_void_p(primals_275.data_ptr()), c_void_p(primals_276.data_ptr()), c_void_p(primals_279.data_ptr()), c_void_p(primals_280.data_ptr()), c_void_p(addmm_267.data_ptr()), c_void_p(addmm_265.data_ptr()), c_void_p(primals_281.data_ptr()), c_void_p(primals_282.data_ptr()), c_void_p(primals_283.data_ptr()), c_void_p(primals_284.data_ptr()), c_void_p(addmm_278.data_ptr()), c_void_p(addmm_276.data_ptr()), c_void_p(addmm_271.data_ptr()), c_void_p(primals_291.data_ptr()), c_void_p(primals_292.data_ptr()), c_void_p(primals_295.data_ptr()), c_void_p(primals_296.data_ptr()), c_void_p(addmm_282.data_ptr()), c_void_p(addmm_280.data_ptr()), c_void_p(primals_297.data_ptr()), c_void_p(primals_298.data_ptr()), c_void_p(primals_299.data_ptr()), c_void_p(primals_300.data_ptr()), c_void_p(addmm_293.data_ptr()), c_void_p(addmm_291.data_ptr()), c_void_p(addmm_286.data_ptr()), c_void_p(primals_307.data_ptr()), c_void_p(primals_308.data_ptr()), c_void_p(primals_311.data_ptr()), c_void_p(primals_312.data_ptr()), c_void_p(addmm_297.data_ptr()), c_void_p(addmm_295.data_ptr()), c_void_p(primals_313.data_ptr()), c_void_p(primals_314.data_ptr()), c_void_p(primals_315.data_ptr()), c_void_p(primals_316.data_ptr()), c_void_p(addmm_308.data_ptr()), c_void_p(addmm_306.data_ptr()), c_void_p(addmm_301.data_ptr()), c_void_p(primals_323.data_ptr()), c_void_p(primals_324.data_ptr()), c_void_p(primals_327.data_ptr()), c_void_p(primals_328.data_ptr()), c_void_p(addmm_312.data_ptr()), c_void_p(addmm_310.data_ptr()), c_void_p(primals_329.data_ptr()), c_void_p(primals_330.data_ptr()), c_void_p(primals_331.data_ptr()), c_void_p(primals_332.data_ptr()), c_void_p(addmm_323.data_ptr()), c_void_p(addmm_321.data_ptr()), c_void_p(addmm_316.data_ptr()), c_void_p(primals_339.data_ptr()), c_void_p(primals_340.data_ptr()), c_void_p(primals_343.data_ptr()), c_void_p(primals_344.data_ptr()), c_void_p(addmm_327.data_ptr()), c_void_p(addmm_325.data_ptr()), c_void_p(primals_345.data_ptr()), c_void_p(primals_346.data_ptr()), c_void_p(primals_347.data_ptr()), c_void_p(primals_348.data_ptr()), c_void_p(addmm_338.data_ptr()), c_void_p(addmm_336.data_ptr()), c_void_p(addmm_331.data_ptr()), c_void_p(primals_355.data_ptr()), c_void_p(primals_356.data_ptr()), c_void_p(primals_359.data_ptr()), c_void_p(primals_360.data_ptr()), c_void_p(addmm_342.data_ptr()), c_void_p(addmm_340.data_ptr()), c_void_p(primals_361.data_ptr()), c_void_p(primals_362.data_ptr()), c_void_p(primals_363.data_ptr()), c_void_p(primals_364.data_ptr()), c_void_p(primals_1121.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(buf16.data_ptr()), c_void_p(buf21.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(buf31.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(buf41.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(buf56.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(buf17.data_ptr()), c_void_p(buf18.data_ptr()), c_void_p(buf19.data_ptr()), c_void_p(buf20.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(buf23.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(buf25.data_ptr()), c_void_p(buf27.data_ptr()), c_void_p(buf28.data_ptr()), c_void_p(buf29.data_ptr()), c_void_p(buf30.data_ptr()), c_void_p(buf32.data_ptr()), c_void_p(buf33.data_ptr()), c_void_p(buf34.data_ptr()), c_void_p(buf35.data_ptr()), c_void_p(buf37.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(buf39.data_ptr()), c_void_p(buf40.data_ptr()), c_void_p(buf42.data_ptr()), c_void_p(buf43.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(buf45.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(buf48.data_ptr()), c_void_p(buf49.data_ptr()), c_void_p(buf50.data_ptr()), c_void_p(buf52.data_ptr()), c_void_p(buf53.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(buf55.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(buf60.data_ptr()))
    del addmm_102
    del addmm_105
    del addmm_113
    del addmm_117
    del addmm_12
    del addmm_128
    del addmm_132
    del addmm_135
    del addmm_143
    del addmm_147
    del addmm_158
    del addmm_162
    del addmm_165
    del addmm_173
    del addmm_177
    del addmm_188
    del addmm_192
    del addmm_195
    del addmm_203
    del addmm_207
    del addmm_218
    del addmm_222
    del addmm_225
    del addmm_23
    del addmm_233
    del addmm_237
    del addmm_248
    del addmm_252
    del addmm_255
    del addmm_263
    del addmm_267
    del addmm_27
    del addmm_278
    del addmm_282
    del addmm_285
    del addmm_293
    del addmm_297
    del addmm_308
    del addmm_312
    del addmm_315
    del addmm_323
    del addmm_327
    del addmm_338
    del addmm_342
    del addmm_345
    del addmm_38
    del addmm_42
    del addmm_45
    del addmm_53
    del addmm_57
    del addmm_68
    del addmm_72
    del addmm_75
    del addmm_8
    del addmm_83
    del addmm_87
    del addmm_98
    del primals_104
    del primals_108
    del primals_12
    del primals_120
    del primals_124
    del primals_130
    del primals_136
    del primals_140
    del primals_152
    del primals_156
    del primals_162
    del primals_168
    del primals_172
    del primals_184
    del primals_188
    del primals_194
    del primals_200
    del primals_204
    del primals_216
    del primals_220
    del primals_226
    del primals_232
    del primals_236
    del primals_24
    del primals_248
    del primals_252
    del primals_258
    del primals_264
    del primals_268
    del primals_28
    del primals_280
    del primals_284
    del primals_290
    del primals_296
    del primals_300
    del primals_312
    del primals_316
    del primals_322
    del primals_328
    del primals_332
    del primals_34
    del primals_344
    del primals_348
    del primals_354
    del primals_360
    del primals_364
    del primals_40
    del primals_44
    del primals_56
    del primals_60
    del primals_66
    del primals_72
    del primals_76
    del primals_8
    del primals_88
    del primals_92
    del primals_98
    aten.scatter_(buf59,1,buf60,-1.0)
    del buf60
    buf63 = empty_strided((128, 1), (1, 128), device='cpu', dtype=torch.float32)
    buf62 = empty((128, 30522), device='cpu', dtype=torch.float32)
    buf64 = buf62; del buf62  # reuse
    buf66 = empty((3906816, ), device='cpu', dtype=torch.float32)
    buf69 = empty((128, 30522), device='cpu', dtype=torch.float32)
    cpp_fused__log_softmax_backward_data_add_as_strided_scatter_nll_loss_backward_nll_loss_forward_squeeze_1(c_void_p(buf64.data_ptr()), c_void_p(buf59.data_ptr()), c_void_p(primals_1121.data_ptr()), c_void_p(tangents_1.data_ptr()), c_void_p(convert_element_type.data_ptr()), c_void_p(tangents_2.data_ptr()), c_void_p(sub_27.data_ptr()), c_void_p(buf63.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(buf69.data_ptr()))
    del buf59
    del buf64
    del convert_element_type
    del primals_1121
    del sub_27
    del tangents_1
    del tangents_2
    buf73 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf69, permute_484, out=buf73)
    del permute_484
    buf74 = reinterpret_tensor(buf63, (1, 128, 1), (128, 1, 128), 0); del buf63  # reuse
    buf75 = empty_strided((1, 128, 1), (128, 1, 128), device='cpu', dtype=torch.float32)
    buf78 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_native_layer_norm_backward_nll_loss_forward_relu_threshold_backward_2(c_void_p(buf73.data_ptr()), c_void_p(primals_1117.data_ptr()), c_void_p(addmm_361.data_ptr()), c_void_p(getitem_49.data_ptr()), c_void_p(rsqrt.data_ptr()), c_void_p(buf74.data_ptr()), c_void_p(buf75.data_ptr()), c_void_p(buf78.data_ptr()))
    del primals_1117
    buf79 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf78, (128, 512), (512, 1), 0), permute_486, out=buf79)
    del permute_486
    buf84 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    cpp_fused_mul_3(c_void_p(buf79.data_ptr()), c_void_p(primals_385.data_ptr()), c_void_p(buf84.data_ptr()))
    del primals_385
    buf85 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf84, (128, 512), (512, 1), 0), permute_490, out=buf85)
    del permute_490
    buf90 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_mul_4(c_void_p(buf85.data_ptr()), c_void_p(primals_383.data_ptr()), c_void_p(buf90.data_ptr()))
    del primals_383
    buf91 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf90, (128, 128), (128, 1), 0), permute_494, out=buf91)
    del permute_494
    buf94 = reinterpret_tensor(buf91, (1, 128, 512), (65536, 512, 1), 0); del buf91  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_5(c_void_p(buf94.data_ptr()), c_void_p(le_1.data_ptr()))
    del le_1
    buf95 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf94, (128, 512), (512, 1), 0), permute_498, out=buf95)
    del permute_498
    buf100 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_6(c_void_p(buf90.data_ptr()), c_void_p(buf95.data_ptr()), c_void_p(primals_381.data_ptr()), c_void_p(buf100.data_ptr()))
    buf101 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf100, (128, 128), (128, 1), 0), permute_502, out=buf101)
    del permute_502
    buf104 = reinterpret_tensor(buf101, (1, 128, 512), (65536, 512, 1), 0); del buf101  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_7(c_void_p(buf104.data_ptr()), c_void_p(le_2.data_ptr()))
    del le_2
    buf105 = empty((128, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf104, (128, 512), (512, 1), 0), permute_506, out=buf105)
    del permute_506
    buf57 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf58 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf110 = empty((1, 128, 128), device='cpu', dtype=torch.float32)
    buf71 = empty((1, 1, 30522), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_8(c_void_p(addmm_353.data_ptr()), c_void_p(addmm_351.data_ptr()), c_void_p(addmm_346.data_ptr()), c_void_p(primals_371.data_ptr()), c_void_p(primals_372.data_ptr()), c_void_p(primals_375.data_ptr()), c_void_p(primals_376.data_ptr()), c_void_p(addmm_357.data_ptr()), c_void_p(addmm_355.data_ptr()), c_void_p(primals_377.data_ptr()), c_void_p(primals_378.data_ptr()), c_void_p(primals_379.data_ptr()), c_void_p(primals_380.data_ptr()), c_void_p(buf100.data_ptr()), c_void_p(buf105.data_ptr()), c_void_p(buf66.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(buf58.data_ptr()), c_void_p(buf110.data_ptr()), c_void_p(buf71.data_ptr()))
    del addmm_353
    del addmm_357
    del buf66
    del primals_376
    del primals_379
    del primals_380
    buf72 = empty((512, 30522), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(permute_483, buf69, out=buf72)
    del permute_483
    buf76 = empty((512, ), device='cpu', dtype=torch.float32)
    buf77 = empty((512, ), device='cpu', dtype=torch.float32)
    cpp_fused_native_layer_norm_native_layer_norm_backward_relu_9(c_void_p(buf73.data_ptr()), c_void_p(addmm_361.data_ptr()), c_void_p(getitem_49.data_ptr()), c_void_p(rsqrt.data_ptr()), c_void_p(buf76.data_ptr()), c_void_p(buf77.data_ptr()))
    del addmm_361
    del getitem_49
    del rsqrt
    buf80 = empty((512, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf78, (512, 128), (1, 512), 0), view_962, out=buf80)
    del view_962
    buf81 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf82 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf83 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_10(c_void_p(buf78.data_ptr()), c_void_p(buf79.data_ptr()), c_void_p(addmm_360.data_ptr()), c_void_p(buf56.data_ptr()), c_void_p(primals_369.data_ptr()), c_void_p(primals_370.data_ptr()), c_void_p(buf81.data_ptr()), c_void_p(buf82.data_ptr()), c_void_p(buf83.data_ptr()))
    del addmm_360
    del primals_370
    buf86 = reinterpret_tensor(buf79, (512, 128), (128, 1), 0); del buf79  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf84, (512, 128), (1, 512), 0), view_960, out=buf86)
    del view_960
    buf87 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf88 = reinterpret_tensor(buf75, (1, 1, 128), (128, 128, 1), 0); del buf75  # reuse
    buf89 = reinterpret_tensor(buf74, (1, 1, 128), (128, 128, 1), 0); del buf74  # reuse
    buf93 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf98 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf99 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_11(c_void_p(buf84.data_ptr()), c_void_p(buf85.data_ptr()), c_void_p(addmm_359.data_ptr()), c_void_p(buf58.data_ptr()), c_void_p(primals_381.data_ptr()), c_void_p(primals_382.data_ptr()), c_void_p(buf90.data_ptr()), c_void_p(buf95.data_ptr()), c_void_p(buf87.data_ptr()), c_void_p(buf88.data_ptr()), c_void_p(buf89.data_ptr()), c_void_p(buf93.data_ptr()), c_void_p(buf98.data_ptr()), c_void_p(buf99.data_ptr()))
    del addmm_359
    del primals_381
    del primals_382
    buf92 = reinterpret_tensor(buf78, (128, 512), (512, 1), 0); del buf78  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf90, (128, 128), (1, 128), 0), view_958, out=buf92)
    del view_958
    buf96 = reinterpret_tensor(buf73, (512, 128), (128, 1), 0); del buf73  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf94, (512, 128), (1, 512), 0), view_956, out=buf96)
    del view_956
    buf97 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_12(c_void_p(buf94.data_ptr()), c_void_p(buf97.data_ptr()))
    buf102 = reinterpret_tensor(buf94, (128, 512), (512, 1), 0); del buf94  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf100, (128, 128), (1, 128), 0), view_954, out=buf102)
    del view_954
    buf111 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf110, (128, 128), (128, 1), 0), permute_510, out=buf111)
    del permute_510
    buf114 = reinterpret_tensor(buf111, (1, 128, 512), (65536, 512, 1), 0); del buf111  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_13(c_void_p(buf114.data_ptr()), c_void_p(le_3.data_ptr()))
    del le_3
    buf115 = reinterpret_tensor(buf90, (128, 128), (128, 1), 0); del buf90  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf114, (128, 512), (512, 1), 0), permute_514, out=buf115)
    del permute_514
    buf103 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf108 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf109 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf113 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf118 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf119 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_14(c_void_p(buf100.data_ptr()), c_void_p(buf105.data_ptr()), c_void_p(addmm_355.data_ptr()), c_void_p(buf57.data_ptr()), c_void_p(primals_377.data_ptr()), c_void_p(primals_378.data_ptr()), c_void_p(buf110.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(buf103.data_ptr()), c_void_p(buf108.data_ptr()), c_void_p(buf109.data_ptr()), c_void_p(buf113.data_ptr()), c_void_p(buf118.data_ptr()), c_void_p(buf119.data_ptr()))
    del addmm_355
    del primals_378
    buf106 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf104, (512, 128), (1, 512), 0), view_952, out=buf106)
    del view_952
    buf107 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_15(c_void_p(buf104.data_ptr()), c_void_p(buf107.data_ptr()))
    buf112 = reinterpret_tensor(buf104, (128, 512), (512, 1), 0); del buf104  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf110, (128, 128), (1, 128), 0), view_950, out=buf112)
    del view_950
    buf116 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf114, (512, 128), (1, 512), 0), view_948, out=buf116)
    del view_948
    buf117 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf120 = buf110; del buf110  # reuse
    cpp_fused_add_mul_sum_16(c_void_p(buf120.data_ptr()), c_void_p(buf114.data_ptr()), c_void_p(buf115.data_ptr()), c_void_p(primals_377.data_ptr()), c_void_p(buf117.data_ptr()))
    del primals_377
    buf121 = reinterpret_tensor(buf114, (128, 512), (512, 1), 0); del buf114  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf120, (128, 128), (128, 1), 0), permute_518, out=buf121)
    del permute_518
    buf122 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf120, (128, 128), (1, 128), 0), view_946, out=buf122)
    del view_946
    buf124 = reinterpret_tensor(buf121, (1, 128, 512), (65536, 512, 1), 0); del buf121  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_17(c_void_p(buf124.data_ptr()), c_void_p(le_4.data_ptr()))
    del le_4
    buf125 = buf115; del buf115  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf124, (128, 512), (512, 1), 0), permute_522, out=buf125)
    del permute_522
    buf130 = buf57; del buf57  # reuse
    buf160 = reinterpret_tensor(buf105, (1, 128, 128), (16384, 128, 1), 0); del buf105  # reuse
    buf123 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf128 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf129 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf133 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf158 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf159 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_18(c_void_p(buf120.data_ptr()), c_void_p(buf125.data_ptr()), c_void_p(primals_375.data_ptr()), c_void_p(primals_371.data_ptr()), c_void_p(addmm_351.data_ptr()), c_void_p(addmm_346.data_ptr()), c_void_p(primals_372.data_ptr()), c_void_p(buf130.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(buf123.data_ptr()), c_void_p(buf128.data_ptr()), c_void_p(buf129.data_ptr()), c_void_p(buf133.data_ptr()), c_void_p(buf158.data_ptr()), c_void_p(buf159.data_ptr()))
    del addmm_346
    del addmm_351
    del primals_371
    del primals_372
    del primals_375
    buf126 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf124, (512, 128), (1, 512), 0), view_944, out=buf126)
    del view_944
    buf127 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_19(c_void_p(buf124.data_ptr()), c_void_p(buf127.data_ptr()))
    buf131 = buf125; del buf125  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf130, (128, 128), (128, 1), 0), permute_526, out=buf131)
    del permute_526
    buf132 = reinterpret_tensor(buf120, (128, 128), (128, 1), 0); del buf120  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf130, (128, 128), (1, 128), 0), view_942, out=buf132)
    del view_942
    buf134 = reinterpret_tensor(buf130, (4, 128, 32), (4096, 32, 1), 0); del buf130  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_1, reinterpret_tensor(buf131, (4, 128, 32), (32, 128, 1), 0), out=buf134)
    del permute_default_1
    buf135 = reinterpret_tensor(buf124, (4, 128, 128), (16384, 128, 1), 0); del buf124  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf131, (4, 128, 32), (32, 128, 1), 0), permute_default_2, out=buf135)
    del permute_default_2
    buf136 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf137 = reinterpret_tensor(buf135, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf135  # reuse
    cpp_fused_20(c_void_p(buf137.data_ptr()), c_void_p(getitem_51.data_ptr()), c_void_p(alias_default_1.data_ptr()), c_void_p(buf136.data_ptr()))
    del alias_default_1
    del getitem_51
    buf138 = reinterpret_tensor(buf131, (4, 32, 128), (4096, 128, 1), 0); del buf131  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_3, reinterpret_tensor(buf137, (4, 128, 128), (16384, 128, 1), 0), out=buf138)
    del permute_default_3
    buf139 = reinterpret_tensor(buf100, (4, 128, 32), (4096, 32, 1), 0); del buf100  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf137, (4, 128, 128), (16384, 128, 1), 0), permute_default_4, out=buf139)
    del permute_default_4
    buf140 = buf95; del buf95  # reuse
    cpp_fused_view_21(c_void_p(buf134.data_ptr()), c_void_p(buf140.data_ptr()))
    buf141 = reinterpret_tensor(buf137, (128, 512), (512, 1), 0); del buf137  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf140, permute_539, out=buf141)
    del permute_539
    buf142 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf140, (128, 128), (1, 128), 0), view_922, out=buf142)
    buf143 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf144 = reinterpret_tensor(buf138, (128, 128), (1, 128), 0); del buf138  # reuse
    cpp_fused_sum_view_22(c_void_p(buf144.data_ptr()), c_void_p(buf140.data_ptr()), c_void_p(buf143.data_ptr()))
    buf145 = buf140; del buf140  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf144, permute_543, out=buf145)
    del permute_543
    buf146 = reinterpret_tensor(buf134, (128, 128), (128, 1), 0); del buf134  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf144, (128, 128), (128, 1), 0), view_926, out=buf146)
    buf147 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf148 = buf85; del buf85  # reuse
    cpp_fused_sum_view_23(c_void_p(buf144.data_ptr()), c_void_p(buf139.data_ptr()), c_void_p(buf147.data_ptr()), c_void_p(buf148.data_ptr()))
    buf149 = reinterpret_tensor(buf144, (128, 128), (128, 1), 0); del buf144  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf148, permute_547, out=buf149)
    del permute_547
    buf150 = reinterpret_tensor(buf139, (128, 128), (128, 1), 0); del buf139  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf148, (128, 128), (1, 128), 0), view_926, out=buf150)
    del view_926
    buf151 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf152 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf153 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf154 = reinterpret_tensor(buf145, (1, 128, 128), (16384, 128, 1), 0); del buf145  # reuse
    cpp_fused_add_mul_sum_24(c_void_p(buf154.data_ptr()), c_void_p(buf148.data_ptr()), c_void_p(buf149.data_ptr()), c_void_p(addmm_347.data_ptr()), c_void_p(primals_373.data_ptr()), c_void_p(buf151.data_ptr()), c_void_p(buf152.data_ptr()), c_void_p(buf153.data_ptr()))
    del addmm_347
    del primals_373
    buf155 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf154, (128, 128), (128, 1), 0), permute_551, out=buf155)
    del permute_551
    buf156 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf154, (128, 128), (1, 128), 0), view_922, out=buf156)
    buf157 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_25(c_void_p(buf154.data_ptr()), c_void_p(buf157.data_ptr()))
    buf161 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf160, (128, 128), (128, 1), 0), permute_555, out=buf161)
    del permute_555
    buf162 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf160, (128, 128), (1, 128), 0), view_922, out=buf162)
    del view_922
    buf163 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf164 = reinterpret_tensor(buf136, (1, 1, 512), (512, 512, 1), 0); del buf136  # reuse
    buf166 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf165 = reinterpret_tensor(buf141, (1, 128, 512), (65536, 512, 1), 0); del buf141  # reuse
    cpp_fused_add_mul_sum_26(c_void_p(buf165.data_ptr()), c_void_p(buf160.data_ptr()), c_void_p(buf84.data_ptr()), c_void_p(buf155.data_ptr()), c_void_p(buf161.data_ptr()), c_void_p(buf56.data_ptr()), c_void_p(primals_369.data_ptr()), c_void_p(buf163.data_ptr()), c_void_p(buf164.data_ptr()), c_void_p(buf166.data_ptr()))
    del primals_369
    buf167 = reinterpret_tensor(buf160, (128, 128), (128, 1), 0); del buf160  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf165, (128, 512), (512, 1), 0), permute_559, out=buf167)
    del permute_559
    buf168 = reinterpret_tensor(buf84, (512, 128), (128, 1), 0); del buf84  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf165, (512, 128), (1, 512), 0), view_920, out=buf168)
    del view_920
    buf169 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf172 = buf154; del buf154  # reuse
    cpp_fused_mul_sum_27(c_void_p(buf165.data_ptr()), c_void_p(buf167.data_ptr()), c_void_p(primals_367.data_ptr()), c_void_p(buf169.data_ptr()), c_void_p(buf172.data_ptr()))
    del primals_367
    buf173 = reinterpret_tensor(buf56, (128, 512), (512, 1), 0); del buf56  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf172, (128, 128), (128, 1), 0), permute_563, out=buf173)
    del permute_563
    buf176 = reinterpret_tensor(buf173, (1, 128, 512), (65536, 512, 1), 0); del buf173  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_28(c_void_p(buf176.data_ptr()), c_void_p(le_5.data_ptr()))
    del le_5
    buf177 = buf149; del buf149  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf176, (128, 512), (512, 1), 0), permute_567, out=buf177)
    del permute_567
    buf170 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf171 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf175 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf180 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf181 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_29(c_void_p(buf167.data_ptr()), c_void_p(addmm_344.data_ptr()), c_void_p(buf55.data_ptr()), c_void_p(primals_365.data_ptr()), c_void_p(primals_366.data_ptr()), c_void_p(buf172.data_ptr()), c_void_p(buf177.data_ptr()), c_void_p(buf170.data_ptr()), c_void_p(buf171.data_ptr()), c_void_p(buf175.data_ptr()), c_void_p(buf180.data_ptr()), c_void_p(buf181.data_ptr()))
    del addmm_344
    del primals_366
    buf174 = buf161; del buf161  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf172, (128, 128), (1, 128), 0), view_918, out=buf174)
    del view_918
    buf178 = reinterpret_tensor(buf155, (512, 128), (128, 1), 0); del buf155  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf176, (512, 128), (1, 512), 0), view_916, out=buf178)
    del view_916
    buf179 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf182 = buf172; del buf172  # reuse
    cpp_fused_add_mul_sum_30(c_void_p(buf182.data_ptr()), c_void_p(buf176.data_ptr()), c_void_p(buf177.data_ptr()), c_void_p(primals_365.data_ptr()), c_void_p(buf179.data_ptr()))
    del primals_365
    buf183 = reinterpret_tensor(buf176, (128, 512), (512, 1), 0); del buf176  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf182, (128, 128), (128, 1), 0), permute_571, out=buf183)
    del permute_571
    buf184 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf182, (128, 128), (1, 128), 0), view_914, out=buf184)
    del view_914
    buf186 = reinterpret_tensor(buf183, (1, 128, 512), (65536, 512, 1), 0); del buf183  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_31(c_void_p(buf186.data_ptr()), c_void_p(le_6.data_ptr()))
    del le_6
    buf187 = buf177; del buf177  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf186, (128, 512), (512, 1), 0), permute_575, out=buf187)
    del permute_575
    buf192 = buf55; del buf55  # reuse
    cpp_fused_add_mul_32(c_void_p(buf182.data_ptr()), c_void_p(buf187.data_ptr()), c_void_p(primals_363.data_ptr()), c_void_p(buf192.data_ptr()))
    del primals_363
    buf193 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf192, (128, 128), (128, 1), 0), permute_579, out=buf193)
    del permute_579
    buf196 = reinterpret_tensor(buf193, (1, 128, 512), (65536, 512, 1), 0); del buf193  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_33(c_void_p(buf196.data_ptr()), c_void_p(le_7.data_ptr()))
    del le_7
    buf197 = buf167; del buf167  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf196, (128, 512), (512, 1), 0), permute_583, out=buf197)
    del permute_583
    buf185 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf190 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf191 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf195 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf200 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf201 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_34(c_void_p(buf182.data_ptr()), c_void_p(buf187.data_ptr()), c_void_p(addmm_340.data_ptr()), c_void_p(buf54.data_ptr()), c_void_p(primals_361.data_ptr()), c_void_p(primals_362.data_ptr()), c_void_p(buf192.data_ptr()), c_void_p(buf197.data_ptr()), c_void_p(buf185.data_ptr()), c_void_p(buf190.data_ptr()), c_void_p(buf191.data_ptr()), c_void_p(buf195.data_ptr()), c_void_p(buf200.data_ptr()), c_void_p(buf201.data_ptr()))
    del addmm_340
    del primals_362
    buf188 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf186, (512, 128), (1, 512), 0), view_912, out=buf188)
    del view_912
    buf189 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_35(c_void_p(buf186.data_ptr()), c_void_p(buf189.data_ptr()))
    buf194 = reinterpret_tensor(buf186, (128, 512), (512, 1), 0); del buf186  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf192, (128, 128), (1, 128), 0), view_910, out=buf194)
    del view_910
    buf198 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf196, (512, 128), (1, 512), 0), view_908, out=buf198)
    del view_908
    buf199 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf202 = buf192; del buf192  # reuse
    cpp_fused_add_mul_sum_36(c_void_p(buf202.data_ptr()), c_void_p(buf196.data_ptr()), c_void_p(buf197.data_ptr()), c_void_p(primals_361.data_ptr()), c_void_p(buf199.data_ptr()))
    del primals_361
    buf203 = reinterpret_tensor(buf196, (128, 512), (512, 1), 0); del buf196  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf202, (128, 128), (128, 1), 0), permute_587, out=buf203)
    del permute_587
    buf204 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf202, (128, 128), (1, 128), 0), view_906, out=buf204)
    del view_906
    buf206 = reinterpret_tensor(buf203, (1, 128, 512), (65536, 512, 1), 0); del buf203  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_37(c_void_p(buf206.data_ptr()), c_void_p(le_8.data_ptr()))
    del le_8
    buf207 = buf197; del buf197  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf206, (128, 512), (512, 1), 0), permute_591, out=buf207)
    del permute_591
    buf212 = buf54; del buf54  # reuse
    buf242 = reinterpret_tensor(buf187, (1, 128, 128), (16384, 128, 1), 0); del buf187  # reuse
    buf205 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf210 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf211 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf215 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf240 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf241 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_38(c_void_p(buf202.data_ptr()), c_void_p(buf207.data_ptr()), c_void_p(primals_359.data_ptr()), c_void_p(primals_355.data_ptr()), c_void_p(addmm_336.data_ptr()), c_void_p(addmm_331.data_ptr()), c_void_p(primals_356.data_ptr()), c_void_p(buf212.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(buf205.data_ptr()), c_void_p(buf210.data_ptr()), c_void_p(buf211.data_ptr()), c_void_p(buf215.data_ptr()), c_void_p(buf240.data_ptr()), c_void_p(buf241.data_ptr()))
    del addmm_331
    del addmm_336
    del primals_355
    del primals_356
    del primals_359
    buf208 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf206, (512, 128), (1, 512), 0), view_904, out=buf208)
    del view_904
    buf209 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_39(c_void_p(buf206.data_ptr()), c_void_p(buf209.data_ptr()))
    buf213 = buf207; del buf207  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf212, (128, 128), (128, 1), 0), permute_595, out=buf213)
    del permute_595
    buf214 = reinterpret_tensor(buf202, (128, 128), (128, 1), 0); del buf202  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf212, (128, 128), (1, 128), 0), view_902, out=buf214)
    del view_902
    buf216 = reinterpret_tensor(buf212, (4, 128, 32), (4096, 32, 1), 0); del buf212  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_7, reinterpret_tensor(buf213, (4, 128, 32), (32, 128, 1), 0), out=buf216)
    del permute_default_7
    buf217 = reinterpret_tensor(buf206, (4, 128, 128), (16384, 128, 1), 0); del buf206  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf213, (4, 128, 32), (32, 128, 1), 0), permute_default_8, out=buf217)
    del permute_default_8
    buf218 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf219 = reinterpret_tensor(buf217, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf217  # reuse
    cpp_fused_40(c_void_p(buf219.data_ptr()), c_void_p(getitem_53.data_ptr()), c_void_p(alias_default_3.data_ptr()), c_void_p(buf218.data_ptr()))
    del alias_default_3
    del getitem_53
    buf220 = reinterpret_tensor(buf213, (4, 32, 128), (4096, 128, 1), 0); del buf213  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_9, reinterpret_tensor(buf219, (4, 128, 128), (16384, 128, 1), 0), out=buf220)
    del permute_default_9
    buf221 = reinterpret_tensor(buf182, (4, 128, 32), (4096, 32, 1), 0); del buf182  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf219, (4, 128, 128), (16384, 128, 1), 0), permute_default_10, out=buf221)
    del permute_default_10
    buf222 = buf148; del buf148  # reuse
    cpp_fused_view_41(c_void_p(buf216.data_ptr()), c_void_p(buf222.data_ptr()))
    buf223 = reinterpret_tensor(buf219, (128, 512), (512, 1), 0); del buf219  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf222, permute_608, out=buf223)
    del permute_608
    buf224 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf222, (128, 128), (1, 128), 0), view_882, out=buf224)
    buf225 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf226 = reinterpret_tensor(buf220, (128, 128), (1, 128), 0); del buf220  # reuse
    cpp_fused_sum_view_42(c_void_p(buf226.data_ptr()), c_void_p(buf222.data_ptr()), c_void_p(buf225.data_ptr()))
    buf227 = buf222; del buf222  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf226, permute_612, out=buf227)
    del permute_612
    buf228 = reinterpret_tensor(buf216, (128, 128), (128, 1), 0); del buf216  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf226, (128, 128), (128, 1), 0), view_886, out=buf228)
    buf229 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf230 = reinterpret_tensor(buf58, (128, 128), (128, 1), 0); del buf58  # reuse
    cpp_fused_sum_view_43(c_void_p(buf226.data_ptr()), c_void_p(buf221.data_ptr()), c_void_p(buf229.data_ptr()), c_void_p(buf230.data_ptr()))
    buf231 = reinterpret_tensor(buf226, (128, 128), (128, 1), 0); del buf226  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf230, permute_616, out=buf231)
    del permute_616
    buf232 = reinterpret_tensor(buf221, (128, 128), (128, 1), 0); del buf221  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf230, (128, 128), (1, 128), 0), view_886, out=buf232)
    del view_886
    buf233 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf234 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf235 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf236 = reinterpret_tensor(buf227, (1, 128, 128), (16384, 128, 1), 0); del buf227  # reuse
    cpp_fused_add_mul_sum_44(c_void_p(buf236.data_ptr()), c_void_p(buf230.data_ptr()), c_void_p(buf231.data_ptr()), c_void_p(addmm_332.data_ptr()), c_void_p(primals_357.data_ptr()), c_void_p(buf233.data_ptr()), c_void_p(buf234.data_ptr()), c_void_p(buf235.data_ptr()))
    del addmm_332
    del primals_357
    buf237 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf236, (128, 128), (128, 1), 0), permute_620, out=buf237)
    del permute_620
    buf238 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf236, (128, 128), (1, 128), 0), view_882, out=buf238)
    buf239 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_45(c_void_p(buf236.data_ptr()), c_void_p(buf239.data_ptr()))
    buf243 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf242, (128, 128), (128, 1), 0), permute_624, out=buf243)
    del permute_624
    buf244 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf242, (128, 128), (1, 128), 0), view_882, out=buf244)
    del view_882
    buf245 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf246 = reinterpret_tensor(buf218, (1, 1, 512), (512, 512, 1), 0); del buf218  # reuse
    buf248 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf247 = buf165; del buf165  # reuse
    cpp_fused_add_mul_sum_46(c_void_p(buf247.data_ptr()), c_void_p(buf242.data_ptr()), c_void_p(buf223.data_ptr()), c_void_p(buf237.data_ptr()), c_void_p(buf243.data_ptr()), c_void_p(addmm_330.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(primals_337.data_ptr()), c_void_p(primals_338.data_ptr()), c_void_p(primals_353.data_ptr()), c_void_p(buf245.data_ptr()), c_void_p(buf246.data_ptr()), c_void_p(buf248.data_ptr()))
    del addmm_330
    del primals_338
    del primals_353
    buf249 = reinterpret_tensor(buf242, (128, 128), (128, 1), 0); del buf242  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf247, (128, 512), (512, 1), 0), permute_628, out=buf249)
    del permute_628
    buf250 = reinterpret_tensor(buf243, (512, 128), (128, 1), 0); del buf243  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf247, (512, 128), (1, 512), 0), view_880, out=buf250)
    del view_880
    buf251 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf254 = buf236; del buf236  # reuse
    cpp_fused_mul_sum_47(c_void_p(buf247.data_ptr()), c_void_p(buf249.data_ptr()), c_void_p(primals_351.data_ptr()), c_void_p(buf251.data_ptr()), c_void_p(buf254.data_ptr()))
    del primals_351
    buf255 = buf237; del buf237  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf254, (128, 128), (128, 1), 0), permute_632, out=buf255)
    del permute_632
    buf258 = reinterpret_tensor(buf255, (1, 128, 512), (65536, 512, 1), 0); del buf255  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_48(c_void_p(buf258.data_ptr()), c_void_p(le_9.data_ptr()))
    del le_9
    buf259 = buf231; del buf231  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf258, (128, 512), (512, 1), 0), permute_636, out=buf259)
    del permute_636
    buf252 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf253 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf257 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf262 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf263 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_49(c_void_p(buf249.data_ptr()), c_void_p(addmm_329.data_ptr()), c_void_p(buf53.data_ptr()), c_void_p(primals_349.data_ptr()), c_void_p(primals_350.data_ptr()), c_void_p(buf254.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(buf252.data_ptr()), c_void_p(buf253.data_ptr()), c_void_p(buf257.data_ptr()), c_void_p(buf262.data_ptr()), c_void_p(buf263.data_ptr()))
    del addmm_329
    del primals_350
    buf256 = buf223; del buf223  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf254, (128, 128), (1, 128), 0), view_878, out=buf256)
    del view_878
    buf260 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf258, (512, 128), (1, 512), 0), view_876, out=buf260)
    del view_876
    buf261 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf264 = buf254; del buf254  # reuse
    cpp_fused_add_mul_sum_50(c_void_p(buf264.data_ptr()), c_void_p(buf258.data_ptr()), c_void_p(buf259.data_ptr()), c_void_p(primals_349.data_ptr()), c_void_p(buf261.data_ptr()))
    del primals_349
    buf265 = reinterpret_tensor(buf258, (128, 512), (512, 1), 0); del buf258  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf264, (128, 128), (128, 1), 0), permute_640, out=buf265)
    del permute_640
    buf266 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf264, (128, 128), (1, 128), 0), view_874, out=buf266)
    del view_874
    buf268 = reinterpret_tensor(buf265, (1, 128, 512), (65536, 512, 1), 0); del buf265  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_51(c_void_p(buf268.data_ptr()), c_void_p(le_10.data_ptr()))
    del le_10
    buf269 = buf259; del buf259  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf268, (128, 512), (512, 1), 0), permute_644, out=buf269)
    del permute_644
    buf274 = buf53; del buf53  # reuse
    cpp_fused_add_mul_52(c_void_p(buf264.data_ptr()), c_void_p(buf269.data_ptr()), c_void_p(primals_347.data_ptr()), c_void_p(buf274.data_ptr()))
    del primals_347
    buf275 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf274, (128, 128), (128, 1), 0), permute_648, out=buf275)
    del permute_648
    buf278 = reinterpret_tensor(buf275, (1, 128, 512), (65536, 512, 1), 0); del buf275  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_53(c_void_p(buf278.data_ptr()), c_void_p(le_11.data_ptr()))
    del le_11
    buf279 = buf249; del buf249  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf278, (128, 512), (512, 1), 0), permute_652, out=buf279)
    del permute_652
    buf267 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf272 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf273 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf277 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf282 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf283 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_54(c_void_p(buf264.data_ptr()), c_void_p(buf269.data_ptr()), c_void_p(addmm_325.data_ptr()), c_void_p(buf52.data_ptr()), c_void_p(primals_345.data_ptr()), c_void_p(primals_346.data_ptr()), c_void_p(buf274.data_ptr()), c_void_p(buf279.data_ptr()), c_void_p(buf267.data_ptr()), c_void_p(buf272.data_ptr()), c_void_p(buf273.data_ptr()), c_void_p(buf277.data_ptr()), c_void_p(buf282.data_ptr()), c_void_p(buf283.data_ptr()))
    del addmm_325
    del primals_346
    buf270 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf268, (512, 128), (1, 512), 0), view_872, out=buf270)
    del view_872
    buf271 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_55(c_void_p(buf268.data_ptr()), c_void_p(buf271.data_ptr()))
    buf276 = reinterpret_tensor(buf268, (128, 512), (512, 1), 0); del buf268  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf274, (128, 128), (1, 128), 0), view_870, out=buf276)
    del view_870
    buf280 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf278, (512, 128), (1, 512), 0), view_868, out=buf280)
    del view_868
    buf281 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf284 = buf274; del buf274  # reuse
    cpp_fused_add_mul_sum_56(c_void_p(buf284.data_ptr()), c_void_p(buf278.data_ptr()), c_void_p(buf279.data_ptr()), c_void_p(primals_345.data_ptr()), c_void_p(buf281.data_ptr()))
    del primals_345
    buf285 = reinterpret_tensor(buf278, (128, 512), (512, 1), 0); del buf278  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf284, (128, 128), (128, 1), 0), permute_656, out=buf285)
    del permute_656
    buf286 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf284, (128, 128), (1, 128), 0), view_866, out=buf286)
    del view_866
    buf288 = reinterpret_tensor(buf285, (1, 128, 512), (65536, 512, 1), 0); del buf285  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_57(c_void_p(buf288.data_ptr()), c_void_p(le_12.data_ptr()))
    del le_12
    buf289 = buf279; del buf279  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf288, (128, 512), (512, 1), 0), permute_660, out=buf289)
    del permute_660
    buf294 = buf52; del buf52  # reuse
    buf324 = reinterpret_tensor(buf269, (1, 128, 128), (16384, 128, 1), 0); del buf269  # reuse
    buf287 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf292 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf293 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf297 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf322 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf323 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_58(c_void_p(buf284.data_ptr()), c_void_p(buf289.data_ptr()), c_void_p(primals_343.data_ptr()), c_void_p(primals_339.data_ptr()), c_void_p(addmm_321.data_ptr()), c_void_p(addmm_316.data_ptr()), c_void_p(primals_340.data_ptr()), c_void_p(buf294.data_ptr()), c_void_p(buf324.data_ptr()), c_void_p(buf287.data_ptr()), c_void_p(buf292.data_ptr()), c_void_p(buf293.data_ptr()), c_void_p(buf297.data_ptr()), c_void_p(buf322.data_ptr()), c_void_p(buf323.data_ptr()))
    del addmm_316
    del addmm_321
    del primals_339
    del primals_340
    del primals_343
    buf290 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf288, (512, 128), (1, 512), 0), view_864, out=buf290)
    del view_864
    buf291 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_59(c_void_p(buf288.data_ptr()), c_void_p(buf291.data_ptr()))
    buf295 = buf289; del buf289  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf294, (128, 128), (128, 1), 0), permute_664, out=buf295)
    del permute_664
    buf296 = reinterpret_tensor(buf284, (128, 128), (128, 1), 0); del buf284  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf294, (128, 128), (1, 128), 0), view_862, out=buf296)
    del view_862
    buf298 = reinterpret_tensor(buf294, (4, 128, 32), (4096, 32, 1), 0); del buf294  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_13, reinterpret_tensor(buf295, (4, 128, 32), (32, 128, 1), 0), out=buf298)
    del permute_default_13
    buf299 = reinterpret_tensor(buf288, (4, 128, 128), (16384, 128, 1), 0); del buf288  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf295, (4, 128, 32), (32, 128, 1), 0), permute_default_14, out=buf299)
    del permute_default_14
    buf300 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf301 = reinterpret_tensor(buf299, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf299  # reuse
    cpp_fused_60(c_void_p(buf301.data_ptr()), c_void_p(getitem_55.data_ptr()), c_void_p(alias_default_5.data_ptr()), c_void_p(buf300.data_ptr()))
    del alias_default_5
    del getitem_55
    buf302 = reinterpret_tensor(buf295, (4, 32, 128), (4096, 128, 1), 0); del buf295  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_15, reinterpret_tensor(buf301, (4, 128, 128), (16384, 128, 1), 0), out=buf302)
    del permute_default_15
    buf303 = reinterpret_tensor(buf264, (4, 128, 32), (4096, 32, 1), 0); del buf264  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf301, (4, 128, 128), (16384, 128, 1), 0), permute_default_16, out=buf303)
    del permute_default_16
    buf304 = buf230; del buf230  # reuse
    cpp_fused_view_61(c_void_p(buf298.data_ptr()), c_void_p(buf304.data_ptr()))
    buf305 = reinterpret_tensor(buf301, (128, 512), (512, 1), 0); del buf301  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf304, permute_677, out=buf305)
    del permute_677
    buf306 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf304, (128, 128), (1, 128), 0), view_842, out=buf306)
    buf307 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf308 = reinterpret_tensor(buf302, (128, 128), (1, 128), 0); del buf302  # reuse
    cpp_fused_sum_view_62(c_void_p(buf308.data_ptr()), c_void_p(buf304.data_ptr()), c_void_p(buf307.data_ptr()))
    buf309 = buf304; del buf304  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf308, permute_681, out=buf309)
    del permute_681
    buf310 = reinterpret_tensor(buf298, (128, 128), (128, 1), 0); del buf298  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf308, (128, 128), (128, 1), 0), view_846, out=buf310)
    buf311 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf312 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_63(c_void_p(buf308.data_ptr()), c_void_p(buf303.data_ptr()), c_void_p(buf311.data_ptr()), c_void_p(buf312.data_ptr()))
    buf313 = reinterpret_tensor(buf308, (128, 128), (128, 1), 0); del buf308  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf312, permute_685, out=buf313)
    del permute_685
    buf314 = reinterpret_tensor(buf303, (128, 128), (128, 1), 0); del buf303  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf312, (128, 128), (1, 128), 0), view_846, out=buf314)
    del view_846
    buf315 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf316 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf317 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf318 = reinterpret_tensor(buf309, (1, 128, 128), (16384, 128, 1), 0); del buf309  # reuse
    cpp_fused_add_mul_sum_64(c_void_p(buf318.data_ptr()), c_void_p(buf312.data_ptr()), c_void_p(buf313.data_ptr()), c_void_p(addmm_317.data_ptr()), c_void_p(primals_341.data_ptr()), c_void_p(buf315.data_ptr()), c_void_p(buf316.data_ptr()), c_void_p(buf317.data_ptr()))
    del addmm_317
    del primals_341
    buf319 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf318, (128, 128), (128, 1), 0), permute_689, out=buf319)
    del permute_689
    buf320 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf318, (128, 128), (1, 128), 0), view_842, out=buf320)
    buf321 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_65(c_void_p(buf318.data_ptr()), c_void_p(buf321.data_ptr()))
    buf325 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf324, (128, 128), (128, 1), 0), permute_693, out=buf325)
    del permute_693
    buf326 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf324, (128, 128), (1, 128), 0), view_842, out=buf326)
    del view_842
    buf327 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf328 = reinterpret_tensor(buf300, (1, 1, 512), (512, 512, 1), 0); del buf300  # reuse
    buf330 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf329 = buf247; del buf247  # reuse
    cpp_fused_add_mul_sum_66(c_void_p(buf329.data_ptr()), c_void_p(buf324.data_ptr()), c_void_p(buf305.data_ptr()), c_void_p(buf319.data_ptr()), c_void_p(buf325.data_ptr()), c_void_p(buf51.data_ptr()), c_void_p(primals_337.data_ptr()), c_void_p(buf327.data_ptr()), c_void_p(buf328.data_ptr()), c_void_p(buf330.data_ptr()))
    del primals_337
    buf331 = reinterpret_tensor(buf324, (128, 128), (128, 1), 0); del buf324  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf329, (128, 512), (512, 1), 0), permute_697, out=buf331)
    del permute_697
    buf332 = reinterpret_tensor(buf51, (512, 128), (128, 1), 0); del buf51  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf329, (512, 128), (1, 512), 0), view_840, out=buf332)
    del view_840
    buf333 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf336 = buf318; del buf318  # reuse
    cpp_fused_mul_sum_67(c_void_p(buf329.data_ptr()), c_void_p(buf331.data_ptr()), c_void_p(primals_335.data_ptr()), c_void_p(buf333.data_ptr()), c_void_p(buf336.data_ptr()))
    del primals_335
    buf337 = buf325; del buf325  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf336, (128, 128), (128, 1), 0), permute_701, out=buf337)
    del permute_701
    buf340 = reinterpret_tensor(buf337, (1, 128, 512), (65536, 512, 1), 0); del buf337  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_68(c_void_p(buf340.data_ptr()), c_void_p(le_13.data_ptr()))
    del le_13
    buf341 = buf313; del buf313  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf340, (128, 512), (512, 1), 0), permute_705, out=buf341)
    del permute_705
    buf334 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf335 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf339 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf344 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf345 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_69(c_void_p(buf331.data_ptr()), c_void_p(addmm_314.data_ptr()), c_void_p(buf50.data_ptr()), c_void_p(primals_333.data_ptr()), c_void_p(primals_334.data_ptr()), c_void_p(buf336.data_ptr()), c_void_p(buf341.data_ptr()), c_void_p(buf334.data_ptr()), c_void_p(buf335.data_ptr()), c_void_p(buf339.data_ptr()), c_void_p(buf344.data_ptr()), c_void_p(buf345.data_ptr()))
    del addmm_314
    del primals_334
    buf338 = buf319; del buf319  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf336, (128, 128), (1, 128), 0), view_838, out=buf338)
    del view_838
    buf342 = reinterpret_tensor(buf305, (512, 128), (128, 1), 0); del buf305  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf340, (512, 128), (1, 512), 0), view_836, out=buf342)
    del view_836
    buf343 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf346 = buf336; del buf336  # reuse
    cpp_fused_add_mul_sum_70(c_void_p(buf346.data_ptr()), c_void_p(buf340.data_ptr()), c_void_p(buf341.data_ptr()), c_void_p(primals_333.data_ptr()), c_void_p(buf343.data_ptr()))
    del primals_333
    buf347 = reinterpret_tensor(buf340, (128, 512), (512, 1), 0); del buf340  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf346, (128, 128), (128, 1), 0), permute_709, out=buf347)
    del permute_709
    buf348 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf346, (128, 128), (1, 128), 0), view_834, out=buf348)
    del view_834
    buf350 = reinterpret_tensor(buf347, (1, 128, 512), (65536, 512, 1), 0); del buf347  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_71(c_void_p(buf350.data_ptr()), c_void_p(le_14.data_ptr()))
    del le_14
    buf351 = buf341; del buf341  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf350, (128, 512), (512, 1), 0), permute_713, out=buf351)
    del permute_713
    buf356 = buf50; del buf50  # reuse
    cpp_fused_add_mul_72(c_void_p(buf346.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(primals_331.data_ptr()), c_void_p(buf356.data_ptr()))
    del primals_331
    buf357 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf356, (128, 128), (128, 1), 0), permute_717, out=buf357)
    del permute_717
    buf360 = reinterpret_tensor(buf357, (1, 128, 512), (65536, 512, 1), 0); del buf357  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_73(c_void_p(buf360.data_ptr()), c_void_p(le_15.data_ptr()))
    del le_15
    buf361 = buf331; del buf331  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf360, (128, 512), (512, 1), 0), permute_721, out=buf361)
    del permute_721
    buf349 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf354 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf355 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf359 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf364 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf365 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_74(c_void_p(buf346.data_ptr()), c_void_p(buf351.data_ptr()), c_void_p(addmm_310.data_ptr()), c_void_p(buf49.data_ptr()), c_void_p(primals_329.data_ptr()), c_void_p(primals_330.data_ptr()), c_void_p(buf356.data_ptr()), c_void_p(buf361.data_ptr()), c_void_p(buf349.data_ptr()), c_void_p(buf354.data_ptr()), c_void_p(buf355.data_ptr()), c_void_p(buf359.data_ptr()), c_void_p(buf364.data_ptr()), c_void_p(buf365.data_ptr()))
    del addmm_310
    del primals_330
    buf352 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf350, (512, 128), (1, 512), 0), view_832, out=buf352)
    del view_832
    buf353 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_75(c_void_p(buf350.data_ptr()), c_void_p(buf353.data_ptr()))
    buf358 = reinterpret_tensor(buf350, (128, 512), (512, 1), 0); del buf350  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf356, (128, 128), (1, 128), 0), view_830, out=buf358)
    del view_830
    buf362 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf360, (512, 128), (1, 512), 0), view_828, out=buf362)
    del view_828
    buf363 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf366 = buf356; del buf356  # reuse
    cpp_fused_add_mul_sum_76(c_void_p(buf366.data_ptr()), c_void_p(buf360.data_ptr()), c_void_p(buf361.data_ptr()), c_void_p(primals_329.data_ptr()), c_void_p(buf363.data_ptr()))
    del primals_329
    buf367 = reinterpret_tensor(buf360, (128, 512), (512, 1), 0); del buf360  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf366, (128, 128), (128, 1), 0), permute_725, out=buf367)
    del permute_725
    buf368 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf366, (128, 128), (1, 128), 0), view_826, out=buf368)
    del view_826
    buf370 = reinterpret_tensor(buf367, (1, 128, 512), (65536, 512, 1), 0); del buf367  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_77(c_void_p(buf370.data_ptr()), c_void_p(le_16.data_ptr()))
    del le_16
    buf371 = buf361; del buf361  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf370, (128, 512), (512, 1), 0), permute_729, out=buf371)
    del permute_729
    buf376 = buf49; del buf49  # reuse
    buf406 = reinterpret_tensor(buf351, (1, 128, 128), (16384, 128, 1), 0); del buf351  # reuse
    buf369 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf374 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf375 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf379 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf404 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf405 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_78(c_void_p(buf366.data_ptr()), c_void_p(buf371.data_ptr()), c_void_p(primals_327.data_ptr()), c_void_p(primals_323.data_ptr()), c_void_p(addmm_306.data_ptr()), c_void_p(addmm_301.data_ptr()), c_void_p(primals_324.data_ptr()), c_void_p(buf376.data_ptr()), c_void_p(buf406.data_ptr()), c_void_p(buf369.data_ptr()), c_void_p(buf374.data_ptr()), c_void_p(buf375.data_ptr()), c_void_p(buf379.data_ptr()), c_void_p(buf404.data_ptr()), c_void_p(buf405.data_ptr()))
    del addmm_301
    del addmm_306
    del primals_323
    del primals_324
    del primals_327
    buf372 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf370, (512, 128), (1, 512), 0), view_824, out=buf372)
    del view_824
    buf373 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_79(c_void_p(buf370.data_ptr()), c_void_p(buf373.data_ptr()))
    buf377 = buf371; del buf371  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf376, (128, 128), (128, 1), 0), permute_733, out=buf377)
    del permute_733
    buf378 = reinterpret_tensor(buf366, (128, 128), (128, 1), 0); del buf366  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf376, (128, 128), (1, 128), 0), view_822, out=buf378)
    del view_822
    buf380 = reinterpret_tensor(buf376, (4, 128, 32), (4096, 32, 1), 0); del buf376  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_19, reinterpret_tensor(buf377, (4, 128, 32), (32, 128, 1), 0), out=buf380)
    del permute_default_19
    buf381 = reinterpret_tensor(buf370, (4, 128, 128), (16384, 128, 1), 0); del buf370  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf377, (4, 128, 32), (32, 128, 1), 0), permute_default_20, out=buf381)
    del permute_default_20
    buf382 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf383 = reinterpret_tensor(buf381, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf381  # reuse
    cpp_fused_80(c_void_p(buf383.data_ptr()), c_void_p(getitem_57.data_ptr()), c_void_p(alias_default_7.data_ptr()), c_void_p(buf382.data_ptr()))
    del alias_default_7
    del getitem_57
    buf384 = reinterpret_tensor(buf377, (4, 32, 128), (4096, 128, 1), 0); del buf377  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_21, reinterpret_tensor(buf383, (4, 128, 128), (16384, 128, 1), 0), out=buf384)
    del permute_default_21
    buf385 = reinterpret_tensor(buf346, (4, 128, 32), (4096, 32, 1), 0); del buf346  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf383, (4, 128, 128), (16384, 128, 1), 0), permute_default_22, out=buf385)
    del permute_default_22
    buf386 = buf312; del buf312  # reuse
    cpp_fused_view_81(c_void_p(buf380.data_ptr()), c_void_p(buf386.data_ptr()))
    buf387 = reinterpret_tensor(buf383, (128, 512), (512, 1), 0); del buf383  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf386, permute_746, out=buf387)
    del permute_746
    buf388 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf386, (128, 128), (1, 128), 0), view_802, out=buf388)
    buf389 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf390 = reinterpret_tensor(buf384, (128, 128), (1, 128), 0); del buf384  # reuse
    cpp_fused_sum_view_82(c_void_p(buf390.data_ptr()), c_void_p(buf386.data_ptr()), c_void_p(buf389.data_ptr()))
    buf391 = buf386; del buf386  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf390, permute_750, out=buf391)
    del permute_750
    buf392 = reinterpret_tensor(buf380, (128, 128), (128, 1), 0); del buf380  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf390, (128, 128), (128, 1), 0), view_806, out=buf392)
    buf393 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf394 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_83(c_void_p(buf390.data_ptr()), c_void_p(buf385.data_ptr()), c_void_p(buf393.data_ptr()), c_void_p(buf394.data_ptr()))
    buf395 = reinterpret_tensor(buf390, (128, 128), (128, 1), 0); del buf390  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf394, permute_754, out=buf395)
    del permute_754
    buf396 = reinterpret_tensor(buf385, (128, 128), (128, 1), 0); del buf385  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf394, (128, 128), (1, 128), 0), view_806, out=buf396)
    del view_806
    buf397 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf398 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf399 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf400 = reinterpret_tensor(buf391, (1, 128, 128), (16384, 128, 1), 0); del buf391  # reuse
    cpp_fused_add_mul_sum_84(c_void_p(buf400.data_ptr()), c_void_p(buf394.data_ptr()), c_void_p(buf395.data_ptr()), c_void_p(addmm_302.data_ptr()), c_void_p(primals_325.data_ptr()), c_void_p(buf397.data_ptr()), c_void_p(buf398.data_ptr()), c_void_p(buf399.data_ptr()))
    del addmm_302
    del primals_325
    buf401 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf400, (128, 128), (128, 1), 0), permute_758, out=buf401)
    del permute_758
    buf402 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf400, (128, 128), (1, 128), 0), view_802, out=buf402)
    buf403 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_85(c_void_p(buf400.data_ptr()), c_void_p(buf403.data_ptr()))
    buf407 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf406, (128, 128), (128, 1), 0), permute_762, out=buf407)
    del permute_762
    buf408 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf406, (128, 128), (1, 128), 0), view_802, out=buf408)
    del view_802
    buf409 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf410 = reinterpret_tensor(buf382, (1, 1, 512), (512, 512, 1), 0); del buf382  # reuse
    buf412 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf411 = buf329; del buf329  # reuse
    cpp_fused_add_mul_sum_86(c_void_p(buf411.data_ptr()), c_void_p(buf406.data_ptr()), c_void_p(buf387.data_ptr()), c_void_p(buf401.data_ptr()), c_void_p(buf407.data_ptr()), c_void_p(addmm_300.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(primals_305.data_ptr()), c_void_p(primals_306.data_ptr()), c_void_p(primals_321.data_ptr()), c_void_p(buf409.data_ptr()), c_void_p(buf410.data_ptr()), c_void_p(buf412.data_ptr()))
    del addmm_300
    del primals_306
    del primals_321
    buf413 = reinterpret_tensor(buf406, (128, 128), (128, 1), 0); del buf406  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf411, (128, 512), (512, 1), 0), permute_766, out=buf413)
    del permute_766
    buf414 = reinterpret_tensor(buf407, (512, 128), (128, 1), 0); del buf407  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf411, (512, 128), (1, 512), 0), view_800, out=buf414)
    del view_800
    buf415 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf418 = buf400; del buf400  # reuse
    cpp_fused_mul_sum_87(c_void_p(buf411.data_ptr()), c_void_p(buf413.data_ptr()), c_void_p(primals_319.data_ptr()), c_void_p(buf415.data_ptr()), c_void_p(buf418.data_ptr()))
    del primals_319
    buf419 = buf401; del buf401  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf418, (128, 128), (128, 1), 0), permute_770, out=buf419)
    del permute_770
    buf422 = reinterpret_tensor(buf419, (1, 128, 512), (65536, 512, 1), 0); del buf419  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_88(c_void_p(buf422.data_ptr()), c_void_p(le_17.data_ptr()))
    del le_17
    buf423 = buf395; del buf395  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf422, (128, 512), (512, 1), 0), permute_774, out=buf423)
    del permute_774
    buf416 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf417 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf421 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf426 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf427 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_89(c_void_p(buf413.data_ptr()), c_void_p(addmm_299.data_ptr()), c_void_p(buf48.data_ptr()), c_void_p(primals_317.data_ptr()), c_void_p(primals_318.data_ptr()), c_void_p(buf418.data_ptr()), c_void_p(buf423.data_ptr()), c_void_p(buf416.data_ptr()), c_void_p(buf417.data_ptr()), c_void_p(buf421.data_ptr()), c_void_p(buf426.data_ptr()), c_void_p(buf427.data_ptr()))
    del addmm_299
    del primals_318
    buf420 = buf387; del buf387  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf418, (128, 128), (1, 128), 0), view_798, out=buf420)
    del view_798
    buf424 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf422, (512, 128), (1, 512), 0), view_796, out=buf424)
    del view_796
    buf425 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf428 = buf418; del buf418  # reuse
    cpp_fused_add_mul_sum_90(c_void_p(buf428.data_ptr()), c_void_p(buf422.data_ptr()), c_void_p(buf423.data_ptr()), c_void_p(primals_317.data_ptr()), c_void_p(buf425.data_ptr()))
    del primals_317
    buf429 = reinterpret_tensor(buf422, (128, 512), (512, 1), 0); del buf422  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf428, (128, 128), (128, 1), 0), permute_778, out=buf429)
    del permute_778
    buf430 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf428, (128, 128), (1, 128), 0), view_794, out=buf430)
    del view_794
    buf432 = reinterpret_tensor(buf429, (1, 128, 512), (65536, 512, 1), 0); del buf429  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_91(c_void_p(buf432.data_ptr()), c_void_p(le_18.data_ptr()))
    del le_18
    buf433 = buf423; del buf423  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf432, (128, 512), (512, 1), 0), permute_782, out=buf433)
    del permute_782
    buf438 = buf48; del buf48  # reuse
    cpp_fused_add_mul_92(c_void_p(buf428.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(primals_315.data_ptr()), c_void_p(buf438.data_ptr()))
    del primals_315
    buf439 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf438, (128, 128), (128, 1), 0), permute_786, out=buf439)
    del permute_786
    buf442 = reinterpret_tensor(buf439, (1, 128, 512), (65536, 512, 1), 0); del buf439  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_93(c_void_p(buf442.data_ptr()), c_void_p(le_19.data_ptr()))
    del le_19
    buf443 = buf413; del buf413  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf442, (128, 512), (512, 1), 0), permute_790, out=buf443)
    del permute_790
    buf431 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf436 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf437 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf441 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf446 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf447 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_94(c_void_p(buf428.data_ptr()), c_void_p(buf433.data_ptr()), c_void_p(addmm_295.data_ptr()), c_void_p(buf47.data_ptr()), c_void_p(primals_313.data_ptr()), c_void_p(primals_314.data_ptr()), c_void_p(buf438.data_ptr()), c_void_p(buf443.data_ptr()), c_void_p(buf431.data_ptr()), c_void_p(buf436.data_ptr()), c_void_p(buf437.data_ptr()), c_void_p(buf441.data_ptr()), c_void_p(buf446.data_ptr()), c_void_p(buf447.data_ptr()))
    del addmm_295
    del primals_314
    buf434 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf432, (512, 128), (1, 512), 0), view_792, out=buf434)
    del view_792
    buf435 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_95(c_void_p(buf432.data_ptr()), c_void_p(buf435.data_ptr()))
    buf440 = reinterpret_tensor(buf432, (128, 512), (512, 1), 0); del buf432  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf438, (128, 128), (1, 128), 0), view_790, out=buf440)
    del view_790
    buf444 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf442, (512, 128), (1, 512), 0), view_788, out=buf444)
    del view_788
    buf445 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf448 = buf438; del buf438  # reuse
    cpp_fused_add_mul_sum_96(c_void_p(buf448.data_ptr()), c_void_p(buf442.data_ptr()), c_void_p(buf443.data_ptr()), c_void_p(primals_313.data_ptr()), c_void_p(buf445.data_ptr()))
    del primals_313
    buf449 = reinterpret_tensor(buf442, (128, 512), (512, 1), 0); del buf442  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf448, (128, 128), (128, 1), 0), permute_794, out=buf449)
    del permute_794
    buf450 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf448, (128, 128), (1, 128), 0), view_786, out=buf450)
    del view_786
    buf452 = reinterpret_tensor(buf449, (1, 128, 512), (65536, 512, 1), 0); del buf449  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_97(c_void_p(buf452.data_ptr()), c_void_p(le_20.data_ptr()))
    del le_20
    buf453 = buf443; del buf443  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf452, (128, 512), (512, 1), 0), permute_798, out=buf453)
    del permute_798
    buf458 = buf47; del buf47  # reuse
    buf488 = reinterpret_tensor(buf433, (1, 128, 128), (16384, 128, 1), 0); del buf433  # reuse
    buf451 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf456 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf457 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf461 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf486 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf487 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_98(c_void_p(buf448.data_ptr()), c_void_p(buf453.data_ptr()), c_void_p(primals_311.data_ptr()), c_void_p(primals_307.data_ptr()), c_void_p(addmm_291.data_ptr()), c_void_p(addmm_286.data_ptr()), c_void_p(primals_308.data_ptr()), c_void_p(buf458.data_ptr()), c_void_p(buf488.data_ptr()), c_void_p(buf451.data_ptr()), c_void_p(buf456.data_ptr()), c_void_p(buf457.data_ptr()), c_void_p(buf461.data_ptr()), c_void_p(buf486.data_ptr()), c_void_p(buf487.data_ptr()))
    del addmm_286
    del addmm_291
    del primals_307
    del primals_308
    del primals_311
    buf454 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf452, (512, 128), (1, 512), 0), view_784, out=buf454)
    del view_784
    buf455 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_99(c_void_p(buf452.data_ptr()), c_void_p(buf455.data_ptr()))
    buf459 = buf453; del buf453  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf458, (128, 128), (128, 1), 0), permute_802, out=buf459)
    del permute_802
    buf460 = reinterpret_tensor(buf448, (128, 128), (128, 1), 0); del buf448  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf458, (128, 128), (1, 128), 0), view_782, out=buf460)
    del view_782
    buf462 = reinterpret_tensor(buf458, (4, 128, 32), (4096, 32, 1), 0); del buf458  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_25, reinterpret_tensor(buf459, (4, 128, 32), (32, 128, 1), 0), out=buf462)
    del permute_default_25
    buf463 = reinterpret_tensor(buf452, (4, 128, 128), (16384, 128, 1), 0); del buf452  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf459, (4, 128, 32), (32, 128, 1), 0), permute_default_26, out=buf463)
    del permute_default_26
    buf464 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf465 = reinterpret_tensor(buf463, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf463  # reuse
    cpp_fused_100(c_void_p(buf465.data_ptr()), c_void_p(getitem_59.data_ptr()), c_void_p(alias_default_9.data_ptr()), c_void_p(buf464.data_ptr()))
    del alias_default_9
    del getitem_59
    buf466 = reinterpret_tensor(buf459, (4, 32, 128), (4096, 128, 1), 0); del buf459  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_27, reinterpret_tensor(buf465, (4, 128, 128), (16384, 128, 1), 0), out=buf466)
    del permute_default_27
    buf467 = reinterpret_tensor(buf428, (4, 128, 32), (4096, 32, 1), 0); del buf428  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf465, (4, 128, 128), (16384, 128, 1), 0), permute_default_28, out=buf467)
    del permute_default_28
    buf468 = buf394; del buf394  # reuse
    cpp_fused_view_101(c_void_p(buf462.data_ptr()), c_void_p(buf468.data_ptr()))
    buf469 = reinterpret_tensor(buf465, (128, 512), (512, 1), 0); del buf465  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf468, permute_815, out=buf469)
    del permute_815
    buf470 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf468, (128, 128), (1, 128), 0), view_762, out=buf470)
    buf471 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf472 = reinterpret_tensor(buf466, (128, 128), (1, 128), 0); del buf466  # reuse
    cpp_fused_sum_view_102(c_void_p(buf472.data_ptr()), c_void_p(buf468.data_ptr()), c_void_p(buf471.data_ptr()))
    buf473 = buf468; del buf468  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf472, permute_819, out=buf473)
    del permute_819
    buf474 = reinterpret_tensor(buf462, (128, 128), (128, 1), 0); del buf462  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf472, (128, 128), (128, 1), 0), view_766, out=buf474)
    buf475 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf476 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_103(c_void_p(buf472.data_ptr()), c_void_p(buf467.data_ptr()), c_void_p(buf475.data_ptr()), c_void_p(buf476.data_ptr()))
    buf477 = reinterpret_tensor(buf472, (128, 128), (128, 1), 0); del buf472  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf476, permute_823, out=buf477)
    del permute_823
    buf478 = reinterpret_tensor(buf467, (128, 128), (128, 1), 0); del buf467  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf476, (128, 128), (1, 128), 0), view_766, out=buf478)
    del view_766
    buf479 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf480 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf481 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf482 = reinterpret_tensor(buf473, (1, 128, 128), (16384, 128, 1), 0); del buf473  # reuse
    cpp_fused_add_mul_sum_104(c_void_p(buf482.data_ptr()), c_void_p(buf476.data_ptr()), c_void_p(buf477.data_ptr()), c_void_p(addmm_287.data_ptr()), c_void_p(primals_309.data_ptr()), c_void_p(buf479.data_ptr()), c_void_p(buf480.data_ptr()), c_void_p(buf481.data_ptr()))
    del addmm_287
    del primals_309
    buf483 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf482, (128, 128), (128, 1), 0), permute_827, out=buf483)
    del permute_827
    buf484 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf482, (128, 128), (1, 128), 0), view_762, out=buf484)
    buf485 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_105(c_void_p(buf482.data_ptr()), c_void_p(buf485.data_ptr()))
    buf489 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf488, (128, 128), (128, 1), 0), permute_831, out=buf489)
    del permute_831
    buf490 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf488, (128, 128), (1, 128), 0), view_762, out=buf490)
    del view_762
    buf491 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf492 = reinterpret_tensor(buf464, (1, 1, 512), (512, 512, 1), 0); del buf464  # reuse
    buf494 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf493 = buf411; del buf411  # reuse
    cpp_fused_add_mul_sum_106(c_void_p(buf493.data_ptr()), c_void_p(buf488.data_ptr()), c_void_p(buf469.data_ptr()), c_void_p(buf483.data_ptr()), c_void_p(buf489.data_ptr()), c_void_p(buf46.data_ptr()), c_void_p(primals_305.data_ptr()), c_void_p(buf491.data_ptr()), c_void_p(buf492.data_ptr()), c_void_p(buf494.data_ptr()))
    del primals_305
    buf495 = reinterpret_tensor(buf488, (128, 128), (128, 1), 0); del buf488  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf493, (128, 512), (512, 1), 0), permute_835, out=buf495)
    del permute_835
    buf496 = reinterpret_tensor(buf489, (512, 128), (128, 1), 0); del buf489  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf493, (512, 128), (1, 512), 0), view_760, out=buf496)
    del view_760
    buf497 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf500 = buf482; del buf482  # reuse
    cpp_fused_mul_sum_107(c_void_p(buf493.data_ptr()), c_void_p(buf495.data_ptr()), c_void_p(primals_303.data_ptr()), c_void_p(buf497.data_ptr()), c_void_p(buf500.data_ptr()))
    del primals_303
    buf501 = buf483; del buf483  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf500, (128, 128), (128, 1), 0), permute_839, out=buf501)
    del permute_839
    buf504 = reinterpret_tensor(buf501, (1, 128, 512), (65536, 512, 1), 0); del buf501  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_108(c_void_p(buf504.data_ptr()), c_void_p(le_21.data_ptr()))
    del le_21
    buf505 = buf477; del buf477  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf504, (128, 512), (512, 1), 0), permute_843, out=buf505)
    del permute_843
    buf498 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf499 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf503 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf508 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf509 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_109(c_void_p(buf495.data_ptr()), c_void_p(addmm_284.data_ptr()), c_void_p(buf45.data_ptr()), c_void_p(primals_301.data_ptr()), c_void_p(primals_302.data_ptr()), c_void_p(buf500.data_ptr()), c_void_p(buf505.data_ptr()), c_void_p(buf498.data_ptr()), c_void_p(buf499.data_ptr()), c_void_p(buf503.data_ptr()), c_void_p(buf508.data_ptr()), c_void_p(buf509.data_ptr()))
    del addmm_284
    del primals_302
    buf502 = buf469; del buf469  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf500, (128, 128), (1, 128), 0), view_758, out=buf502)
    del view_758
    buf506 = reinterpret_tensor(buf46, (512, 128), (128, 1), 0); del buf46  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf504, (512, 128), (1, 512), 0), view_756, out=buf506)
    del view_756
    buf507 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf510 = buf500; del buf500  # reuse
    cpp_fused_add_mul_sum_110(c_void_p(buf510.data_ptr()), c_void_p(buf504.data_ptr()), c_void_p(buf505.data_ptr()), c_void_p(primals_301.data_ptr()), c_void_p(buf507.data_ptr()))
    del primals_301
    buf511 = reinterpret_tensor(buf504, (128, 512), (512, 1), 0); del buf504  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf510, (128, 128), (128, 1), 0), permute_847, out=buf511)
    del permute_847
    buf512 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf510, (128, 128), (1, 128), 0), view_754, out=buf512)
    del view_754
    buf514 = reinterpret_tensor(buf511, (1, 128, 512), (65536, 512, 1), 0); del buf511  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_111(c_void_p(buf514.data_ptr()), c_void_p(le_22.data_ptr()))
    del le_22
    buf515 = buf505; del buf505  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf514, (128, 512), (512, 1), 0), permute_851, out=buf515)
    del permute_851
    buf520 = reinterpret_tensor(buf495, (1, 128, 128), (16384, 128, 1), 0); del buf495  # reuse
    cpp_fused_add_mul_112(c_void_p(buf510.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(primals_299.data_ptr()), c_void_p(buf520.data_ptr()))
    del primals_299
    buf521 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf520, (128, 128), (128, 1), 0), permute_855, out=buf521)
    del permute_855
    buf524 = reinterpret_tensor(buf521, (1, 128, 512), (65536, 512, 1), 0); del buf521  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_113(c_void_p(buf524.data_ptr()), c_void_p(le_23.data_ptr()))
    del le_23
    buf525 = reinterpret_tensor(buf45, (128, 128), (128, 1), 0); del buf45  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf524, (128, 512), (512, 1), 0), permute_859, out=buf525)
    del permute_859
    buf513 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf518 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf519 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf523 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf528 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf529 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_114(c_void_p(buf510.data_ptr()), c_void_p(buf515.data_ptr()), c_void_p(addmm_280.data_ptr()), c_void_p(buf44.data_ptr()), c_void_p(primals_297.data_ptr()), c_void_p(primals_298.data_ptr()), c_void_p(buf520.data_ptr()), c_void_p(buf525.data_ptr()), c_void_p(buf513.data_ptr()), c_void_p(buf518.data_ptr()), c_void_p(buf519.data_ptr()), c_void_p(buf523.data_ptr()), c_void_p(buf528.data_ptr()), c_void_p(buf529.data_ptr()))
    del addmm_280
    del primals_298
    buf516 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf514, (512, 128), (1, 512), 0), view_752, out=buf516)
    del view_752
    buf517 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_115(c_void_p(buf514.data_ptr()), c_void_p(buf517.data_ptr()))
    buf522 = reinterpret_tensor(buf514, (128, 512), (512, 1), 0); del buf514  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf520, (128, 128), (1, 128), 0), view_750, out=buf522)
    del view_750
    buf526 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf524, (512, 128), (1, 512), 0), view_748, out=buf526)
    del view_748
    buf527 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf530 = buf520; del buf520  # reuse
    cpp_fused_add_mul_sum_116(c_void_p(buf530.data_ptr()), c_void_p(buf524.data_ptr()), c_void_p(buf525.data_ptr()), c_void_p(primals_297.data_ptr()), c_void_p(buf527.data_ptr()))
    del primals_297
    buf531 = reinterpret_tensor(buf524, (128, 512), (512, 1), 0); del buf524  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf530, (128, 128), (128, 1), 0), permute_863, out=buf531)
    del permute_863
    buf532 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf530, (128, 128), (1, 128), 0), view_746, out=buf532)
    del view_746
    buf534 = reinterpret_tensor(buf531, (1, 128, 512), (65536, 512, 1), 0); del buf531  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_117(c_void_p(buf534.data_ptr()), c_void_p(le_24.data_ptr()))
    del le_24
    buf535 = buf525; del buf525  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf534, (128, 512), (512, 1), 0), permute_867, out=buf535)
    del permute_867
    buf540 = reinterpret_tensor(buf515, (1, 128, 128), (16384, 128, 1), 0); del buf515  # reuse
    buf570 = buf510; del buf510  # reuse
    buf533 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf538 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf539 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf543 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf568 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf569 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_118(c_void_p(buf530.data_ptr()), c_void_p(buf535.data_ptr()), c_void_p(primals_295.data_ptr()), c_void_p(primals_291.data_ptr()), c_void_p(addmm_276.data_ptr()), c_void_p(addmm_271.data_ptr()), c_void_p(primals_292.data_ptr()), c_void_p(buf540.data_ptr()), c_void_p(buf570.data_ptr()), c_void_p(buf533.data_ptr()), c_void_p(buf538.data_ptr()), c_void_p(buf539.data_ptr()), c_void_p(buf543.data_ptr()), c_void_p(buf568.data_ptr()), c_void_p(buf569.data_ptr()))
    del addmm_271
    del addmm_276
    del primals_291
    del primals_292
    del primals_295
    buf536 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf534, (512, 128), (1, 512), 0), view_744, out=buf536)
    del view_744
    buf537 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_119(c_void_p(buf534.data_ptr()), c_void_p(buf537.data_ptr()))
    buf541 = buf535; del buf535  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf540, (128, 128), (128, 1), 0), permute_871, out=buf541)
    del permute_871
    buf542 = reinterpret_tensor(buf530, (128, 128), (128, 1), 0); del buf530  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf540, (128, 128), (1, 128), 0), view_742, out=buf542)
    del view_742
    buf544 = reinterpret_tensor(buf540, (4, 128, 32), (4096, 32, 1), 0); del buf540  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_31, reinterpret_tensor(buf541, (4, 128, 32), (32, 128, 1), 0), out=buf544)
    del permute_default_31
    buf545 = reinterpret_tensor(buf534, (4, 128, 128), (16384, 128, 1), 0); del buf534  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf541, (4, 128, 32), (32, 128, 1), 0), permute_default_32, out=buf545)
    del permute_default_32
    buf546 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf547 = reinterpret_tensor(buf545, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf545  # reuse
    cpp_fused_120(c_void_p(buf547.data_ptr()), c_void_p(getitem_61.data_ptr()), c_void_p(alias_default_11.data_ptr()), c_void_p(buf546.data_ptr()))
    del alias_default_11
    del getitem_61
    buf548 = reinterpret_tensor(buf541, (4, 32, 128), (4096, 128, 1), 0); del buf541  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_33, reinterpret_tensor(buf547, (4, 128, 128), (16384, 128, 1), 0), out=buf548)
    del permute_default_33
    buf549 = reinterpret_tensor(buf44, (4, 128, 32), (4096, 32, 1), 0); del buf44  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf547, (4, 128, 128), (16384, 128, 1), 0), permute_default_34, out=buf549)
    del permute_default_34
    buf550 = buf476; del buf476  # reuse
    cpp_fused_view_121(c_void_p(buf544.data_ptr()), c_void_p(buf550.data_ptr()))
    buf551 = reinterpret_tensor(buf547, (128, 512), (512, 1), 0); del buf547  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf550, permute_884, out=buf551)
    del permute_884
    buf552 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf550, (128, 128), (1, 128), 0), view_722, out=buf552)
    buf553 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf554 = reinterpret_tensor(buf548, (128, 128), (1, 128), 0); del buf548  # reuse
    cpp_fused_sum_view_122(c_void_p(buf554.data_ptr()), c_void_p(buf550.data_ptr()), c_void_p(buf553.data_ptr()))
    buf555 = buf550; del buf550  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf554, permute_888, out=buf555)
    del permute_888
    buf556 = reinterpret_tensor(buf544, (128, 128), (128, 1), 0); del buf544  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf554, (128, 128), (128, 1), 0), view_726, out=buf556)
    buf557 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf558 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_123(c_void_p(buf554.data_ptr()), c_void_p(buf549.data_ptr()), c_void_p(buf557.data_ptr()), c_void_p(buf558.data_ptr()))
    buf559 = reinterpret_tensor(buf554, (128, 128), (128, 1), 0); del buf554  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf558, permute_892, out=buf559)
    del permute_892
    buf560 = reinterpret_tensor(buf549, (128, 128), (128, 1), 0); del buf549  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf558, (128, 128), (1, 128), 0), view_726, out=buf560)
    del view_726
    buf561 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf562 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf563 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf564 = reinterpret_tensor(buf555, (1, 128, 128), (16384, 128, 1), 0); del buf555  # reuse
    cpp_fused_add_mul_sum_124(c_void_p(buf564.data_ptr()), c_void_p(buf558.data_ptr()), c_void_p(buf559.data_ptr()), c_void_p(addmm_272.data_ptr()), c_void_p(primals_293.data_ptr()), c_void_p(buf561.data_ptr()), c_void_p(buf562.data_ptr()), c_void_p(buf563.data_ptr()))
    del addmm_272
    del primals_293
    buf565 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf564, (128, 128), (128, 1), 0), permute_896, out=buf565)
    del permute_896
    buf566 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf564, (128, 128), (1, 128), 0), view_722, out=buf566)
    buf567 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_125(c_void_p(buf564.data_ptr()), c_void_p(buf567.data_ptr()))
    buf571 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf570, (128, 128), (128, 1), 0), permute_900, out=buf571)
    del permute_900
    buf572 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf570, (128, 128), (1, 128), 0), view_722, out=buf572)
    del view_722
    buf573 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf574 = reinterpret_tensor(buf546, (1, 1, 512), (512, 512, 1), 0); del buf546  # reuse
    buf576 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf575 = buf493; del buf493  # reuse
    cpp_fused_add_mul_sum_126(c_void_p(buf575.data_ptr()), c_void_p(buf570.data_ptr()), c_void_p(buf551.data_ptr()), c_void_p(buf565.data_ptr()), c_void_p(buf571.data_ptr()), c_void_p(addmm_270.data_ptr()), c_void_p(buf41.data_ptr()), c_void_p(primals_273.data_ptr()), c_void_p(primals_274.data_ptr()), c_void_p(primals_289.data_ptr()), c_void_p(buf573.data_ptr()), c_void_p(buf574.data_ptr()), c_void_p(buf576.data_ptr()))
    del addmm_270
    del primals_274
    del primals_289
    buf577 = reinterpret_tensor(buf570, (128, 128), (128, 1), 0); del buf570  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf575, (128, 512), (512, 1), 0), permute_904, out=buf577)
    del permute_904
    buf578 = reinterpret_tensor(buf571, (512, 128), (128, 1), 0); del buf571  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf575, (512, 128), (1, 512), 0), view_720, out=buf578)
    del view_720
    buf579 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf582 = buf564; del buf564  # reuse
    cpp_fused_mul_sum_127(c_void_p(buf575.data_ptr()), c_void_p(buf577.data_ptr()), c_void_p(primals_287.data_ptr()), c_void_p(buf579.data_ptr()), c_void_p(buf582.data_ptr()))
    del primals_287
    buf583 = buf565; del buf565  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf582, (128, 128), (128, 1), 0), permute_908, out=buf583)
    del permute_908
    buf586 = reinterpret_tensor(buf583, (1, 128, 512), (65536, 512, 1), 0); del buf583  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_128(c_void_p(buf586.data_ptr()), c_void_p(le_25.data_ptr()))
    del le_25
    buf587 = buf559; del buf559  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf586, (128, 512), (512, 1), 0), permute_912, out=buf587)
    del permute_912
    buf580 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf581 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf585 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf590 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf591 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_129(c_void_p(buf577.data_ptr()), c_void_p(addmm_269.data_ptr()), c_void_p(buf43.data_ptr()), c_void_p(primals_285.data_ptr()), c_void_p(primals_286.data_ptr()), c_void_p(buf582.data_ptr()), c_void_p(buf587.data_ptr()), c_void_p(buf580.data_ptr()), c_void_p(buf581.data_ptr()), c_void_p(buf585.data_ptr()), c_void_p(buf590.data_ptr()), c_void_p(buf591.data_ptr()))
    del addmm_269
    del primals_286
    buf584 = buf551; del buf551  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf582, (128, 128), (1, 128), 0), view_718, out=buf584)
    del view_718
    buf588 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf586, (512, 128), (1, 512), 0), view_716, out=buf588)
    del view_716
    buf589 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf592 = buf582; del buf582  # reuse
    cpp_fused_add_mul_sum_130(c_void_p(buf592.data_ptr()), c_void_p(buf586.data_ptr()), c_void_p(buf587.data_ptr()), c_void_p(primals_285.data_ptr()), c_void_p(buf589.data_ptr()))
    del primals_285
    buf593 = reinterpret_tensor(buf586, (128, 512), (512, 1), 0); del buf586  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf592, (128, 128), (128, 1), 0), permute_916, out=buf593)
    del permute_916
    buf594 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf592, (128, 128), (1, 128), 0), view_714, out=buf594)
    del view_714
    buf596 = reinterpret_tensor(buf593, (1, 128, 512), (65536, 512, 1), 0); del buf593  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_131(c_void_p(buf596.data_ptr()), c_void_p(le_26.data_ptr()))
    del le_26
    buf597 = buf587; del buf587  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf596, (128, 512), (512, 1), 0), permute_920, out=buf597)
    del permute_920
    buf602 = reinterpret_tensor(buf577, (1, 128, 128), (16384, 128, 1), 0); del buf577  # reuse
    cpp_fused_add_mul_132(c_void_p(buf592.data_ptr()), c_void_p(buf597.data_ptr()), c_void_p(primals_283.data_ptr()), c_void_p(buf602.data_ptr()))
    del primals_283
    buf603 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf602, (128, 128), (128, 1), 0), permute_924, out=buf603)
    del permute_924
    buf606 = reinterpret_tensor(buf603, (1, 128, 512), (65536, 512, 1), 0); del buf603  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_133(c_void_p(buf606.data_ptr()), c_void_p(le_27.data_ptr()))
    del le_27
    buf607 = reinterpret_tensor(buf43, (128, 128), (128, 1), 0); del buf43  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf606, (128, 512), (512, 1), 0), permute_928, out=buf607)
    del permute_928
    buf595 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf600 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf601 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf605 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf610 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf611 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_134(c_void_p(buf592.data_ptr()), c_void_p(buf597.data_ptr()), c_void_p(addmm_265.data_ptr()), c_void_p(buf42.data_ptr()), c_void_p(primals_281.data_ptr()), c_void_p(primals_282.data_ptr()), c_void_p(buf602.data_ptr()), c_void_p(buf607.data_ptr()), c_void_p(buf595.data_ptr()), c_void_p(buf600.data_ptr()), c_void_p(buf601.data_ptr()), c_void_p(buf605.data_ptr()), c_void_p(buf610.data_ptr()), c_void_p(buf611.data_ptr()))
    del addmm_265
    del primals_282
    buf598 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf596, (512, 128), (1, 512), 0), view_712, out=buf598)
    del view_712
    buf599 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_135(c_void_p(buf596.data_ptr()), c_void_p(buf599.data_ptr()))
    buf604 = reinterpret_tensor(buf596, (128, 512), (512, 1), 0); del buf596  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf602, (128, 128), (1, 128), 0), view_710, out=buf604)
    del view_710
    buf608 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf606, (512, 128), (1, 512), 0), view_708, out=buf608)
    del view_708
    buf609 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf612 = buf602; del buf602  # reuse
    cpp_fused_add_mul_sum_136(c_void_p(buf612.data_ptr()), c_void_p(buf606.data_ptr()), c_void_p(buf607.data_ptr()), c_void_p(primals_281.data_ptr()), c_void_p(buf609.data_ptr()))
    del primals_281
    buf613 = reinterpret_tensor(buf606, (128, 512), (512, 1), 0); del buf606  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf612, (128, 128), (128, 1), 0), permute_932, out=buf613)
    del permute_932
    buf614 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf612, (128, 128), (1, 128), 0), view_706, out=buf614)
    del view_706
    buf616 = reinterpret_tensor(buf613, (1, 128, 512), (65536, 512, 1), 0); del buf613  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_137(c_void_p(buf616.data_ptr()), c_void_p(le_28.data_ptr()))
    del le_28
    buf617 = buf607; del buf607  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf616, (128, 512), (512, 1), 0), permute_936, out=buf617)
    del permute_936
    buf622 = reinterpret_tensor(buf597, (1, 128, 128), (16384, 128, 1), 0); del buf597  # reuse
    buf652 = buf592; del buf592  # reuse
    buf615 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf620 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf621 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf625 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf650 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf651 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_138(c_void_p(buf612.data_ptr()), c_void_p(buf617.data_ptr()), c_void_p(primals_279.data_ptr()), c_void_p(primals_275.data_ptr()), c_void_p(addmm_261.data_ptr()), c_void_p(addmm_256.data_ptr()), c_void_p(primals_276.data_ptr()), c_void_p(buf622.data_ptr()), c_void_p(buf652.data_ptr()), c_void_p(buf615.data_ptr()), c_void_p(buf620.data_ptr()), c_void_p(buf621.data_ptr()), c_void_p(buf625.data_ptr()), c_void_p(buf650.data_ptr()), c_void_p(buf651.data_ptr()))
    del addmm_256
    del addmm_261
    del primals_275
    del primals_276
    del primals_279
    buf618 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf616, (512, 128), (1, 512), 0), view_704, out=buf618)
    del view_704
    buf619 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_139(c_void_p(buf616.data_ptr()), c_void_p(buf619.data_ptr()))
    buf623 = buf617; del buf617  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf622, (128, 128), (128, 1), 0), permute_940, out=buf623)
    del permute_940
    buf624 = reinterpret_tensor(buf612, (128, 128), (128, 1), 0); del buf612  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf622, (128, 128), (1, 128), 0), view_702, out=buf624)
    del view_702
    buf626 = reinterpret_tensor(buf622, (4, 128, 32), (4096, 32, 1), 0); del buf622  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_37, reinterpret_tensor(buf623, (4, 128, 32), (32, 128, 1), 0), out=buf626)
    del permute_default_37
    buf627 = reinterpret_tensor(buf616, (4, 128, 128), (16384, 128, 1), 0); del buf616  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf623, (4, 128, 32), (32, 128, 1), 0), permute_default_38, out=buf627)
    del permute_default_38
    buf628 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf629 = reinterpret_tensor(buf627, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf627  # reuse
    cpp_fused_140(c_void_p(buf629.data_ptr()), c_void_p(getitem_63.data_ptr()), c_void_p(alias_default_13.data_ptr()), c_void_p(buf628.data_ptr()))
    del alias_default_13
    del getitem_63
    buf630 = reinterpret_tensor(buf623, (4, 32, 128), (4096, 128, 1), 0); del buf623  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_39, reinterpret_tensor(buf629, (4, 128, 128), (16384, 128, 1), 0), out=buf630)
    del permute_default_39
    buf631 = reinterpret_tensor(buf42, (4, 128, 32), (4096, 32, 1), 0); del buf42  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf629, (4, 128, 128), (16384, 128, 1), 0), permute_default_40, out=buf631)
    del permute_default_40
    buf632 = buf558; del buf558  # reuse
    cpp_fused_view_141(c_void_p(buf626.data_ptr()), c_void_p(buf632.data_ptr()))
    buf633 = reinterpret_tensor(buf629, (128, 512), (512, 1), 0); del buf629  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf632, permute_953, out=buf633)
    del permute_953
    buf634 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf632, (128, 128), (1, 128), 0), view_682, out=buf634)
    buf635 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf636 = reinterpret_tensor(buf630, (128, 128), (1, 128), 0); del buf630  # reuse
    cpp_fused_sum_view_142(c_void_p(buf636.data_ptr()), c_void_p(buf632.data_ptr()), c_void_p(buf635.data_ptr()))
    buf637 = buf632; del buf632  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf636, permute_957, out=buf637)
    del permute_957
    buf638 = reinterpret_tensor(buf626, (128, 128), (128, 1), 0); del buf626  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf636, (128, 128), (128, 1), 0), view_686, out=buf638)
    buf639 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf640 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_143(c_void_p(buf636.data_ptr()), c_void_p(buf631.data_ptr()), c_void_p(buf639.data_ptr()), c_void_p(buf640.data_ptr()))
    buf641 = reinterpret_tensor(buf636, (128, 128), (128, 1), 0); del buf636  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf640, permute_961, out=buf641)
    del permute_961
    buf642 = reinterpret_tensor(buf631, (128, 128), (128, 1), 0); del buf631  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf640, (128, 128), (1, 128), 0), view_686, out=buf642)
    del view_686
    buf643 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf644 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf645 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf646 = reinterpret_tensor(buf637, (1, 128, 128), (16384, 128, 1), 0); del buf637  # reuse
    cpp_fused_add_mul_sum_144(c_void_p(buf646.data_ptr()), c_void_p(buf640.data_ptr()), c_void_p(buf641.data_ptr()), c_void_p(addmm_257.data_ptr()), c_void_p(primals_277.data_ptr()), c_void_p(buf643.data_ptr()), c_void_p(buf644.data_ptr()), c_void_p(buf645.data_ptr()))
    del addmm_257
    del primals_277
    buf647 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf646, (128, 128), (128, 1), 0), permute_965, out=buf647)
    del permute_965
    buf648 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf646, (128, 128), (1, 128), 0), view_682, out=buf648)
    buf649 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_145(c_void_p(buf646.data_ptr()), c_void_p(buf649.data_ptr()))
    buf653 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf652, (128, 128), (128, 1), 0), permute_969, out=buf653)
    del permute_969
    buf654 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf652, (128, 128), (1, 128), 0), view_682, out=buf654)
    del view_682
    buf655 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf656 = reinterpret_tensor(buf628, (1, 1, 512), (512, 512, 1), 0); del buf628  # reuse
    buf658 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf657 = buf575; del buf575  # reuse
    cpp_fused_add_mul_sum_146(c_void_p(buf657.data_ptr()), c_void_p(buf652.data_ptr()), c_void_p(buf633.data_ptr()), c_void_p(buf647.data_ptr()), c_void_p(buf653.data_ptr()), c_void_p(buf41.data_ptr()), c_void_p(primals_273.data_ptr()), c_void_p(buf655.data_ptr()), c_void_p(buf656.data_ptr()), c_void_p(buf658.data_ptr()))
    del primals_273
    buf659 = reinterpret_tensor(buf652, (128, 128), (128, 1), 0); del buf652  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf657, (128, 512), (512, 1), 0), permute_973, out=buf659)
    del permute_973
    buf660 = reinterpret_tensor(buf653, (512, 128), (128, 1), 0); del buf653  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf657, (512, 128), (1, 512), 0), view_680, out=buf660)
    del view_680
    buf661 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf664 = buf646; del buf646  # reuse
    cpp_fused_mul_sum_147(c_void_p(buf657.data_ptr()), c_void_p(buf659.data_ptr()), c_void_p(primals_271.data_ptr()), c_void_p(buf661.data_ptr()), c_void_p(buf664.data_ptr()))
    del primals_271
    buf665 = buf647; del buf647  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf664, (128, 128), (128, 1), 0), permute_977, out=buf665)
    del permute_977
    buf668 = reinterpret_tensor(buf665, (1, 128, 512), (65536, 512, 1), 0); del buf665  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_148(c_void_p(buf668.data_ptr()), c_void_p(le_29.data_ptr()))
    del le_29
    buf669 = buf641; del buf641  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf668, (128, 512), (512, 1), 0), permute_981, out=buf669)
    del permute_981
    buf662 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf663 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf667 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf672 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf673 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_149(c_void_p(buf659.data_ptr()), c_void_p(addmm_254.data_ptr()), c_void_p(buf40.data_ptr()), c_void_p(primals_269.data_ptr()), c_void_p(primals_270.data_ptr()), c_void_p(buf664.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(buf662.data_ptr()), c_void_p(buf663.data_ptr()), c_void_p(buf667.data_ptr()), c_void_p(buf672.data_ptr()), c_void_p(buf673.data_ptr()))
    del addmm_254
    del primals_270
    buf666 = buf633; del buf633  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf664, (128, 128), (1, 128), 0), view_678, out=buf666)
    del view_678
    buf670 = reinterpret_tensor(buf41, (512, 128), (128, 1), 0); del buf41  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf668, (512, 128), (1, 512), 0), view_676, out=buf670)
    del view_676
    buf671 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf674 = buf664; del buf664  # reuse
    cpp_fused_add_mul_sum_150(c_void_p(buf674.data_ptr()), c_void_p(buf668.data_ptr()), c_void_p(buf669.data_ptr()), c_void_p(primals_269.data_ptr()), c_void_p(buf671.data_ptr()))
    del primals_269
    buf675 = reinterpret_tensor(buf668, (128, 512), (512, 1), 0); del buf668  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf674, (128, 128), (128, 1), 0), permute_985, out=buf675)
    del permute_985
    buf676 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf674, (128, 128), (1, 128), 0), view_674, out=buf676)
    del view_674
    buf678 = reinterpret_tensor(buf675, (1, 128, 512), (65536, 512, 1), 0); del buf675  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_151(c_void_p(buf678.data_ptr()), c_void_p(le_30.data_ptr()))
    del le_30
    buf679 = buf669; del buf669  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf678, (128, 512), (512, 1), 0), permute_989, out=buf679)
    del permute_989
    buf684 = reinterpret_tensor(buf659, (1, 128, 128), (16384, 128, 1), 0); del buf659  # reuse
    cpp_fused_add_mul_152(c_void_p(buf674.data_ptr()), c_void_p(buf679.data_ptr()), c_void_p(primals_267.data_ptr()), c_void_p(buf684.data_ptr()))
    del primals_267
    buf685 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf684, (128, 128), (128, 1), 0), permute_993, out=buf685)
    del permute_993
    buf688 = reinterpret_tensor(buf685, (1, 128, 512), (65536, 512, 1), 0); del buf685  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_153(c_void_p(buf688.data_ptr()), c_void_p(le_31.data_ptr()))
    del le_31
    buf689 = reinterpret_tensor(buf40, (128, 128), (128, 1), 0); del buf40  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf688, (128, 512), (512, 1), 0), permute_997, out=buf689)
    del permute_997
    buf677 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf682 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf683 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf687 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf692 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf693 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_154(c_void_p(buf674.data_ptr()), c_void_p(buf679.data_ptr()), c_void_p(addmm_250.data_ptr()), c_void_p(buf39.data_ptr()), c_void_p(primals_265.data_ptr()), c_void_p(primals_266.data_ptr()), c_void_p(buf684.data_ptr()), c_void_p(buf689.data_ptr()), c_void_p(buf677.data_ptr()), c_void_p(buf682.data_ptr()), c_void_p(buf683.data_ptr()), c_void_p(buf687.data_ptr()), c_void_p(buf692.data_ptr()), c_void_p(buf693.data_ptr()))
    del addmm_250
    del primals_266
    buf680 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf678, (512, 128), (1, 512), 0), view_672, out=buf680)
    del view_672
    buf681 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_155(c_void_p(buf678.data_ptr()), c_void_p(buf681.data_ptr()))
    buf686 = reinterpret_tensor(buf678, (128, 512), (512, 1), 0); del buf678  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf684, (128, 128), (1, 128), 0), view_670, out=buf686)
    del view_670
    buf690 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf688, (512, 128), (1, 512), 0), view_668, out=buf690)
    del view_668
    buf691 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf694 = buf684; del buf684  # reuse
    cpp_fused_add_mul_sum_156(c_void_p(buf694.data_ptr()), c_void_p(buf688.data_ptr()), c_void_p(buf689.data_ptr()), c_void_p(primals_265.data_ptr()), c_void_p(buf691.data_ptr()))
    del primals_265
    buf695 = reinterpret_tensor(buf688, (128, 512), (512, 1), 0); del buf688  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf694, (128, 128), (128, 1), 0), permute_1001, out=buf695)
    del permute_1001
    buf696 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf694, (128, 128), (1, 128), 0), view_666, out=buf696)
    del view_666
    buf698 = reinterpret_tensor(buf695, (1, 128, 512), (65536, 512, 1), 0); del buf695  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_157(c_void_p(buf698.data_ptr()), c_void_p(le_32.data_ptr()))
    del le_32
    buf699 = buf689; del buf689  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf698, (128, 512), (512, 1), 0), permute_1005, out=buf699)
    del permute_1005
    buf704 = reinterpret_tensor(buf679, (1, 128, 128), (16384, 128, 1), 0); del buf679  # reuse
    buf734 = buf674; del buf674  # reuse
    buf697 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf702 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf703 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf707 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf732 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf733 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_158(c_void_p(buf694.data_ptr()), c_void_p(buf699.data_ptr()), c_void_p(primals_263.data_ptr()), c_void_p(primals_259.data_ptr()), c_void_p(addmm_246.data_ptr()), c_void_p(addmm_241.data_ptr()), c_void_p(primals_260.data_ptr()), c_void_p(buf704.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf697.data_ptr()), c_void_p(buf702.data_ptr()), c_void_p(buf703.data_ptr()), c_void_p(buf707.data_ptr()), c_void_p(buf732.data_ptr()), c_void_p(buf733.data_ptr()))
    del addmm_241
    del addmm_246
    del primals_259
    del primals_260
    del primals_263
    buf700 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf698, (512, 128), (1, 512), 0), view_664, out=buf700)
    del view_664
    buf701 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_159(c_void_p(buf698.data_ptr()), c_void_p(buf701.data_ptr()))
    buf705 = buf699; del buf699  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf704, (128, 128), (128, 1), 0), permute_1009, out=buf705)
    del permute_1009
    buf706 = reinterpret_tensor(buf694, (128, 128), (128, 1), 0); del buf694  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf704, (128, 128), (1, 128), 0), view_662, out=buf706)
    del view_662
    buf708 = reinterpret_tensor(buf704, (4, 128, 32), (4096, 32, 1), 0); del buf704  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_43, reinterpret_tensor(buf705, (4, 128, 32), (32, 128, 1), 0), out=buf708)
    del permute_default_43
    buf709 = reinterpret_tensor(buf698, (4, 128, 128), (16384, 128, 1), 0); del buf698  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf705, (4, 128, 32), (32, 128, 1), 0), permute_default_44, out=buf709)
    del permute_default_44
    buf710 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf711 = reinterpret_tensor(buf709, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf709  # reuse
    cpp_fused_160(c_void_p(buf711.data_ptr()), c_void_p(getitem_65.data_ptr()), c_void_p(alias_default_15.data_ptr()), c_void_p(buf710.data_ptr()))
    del alias_default_15
    del getitem_65
    buf712 = reinterpret_tensor(buf705, (4, 32, 128), (4096, 128, 1), 0); del buf705  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_45, reinterpret_tensor(buf711, (4, 128, 128), (16384, 128, 1), 0), out=buf712)
    del permute_default_45
    buf713 = reinterpret_tensor(buf39, (4, 128, 32), (4096, 32, 1), 0); del buf39  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf711, (4, 128, 128), (16384, 128, 1), 0), permute_default_46, out=buf713)
    del permute_default_46
    buf714 = buf640; del buf640  # reuse
    cpp_fused_view_161(c_void_p(buf708.data_ptr()), c_void_p(buf714.data_ptr()))
    buf715 = reinterpret_tensor(buf711, (128, 512), (512, 1), 0); del buf711  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf714, permute_1022, out=buf715)
    del permute_1022
    buf716 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf714, (128, 128), (1, 128), 0), view_642, out=buf716)
    buf717 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf718 = reinterpret_tensor(buf712, (128, 128), (1, 128), 0); del buf712  # reuse
    cpp_fused_sum_view_162(c_void_p(buf718.data_ptr()), c_void_p(buf714.data_ptr()), c_void_p(buf717.data_ptr()))
    buf719 = buf714; del buf714  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf718, permute_1026, out=buf719)
    del permute_1026
    buf720 = reinterpret_tensor(buf708, (128, 128), (128, 1), 0); del buf708  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf718, (128, 128), (128, 1), 0), view_646, out=buf720)
    buf721 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf722 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_163(c_void_p(buf718.data_ptr()), c_void_p(buf713.data_ptr()), c_void_p(buf721.data_ptr()), c_void_p(buf722.data_ptr()))
    buf723 = reinterpret_tensor(buf718, (128, 128), (128, 1), 0); del buf718  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf722, permute_1030, out=buf723)
    del permute_1030
    buf724 = reinterpret_tensor(buf713, (128, 128), (128, 1), 0); del buf713  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf722, (128, 128), (1, 128), 0), view_646, out=buf724)
    del view_646
    buf725 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf726 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf727 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf728 = reinterpret_tensor(buf719, (1, 128, 128), (16384, 128, 1), 0); del buf719  # reuse
    cpp_fused_add_mul_sum_164(c_void_p(buf728.data_ptr()), c_void_p(buf722.data_ptr()), c_void_p(buf723.data_ptr()), c_void_p(addmm_242.data_ptr()), c_void_p(primals_261.data_ptr()), c_void_p(buf725.data_ptr()), c_void_p(buf726.data_ptr()), c_void_p(buf727.data_ptr()))
    del addmm_242
    del primals_261
    buf729 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf728, (128, 128), (128, 1), 0), permute_1034, out=buf729)
    del permute_1034
    buf730 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf728, (128, 128), (1, 128), 0), view_642, out=buf730)
    buf731 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_165(c_void_p(buf728.data_ptr()), c_void_p(buf731.data_ptr()))
    buf735 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf734, (128, 128), (128, 1), 0), permute_1038, out=buf735)
    del permute_1038
    buf736 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf734, (128, 128), (1, 128), 0), view_642, out=buf736)
    del view_642
    buf737 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf738 = reinterpret_tensor(buf710, (1, 1, 512), (512, 512, 1), 0); del buf710  # reuse
    buf740 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf739 = buf657; del buf657  # reuse
    cpp_fused_add_mul_sum_166(c_void_p(buf739.data_ptr()), c_void_p(buf734.data_ptr()), c_void_p(buf715.data_ptr()), c_void_p(buf729.data_ptr()), c_void_p(buf735.data_ptr()), c_void_p(addmm_240.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(primals_241.data_ptr()), c_void_p(primals_242.data_ptr()), c_void_p(primals_257.data_ptr()), c_void_p(buf737.data_ptr()), c_void_p(buf738.data_ptr()), c_void_p(buf740.data_ptr()))
    del addmm_240
    del primals_242
    del primals_257
    buf741 = reinterpret_tensor(buf734, (128, 128), (128, 1), 0); del buf734  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf739, (128, 512), (512, 1), 0), permute_1042, out=buf741)
    del permute_1042
    buf742 = reinterpret_tensor(buf735, (512, 128), (128, 1), 0); del buf735  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf739, (512, 128), (1, 512), 0), view_640, out=buf742)
    del view_640
    buf743 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf746 = buf728; del buf728  # reuse
    cpp_fused_mul_sum_167(c_void_p(buf739.data_ptr()), c_void_p(buf741.data_ptr()), c_void_p(primals_255.data_ptr()), c_void_p(buf743.data_ptr()), c_void_p(buf746.data_ptr()))
    del primals_255
    buf747 = buf729; del buf729  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf746, (128, 128), (128, 1), 0), permute_1046, out=buf747)
    del permute_1046
    buf750 = reinterpret_tensor(buf747, (1, 128, 512), (65536, 512, 1), 0); del buf747  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_168(c_void_p(buf750.data_ptr()), c_void_p(le_33.data_ptr()))
    del le_33
    buf751 = buf723; del buf723  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf750, (128, 512), (512, 1), 0), permute_1050, out=buf751)
    del permute_1050
    buf744 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf745 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf749 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf754 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf755 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_169(c_void_p(buf741.data_ptr()), c_void_p(addmm_239.data_ptr()), c_void_p(buf38.data_ptr()), c_void_p(primals_253.data_ptr()), c_void_p(primals_254.data_ptr()), c_void_p(buf746.data_ptr()), c_void_p(buf751.data_ptr()), c_void_p(buf744.data_ptr()), c_void_p(buf745.data_ptr()), c_void_p(buf749.data_ptr()), c_void_p(buf754.data_ptr()), c_void_p(buf755.data_ptr()))
    del addmm_239
    del primals_254
    buf748 = buf715; del buf715  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf746, (128, 128), (1, 128), 0), view_638, out=buf748)
    del view_638
    buf752 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf750, (512, 128), (1, 512), 0), view_636, out=buf752)
    del view_636
    buf753 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf756 = buf746; del buf746  # reuse
    cpp_fused_add_mul_sum_170(c_void_p(buf756.data_ptr()), c_void_p(buf750.data_ptr()), c_void_p(buf751.data_ptr()), c_void_p(primals_253.data_ptr()), c_void_p(buf753.data_ptr()))
    del primals_253
    buf757 = reinterpret_tensor(buf750, (128, 512), (512, 1), 0); del buf750  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf756, (128, 128), (128, 1), 0), permute_1054, out=buf757)
    del permute_1054
    buf758 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf756, (128, 128), (1, 128), 0), view_634, out=buf758)
    del view_634
    buf760 = reinterpret_tensor(buf757, (1, 128, 512), (65536, 512, 1), 0); del buf757  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_171(c_void_p(buf760.data_ptr()), c_void_p(le_34.data_ptr()))
    del le_34
    buf761 = buf751; del buf751  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf760, (128, 512), (512, 1), 0), permute_1058, out=buf761)
    del permute_1058
    buf766 = reinterpret_tensor(buf741, (1, 128, 128), (16384, 128, 1), 0); del buf741  # reuse
    cpp_fused_add_mul_172(c_void_p(buf756.data_ptr()), c_void_p(buf761.data_ptr()), c_void_p(primals_251.data_ptr()), c_void_p(buf766.data_ptr()))
    del primals_251
    buf767 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (128, 128), (128, 1), 0), permute_1062, out=buf767)
    del permute_1062
    buf770 = reinterpret_tensor(buf767, (1, 128, 512), (65536, 512, 1), 0); del buf767  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_173(c_void_p(buf770.data_ptr()), c_void_p(le_35.data_ptr()))
    del le_35
    buf771 = reinterpret_tensor(buf38, (128, 128), (128, 1), 0); del buf38  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf770, (128, 512), (512, 1), 0), permute_1066, out=buf771)
    del permute_1066
    buf759 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf764 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf765 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf769 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf774 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf775 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_174(c_void_p(buf756.data_ptr()), c_void_p(buf761.data_ptr()), c_void_p(addmm_235.data_ptr()), c_void_p(buf37.data_ptr()), c_void_p(primals_249.data_ptr()), c_void_p(primals_250.data_ptr()), c_void_p(buf766.data_ptr()), c_void_p(buf771.data_ptr()), c_void_p(buf759.data_ptr()), c_void_p(buf764.data_ptr()), c_void_p(buf765.data_ptr()), c_void_p(buf769.data_ptr()), c_void_p(buf774.data_ptr()), c_void_p(buf775.data_ptr()))
    del addmm_235
    del primals_250
    buf762 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf760, (512, 128), (1, 512), 0), view_632, out=buf762)
    del view_632
    buf763 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_175(c_void_p(buf760.data_ptr()), c_void_p(buf763.data_ptr()))
    buf768 = reinterpret_tensor(buf760, (128, 512), (512, 1), 0); del buf760  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf766, (128, 128), (1, 128), 0), view_630, out=buf768)
    del view_630
    buf772 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf770, (512, 128), (1, 512), 0), view_628, out=buf772)
    del view_628
    buf773 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf776 = buf766; del buf766  # reuse
    cpp_fused_add_mul_sum_176(c_void_p(buf776.data_ptr()), c_void_p(buf770.data_ptr()), c_void_p(buf771.data_ptr()), c_void_p(primals_249.data_ptr()), c_void_p(buf773.data_ptr()))
    del primals_249
    buf777 = reinterpret_tensor(buf770, (128, 512), (512, 1), 0); del buf770  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf776, (128, 128), (128, 1), 0), permute_1070, out=buf777)
    del permute_1070
    buf778 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf776, (128, 128), (1, 128), 0), view_626, out=buf778)
    del view_626
    buf780 = reinterpret_tensor(buf777, (1, 128, 512), (65536, 512, 1), 0); del buf777  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_177(c_void_p(buf780.data_ptr()), c_void_p(le_36.data_ptr()))
    del le_36
    buf781 = buf771; del buf771  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf780, (128, 512), (512, 1), 0), permute_1074, out=buf781)
    del permute_1074
    buf786 = reinterpret_tensor(buf761, (1, 128, 128), (16384, 128, 1), 0); del buf761  # reuse
    buf816 = buf756; del buf756  # reuse
    buf779 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf784 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf785 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf789 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf814 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf815 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_178(c_void_p(buf776.data_ptr()), c_void_p(buf781.data_ptr()), c_void_p(primals_247.data_ptr()), c_void_p(primals_243.data_ptr()), c_void_p(addmm_231.data_ptr()), c_void_p(addmm_226.data_ptr()), c_void_p(primals_244.data_ptr()), c_void_p(buf786.data_ptr()), c_void_p(buf816.data_ptr()), c_void_p(buf779.data_ptr()), c_void_p(buf784.data_ptr()), c_void_p(buf785.data_ptr()), c_void_p(buf789.data_ptr()), c_void_p(buf814.data_ptr()), c_void_p(buf815.data_ptr()))
    del addmm_226
    del addmm_231
    del primals_243
    del primals_244
    del primals_247
    buf782 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf780, (512, 128), (1, 512), 0), view_624, out=buf782)
    del view_624
    buf783 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_179(c_void_p(buf780.data_ptr()), c_void_p(buf783.data_ptr()))
    buf787 = buf781; del buf781  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf786, (128, 128), (128, 1), 0), permute_1078, out=buf787)
    del permute_1078
    buf788 = reinterpret_tensor(buf776, (128, 128), (128, 1), 0); del buf776  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf786, (128, 128), (1, 128), 0), view_622, out=buf788)
    del view_622
    buf790 = reinterpret_tensor(buf786, (4, 128, 32), (4096, 32, 1), 0); del buf786  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_49, reinterpret_tensor(buf787, (4, 128, 32), (32, 128, 1), 0), out=buf790)
    del permute_default_49
    buf791 = reinterpret_tensor(buf780, (4, 128, 128), (16384, 128, 1), 0); del buf780  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf787, (4, 128, 32), (32, 128, 1), 0), permute_default_50, out=buf791)
    del permute_default_50
    buf792 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf793 = reinterpret_tensor(buf791, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf791  # reuse
    cpp_fused_180(c_void_p(buf793.data_ptr()), c_void_p(getitem_67.data_ptr()), c_void_p(alias_default_17.data_ptr()), c_void_p(buf792.data_ptr()))
    del alias_default_17
    del getitem_67
    buf794 = reinterpret_tensor(buf787, (4, 32, 128), (4096, 128, 1), 0); del buf787  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_51, reinterpret_tensor(buf793, (4, 128, 128), (16384, 128, 1), 0), out=buf794)
    del permute_default_51
    buf795 = reinterpret_tensor(buf37, (4, 128, 32), (4096, 32, 1), 0); del buf37  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf793, (4, 128, 128), (16384, 128, 1), 0), permute_default_52, out=buf795)
    del permute_default_52
    buf796 = buf722; del buf722  # reuse
    cpp_fused_view_181(c_void_p(buf790.data_ptr()), c_void_p(buf796.data_ptr()))
    buf797 = reinterpret_tensor(buf793, (128, 512), (512, 1), 0); del buf793  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf796, permute_1091, out=buf797)
    del permute_1091
    buf798 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf796, (128, 128), (1, 128), 0), view_602, out=buf798)
    buf799 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf800 = reinterpret_tensor(buf794, (128, 128), (1, 128), 0); del buf794  # reuse
    cpp_fused_sum_view_182(c_void_p(buf800.data_ptr()), c_void_p(buf796.data_ptr()), c_void_p(buf799.data_ptr()))
    buf801 = buf796; del buf796  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf800, permute_1095, out=buf801)
    del permute_1095
    buf802 = reinterpret_tensor(buf790, (128, 128), (128, 1), 0); del buf790  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf800, (128, 128), (128, 1), 0), view_606, out=buf802)
    buf803 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf804 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_183(c_void_p(buf800.data_ptr()), c_void_p(buf795.data_ptr()), c_void_p(buf803.data_ptr()), c_void_p(buf804.data_ptr()))
    buf805 = reinterpret_tensor(buf800, (128, 128), (128, 1), 0); del buf800  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf804, permute_1099, out=buf805)
    del permute_1099
    buf806 = reinterpret_tensor(buf795, (128, 128), (128, 1), 0); del buf795  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf804, (128, 128), (1, 128), 0), view_606, out=buf806)
    del view_606
    buf807 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf808 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf809 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf810 = reinterpret_tensor(buf801, (1, 128, 128), (16384, 128, 1), 0); del buf801  # reuse
    cpp_fused_add_mul_sum_184(c_void_p(buf810.data_ptr()), c_void_p(buf804.data_ptr()), c_void_p(buf805.data_ptr()), c_void_p(addmm_227.data_ptr()), c_void_p(primals_245.data_ptr()), c_void_p(buf807.data_ptr()), c_void_p(buf808.data_ptr()), c_void_p(buf809.data_ptr()))
    del addmm_227
    del primals_245
    buf811 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf810, (128, 128), (128, 1), 0), permute_1103, out=buf811)
    del permute_1103
    buf812 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf810, (128, 128), (1, 128), 0), view_602, out=buf812)
    buf813 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_185(c_void_p(buf810.data_ptr()), c_void_p(buf813.data_ptr()))
    buf817 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf816, (128, 128), (128, 1), 0), permute_1107, out=buf817)
    del permute_1107
    buf818 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf816, (128, 128), (1, 128), 0), view_602, out=buf818)
    del view_602
    buf819 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf820 = reinterpret_tensor(buf792, (1, 1, 512), (512, 512, 1), 0); del buf792  # reuse
    buf822 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf821 = buf739; del buf739  # reuse
    cpp_fused_add_mul_sum_186(c_void_p(buf821.data_ptr()), c_void_p(buf816.data_ptr()), c_void_p(buf797.data_ptr()), c_void_p(buf811.data_ptr()), c_void_p(buf817.data_ptr()), c_void_p(buf36.data_ptr()), c_void_p(primals_241.data_ptr()), c_void_p(buf819.data_ptr()), c_void_p(buf820.data_ptr()), c_void_p(buf822.data_ptr()))
    del primals_241
    buf823 = reinterpret_tensor(buf816, (128, 128), (128, 1), 0); del buf816  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf821, (128, 512), (512, 1), 0), permute_1111, out=buf823)
    del permute_1111
    buf824 = reinterpret_tensor(buf817, (512, 128), (128, 1), 0); del buf817  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf821, (512, 128), (1, 512), 0), view_600, out=buf824)
    del view_600
    buf825 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf828 = buf810; del buf810  # reuse
    cpp_fused_mul_sum_187(c_void_p(buf821.data_ptr()), c_void_p(buf823.data_ptr()), c_void_p(primals_239.data_ptr()), c_void_p(buf825.data_ptr()), c_void_p(buf828.data_ptr()))
    del primals_239
    buf829 = buf811; del buf811  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf828, (128, 128), (128, 1), 0), permute_1115, out=buf829)
    del permute_1115
    buf832 = reinterpret_tensor(buf829, (1, 128, 512), (65536, 512, 1), 0); del buf829  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_188(c_void_p(buf832.data_ptr()), c_void_p(le_37.data_ptr()))
    del le_37
    buf833 = buf805; del buf805  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf832, (128, 512), (512, 1), 0), permute_1119, out=buf833)
    del permute_1119
    buf826 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf827 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf831 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf836 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf837 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_189(c_void_p(buf823.data_ptr()), c_void_p(addmm_224.data_ptr()), c_void_p(buf35.data_ptr()), c_void_p(primals_237.data_ptr()), c_void_p(primals_238.data_ptr()), c_void_p(buf828.data_ptr()), c_void_p(buf833.data_ptr()), c_void_p(buf826.data_ptr()), c_void_p(buf827.data_ptr()), c_void_p(buf831.data_ptr()), c_void_p(buf836.data_ptr()), c_void_p(buf837.data_ptr()))
    del addmm_224
    del primals_238
    buf830 = buf797; del buf797  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf828, (128, 128), (1, 128), 0), view_598, out=buf830)
    del view_598
    buf834 = reinterpret_tensor(buf36, (512, 128), (128, 1), 0); del buf36  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf832, (512, 128), (1, 512), 0), view_596, out=buf834)
    del view_596
    buf835 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf838 = buf828; del buf828  # reuse
    cpp_fused_add_mul_sum_190(c_void_p(buf838.data_ptr()), c_void_p(buf832.data_ptr()), c_void_p(buf833.data_ptr()), c_void_p(primals_237.data_ptr()), c_void_p(buf835.data_ptr()))
    del primals_237
    buf839 = reinterpret_tensor(buf832, (128, 512), (512, 1), 0); del buf832  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf838, (128, 128), (128, 1), 0), permute_1123, out=buf839)
    del permute_1123
    buf840 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf838, (128, 128), (1, 128), 0), view_594, out=buf840)
    del view_594
    buf842 = reinterpret_tensor(buf839, (1, 128, 512), (65536, 512, 1), 0); del buf839  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_191(c_void_p(buf842.data_ptr()), c_void_p(le_38.data_ptr()))
    del le_38
    buf843 = buf833; del buf833  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf842, (128, 512), (512, 1), 0), permute_1127, out=buf843)
    del permute_1127
    buf848 = reinterpret_tensor(buf823, (1, 128, 128), (16384, 128, 1), 0); del buf823  # reuse
    cpp_fused_add_mul_192(c_void_p(buf838.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(primals_235.data_ptr()), c_void_p(buf848.data_ptr()))
    del primals_235
    buf849 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf848, (128, 128), (128, 1), 0), permute_1131, out=buf849)
    del permute_1131
    buf852 = reinterpret_tensor(buf849, (1, 128, 512), (65536, 512, 1), 0); del buf849  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_193(c_void_p(buf852.data_ptr()), c_void_p(le_39.data_ptr()))
    del le_39
    buf853 = reinterpret_tensor(buf35, (128, 128), (128, 1), 0); del buf35  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf852, (128, 512), (512, 1), 0), permute_1135, out=buf853)
    del permute_1135
    buf841 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf846 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf847 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf851 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf856 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf857 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_194(c_void_p(buf838.data_ptr()), c_void_p(buf843.data_ptr()), c_void_p(addmm_220.data_ptr()), c_void_p(buf34.data_ptr()), c_void_p(primals_233.data_ptr()), c_void_p(primals_234.data_ptr()), c_void_p(buf848.data_ptr()), c_void_p(buf853.data_ptr()), c_void_p(buf841.data_ptr()), c_void_p(buf846.data_ptr()), c_void_p(buf847.data_ptr()), c_void_p(buf851.data_ptr()), c_void_p(buf856.data_ptr()), c_void_p(buf857.data_ptr()))
    del addmm_220
    del primals_234
    buf844 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf842, (512, 128), (1, 512), 0), view_592, out=buf844)
    del view_592
    buf845 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_195(c_void_p(buf842.data_ptr()), c_void_p(buf845.data_ptr()))
    buf850 = reinterpret_tensor(buf842, (128, 512), (512, 1), 0); del buf842  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf848, (128, 128), (1, 128), 0), view_590, out=buf850)
    del view_590
    buf854 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf852, (512, 128), (1, 512), 0), view_588, out=buf854)
    del view_588
    buf855 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf858 = buf848; del buf848  # reuse
    cpp_fused_add_mul_sum_196(c_void_p(buf858.data_ptr()), c_void_p(buf852.data_ptr()), c_void_p(buf853.data_ptr()), c_void_p(primals_233.data_ptr()), c_void_p(buf855.data_ptr()))
    del primals_233
    buf859 = reinterpret_tensor(buf852, (128, 512), (512, 1), 0); del buf852  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf858, (128, 128), (128, 1), 0), permute_1139, out=buf859)
    del permute_1139
    buf860 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf858, (128, 128), (1, 128), 0), view_586, out=buf860)
    del view_586
    buf862 = reinterpret_tensor(buf859, (1, 128, 512), (65536, 512, 1), 0); del buf859  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_197(c_void_p(buf862.data_ptr()), c_void_p(le_40.data_ptr()))
    del le_40
    buf863 = buf853; del buf853  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf862, (128, 512), (512, 1), 0), permute_1143, out=buf863)
    del permute_1143
    buf868 = reinterpret_tensor(buf843, (1, 128, 128), (16384, 128, 1), 0); del buf843  # reuse
    buf898 = buf838; del buf838  # reuse
    buf861 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf866 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf867 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf871 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf896 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf897 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_198(c_void_p(buf858.data_ptr()), c_void_p(buf863.data_ptr()), c_void_p(primals_231.data_ptr()), c_void_p(primals_227.data_ptr()), c_void_p(addmm_216.data_ptr()), c_void_p(addmm_211.data_ptr()), c_void_p(primals_228.data_ptr()), c_void_p(buf868.data_ptr()), c_void_p(buf898.data_ptr()), c_void_p(buf861.data_ptr()), c_void_p(buf866.data_ptr()), c_void_p(buf867.data_ptr()), c_void_p(buf871.data_ptr()), c_void_p(buf896.data_ptr()), c_void_p(buf897.data_ptr()))
    del addmm_211
    del addmm_216
    del primals_227
    del primals_228
    del primals_231
    buf864 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf862, (512, 128), (1, 512), 0), view_584, out=buf864)
    del view_584
    buf865 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_199(c_void_p(buf862.data_ptr()), c_void_p(buf865.data_ptr()))
    buf869 = buf863; del buf863  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf868, (128, 128), (128, 1), 0), permute_1147, out=buf869)
    del permute_1147
    buf870 = reinterpret_tensor(buf858, (128, 128), (128, 1), 0); del buf858  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf868, (128, 128), (1, 128), 0), view_582, out=buf870)
    del view_582
    buf872 = reinterpret_tensor(buf868, (4, 128, 32), (4096, 32, 1), 0); del buf868  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_55, reinterpret_tensor(buf869, (4, 128, 32), (32, 128, 1), 0), out=buf872)
    del permute_default_55
    buf873 = reinterpret_tensor(buf862, (4, 128, 128), (16384, 128, 1), 0); del buf862  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf869, (4, 128, 32), (32, 128, 1), 0), permute_default_56, out=buf873)
    del permute_default_56
    buf874 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf875 = reinterpret_tensor(buf873, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf873  # reuse
    cpp_fused_200(c_void_p(buf875.data_ptr()), c_void_p(getitem_69.data_ptr()), c_void_p(alias_default_19.data_ptr()), c_void_p(buf874.data_ptr()))
    del alias_default_19
    del getitem_69
    buf876 = reinterpret_tensor(buf869, (4, 32, 128), (4096, 128, 1), 0); del buf869  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_57, reinterpret_tensor(buf875, (4, 128, 128), (16384, 128, 1), 0), out=buf876)
    del permute_default_57
    buf877 = reinterpret_tensor(buf34, (4, 128, 32), (4096, 32, 1), 0); del buf34  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf875, (4, 128, 128), (16384, 128, 1), 0), permute_default_58, out=buf877)
    del permute_default_58
    buf878 = buf804; del buf804  # reuse
    cpp_fused_view_201(c_void_p(buf872.data_ptr()), c_void_p(buf878.data_ptr()))
    buf879 = reinterpret_tensor(buf875, (128, 512), (512, 1), 0); del buf875  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf878, permute_1160, out=buf879)
    del permute_1160
    buf880 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf878, (128, 128), (1, 128), 0), view_562, out=buf880)
    buf881 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf882 = reinterpret_tensor(buf876, (128, 128), (1, 128), 0); del buf876  # reuse
    cpp_fused_sum_view_202(c_void_p(buf882.data_ptr()), c_void_p(buf878.data_ptr()), c_void_p(buf881.data_ptr()))
    buf883 = buf878; del buf878  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf882, permute_1164, out=buf883)
    del permute_1164
    buf884 = reinterpret_tensor(buf872, (128, 128), (128, 1), 0); del buf872  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf882, (128, 128), (128, 1), 0), view_566, out=buf884)
    buf885 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf886 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_203(c_void_p(buf882.data_ptr()), c_void_p(buf877.data_ptr()), c_void_p(buf885.data_ptr()), c_void_p(buf886.data_ptr()))
    buf887 = reinterpret_tensor(buf882, (128, 128), (128, 1), 0); del buf882  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf886, permute_1168, out=buf887)
    del permute_1168
    buf888 = reinterpret_tensor(buf877, (128, 128), (128, 1), 0); del buf877  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf886, (128, 128), (1, 128), 0), view_566, out=buf888)
    del view_566
    buf889 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf890 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf891 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf892 = reinterpret_tensor(buf883, (1, 128, 128), (16384, 128, 1), 0); del buf883  # reuse
    cpp_fused_add_mul_sum_204(c_void_p(buf892.data_ptr()), c_void_p(buf886.data_ptr()), c_void_p(buf887.data_ptr()), c_void_p(addmm_212.data_ptr()), c_void_p(primals_229.data_ptr()), c_void_p(buf889.data_ptr()), c_void_p(buf890.data_ptr()), c_void_p(buf891.data_ptr()))
    del addmm_212
    del primals_229
    buf893 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf892, (128, 128), (128, 1), 0), permute_1172, out=buf893)
    del permute_1172
    buf894 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf892, (128, 128), (1, 128), 0), view_562, out=buf894)
    buf895 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_205(c_void_p(buf892.data_ptr()), c_void_p(buf895.data_ptr()))
    buf899 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf898, (128, 128), (128, 1), 0), permute_1176, out=buf899)
    del permute_1176
    buf900 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf898, (128, 128), (1, 128), 0), view_562, out=buf900)
    del view_562
    buf901 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf902 = reinterpret_tensor(buf874, (1, 1, 512), (512, 512, 1), 0); del buf874  # reuse
    buf904 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf903 = buf821; del buf821  # reuse
    cpp_fused_add_mul_sum_206(c_void_p(buf903.data_ptr()), c_void_p(buf898.data_ptr()), c_void_p(buf879.data_ptr()), c_void_p(buf893.data_ptr()), c_void_p(buf899.data_ptr()), c_void_p(addmm_210.data_ptr()), c_void_p(buf31.data_ptr()), c_void_p(primals_209.data_ptr()), c_void_p(primals_210.data_ptr()), c_void_p(primals_225.data_ptr()), c_void_p(buf901.data_ptr()), c_void_p(buf902.data_ptr()), c_void_p(buf904.data_ptr()))
    del addmm_210
    del primals_210
    del primals_225
    buf905 = reinterpret_tensor(buf898, (128, 128), (128, 1), 0); del buf898  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf903, (128, 512), (512, 1), 0), permute_1180, out=buf905)
    del permute_1180
    buf906 = reinterpret_tensor(buf899, (512, 128), (128, 1), 0); del buf899  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf903, (512, 128), (1, 512), 0), view_560, out=buf906)
    del view_560
    buf907 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf910 = buf892; del buf892  # reuse
    cpp_fused_mul_sum_207(c_void_p(buf903.data_ptr()), c_void_p(buf905.data_ptr()), c_void_p(primals_223.data_ptr()), c_void_p(buf907.data_ptr()), c_void_p(buf910.data_ptr()))
    del primals_223
    buf911 = buf893; del buf893  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf910, (128, 128), (128, 1), 0), permute_1184, out=buf911)
    del permute_1184
    buf914 = reinterpret_tensor(buf911, (1, 128, 512), (65536, 512, 1), 0); del buf911  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_208(c_void_p(buf914.data_ptr()), c_void_p(le_41.data_ptr()))
    del le_41
    buf915 = buf887; del buf887  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf914, (128, 512), (512, 1), 0), permute_1188, out=buf915)
    del permute_1188
    buf908 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf909 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf913 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf918 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf919 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_209(c_void_p(buf905.data_ptr()), c_void_p(addmm_209.data_ptr()), c_void_p(buf33.data_ptr()), c_void_p(primals_221.data_ptr()), c_void_p(primals_222.data_ptr()), c_void_p(buf910.data_ptr()), c_void_p(buf915.data_ptr()), c_void_p(buf908.data_ptr()), c_void_p(buf909.data_ptr()), c_void_p(buf913.data_ptr()), c_void_p(buf918.data_ptr()), c_void_p(buf919.data_ptr()))
    del addmm_209
    del primals_222
    buf912 = buf879; del buf879  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf910, (128, 128), (1, 128), 0), view_558, out=buf912)
    del view_558
    buf916 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf914, (512, 128), (1, 512), 0), view_556, out=buf916)
    del view_556
    buf917 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf920 = buf910; del buf910  # reuse
    cpp_fused_add_mul_sum_210(c_void_p(buf920.data_ptr()), c_void_p(buf914.data_ptr()), c_void_p(buf915.data_ptr()), c_void_p(primals_221.data_ptr()), c_void_p(buf917.data_ptr()))
    del primals_221
    buf921 = reinterpret_tensor(buf914, (128, 512), (512, 1), 0); del buf914  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf920, (128, 128), (128, 1), 0), permute_1192, out=buf921)
    del permute_1192
    buf922 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf920, (128, 128), (1, 128), 0), view_554, out=buf922)
    del view_554
    buf924 = reinterpret_tensor(buf921, (1, 128, 512), (65536, 512, 1), 0); del buf921  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_211(c_void_p(buf924.data_ptr()), c_void_p(le_42.data_ptr()))
    del le_42
    buf925 = buf915; del buf915  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf924, (128, 512), (512, 1), 0), permute_1196, out=buf925)
    del permute_1196
    buf930 = reinterpret_tensor(buf905, (1, 128, 128), (16384, 128, 1), 0); del buf905  # reuse
    cpp_fused_add_mul_212(c_void_p(buf920.data_ptr()), c_void_p(buf925.data_ptr()), c_void_p(primals_219.data_ptr()), c_void_p(buf930.data_ptr()))
    del primals_219
    buf931 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf930, (128, 128), (128, 1), 0), permute_1200, out=buf931)
    del permute_1200
    buf934 = reinterpret_tensor(buf931, (1, 128, 512), (65536, 512, 1), 0); del buf931  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_213(c_void_p(buf934.data_ptr()), c_void_p(le_43.data_ptr()))
    del le_43
    buf935 = reinterpret_tensor(buf33, (128, 128), (128, 1), 0); del buf33  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf934, (128, 512), (512, 1), 0), permute_1204, out=buf935)
    del permute_1204
    buf923 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf928 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf929 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf933 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf938 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf939 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_214(c_void_p(buf920.data_ptr()), c_void_p(buf925.data_ptr()), c_void_p(addmm_205.data_ptr()), c_void_p(buf32.data_ptr()), c_void_p(primals_217.data_ptr()), c_void_p(primals_218.data_ptr()), c_void_p(buf930.data_ptr()), c_void_p(buf935.data_ptr()), c_void_p(buf923.data_ptr()), c_void_p(buf928.data_ptr()), c_void_p(buf929.data_ptr()), c_void_p(buf933.data_ptr()), c_void_p(buf938.data_ptr()), c_void_p(buf939.data_ptr()))
    del addmm_205
    del primals_218
    buf926 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf924, (512, 128), (1, 512), 0), view_552, out=buf926)
    del view_552
    buf927 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_215(c_void_p(buf924.data_ptr()), c_void_p(buf927.data_ptr()))
    buf932 = reinterpret_tensor(buf924, (128, 512), (512, 1), 0); del buf924  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf930, (128, 128), (1, 128), 0), view_550, out=buf932)
    del view_550
    buf936 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf934, (512, 128), (1, 512), 0), view_548, out=buf936)
    del view_548
    buf937 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf940 = buf930; del buf930  # reuse
    cpp_fused_add_mul_sum_216(c_void_p(buf940.data_ptr()), c_void_p(buf934.data_ptr()), c_void_p(buf935.data_ptr()), c_void_p(primals_217.data_ptr()), c_void_p(buf937.data_ptr()))
    del primals_217
    buf941 = reinterpret_tensor(buf934, (128, 512), (512, 1), 0); del buf934  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf940, (128, 128), (128, 1), 0), permute_1208, out=buf941)
    del permute_1208
    buf942 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf940, (128, 128), (1, 128), 0), view_546, out=buf942)
    del view_546
    buf944 = reinterpret_tensor(buf941, (1, 128, 512), (65536, 512, 1), 0); del buf941  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_217(c_void_p(buf944.data_ptr()), c_void_p(le_44.data_ptr()))
    del le_44
    buf945 = buf935; del buf935  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf944, (128, 512), (512, 1), 0), permute_1212, out=buf945)
    del permute_1212
    buf950 = reinterpret_tensor(buf925, (1, 128, 128), (16384, 128, 1), 0); del buf925  # reuse
    buf980 = buf920; del buf920  # reuse
    buf943 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf948 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf949 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf953 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf978 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf979 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_218(c_void_p(buf940.data_ptr()), c_void_p(buf945.data_ptr()), c_void_p(primals_215.data_ptr()), c_void_p(primals_211.data_ptr()), c_void_p(addmm_201.data_ptr()), c_void_p(addmm_196.data_ptr()), c_void_p(primals_212.data_ptr()), c_void_p(buf950.data_ptr()), c_void_p(buf980.data_ptr()), c_void_p(buf943.data_ptr()), c_void_p(buf948.data_ptr()), c_void_p(buf949.data_ptr()), c_void_p(buf953.data_ptr()), c_void_p(buf978.data_ptr()), c_void_p(buf979.data_ptr()))
    del addmm_196
    del addmm_201
    del primals_211
    del primals_212
    del primals_215
    buf946 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf944, (512, 128), (1, 512), 0), view_544, out=buf946)
    del view_544
    buf947 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_219(c_void_p(buf944.data_ptr()), c_void_p(buf947.data_ptr()))
    buf951 = buf945; del buf945  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf950, (128, 128), (128, 1), 0), permute_1216, out=buf951)
    del permute_1216
    buf952 = reinterpret_tensor(buf940, (128, 128), (128, 1), 0); del buf940  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf950, (128, 128), (1, 128), 0), view_542, out=buf952)
    del view_542
    buf954 = reinterpret_tensor(buf950, (4, 128, 32), (4096, 32, 1), 0); del buf950  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_61, reinterpret_tensor(buf951, (4, 128, 32), (32, 128, 1), 0), out=buf954)
    del permute_default_61
    buf955 = reinterpret_tensor(buf944, (4, 128, 128), (16384, 128, 1), 0); del buf944  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf951, (4, 128, 32), (32, 128, 1), 0), permute_default_62, out=buf955)
    del permute_default_62
    buf956 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf957 = reinterpret_tensor(buf955, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf955  # reuse
    cpp_fused_220(c_void_p(buf957.data_ptr()), c_void_p(getitem_71.data_ptr()), c_void_p(alias_default_21.data_ptr()), c_void_p(buf956.data_ptr()))
    del alias_default_21
    del getitem_71
    buf958 = reinterpret_tensor(buf951, (4, 32, 128), (4096, 128, 1), 0); del buf951  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_63, reinterpret_tensor(buf957, (4, 128, 128), (16384, 128, 1), 0), out=buf958)
    del permute_default_63
    buf959 = reinterpret_tensor(buf32, (4, 128, 32), (4096, 32, 1), 0); del buf32  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf957, (4, 128, 128), (16384, 128, 1), 0), permute_default_64, out=buf959)
    del permute_default_64
    buf960 = buf886; del buf886  # reuse
    cpp_fused_view_221(c_void_p(buf954.data_ptr()), c_void_p(buf960.data_ptr()))
    buf961 = reinterpret_tensor(buf957, (128, 512), (512, 1), 0); del buf957  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf960, permute_1229, out=buf961)
    del permute_1229
    buf962 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf960, (128, 128), (1, 128), 0), view_522, out=buf962)
    buf963 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf964 = reinterpret_tensor(buf958, (128, 128), (1, 128), 0); del buf958  # reuse
    cpp_fused_sum_view_222(c_void_p(buf964.data_ptr()), c_void_p(buf960.data_ptr()), c_void_p(buf963.data_ptr()))
    buf965 = buf960; del buf960  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf964, permute_1233, out=buf965)
    del permute_1233
    buf966 = reinterpret_tensor(buf954, (128, 128), (128, 1), 0); del buf954  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf964, (128, 128), (128, 1), 0), view_526, out=buf966)
    buf967 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf968 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_223(c_void_p(buf964.data_ptr()), c_void_p(buf959.data_ptr()), c_void_p(buf967.data_ptr()), c_void_p(buf968.data_ptr()))
    buf969 = reinterpret_tensor(buf964, (128, 128), (128, 1), 0); del buf964  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf968, permute_1237, out=buf969)
    del permute_1237
    buf970 = reinterpret_tensor(buf959, (128, 128), (128, 1), 0); del buf959  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf968, (128, 128), (1, 128), 0), view_526, out=buf970)
    del view_526
    buf971 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf972 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf973 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf974 = reinterpret_tensor(buf965, (1, 128, 128), (16384, 128, 1), 0); del buf965  # reuse
    cpp_fused_add_mul_sum_224(c_void_p(buf974.data_ptr()), c_void_p(buf968.data_ptr()), c_void_p(buf969.data_ptr()), c_void_p(addmm_197.data_ptr()), c_void_p(primals_213.data_ptr()), c_void_p(buf971.data_ptr()), c_void_p(buf972.data_ptr()), c_void_p(buf973.data_ptr()))
    del addmm_197
    del primals_213
    buf975 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf974, (128, 128), (128, 1), 0), permute_1241, out=buf975)
    del permute_1241
    buf976 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf974, (128, 128), (1, 128), 0), view_522, out=buf976)
    buf977 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_225(c_void_p(buf974.data_ptr()), c_void_p(buf977.data_ptr()))
    buf981 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf980, (128, 128), (128, 1), 0), permute_1245, out=buf981)
    del permute_1245
    buf982 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf980, (128, 128), (1, 128), 0), view_522, out=buf982)
    del view_522
    buf983 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf984 = reinterpret_tensor(buf956, (1, 1, 512), (512, 512, 1), 0); del buf956  # reuse
    buf986 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf985 = buf903; del buf903  # reuse
    cpp_fused_add_mul_sum_226(c_void_p(buf985.data_ptr()), c_void_p(buf980.data_ptr()), c_void_p(buf961.data_ptr()), c_void_p(buf975.data_ptr()), c_void_p(buf981.data_ptr()), c_void_p(buf31.data_ptr()), c_void_p(primals_209.data_ptr()), c_void_p(buf983.data_ptr()), c_void_p(buf984.data_ptr()), c_void_p(buf986.data_ptr()))
    del primals_209
    buf987 = reinterpret_tensor(buf980, (128, 128), (128, 1), 0); del buf980  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf985, (128, 512), (512, 1), 0), permute_1249, out=buf987)
    del permute_1249
    buf988 = reinterpret_tensor(buf981, (512, 128), (128, 1), 0); del buf981  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf985, (512, 128), (1, 512), 0), view_520, out=buf988)
    del view_520
    buf989 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf992 = buf974; del buf974  # reuse
    cpp_fused_mul_sum_227(c_void_p(buf985.data_ptr()), c_void_p(buf987.data_ptr()), c_void_p(primals_207.data_ptr()), c_void_p(buf989.data_ptr()), c_void_p(buf992.data_ptr()))
    del primals_207
    buf993 = buf975; del buf975  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf992, (128, 128), (128, 1), 0), permute_1253, out=buf993)
    del permute_1253
    buf996 = reinterpret_tensor(buf993, (1, 128, 512), (65536, 512, 1), 0); del buf993  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_228(c_void_p(buf996.data_ptr()), c_void_p(le_45.data_ptr()))
    del le_45
    buf997 = buf969; del buf969  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf996, (128, 512), (512, 1), 0), permute_1257, out=buf997)
    del permute_1257
    buf990 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf991 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf995 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1000 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1001 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_229(c_void_p(buf987.data_ptr()), c_void_p(addmm_194.data_ptr()), c_void_p(buf30.data_ptr()), c_void_p(primals_205.data_ptr()), c_void_p(primals_206.data_ptr()), c_void_p(buf992.data_ptr()), c_void_p(buf997.data_ptr()), c_void_p(buf990.data_ptr()), c_void_p(buf991.data_ptr()), c_void_p(buf995.data_ptr()), c_void_p(buf1000.data_ptr()), c_void_p(buf1001.data_ptr()))
    del addmm_194
    del primals_206
    buf994 = buf961; del buf961  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf992, (128, 128), (1, 128), 0), view_518, out=buf994)
    del view_518
    buf998 = reinterpret_tensor(buf31, (512, 128), (128, 1), 0); del buf31  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf996, (512, 128), (1, 512), 0), view_516, out=buf998)
    del view_516
    buf999 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1002 = buf992; del buf992  # reuse
    cpp_fused_add_mul_sum_230(c_void_p(buf1002.data_ptr()), c_void_p(buf996.data_ptr()), c_void_p(buf997.data_ptr()), c_void_p(primals_205.data_ptr()), c_void_p(buf999.data_ptr()))
    del primals_205
    buf1003 = reinterpret_tensor(buf996, (128, 512), (512, 1), 0); del buf996  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1002, (128, 128), (128, 1), 0), permute_1261, out=buf1003)
    del permute_1261
    buf1004 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1002, (128, 128), (1, 128), 0), view_514, out=buf1004)
    del view_514
    buf1006 = reinterpret_tensor(buf1003, (1, 128, 512), (65536, 512, 1), 0); del buf1003  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_231(c_void_p(buf1006.data_ptr()), c_void_p(le_46.data_ptr()))
    del le_46
    buf1007 = buf997; del buf997  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1006, (128, 512), (512, 1), 0), permute_1265, out=buf1007)
    del permute_1265
    buf1012 = reinterpret_tensor(buf987, (1, 128, 128), (16384, 128, 1), 0); del buf987  # reuse
    cpp_fused_add_mul_232(c_void_p(buf1002.data_ptr()), c_void_p(buf1007.data_ptr()), c_void_p(primals_203.data_ptr()), c_void_p(buf1012.data_ptr()))
    del primals_203
    buf1013 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1012, (128, 128), (128, 1), 0), permute_1269, out=buf1013)
    del permute_1269
    buf1016 = reinterpret_tensor(buf1013, (1, 128, 512), (65536, 512, 1), 0); del buf1013  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_233(c_void_p(buf1016.data_ptr()), c_void_p(le_47.data_ptr()))
    del le_47
    buf1017 = reinterpret_tensor(buf30, (128, 128), (128, 1), 0); del buf30  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1016, (128, 512), (512, 1), 0), permute_1273, out=buf1017)
    del permute_1273
    buf1005 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1010 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1011 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1015 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1020 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1021 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_234(c_void_p(buf1002.data_ptr()), c_void_p(buf1007.data_ptr()), c_void_p(addmm_190.data_ptr()), c_void_p(buf29.data_ptr()), c_void_p(primals_201.data_ptr()), c_void_p(primals_202.data_ptr()), c_void_p(buf1012.data_ptr()), c_void_p(buf1017.data_ptr()), c_void_p(buf1005.data_ptr()), c_void_p(buf1010.data_ptr()), c_void_p(buf1011.data_ptr()), c_void_p(buf1015.data_ptr()), c_void_p(buf1020.data_ptr()), c_void_p(buf1021.data_ptr()))
    del addmm_190
    del primals_202
    buf1008 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1006, (512, 128), (1, 512), 0), view_512, out=buf1008)
    del view_512
    buf1009 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_235(c_void_p(buf1006.data_ptr()), c_void_p(buf1009.data_ptr()))
    buf1014 = reinterpret_tensor(buf1006, (128, 512), (512, 1), 0); del buf1006  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1012, (128, 128), (1, 128), 0), view_510, out=buf1014)
    del view_510
    buf1018 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1016, (512, 128), (1, 512), 0), view_508, out=buf1018)
    del view_508
    buf1019 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1022 = buf1012; del buf1012  # reuse
    cpp_fused_add_mul_sum_236(c_void_p(buf1022.data_ptr()), c_void_p(buf1016.data_ptr()), c_void_p(buf1017.data_ptr()), c_void_p(primals_201.data_ptr()), c_void_p(buf1019.data_ptr()))
    del primals_201
    buf1023 = reinterpret_tensor(buf1016, (128, 512), (512, 1), 0); del buf1016  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1022, (128, 128), (128, 1), 0), permute_1277, out=buf1023)
    del permute_1277
    buf1024 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1022, (128, 128), (1, 128), 0), view_506, out=buf1024)
    del view_506
    buf1026 = reinterpret_tensor(buf1023, (1, 128, 512), (65536, 512, 1), 0); del buf1023  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_237(c_void_p(buf1026.data_ptr()), c_void_p(le_48.data_ptr()))
    del le_48
    buf1027 = buf1017; del buf1017  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1026, (128, 512), (512, 1), 0), permute_1281, out=buf1027)
    del permute_1281
    buf1032 = buf29; del buf29  # reuse
    buf1062 = reinterpret_tensor(buf1007, (1, 128, 128), (16384, 128, 1), 0); del buf1007  # reuse
    buf1025 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1030 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1031 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1035 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1060 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1061 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_238(c_void_p(buf1022.data_ptr()), c_void_p(buf1027.data_ptr()), c_void_p(primals_199.data_ptr()), c_void_p(primals_195.data_ptr()), c_void_p(addmm_186.data_ptr()), c_void_p(addmm_181.data_ptr()), c_void_p(primals_196.data_ptr()), c_void_p(buf1032.data_ptr()), c_void_p(buf1062.data_ptr()), c_void_p(buf1025.data_ptr()), c_void_p(buf1030.data_ptr()), c_void_p(buf1031.data_ptr()), c_void_p(buf1035.data_ptr()), c_void_p(buf1060.data_ptr()), c_void_p(buf1061.data_ptr()))
    del addmm_181
    del addmm_186
    del primals_195
    del primals_196
    del primals_199
    buf1028 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1026, (512, 128), (1, 512), 0), view_504, out=buf1028)
    del view_504
    buf1029 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_239(c_void_p(buf1026.data_ptr()), c_void_p(buf1029.data_ptr()))
    buf1033 = buf1027; del buf1027  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1032, (128, 128), (128, 1), 0), permute_1285, out=buf1033)
    del permute_1285
    buf1034 = reinterpret_tensor(buf1022, (128, 128), (128, 1), 0); del buf1022  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1032, (128, 128), (1, 128), 0), view_502, out=buf1034)
    del view_502
    buf1036 = reinterpret_tensor(buf1032, (4, 128, 32), (4096, 32, 1), 0); del buf1032  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_67, reinterpret_tensor(buf1033, (4, 128, 32), (32, 128, 1), 0), out=buf1036)
    del permute_default_67
    buf1037 = reinterpret_tensor(buf1026, (4, 128, 128), (16384, 128, 1), 0); del buf1026  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1033, (4, 128, 32), (32, 128, 1), 0), permute_default_68, out=buf1037)
    del permute_default_68
    buf1038 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1039 = reinterpret_tensor(buf1037, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1037  # reuse
    cpp_fused_240(c_void_p(buf1039.data_ptr()), c_void_p(getitem_73.data_ptr()), c_void_p(alias_default_23.data_ptr()), c_void_p(buf1038.data_ptr()))
    del alias_default_23
    del getitem_73
    buf1040 = reinterpret_tensor(buf1033, (4, 32, 128), (4096, 128, 1), 0); del buf1033  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_69, reinterpret_tensor(buf1039, (4, 128, 128), (16384, 128, 1), 0), out=buf1040)
    del permute_default_69
    buf1041 = reinterpret_tensor(buf1002, (4, 128, 32), (4096, 32, 1), 0); del buf1002  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1039, (4, 128, 128), (16384, 128, 1), 0), permute_default_70, out=buf1041)
    del permute_default_70
    buf1042 = buf968; del buf968  # reuse
    cpp_fused_view_241(c_void_p(buf1036.data_ptr()), c_void_p(buf1042.data_ptr()))
    buf1043 = reinterpret_tensor(buf1039, (128, 512), (512, 1), 0); del buf1039  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1042, permute_1298, out=buf1043)
    del permute_1298
    buf1044 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1042, (128, 128), (1, 128), 0), view_482, out=buf1044)
    buf1045 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1046 = reinterpret_tensor(buf1040, (128, 128), (1, 128), 0); del buf1040  # reuse
    cpp_fused_sum_view_242(c_void_p(buf1046.data_ptr()), c_void_p(buf1042.data_ptr()), c_void_p(buf1045.data_ptr()))
    buf1047 = buf1042; del buf1042  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1046, permute_1302, out=buf1047)
    del permute_1302
    buf1048 = reinterpret_tensor(buf1036, (128, 128), (128, 1), 0); del buf1036  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1046, (128, 128), (128, 1), 0), view_486, out=buf1048)
    buf1049 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1050 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_243(c_void_p(buf1046.data_ptr()), c_void_p(buf1041.data_ptr()), c_void_p(buf1049.data_ptr()), c_void_p(buf1050.data_ptr()))
    buf1051 = reinterpret_tensor(buf1046, (128, 128), (128, 1), 0); del buf1046  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1050, permute_1306, out=buf1051)
    del permute_1306
    buf1052 = reinterpret_tensor(buf1041, (128, 128), (128, 1), 0); del buf1041  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1050, (128, 128), (1, 128), 0), view_486, out=buf1052)
    del view_486
    buf1053 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1054 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1055 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1056 = reinterpret_tensor(buf1047, (1, 128, 128), (16384, 128, 1), 0); del buf1047  # reuse
    cpp_fused_add_mul_sum_244(c_void_p(buf1056.data_ptr()), c_void_p(buf1050.data_ptr()), c_void_p(buf1051.data_ptr()), c_void_p(addmm_182.data_ptr()), c_void_p(primals_197.data_ptr()), c_void_p(buf1053.data_ptr()), c_void_p(buf1054.data_ptr()), c_void_p(buf1055.data_ptr()))
    del addmm_182
    del primals_197
    buf1057 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1056, (128, 128), (128, 1), 0), permute_1310, out=buf1057)
    del permute_1310
    buf1058 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1056, (128, 128), (1, 128), 0), view_482, out=buf1058)
    buf1059 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_245(c_void_p(buf1056.data_ptr()), c_void_p(buf1059.data_ptr()))
    buf1063 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1062, (128, 128), (128, 1), 0), permute_1314, out=buf1063)
    del permute_1314
    buf1064 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1062, (128, 128), (1, 128), 0), view_482, out=buf1064)
    del view_482
    buf1065 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1066 = reinterpret_tensor(buf1038, (1, 1, 512), (512, 512, 1), 0); del buf1038  # reuse
    buf1068 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1067 = reinterpret_tensor(buf1043, (1, 128, 512), (65536, 512, 1), 0); del buf1043  # reuse
    cpp_fused_add_mul_sum_246(c_void_p(buf1067.data_ptr()), c_void_p(buf1062.data_ptr()), c_void_p(buf985.data_ptr()), c_void_p(buf1057.data_ptr()), c_void_p(buf1063.data_ptr()), c_void_p(addmm_180.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(primals_177.data_ptr()), c_void_p(primals_178.data_ptr()), c_void_p(primals_193.data_ptr()), c_void_p(buf1065.data_ptr()), c_void_p(buf1066.data_ptr()), c_void_p(buf1068.data_ptr()))
    del addmm_180
    del primals_178
    del primals_193
    buf1069 = reinterpret_tensor(buf1062, (128, 128), (128, 1), 0); del buf1062  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1067, (128, 512), (512, 1), 0), permute_1318, out=buf1069)
    del permute_1318
    buf1070 = reinterpret_tensor(buf985, (512, 128), (128, 1), 0); del buf985  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1067, (512, 128), (1, 512), 0), view_480, out=buf1070)
    del view_480
    buf1071 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1074 = buf1056; del buf1056  # reuse
    cpp_fused_mul_sum_247(c_void_p(buf1067.data_ptr()), c_void_p(buf1069.data_ptr()), c_void_p(primals_191.data_ptr()), c_void_p(buf1071.data_ptr()), c_void_p(buf1074.data_ptr()))
    del primals_191
    buf1075 = buf1063; del buf1063  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1074, (128, 128), (128, 1), 0), permute_1322, out=buf1075)
    del permute_1322
    buf1078 = reinterpret_tensor(buf1075, (1, 128, 512), (65536, 512, 1), 0); del buf1075  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_248(c_void_p(buf1078.data_ptr()), c_void_p(le_49.data_ptr()))
    del le_49
    buf1079 = buf1051; del buf1051  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1078, (128, 512), (512, 1), 0), permute_1326, out=buf1079)
    del permute_1326
    buf1072 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1073 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1077 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1082 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1083 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_249(c_void_p(buf1069.data_ptr()), c_void_p(addmm_179.data_ptr()), c_void_p(buf28.data_ptr()), c_void_p(primals_189.data_ptr()), c_void_p(primals_190.data_ptr()), c_void_p(buf1074.data_ptr()), c_void_p(buf1079.data_ptr()), c_void_p(buf1072.data_ptr()), c_void_p(buf1073.data_ptr()), c_void_p(buf1077.data_ptr()), c_void_p(buf1082.data_ptr()), c_void_p(buf1083.data_ptr()))
    del addmm_179
    del primals_190
    buf1076 = buf1057; del buf1057  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1074, (128, 128), (1, 128), 0), view_478, out=buf1076)
    del view_478
    buf1080 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1078, (512, 128), (1, 512), 0), view_476, out=buf1080)
    del view_476
    buf1081 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1084 = buf1074; del buf1074  # reuse
    cpp_fused_add_mul_sum_250(c_void_p(buf1084.data_ptr()), c_void_p(buf1078.data_ptr()), c_void_p(buf1079.data_ptr()), c_void_p(primals_189.data_ptr()), c_void_p(buf1081.data_ptr()))
    del primals_189
    buf1085 = reinterpret_tensor(buf1078, (128, 512), (512, 1), 0); del buf1078  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1084, (128, 128), (128, 1), 0), permute_1330, out=buf1085)
    del permute_1330
    buf1086 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1084, (128, 128), (1, 128), 0), view_474, out=buf1086)
    del view_474
    buf1088 = reinterpret_tensor(buf1085, (1, 128, 512), (65536, 512, 1), 0); del buf1085  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_251(c_void_p(buf1088.data_ptr()), c_void_p(le_50.data_ptr()))
    del le_50
    buf1089 = buf1079; del buf1079  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1088, (128, 512), (512, 1), 0), permute_1334, out=buf1089)
    del permute_1334
    buf1094 = buf28; del buf28  # reuse
    cpp_fused_add_mul_252(c_void_p(buf1084.data_ptr()), c_void_p(buf1089.data_ptr()), c_void_p(primals_187.data_ptr()), c_void_p(buf1094.data_ptr()))
    del primals_187
    buf1095 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1094, (128, 128), (128, 1), 0), permute_1338, out=buf1095)
    del permute_1338
    buf1098 = reinterpret_tensor(buf1095, (1, 128, 512), (65536, 512, 1), 0); del buf1095  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_253(c_void_p(buf1098.data_ptr()), c_void_p(le_51.data_ptr()))
    del le_51
    buf1099 = buf1069; del buf1069  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1098, (128, 512), (512, 1), 0), permute_1342, out=buf1099)
    del permute_1342
    buf1087 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1092 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1093 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1097 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1102 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1103 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_254(c_void_p(buf1084.data_ptr()), c_void_p(buf1089.data_ptr()), c_void_p(addmm_175.data_ptr()), c_void_p(buf27.data_ptr()), c_void_p(primals_185.data_ptr()), c_void_p(primals_186.data_ptr()), c_void_p(buf1094.data_ptr()), c_void_p(buf1099.data_ptr()), c_void_p(buf1087.data_ptr()), c_void_p(buf1092.data_ptr()), c_void_p(buf1093.data_ptr()), c_void_p(buf1097.data_ptr()), c_void_p(buf1102.data_ptr()), c_void_p(buf1103.data_ptr()))
    del addmm_175
    del primals_186
    buf1090 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1088, (512, 128), (1, 512), 0), view_472, out=buf1090)
    del view_472
    buf1091 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_255(c_void_p(buf1088.data_ptr()), c_void_p(buf1091.data_ptr()))
    buf1096 = reinterpret_tensor(buf1088, (128, 512), (512, 1), 0); del buf1088  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1094, (128, 128), (1, 128), 0), view_470, out=buf1096)
    del view_470
    buf1100 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1098, (512, 128), (1, 512), 0), view_468, out=buf1100)
    del view_468
    buf1101 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1104 = buf1094; del buf1094  # reuse
    cpp_fused_add_mul_sum_256(c_void_p(buf1104.data_ptr()), c_void_p(buf1098.data_ptr()), c_void_p(buf1099.data_ptr()), c_void_p(primals_185.data_ptr()), c_void_p(buf1101.data_ptr()))
    del primals_185
    buf1105 = reinterpret_tensor(buf1098, (128, 512), (512, 1), 0); del buf1098  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1104, (128, 128), (128, 1), 0), permute_1346, out=buf1105)
    del permute_1346
    buf1106 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1104, (128, 128), (1, 128), 0), view_466, out=buf1106)
    del view_466
    buf1108 = reinterpret_tensor(buf1105, (1, 128, 512), (65536, 512, 1), 0); del buf1105  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_257(c_void_p(buf1108.data_ptr()), c_void_p(le_52.data_ptr()))
    del le_52
    buf1109 = buf1099; del buf1099  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1108, (128, 512), (512, 1), 0), permute_1350, out=buf1109)
    del permute_1350
    buf1114 = buf27; del buf27  # reuse
    buf1144 = reinterpret_tensor(buf1089, (1, 128, 128), (16384, 128, 1), 0); del buf1089  # reuse
    buf1107 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1112 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1113 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1117 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1142 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1143 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_258(c_void_p(buf1104.data_ptr()), c_void_p(buf1109.data_ptr()), c_void_p(primals_183.data_ptr()), c_void_p(primals_179.data_ptr()), c_void_p(addmm_171.data_ptr()), c_void_p(addmm_166.data_ptr()), c_void_p(primals_180.data_ptr()), c_void_p(buf1114.data_ptr()), c_void_p(buf1144.data_ptr()), c_void_p(buf1107.data_ptr()), c_void_p(buf1112.data_ptr()), c_void_p(buf1113.data_ptr()), c_void_p(buf1117.data_ptr()), c_void_p(buf1142.data_ptr()), c_void_p(buf1143.data_ptr()))
    del addmm_166
    del addmm_171
    del primals_179
    del primals_180
    del primals_183
    buf1110 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1108, (512, 128), (1, 512), 0), view_464, out=buf1110)
    del view_464
    buf1111 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_259(c_void_p(buf1108.data_ptr()), c_void_p(buf1111.data_ptr()))
    buf1115 = buf1109; del buf1109  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1114, (128, 128), (128, 1), 0), permute_1354, out=buf1115)
    del permute_1354
    buf1116 = reinterpret_tensor(buf1104, (128, 128), (128, 1), 0); del buf1104  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1114, (128, 128), (1, 128), 0), view_462, out=buf1116)
    del view_462
    buf1118 = reinterpret_tensor(buf1114, (4, 128, 32), (4096, 32, 1), 0); del buf1114  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_73, reinterpret_tensor(buf1115, (4, 128, 32), (32, 128, 1), 0), out=buf1118)
    del permute_default_73
    buf1119 = reinterpret_tensor(buf1108, (4, 128, 128), (16384, 128, 1), 0); del buf1108  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1115, (4, 128, 32), (32, 128, 1), 0), permute_default_74, out=buf1119)
    del permute_default_74
    buf1120 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1121 = reinterpret_tensor(buf1119, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1119  # reuse
    cpp_fused_260(c_void_p(buf1121.data_ptr()), c_void_p(getitem_75.data_ptr()), c_void_p(alias_default_25.data_ptr()), c_void_p(buf1120.data_ptr()))
    del alias_default_25
    del getitem_75
    buf1122 = reinterpret_tensor(buf1115, (4, 32, 128), (4096, 128, 1), 0); del buf1115  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_75, reinterpret_tensor(buf1121, (4, 128, 128), (16384, 128, 1), 0), out=buf1122)
    del permute_default_75
    buf1123 = reinterpret_tensor(buf1084, (4, 128, 32), (4096, 32, 1), 0); del buf1084  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1121, (4, 128, 128), (16384, 128, 1), 0), permute_default_76, out=buf1123)
    del permute_default_76
    buf1124 = buf1050; del buf1050  # reuse
    cpp_fused_view_261(c_void_p(buf1118.data_ptr()), c_void_p(buf1124.data_ptr()))
    buf1125 = reinterpret_tensor(buf1121, (128, 512), (512, 1), 0); del buf1121  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1124, permute_1367, out=buf1125)
    del permute_1367
    buf1126 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1124, (128, 128), (1, 128), 0), view_442, out=buf1126)
    buf1127 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1128 = reinterpret_tensor(buf1122, (128, 128), (1, 128), 0); del buf1122  # reuse
    cpp_fused_sum_view_262(c_void_p(buf1128.data_ptr()), c_void_p(buf1124.data_ptr()), c_void_p(buf1127.data_ptr()))
    buf1129 = buf1124; del buf1124  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1128, permute_1371, out=buf1129)
    del permute_1371
    buf1130 = reinterpret_tensor(buf1118, (128, 128), (128, 1), 0); del buf1118  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1128, (128, 128), (128, 1), 0), view_446, out=buf1130)
    buf1131 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1132 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_263(c_void_p(buf1128.data_ptr()), c_void_p(buf1123.data_ptr()), c_void_p(buf1131.data_ptr()), c_void_p(buf1132.data_ptr()))
    buf1133 = reinterpret_tensor(buf1128, (128, 128), (128, 1), 0); del buf1128  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1132, permute_1375, out=buf1133)
    del permute_1375
    buf1134 = reinterpret_tensor(buf1123, (128, 128), (128, 1), 0); del buf1123  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1132, (128, 128), (1, 128), 0), view_446, out=buf1134)
    del view_446
    buf1135 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1136 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1137 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1138 = reinterpret_tensor(buf1129, (1, 128, 128), (16384, 128, 1), 0); del buf1129  # reuse
    cpp_fused_add_mul_sum_264(c_void_p(buf1138.data_ptr()), c_void_p(buf1132.data_ptr()), c_void_p(buf1133.data_ptr()), c_void_p(addmm_167.data_ptr()), c_void_p(primals_181.data_ptr()), c_void_p(buf1135.data_ptr()), c_void_p(buf1136.data_ptr()), c_void_p(buf1137.data_ptr()))
    del addmm_167
    del primals_181
    buf1139 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1138, (128, 128), (128, 1), 0), permute_1379, out=buf1139)
    del permute_1379
    buf1140 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1138, (128, 128), (1, 128), 0), view_442, out=buf1140)
    buf1141 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_265(c_void_p(buf1138.data_ptr()), c_void_p(buf1141.data_ptr()))
    buf1145 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1144, (128, 128), (128, 1), 0), permute_1383, out=buf1145)
    del permute_1383
    buf1146 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1144, (128, 128), (1, 128), 0), view_442, out=buf1146)
    del view_442
    buf1147 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1148 = reinterpret_tensor(buf1120, (1, 1, 512), (512, 512, 1), 0); del buf1120  # reuse
    buf1150 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1149 = buf1067; del buf1067  # reuse
    cpp_fused_add_mul_sum_266(c_void_p(buf1149.data_ptr()), c_void_p(buf1144.data_ptr()), c_void_p(buf1125.data_ptr()), c_void_p(buf1139.data_ptr()), c_void_p(buf1145.data_ptr()), c_void_p(buf26.data_ptr()), c_void_p(primals_177.data_ptr()), c_void_p(buf1147.data_ptr()), c_void_p(buf1148.data_ptr()), c_void_p(buf1150.data_ptr()))
    del primals_177
    buf1151 = reinterpret_tensor(buf1144, (128, 128), (128, 1), 0); del buf1144  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1149, (128, 512), (512, 1), 0), permute_1387, out=buf1151)
    del permute_1387
    buf1152 = reinterpret_tensor(buf26, (512, 128), (128, 1), 0); del buf26  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1149, (512, 128), (1, 512), 0), view_440, out=buf1152)
    del view_440
    buf1153 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1156 = buf1138; del buf1138  # reuse
    cpp_fused_mul_sum_267(c_void_p(buf1149.data_ptr()), c_void_p(buf1151.data_ptr()), c_void_p(primals_175.data_ptr()), c_void_p(buf1153.data_ptr()), c_void_p(buf1156.data_ptr()))
    del primals_175
    buf1157 = buf1145; del buf1145  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1156, (128, 128), (128, 1), 0), permute_1391, out=buf1157)
    del permute_1391
    buf1160 = reinterpret_tensor(buf1157, (1, 128, 512), (65536, 512, 1), 0); del buf1157  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_268(c_void_p(buf1160.data_ptr()), c_void_p(le_53.data_ptr()))
    del le_53
    buf1161 = buf1133; del buf1133  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1160, (128, 512), (512, 1), 0), permute_1395, out=buf1161)
    del permute_1395
    buf1154 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1155 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1159 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1164 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1165 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_269(c_void_p(buf1151.data_ptr()), c_void_p(addmm_164.data_ptr()), c_void_p(buf25.data_ptr()), c_void_p(primals_173.data_ptr()), c_void_p(primals_174.data_ptr()), c_void_p(buf1156.data_ptr()), c_void_p(buf1161.data_ptr()), c_void_p(buf1154.data_ptr()), c_void_p(buf1155.data_ptr()), c_void_p(buf1159.data_ptr()), c_void_p(buf1164.data_ptr()), c_void_p(buf1165.data_ptr()))
    del addmm_164
    del primals_174
    buf1158 = buf1139; del buf1139  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1156, (128, 128), (1, 128), 0), view_438, out=buf1158)
    del view_438
    buf1162 = reinterpret_tensor(buf1125, (512, 128), (128, 1), 0); del buf1125  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1160, (512, 128), (1, 512), 0), view_436, out=buf1162)
    del view_436
    buf1163 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1166 = buf1156; del buf1156  # reuse
    cpp_fused_add_mul_sum_270(c_void_p(buf1166.data_ptr()), c_void_p(buf1160.data_ptr()), c_void_p(buf1161.data_ptr()), c_void_p(primals_173.data_ptr()), c_void_p(buf1163.data_ptr()))
    del primals_173
    buf1167 = reinterpret_tensor(buf1160, (128, 512), (512, 1), 0); del buf1160  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1166, (128, 128), (128, 1), 0), permute_1399, out=buf1167)
    del permute_1399
    buf1168 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1166, (128, 128), (1, 128), 0), view_434, out=buf1168)
    del view_434
    buf1170 = reinterpret_tensor(buf1167, (1, 128, 512), (65536, 512, 1), 0); del buf1167  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_271(c_void_p(buf1170.data_ptr()), c_void_p(le_54.data_ptr()))
    del le_54
    buf1171 = buf1161; del buf1161  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1170, (128, 512), (512, 1), 0), permute_1403, out=buf1171)
    del permute_1403
    buf1176 = buf25; del buf25  # reuse
    cpp_fused_add_mul_272(c_void_p(buf1166.data_ptr()), c_void_p(buf1171.data_ptr()), c_void_p(primals_171.data_ptr()), c_void_p(buf1176.data_ptr()))
    del primals_171
    buf1177 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1176, (128, 128), (128, 1), 0), permute_1407, out=buf1177)
    del permute_1407
    buf1180 = reinterpret_tensor(buf1177, (1, 128, 512), (65536, 512, 1), 0); del buf1177  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_273(c_void_p(buf1180.data_ptr()), c_void_p(le_55.data_ptr()))
    del le_55
    buf1181 = buf1151; del buf1151  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1180, (128, 512), (512, 1), 0), permute_1411, out=buf1181)
    del permute_1411
    buf1169 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1174 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1175 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1179 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1184 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1185 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_274(c_void_p(buf1166.data_ptr()), c_void_p(buf1171.data_ptr()), c_void_p(addmm_160.data_ptr()), c_void_p(buf24.data_ptr()), c_void_p(primals_169.data_ptr()), c_void_p(primals_170.data_ptr()), c_void_p(buf1176.data_ptr()), c_void_p(buf1181.data_ptr()), c_void_p(buf1169.data_ptr()), c_void_p(buf1174.data_ptr()), c_void_p(buf1175.data_ptr()), c_void_p(buf1179.data_ptr()), c_void_p(buf1184.data_ptr()), c_void_p(buf1185.data_ptr()))
    del addmm_160
    del primals_170
    buf1172 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1170, (512, 128), (1, 512), 0), view_432, out=buf1172)
    del view_432
    buf1173 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_275(c_void_p(buf1170.data_ptr()), c_void_p(buf1173.data_ptr()))
    buf1178 = reinterpret_tensor(buf1170, (128, 512), (512, 1), 0); del buf1170  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1176, (128, 128), (1, 128), 0), view_430, out=buf1178)
    del view_430
    buf1182 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1180, (512, 128), (1, 512), 0), view_428, out=buf1182)
    del view_428
    buf1183 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1186 = buf1176; del buf1176  # reuse
    cpp_fused_add_mul_sum_276(c_void_p(buf1186.data_ptr()), c_void_p(buf1180.data_ptr()), c_void_p(buf1181.data_ptr()), c_void_p(primals_169.data_ptr()), c_void_p(buf1183.data_ptr()))
    del primals_169
    buf1187 = reinterpret_tensor(buf1180, (128, 512), (512, 1), 0); del buf1180  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1186, (128, 128), (128, 1), 0), permute_1415, out=buf1187)
    del permute_1415
    buf1188 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1186, (128, 128), (1, 128), 0), view_426, out=buf1188)
    del view_426
    buf1190 = reinterpret_tensor(buf1187, (1, 128, 512), (65536, 512, 1), 0); del buf1187  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_277(c_void_p(buf1190.data_ptr()), c_void_p(le_56.data_ptr()))
    del le_56
    buf1191 = buf1181; del buf1181  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1190, (128, 512), (512, 1), 0), permute_1419, out=buf1191)
    del permute_1419
    buf1196 = buf24; del buf24  # reuse
    buf1226 = reinterpret_tensor(buf1171, (1, 128, 128), (16384, 128, 1), 0); del buf1171  # reuse
    buf1189 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1194 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1195 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1199 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1224 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1225 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_278(c_void_p(buf1186.data_ptr()), c_void_p(buf1191.data_ptr()), c_void_p(primals_167.data_ptr()), c_void_p(primals_163.data_ptr()), c_void_p(addmm_156.data_ptr()), c_void_p(addmm_151.data_ptr()), c_void_p(primals_164.data_ptr()), c_void_p(buf1196.data_ptr()), c_void_p(buf1226.data_ptr()), c_void_p(buf1189.data_ptr()), c_void_p(buf1194.data_ptr()), c_void_p(buf1195.data_ptr()), c_void_p(buf1199.data_ptr()), c_void_p(buf1224.data_ptr()), c_void_p(buf1225.data_ptr()))
    del addmm_151
    del addmm_156
    del primals_163
    del primals_164
    del primals_167
    buf1192 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1190, (512, 128), (1, 512), 0), view_424, out=buf1192)
    del view_424
    buf1193 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_279(c_void_p(buf1190.data_ptr()), c_void_p(buf1193.data_ptr()))
    buf1197 = buf1191; del buf1191  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1196, (128, 128), (128, 1), 0), permute_1423, out=buf1197)
    del permute_1423
    buf1198 = reinterpret_tensor(buf1186, (128, 128), (128, 1), 0); del buf1186  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1196, (128, 128), (1, 128), 0), view_422, out=buf1198)
    del view_422
    buf1200 = reinterpret_tensor(buf1196, (4, 128, 32), (4096, 32, 1), 0); del buf1196  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_79, reinterpret_tensor(buf1197, (4, 128, 32), (32, 128, 1), 0), out=buf1200)
    del permute_default_79
    buf1201 = reinterpret_tensor(buf1190, (4, 128, 128), (16384, 128, 1), 0); del buf1190  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1197, (4, 128, 32), (32, 128, 1), 0), permute_default_80, out=buf1201)
    del permute_default_80
    buf1202 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1203 = reinterpret_tensor(buf1201, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1201  # reuse
    cpp_fused_280(c_void_p(buf1203.data_ptr()), c_void_p(getitem_77.data_ptr()), c_void_p(alias_default_27.data_ptr()), c_void_p(buf1202.data_ptr()))
    del alias_default_27
    del getitem_77
    buf1204 = reinterpret_tensor(buf1197, (4, 32, 128), (4096, 128, 1), 0); del buf1197  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_81, reinterpret_tensor(buf1203, (4, 128, 128), (16384, 128, 1), 0), out=buf1204)
    del permute_default_81
    buf1205 = reinterpret_tensor(buf1166, (4, 128, 32), (4096, 32, 1), 0); del buf1166  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1203, (4, 128, 128), (16384, 128, 1), 0), permute_default_82, out=buf1205)
    del permute_default_82
    buf1206 = buf1132; del buf1132  # reuse
    cpp_fused_view_281(c_void_p(buf1200.data_ptr()), c_void_p(buf1206.data_ptr()))
    buf1207 = reinterpret_tensor(buf1203, (128, 512), (512, 1), 0); del buf1203  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1206, permute_1436, out=buf1207)
    del permute_1436
    buf1208 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1206, (128, 128), (1, 128), 0), view_402, out=buf1208)
    buf1209 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1210 = reinterpret_tensor(buf1204, (128, 128), (1, 128), 0); del buf1204  # reuse
    cpp_fused_sum_view_282(c_void_p(buf1210.data_ptr()), c_void_p(buf1206.data_ptr()), c_void_p(buf1209.data_ptr()))
    buf1211 = buf1206; del buf1206  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1210, permute_1440, out=buf1211)
    del permute_1440
    buf1212 = reinterpret_tensor(buf1200, (128, 128), (128, 1), 0); del buf1200  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1210, (128, 128), (128, 1), 0), view_406, out=buf1212)
    buf1213 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1214 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_283(c_void_p(buf1210.data_ptr()), c_void_p(buf1205.data_ptr()), c_void_p(buf1213.data_ptr()), c_void_p(buf1214.data_ptr()))
    buf1215 = reinterpret_tensor(buf1210, (128, 128), (128, 1), 0); del buf1210  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1214, permute_1444, out=buf1215)
    del permute_1444
    buf1216 = reinterpret_tensor(buf1205, (128, 128), (128, 1), 0); del buf1205  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1214, (128, 128), (1, 128), 0), view_406, out=buf1216)
    del view_406
    buf1217 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1218 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1219 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1220 = reinterpret_tensor(buf1211, (1, 128, 128), (16384, 128, 1), 0); del buf1211  # reuse
    cpp_fused_add_mul_sum_284(c_void_p(buf1220.data_ptr()), c_void_p(buf1214.data_ptr()), c_void_p(buf1215.data_ptr()), c_void_p(addmm_152.data_ptr()), c_void_p(primals_165.data_ptr()), c_void_p(buf1217.data_ptr()), c_void_p(buf1218.data_ptr()), c_void_p(buf1219.data_ptr()))
    del addmm_152
    del primals_165
    buf1221 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1220, (128, 128), (128, 1), 0), permute_1448, out=buf1221)
    del permute_1448
    buf1222 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1220, (128, 128), (1, 128), 0), view_402, out=buf1222)
    buf1223 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_285(c_void_p(buf1220.data_ptr()), c_void_p(buf1223.data_ptr()))
    buf1227 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1226, (128, 128), (128, 1), 0), permute_1452, out=buf1227)
    del permute_1452
    buf1228 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1226, (128, 128), (1, 128), 0), view_402, out=buf1228)
    del view_402
    buf1229 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1230 = reinterpret_tensor(buf1202, (1, 1, 512), (512, 512, 1), 0); del buf1202  # reuse
    buf1232 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1231 = buf1149; del buf1149  # reuse
    cpp_fused_add_mul_sum_286(c_void_p(buf1231.data_ptr()), c_void_p(buf1226.data_ptr()), c_void_p(buf1207.data_ptr()), c_void_p(buf1221.data_ptr()), c_void_p(buf1227.data_ptr()), c_void_p(addmm_150.data_ptr()), c_void_p(buf21.data_ptr()), c_void_p(primals_145.data_ptr()), c_void_p(primals_146.data_ptr()), c_void_p(primals_161.data_ptr()), c_void_p(buf1229.data_ptr()), c_void_p(buf1230.data_ptr()), c_void_p(buf1232.data_ptr()))
    del addmm_150
    del primals_146
    del primals_161
    buf1233 = reinterpret_tensor(buf1226, (128, 128), (128, 1), 0); del buf1226  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1231, (128, 512), (512, 1), 0), permute_1456, out=buf1233)
    del permute_1456
    buf1234 = reinterpret_tensor(buf1227, (512, 128), (128, 1), 0); del buf1227  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1231, (512, 128), (1, 512), 0), view_400, out=buf1234)
    del view_400
    buf1235 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1238 = buf1220; del buf1220  # reuse
    cpp_fused_mul_sum_287(c_void_p(buf1231.data_ptr()), c_void_p(buf1233.data_ptr()), c_void_p(primals_159.data_ptr()), c_void_p(buf1235.data_ptr()), c_void_p(buf1238.data_ptr()))
    del primals_159
    buf1239 = buf1221; del buf1221  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1238, (128, 128), (128, 1), 0), permute_1460, out=buf1239)
    del permute_1460
    buf1242 = reinterpret_tensor(buf1239, (1, 128, 512), (65536, 512, 1), 0); del buf1239  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_288(c_void_p(buf1242.data_ptr()), c_void_p(le_57.data_ptr()))
    del le_57
    buf1243 = buf1215; del buf1215  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1242, (128, 512), (512, 1), 0), permute_1464, out=buf1243)
    del permute_1464
    buf1236 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1237 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1241 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1246 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1247 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_289(c_void_p(buf1233.data_ptr()), c_void_p(addmm_149.data_ptr()), c_void_p(buf23.data_ptr()), c_void_p(primals_157.data_ptr()), c_void_p(primals_158.data_ptr()), c_void_p(buf1238.data_ptr()), c_void_p(buf1243.data_ptr()), c_void_p(buf1236.data_ptr()), c_void_p(buf1237.data_ptr()), c_void_p(buf1241.data_ptr()), c_void_p(buf1246.data_ptr()), c_void_p(buf1247.data_ptr()))
    del addmm_149
    del primals_158
    buf1240 = buf1207; del buf1207  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1238, (128, 128), (1, 128), 0), view_398, out=buf1240)
    del view_398
    buf1244 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1242, (512, 128), (1, 512), 0), view_396, out=buf1244)
    del view_396
    buf1245 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1248 = buf1238; del buf1238  # reuse
    cpp_fused_add_mul_sum_290(c_void_p(buf1248.data_ptr()), c_void_p(buf1242.data_ptr()), c_void_p(buf1243.data_ptr()), c_void_p(primals_157.data_ptr()), c_void_p(buf1245.data_ptr()))
    del primals_157
    buf1249 = reinterpret_tensor(buf1242, (128, 512), (512, 1), 0); del buf1242  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1248, (128, 128), (128, 1), 0), permute_1468, out=buf1249)
    del permute_1468
    buf1250 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1248, (128, 128), (1, 128), 0), view_394, out=buf1250)
    del view_394
    buf1252 = reinterpret_tensor(buf1249, (1, 128, 512), (65536, 512, 1), 0); del buf1249  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_291(c_void_p(buf1252.data_ptr()), c_void_p(le_58.data_ptr()))
    del le_58
    buf1253 = buf1243; del buf1243  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1252, (128, 512), (512, 1), 0), permute_1472, out=buf1253)
    del permute_1472
    buf1258 = buf23; del buf23  # reuse
    cpp_fused_add_mul_292(c_void_p(buf1248.data_ptr()), c_void_p(buf1253.data_ptr()), c_void_p(primals_155.data_ptr()), c_void_p(buf1258.data_ptr()))
    del primals_155
    buf1259 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1258, (128, 128), (128, 1), 0), permute_1476, out=buf1259)
    del permute_1476
    buf1262 = reinterpret_tensor(buf1259, (1, 128, 512), (65536, 512, 1), 0); del buf1259  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_293(c_void_p(buf1262.data_ptr()), c_void_p(le_59.data_ptr()))
    del le_59
    buf1263 = buf1233; del buf1233  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1262, (128, 512), (512, 1), 0), permute_1480, out=buf1263)
    del permute_1480
    buf1251 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1256 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1257 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1261 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1266 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1267 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_294(c_void_p(buf1248.data_ptr()), c_void_p(buf1253.data_ptr()), c_void_p(addmm_145.data_ptr()), c_void_p(buf22.data_ptr()), c_void_p(primals_153.data_ptr()), c_void_p(primals_154.data_ptr()), c_void_p(buf1258.data_ptr()), c_void_p(buf1263.data_ptr()), c_void_p(buf1251.data_ptr()), c_void_p(buf1256.data_ptr()), c_void_p(buf1257.data_ptr()), c_void_p(buf1261.data_ptr()), c_void_p(buf1266.data_ptr()), c_void_p(buf1267.data_ptr()))
    del addmm_145
    del primals_154
    buf1254 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1252, (512, 128), (1, 512), 0), view_392, out=buf1254)
    del view_392
    buf1255 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_295(c_void_p(buf1252.data_ptr()), c_void_p(buf1255.data_ptr()))
    buf1260 = reinterpret_tensor(buf1252, (128, 512), (512, 1), 0); del buf1252  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1258, (128, 128), (1, 128), 0), view_390, out=buf1260)
    del view_390
    buf1264 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1262, (512, 128), (1, 512), 0), view_388, out=buf1264)
    del view_388
    buf1265 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1268 = buf1258; del buf1258  # reuse
    cpp_fused_add_mul_sum_296(c_void_p(buf1268.data_ptr()), c_void_p(buf1262.data_ptr()), c_void_p(buf1263.data_ptr()), c_void_p(primals_153.data_ptr()), c_void_p(buf1265.data_ptr()))
    del primals_153
    buf1269 = reinterpret_tensor(buf1262, (128, 512), (512, 1), 0); del buf1262  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1268, (128, 128), (128, 1), 0), permute_1484, out=buf1269)
    del permute_1484
    buf1270 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1268, (128, 128), (1, 128), 0), view_386, out=buf1270)
    del view_386
    buf1272 = reinterpret_tensor(buf1269, (1, 128, 512), (65536, 512, 1), 0); del buf1269  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_297(c_void_p(buf1272.data_ptr()), c_void_p(le_60.data_ptr()))
    del le_60
    buf1273 = buf1263; del buf1263  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1272, (128, 512), (512, 1), 0), permute_1488, out=buf1273)
    del permute_1488
    buf1278 = buf22; del buf22  # reuse
    buf1308 = reinterpret_tensor(buf1253, (1, 128, 128), (16384, 128, 1), 0); del buf1253  # reuse
    buf1271 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1276 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1277 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1281 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1306 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1307 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_298(c_void_p(buf1268.data_ptr()), c_void_p(buf1273.data_ptr()), c_void_p(primals_151.data_ptr()), c_void_p(primals_147.data_ptr()), c_void_p(addmm_141.data_ptr()), c_void_p(addmm_136.data_ptr()), c_void_p(primals_148.data_ptr()), c_void_p(buf1278.data_ptr()), c_void_p(buf1308.data_ptr()), c_void_p(buf1271.data_ptr()), c_void_p(buf1276.data_ptr()), c_void_p(buf1277.data_ptr()), c_void_p(buf1281.data_ptr()), c_void_p(buf1306.data_ptr()), c_void_p(buf1307.data_ptr()))
    del addmm_136
    del addmm_141
    del primals_147
    del primals_148
    del primals_151
    buf1274 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1272, (512, 128), (1, 512), 0), view_384, out=buf1274)
    del view_384
    buf1275 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_299(c_void_p(buf1272.data_ptr()), c_void_p(buf1275.data_ptr()))
    buf1279 = buf1273; del buf1273  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1278, (128, 128), (128, 1), 0), permute_1492, out=buf1279)
    del permute_1492
    buf1280 = reinterpret_tensor(buf1268, (128, 128), (128, 1), 0); del buf1268  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1278, (128, 128), (1, 128), 0), view_382, out=buf1280)
    del view_382
    buf1282 = reinterpret_tensor(buf1278, (4, 128, 32), (4096, 32, 1), 0); del buf1278  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_85, reinterpret_tensor(buf1279, (4, 128, 32), (32, 128, 1), 0), out=buf1282)
    del permute_default_85
    buf1283 = reinterpret_tensor(buf1272, (4, 128, 128), (16384, 128, 1), 0); del buf1272  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1279, (4, 128, 32), (32, 128, 1), 0), permute_default_86, out=buf1283)
    del permute_default_86
    buf1284 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1285 = reinterpret_tensor(buf1283, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1283  # reuse
    cpp_fused_300(c_void_p(buf1285.data_ptr()), c_void_p(getitem_79.data_ptr()), c_void_p(alias_default_29.data_ptr()), c_void_p(buf1284.data_ptr()))
    del alias_default_29
    del getitem_79
    buf1286 = reinterpret_tensor(buf1279, (4, 32, 128), (4096, 128, 1), 0); del buf1279  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_87, reinterpret_tensor(buf1285, (4, 128, 128), (16384, 128, 1), 0), out=buf1286)
    del permute_default_87
    buf1287 = reinterpret_tensor(buf1248, (4, 128, 32), (4096, 32, 1), 0); del buf1248  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1285, (4, 128, 128), (16384, 128, 1), 0), permute_default_88, out=buf1287)
    del permute_default_88
    buf1288 = buf1214; del buf1214  # reuse
    cpp_fused_view_301(c_void_p(buf1282.data_ptr()), c_void_p(buf1288.data_ptr()))
    buf1289 = reinterpret_tensor(buf1285, (128, 512), (512, 1), 0); del buf1285  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1288, permute_1505, out=buf1289)
    del permute_1505
    buf1290 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1288, (128, 128), (1, 128), 0), view_362, out=buf1290)
    buf1291 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1292 = reinterpret_tensor(buf1286, (128, 128), (1, 128), 0); del buf1286  # reuse
    cpp_fused_sum_view_302(c_void_p(buf1292.data_ptr()), c_void_p(buf1288.data_ptr()), c_void_p(buf1291.data_ptr()))
    buf1293 = buf1288; del buf1288  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1292, permute_1509, out=buf1293)
    del permute_1509
    buf1294 = reinterpret_tensor(buf1282, (128, 128), (128, 1), 0); del buf1282  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1292, (128, 128), (128, 1), 0), view_366, out=buf1294)
    buf1295 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1296 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_303(c_void_p(buf1292.data_ptr()), c_void_p(buf1287.data_ptr()), c_void_p(buf1295.data_ptr()), c_void_p(buf1296.data_ptr()))
    buf1297 = reinterpret_tensor(buf1292, (128, 128), (128, 1), 0); del buf1292  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1296, permute_1513, out=buf1297)
    del permute_1513
    buf1298 = reinterpret_tensor(buf1287, (128, 128), (128, 1), 0); del buf1287  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1296, (128, 128), (1, 128), 0), view_366, out=buf1298)
    del view_366
    buf1299 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1300 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1301 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1302 = reinterpret_tensor(buf1293, (1, 128, 128), (16384, 128, 1), 0); del buf1293  # reuse
    cpp_fused_add_mul_sum_304(c_void_p(buf1302.data_ptr()), c_void_p(buf1296.data_ptr()), c_void_p(buf1297.data_ptr()), c_void_p(addmm_137.data_ptr()), c_void_p(primals_149.data_ptr()), c_void_p(buf1299.data_ptr()), c_void_p(buf1300.data_ptr()), c_void_p(buf1301.data_ptr()))
    del addmm_137
    del primals_149
    buf1303 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1302, (128, 128), (128, 1), 0), permute_1517, out=buf1303)
    del permute_1517
    buf1304 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1302, (128, 128), (1, 128), 0), view_362, out=buf1304)
    buf1305 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_305(c_void_p(buf1302.data_ptr()), c_void_p(buf1305.data_ptr()))
    buf1309 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1308, (128, 128), (128, 1), 0), permute_1521, out=buf1309)
    del permute_1521
    buf1310 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1308, (128, 128), (1, 128), 0), view_362, out=buf1310)
    del view_362
    buf1311 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1312 = reinterpret_tensor(buf1284, (1, 1, 512), (512, 512, 1), 0); del buf1284  # reuse
    buf1314 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1313 = buf1231; del buf1231  # reuse
    cpp_fused_add_mul_sum_306(c_void_p(buf1313.data_ptr()), c_void_p(buf1308.data_ptr()), c_void_p(buf1289.data_ptr()), c_void_p(buf1303.data_ptr()), c_void_p(buf1309.data_ptr()), c_void_p(buf21.data_ptr()), c_void_p(primals_145.data_ptr()), c_void_p(buf1311.data_ptr()), c_void_p(buf1312.data_ptr()), c_void_p(buf1314.data_ptr()))
    del primals_145
    buf1315 = reinterpret_tensor(buf1308, (128, 128), (128, 1), 0); del buf1308  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1313, (128, 512), (512, 1), 0), permute_1525, out=buf1315)
    del permute_1525
    buf1316 = reinterpret_tensor(buf21, (512, 128), (128, 1), 0); del buf21  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1313, (512, 128), (1, 512), 0), view_360, out=buf1316)
    del view_360
    buf1317 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1320 = buf1302; del buf1302  # reuse
    cpp_fused_mul_sum_307(c_void_p(buf1313.data_ptr()), c_void_p(buf1315.data_ptr()), c_void_p(primals_143.data_ptr()), c_void_p(buf1317.data_ptr()), c_void_p(buf1320.data_ptr()))
    del primals_143
    buf1321 = buf1309; del buf1309  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1320, (128, 128), (128, 1), 0), permute_1529, out=buf1321)
    del permute_1529
    buf1324 = reinterpret_tensor(buf1321, (1, 128, 512), (65536, 512, 1), 0); del buf1321  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_308(c_void_p(buf1324.data_ptr()), c_void_p(le_61.data_ptr()))
    del le_61
    buf1325 = buf1297; del buf1297  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1324, (128, 512), (512, 1), 0), permute_1533, out=buf1325)
    del permute_1533
    buf1318 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1319 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1323 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1328 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1329 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_309(c_void_p(buf1315.data_ptr()), c_void_p(addmm_134.data_ptr()), c_void_p(buf20.data_ptr()), c_void_p(primals_141.data_ptr()), c_void_p(primals_142.data_ptr()), c_void_p(buf1320.data_ptr()), c_void_p(buf1325.data_ptr()), c_void_p(buf1318.data_ptr()), c_void_p(buf1319.data_ptr()), c_void_p(buf1323.data_ptr()), c_void_p(buf1328.data_ptr()), c_void_p(buf1329.data_ptr()))
    del addmm_134
    del primals_142
    buf1322 = buf1303; del buf1303  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1320, (128, 128), (1, 128), 0), view_358, out=buf1322)
    del view_358
    buf1326 = reinterpret_tensor(buf1289, (512, 128), (128, 1), 0); del buf1289  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1324, (512, 128), (1, 512), 0), view_356, out=buf1326)
    del view_356
    buf1327 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1330 = buf1320; del buf1320  # reuse
    cpp_fused_add_mul_sum_310(c_void_p(buf1330.data_ptr()), c_void_p(buf1324.data_ptr()), c_void_p(buf1325.data_ptr()), c_void_p(primals_141.data_ptr()), c_void_p(buf1327.data_ptr()))
    del primals_141
    buf1331 = reinterpret_tensor(buf1324, (128, 512), (512, 1), 0); del buf1324  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1330, (128, 128), (128, 1), 0), permute_1537, out=buf1331)
    del permute_1537
    buf1332 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1330, (128, 128), (1, 128), 0), view_354, out=buf1332)
    del view_354
    buf1334 = reinterpret_tensor(buf1331, (1, 128, 512), (65536, 512, 1), 0); del buf1331  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_311(c_void_p(buf1334.data_ptr()), c_void_p(le_62.data_ptr()))
    del le_62
    buf1335 = buf1325; del buf1325  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1334, (128, 512), (512, 1), 0), permute_1541, out=buf1335)
    del permute_1541
    buf1340 = buf20; del buf20  # reuse
    cpp_fused_add_mul_312(c_void_p(buf1330.data_ptr()), c_void_p(buf1335.data_ptr()), c_void_p(primals_139.data_ptr()), c_void_p(buf1340.data_ptr()))
    del primals_139
    buf1341 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1340, (128, 128), (128, 1), 0), permute_1545, out=buf1341)
    del permute_1545
    buf1344 = reinterpret_tensor(buf1341, (1, 128, 512), (65536, 512, 1), 0); del buf1341  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_313(c_void_p(buf1344.data_ptr()), c_void_p(le_63.data_ptr()))
    del le_63
    buf1345 = buf1315; del buf1315  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1344, (128, 512), (512, 1), 0), permute_1549, out=buf1345)
    del permute_1549
    buf1333 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1338 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1339 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1343 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1348 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1349 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_314(c_void_p(buf1330.data_ptr()), c_void_p(buf1335.data_ptr()), c_void_p(addmm_130.data_ptr()), c_void_p(buf19.data_ptr()), c_void_p(primals_137.data_ptr()), c_void_p(primals_138.data_ptr()), c_void_p(buf1340.data_ptr()), c_void_p(buf1345.data_ptr()), c_void_p(buf1333.data_ptr()), c_void_p(buf1338.data_ptr()), c_void_p(buf1339.data_ptr()), c_void_p(buf1343.data_ptr()), c_void_p(buf1348.data_ptr()), c_void_p(buf1349.data_ptr()))
    del addmm_130
    del primals_138
    buf1336 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1334, (512, 128), (1, 512), 0), view_352, out=buf1336)
    del view_352
    buf1337 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_315(c_void_p(buf1334.data_ptr()), c_void_p(buf1337.data_ptr()))
    buf1342 = reinterpret_tensor(buf1334, (128, 512), (512, 1), 0); del buf1334  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1340, (128, 128), (1, 128), 0), view_350, out=buf1342)
    del view_350
    buf1346 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1344, (512, 128), (1, 512), 0), view_348, out=buf1346)
    del view_348
    buf1347 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1350 = buf1340; del buf1340  # reuse
    cpp_fused_add_mul_sum_316(c_void_p(buf1350.data_ptr()), c_void_p(buf1344.data_ptr()), c_void_p(buf1345.data_ptr()), c_void_p(primals_137.data_ptr()), c_void_p(buf1347.data_ptr()))
    del primals_137
    buf1351 = reinterpret_tensor(buf1344, (128, 512), (512, 1), 0); del buf1344  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1350, (128, 128), (128, 1), 0), permute_1553, out=buf1351)
    del permute_1553
    buf1352 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1350, (128, 128), (1, 128), 0), view_346, out=buf1352)
    del view_346
    buf1354 = reinterpret_tensor(buf1351, (1, 128, 512), (65536, 512, 1), 0); del buf1351  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_317(c_void_p(buf1354.data_ptr()), c_void_p(le_64.data_ptr()))
    del le_64
    buf1355 = buf1345; del buf1345  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1354, (128, 512), (512, 1), 0), permute_1557, out=buf1355)
    del permute_1557
    buf1360 = buf19; del buf19  # reuse
    buf1390 = reinterpret_tensor(buf1335, (1, 128, 128), (16384, 128, 1), 0); del buf1335  # reuse
    buf1353 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1358 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1359 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1363 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1388 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1389 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_318(c_void_p(buf1350.data_ptr()), c_void_p(buf1355.data_ptr()), c_void_p(primals_135.data_ptr()), c_void_p(primals_131.data_ptr()), c_void_p(addmm_126.data_ptr()), c_void_p(addmm_121.data_ptr()), c_void_p(primals_132.data_ptr()), c_void_p(buf1360.data_ptr()), c_void_p(buf1390.data_ptr()), c_void_p(buf1353.data_ptr()), c_void_p(buf1358.data_ptr()), c_void_p(buf1359.data_ptr()), c_void_p(buf1363.data_ptr()), c_void_p(buf1388.data_ptr()), c_void_p(buf1389.data_ptr()))
    del addmm_121
    del addmm_126
    del primals_131
    del primals_132
    del primals_135
    buf1356 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1354, (512, 128), (1, 512), 0), view_344, out=buf1356)
    del view_344
    buf1357 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_319(c_void_p(buf1354.data_ptr()), c_void_p(buf1357.data_ptr()))
    buf1361 = buf1355; del buf1355  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1360, (128, 128), (128, 1), 0), permute_1561, out=buf1361)
    del permute_1561
    buf1362 = reinterpret_tensor(buf1350, (128, 128), (128, 1), 0); del buf1350  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1360, (128, 128), (1, 128), 0), view_342, out=buf1362)
    del view_342
    buf1364 = reinterpret_tensor(buf1360, (4, 128, 32), (4096, 32, 1), 0); del buf1360  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_91, reinterpret_tensor(buf1361, (4, 128, 32), (32, 128, 1), 0), out=buf1364)
    del permute_default_91
    buf1365 = reinterpret_tensor(buf1354, (4, 128, 128), (16384, 128, 1), 0); del buf1354  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1361, (4, 128, 32), (32, 128, 1), 0), permute_default_92, out=buf1365)
    del permute_default_92
    buf1366 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1367 = reinterpret_tensor(buf1365, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1365  # reuse
    cpp_fused_320(c_void_p(buf1367.data_ptr()), c_void_p(getitem_81.data_ptr()), c_void_p(alias_default_31.data_ptr()), c_void_p(buf1366.data_ptr()))
    del alias_default_31
    del getitem_81
    buf1368 = reinterpret_tensor(buf1361, (4, 32, 128), (4096, 128, 1), 0); del buf1361  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_93, reinterpret_tensor(buf1367, (4, 128, 128), (16384, 128, 1), 0), out=buf1368)
    del permute_default_93
    buf1369 = reinterpret_tensor(buf1330, (4, 128, 32), (4096, 32, 1), 0); del buf1330  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1367, (4, 128, 128), (16384, 128, 1), 0), permute_default_94, out=buf1369)
    del permute_default_94
    buf1370 = buf1296; del buf1296  # reuse
    cpp_fused_view_321(c_void_p(buf1364.data_ptr()), c_void_p(buf1370.data_ptr()))
    buf1371 = reinterpret_tensor(buf1367, (128, 512), (512, 1), 0); del buf1367  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1370, permute_1574, out=buf1371)
    del permute_1574
    buf1372 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1370, (128, 128), (1, 128), 0), view_322, out=buf1372)
    buf1373 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1374 = reinterpret_tensor(buf1368, (128, 128), (1, 128), 0); del buf1368  # reuse
    cpp_fused_sum_view_322(c_void_p(buf1374.data_ptr()), c_void_p(buf1370.data_ptr()), c_void_p(buf1373.data_ptr()))
    buf1375 = buf1370; del buf1370  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1374, permute_1578, out=buf1375)
    del permute_1578
    buf1376 = reinterpret_tensor(buf1364, (128, 128), (128, 1), 0); del buf1364  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1374, (128, 128), (128, 1), 0), view_326, out=buf1376)
    buf1377 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1378 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_323(c_void_p(buf1374.data_ptr()), c_void_p(buf1369.data_ptr()), c_void_p(buf1377.data_ptr()), c_void_p(buf1378.data_ptr()))
    buf1379 = reinterpret_tensor(buf1374, (128, 128), (128, 1), 0); del buf1374  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1378, permute_1582, out=buf1379)
    del permute_1582
    buf1380 = reinterpret_tensor(buf1369, (128, 128), (128, 1), 0); del buf1369  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1378, (128, 128), (1, 128), 0), view_326, out=buf1380)
    del view_326
    buf1381 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1382 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1383 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1384 = reinterpret_tensor(buf1375, (1, 128, 128), (16384, 128, 1), 0); del buf1375  # reuse
    cpp_fused_add_mul_sum_324(c_void_p(buf1384.data_ptr()), c_void_p(buf1378.data_ptr()), c_void_p(buf1379.data_ptr()), c_void_p(addmm_122.data_ptr()), c_void_p(primals_133.data_ptr()), c_void_p(buf1381.data_ptr()), c_void_p(buf1382.data_ptr()), c_void_p(buf1383.data_ptr()))
    del addmm_122
    del primals_133
    buf1385 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1384, (128, 128), (128, 1), 0), permute_1586, out=buf1385)
    del permute_1586
    buf1386 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1384, (128, 128), (1, 128), 0), view_322, out=buf1386)
    buf1387 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_325(c_void_p(buf1384.data_ptr()), c_void_p(buf1387.data_ptr()))
    buf1391 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1390, (128, 128), (128, 1), 0), permute_1590, out=buf1391)
    del permute_1590
    buf1392 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1390, (128, 128), (1, 128), 0), view_322, out=buf1392)
    del view_322
    buf1393 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1394 = reinterpret_tensor(buf1366, (1, 1, 512), (512, 512, 1), 0); del buf1366  # reuse
    buf1396 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1395 = buf1313; del buf1313  # reuse
    cpp_fused_add_mul_sum_326(c_void_p(buf1395.data_ptr()), c_void_p(buf1390.data_ptr()), c_void_p(buf1371.data_ptr()), c_void_p(buf1385.data_ptr()), c_void_p(buf1391.data_ptr()), c_void_p(addmm_120.data_ptr()), c_void_p(buf16.data_ptr()), c_void_p(primals_113.data_ptr()), c_void_p(primals_114.data_ptr()), c_void_p(primals_129.data_ptr()), c_void_p(buf1393.data_ptr()), c_void_p(buf1394.data_ptr()), c_void_p(buf1396.data_ptr()))
    del addmm_120
    del primals_114
    del primals_129
    buf1397 = reinterpret_tensor(buf1390, (128, 128), (128, 1), 0); del buf1390  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1395, (128, 512), (512, 1), 0), permute_1594, out=buf1397)
    del permute_1594
    buf1398 = reinterpret_tensor(buf1391, (512, 128), (128, 1), 0); del buf1391  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1395, (512, 128), (1, 512), 0), view_320, out=buf1398)
    del view_320
    buf1399 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1402 = buf1384; del buf1384  # reuse
    cpp_fused_mul_sum_327(c_void_p(buf1395.data_ptr()), c_void_p(buf1397.data_ptr()), c_void_p(primals_127.data_ptr()), c_void_p(buf1399.data_ptr()), c_void_p(buf1402.data_ptr()))
    del primals_127
    buf1403 = buf1385; del buf1385  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1402, (128, 128), (128, 1), 0), permute_1598, out=buf1403)
    del permute_1598
    buf1406 = reinterpret_tensor(buf1403, (1, 128, 512), (65536, 512, 1), 0); del buf1403  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_328(c_void_p(buf1406.data_ptr()), c_void_p(le_65.data_ptr()))
    del le_65
    buf1407 = buf1379; del buf1379  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1406, (128, 512), (512, 1), 0), permute_1602, out=buf1407)
    del permute_1602
    buf1400 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1401 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1405 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1410 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1411 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_329(c_void_p(buf1397.data_ptr()), c_void_p(addmm_119.data_ptr()), c_void_p(buf18.data_ptr()), c_void_p(primals_125.data_ptr()), c_void_p(primals_126.data_ptr()), c_void_p(buf1402.data_ptr()), c_void_p(buf1407.data_ptr()), c_void_p(buf1400.data_ptr()), c_void_p(buf1401.data_ptr()), c_void_p(buf1405.data_ptr()), c_void_p(buf1410.data_ptr()), c_void_p(buf1411.data_ptr()))
    del addmm_119
    del primals_126
    buf1404 = buf1371; del buf1371  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1402, (128, 128), (1, 128), 0), view_318, out=buf1404)
    del view_318
    buf1408 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1406, (512, 128), (1, 512), 0), view_316, out=buf1408)
    del view_316
    buf1409 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1412 = buf1402; del buf1402  # reuse
    cpp_fused_add_mul_sum_330(c_void_p(buf1412.data_ptr()), c_void_p(buf1406.data_ptr()), c_void_p(buf1407.data_ptr()), c_void_p(primals_125.data_ptr()), c_void_p(buf1409.data_ptr()))
    del primals_125
    buf1413 = reinterpret_tensor(buf1406, (128, 512), (512, 1), 0); del buf1406  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1412, (128, 128), (128, 1), 0), permute_1606, out=buf1413)
    del permute_1606
    buf1414 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1412, (128, 128), (1, 128), 0), view_314, out=buf1414)
    del view_314
    buf1416 = reinterpret_tensor(buf1413, (1, 128, 512), (65536, 512, 1), 0); del buf1413  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_331(c_void_p(buf1416.data_ptr()), c_void_p(le_66.data_ptr()))
    del le_66
    buf1417 = buf1407; del buf1407  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1416, (128, 512), (512, 1), 0), permute_1610, out=buf1417)
    del permute_1610
    buf1422 = buf18; del buf18  # reuse
    cpp_fused_add_mul_332(c_void_p(buf1412.data_ptr()), c_void_p(buf1417.data_ptr()), c_void_p(primals_123.data_ptr()), c_void_p(buf1422.data_ptr()))
    del primals_123
    buf1423 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1422, (128, 128), (128, 1), 0), permute_1614, out=buf1423)
    del permute_1614
    buf1426 = reinterpret_tensor(buf1423, (1, 128, 512), (65536, 512, 1), 0); del buf1423  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_333(c_void_p(buf1426.data_ptr()), c_void_p(le_67.data_ptr()))
    del le_67
    buf1427 = buf1397; del buf1397  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1426, (128, 512), (512, 1), 0), permute_1618, out=buf1427)
    del permute_1618
    buf1415 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1420 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1421 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1425 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1430 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1431 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_334(c_void_p(buf1412.data_ptr()), c_void_p(buf1417.data_ptr()), c_void_p(addmm_115.data_ptr()), c_void_p(buf17.data_ptr()), c_void_p(primals_121.data_ptr()), c_void_p(primals_122.data_ptr()), c_void_p(buf1422.data_ptr()), c_void_p(buf1427.data_ptr()), c_void_p(buf1415.data_ptr()), c_void_p(buf1420.data_ptr()), c_void_p(buf1421.data_ptr()), c_void_p(buf1425.data_ptr()), c_void_p(buf1430.data_ptr()), c_void_p(buf1431.data_ptr()))
    del addmm_115
    del primals_122
    buf1418 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1416, (512, 128), (1, 512), 0), view_312, out=buf1418)
    del view_312
    buf1419 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_335(c_void_p(buf1416.data_ptr()), c_void_p(buf1419.data_ptr()))
    buf1424 = reinterpret_tensor(buf1416, (128, 512), (512, 1), 0); del buf1416  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1422, (128, 128), (1, 128), 0), view_310, out=buf1424)
    del view_310
    buf1428 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1426, (512, 128), (1, 512), 0), view_308, out=buf1428)
    del view_308
    buf1429 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1432 = buf1422; del buf1422  # reuse
    cpp_fused_add_mul_sum_336(c_void_p(buf1432.data_ptr()), c_void_p(buf1426.data_ptr()), c_void_p(buf1427.data_ptr()), c_void_p(primals_121.data_ptr()), c_void_p(buf1429.data_ptr()))
    del primals_121
    buf1433 = reinterpret_tensor(buf1426, (128, 512), (512, 1), 0); del buf1426  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1432, (128, 128), (128, 1), 0), permute_1622, out=buf1433)
    del permute_1622
    buf1434 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1432, (128, 128), (1, 128), 0), view_306, out=buf1434)
    del view_306
    buf1436 = reinterpret_tensor(buf1433, (1, 128, 512), (65536, 512, 1), 0); del buf1433  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_337(c_void_p(buf1436.data_ptr()), c_void_p(le_68.data_ptr()))
    del le_68
    buf1437 = buf1427; del buf1427  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1436, (128, 512), (512, 1), 0), permute_1626, out=buf1437)
    del permute_1626
    buf1442 = buf17; del buf17  # reuse
    buf1472 = reinterpret_tensor(buf1417, (1, 128, 128), (16384, 128, 1), 0); del buf1417  # reuse
    buf1435 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1440 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1441 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1445 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1470 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1471 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_338(c_void_p(buf1432.data_ptr()), c_void_p(buf1437.data_ptr()), c_void_p(primals_119.data_ptr()), c_void_p(primals_115.data_ptr()), c_void_p(addmm_111.data_ptr()), c_void_p(addmm_106.data_ptr()), c_void_p(primals_116.data_ptr()), c_void_p(buf1442.data_ptr()), c_void_p(buf1472.data_ptr()), c_void_p(buf1435.data_ptr()), c_void_p(buf1440.data_ptr()), c_void_p(buf1441.data_ptr()), c_void_p(buf1445.data_ptr()), c_void_p(buf1470.data_ptr()), c_void_p(buf1471.data_ptr()))
    del addmm_106
    del addmm_111
    del primals_115
    del primals_116
    del primals_119
    buf1438 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1436, (512, 128), (1, 512), 0), view_304, out=buf1438)
    del view_304
    buf1439 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_339(c_void_p(buf1436.data_ptr()), c_void_p(buf1439.data_ptr()))
    buf1443 = buf1437; del buf1437  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1442, (128, 128), (128, 1), 0), permute_1630, out=buf1443)
    del permute_1630
    buf1444 = reinterpret_tensor(buf1432, (128, 128), (128, 1), 0); del buf1432  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1442, (128, 128), (1, 128), 0), view_302, out=buf1444)
    del view_302
    buf1446 = reinterpret_tensor(buf1442, (4, 128, 32), (4096, 32, 1), 0); del buf1442  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_97, reinterpret_tensor(buf1443, (4, 128, 32), (32, 128, 1), 0), out=buf1446)
    del permute_default_97
    buf1447 = reinterpret_tensor(buf1436, (4, 128, 128), (16384, 128, 1), 0); del buf1436  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1443, (4, 128, 32), (32, 128, 1), 0), permute_default_98, out=buf1447)
    del permute_default_98
    buf1448 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1449 = reinterpret_tensor(buf1447, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1447  # reuse
    cpp_fused_340(c_void_p(buf1449.data_ptr()), c_void_p(getitem_83.data_ptr()), c_void_p(alias_default_33.data_ptr()), c_void_p(buf1448.data_ptr()))
    del alias_default_33
    del getitem_83
    buf1450 = reinterpret_tensor(buf1443, (4, 32, 128), (4096, 128, 1), 0); del buf1443  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_99, reinterpret_tensor(buf1449, (4, 128, 128), (16384, 128, 1), 0), out=buf1450)
    del permute_default_99
    buf1451 = reinterpret_tensor(buf1412, (4, 128, 32), (4096, 32, 1), 0); del buf1412  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1449, (4, 128, 128), (16384, 128, 1), 0), permute_default_100, out=buf1451)
    del permute_default_100
    buf1452 = buf1378; del buf1378  # reuse
    cpp_fused_view_341(c_void_p(buf1446.data_ptr()), c_void_p(buf1452.data_ptr()))
    buf1453 = reinterpret_tensor(buf1449, (128, 512), (512, 1), 0); del buf1449  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1452, permute_1643, out=buf1453)
    del permute_1643
    buf1454 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1452, (128, 128), (1, 128), 0), view_282, out=buf1454)
    buf1455 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1456 = reinterpret_tensor(buf1450, (128, 128), (1, 128), 0); del buf1450  # reuse
    cpp_fused_sum_view_342(c_void_p(buf1456.data_ptr()), c_void_p(buf1452.data_ptr()), c_void_p(buf1455.data_ptr()))
    buf1457 = buf1452; del buf1452  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1456, permute_1647, out=buf1457)
    del permute_1647
    buf1458 = reinterpret_tensor(buf1446, (128, 128), (128, 1), 0); del buf1446  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1456, (128, 128), (128, 1), 0), view_286, out=buf1458)
    buf1459 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1460 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_343(c_void_p(buf1456.data_ptr()), c_void_p(buf1451.data_ptr()), c_void_p(buf1459.data_ptr()), c_void_p(buf1460.data_ptr()))
    buf1461 = reinterpret_tensor(buf1456, (128, 128), (128, 1), 0); del buf1456  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1460, permute_1651, out=buf1461)
    del permute_1651
    buf1462 = reinterpret_tensor(buf1451, (128, 128), (128, 1), 0); del buf1451  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1460, (128, 128), (1, 128), 0), view_286, out=buf1462)
    del view_286
    buf1463 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1464 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1465 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1466 = reinterpret_tensor(buf1457, (1, 128, 128), (16384, 128, 1), 0); del buf1457  # reuse
    cpp_fused_add_mul_sum_344(c_void_p(buf1466.data_ptr()), c_void_p(buf1460.data_ptr()), c_void_p(buf1461.data_ptr()), c_void_p(addmm_107.data_ptr()), c_void_p(primals_117.data_ptr()), c_void_p(buf1463.data_ptr()), c_void_p(buf1464.data_ptr()), c_void_p(buf1465.data_ptr()))
    del addmm_107
    del primals_117
    buf1467 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1466, (128, 128), (128, 1), 0), permute_1655, out=buf1467)
    del permute_1655
    buf1468 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1466, (128, 128), (1, 128), 0), view_282, out=buf1468)
    buf1469 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_345(c_void_p(buf1466.data_ptr()), c_void_p(buf1469.data_ptr()))
    buf1473 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1472, (128, 128), (128, 1), 0), permute_1659, out=buf1473)
    del permute_1659
    buf1474 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1472, (128, 128), (1, 128), 0), view_282, out=buf1474)
    del view_282
    buf1475 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1476 = reinterpret_tensor(buf1448, (1, 1, 512), (512, 512, 1), 0); del buf1448  # reuse
    buf1478 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1477 = buf1395; del buf1395  # reuse
    cpp_fused_add_mul_sum_346(c_void_p(buf1477.data_ptr()), c_void_p(buf1472.data_ptr()), c_void_p(buf1453.data_ptr()), c_void_p(buf1467.data_ptr()), c_void_p(buf1473.data_ptr()), c_void_p(buf16.data_ptr()), c_void_p(primals_113.data_ptr()), c_void_p(buf1475.data_ptr()), c_void_p(buf1476.data_ptr()), c_void_p(buf1478.data_ptr()))
    del primals_113
    buf1479 = reinterpret_tensor(buf1472, (128, 128), (128, 1), 0); del buf1472  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1477, (128, 512), (512, 1), 0), permute_1663, out=buf1479)
    del permute_1663
    buf1480 = reinterpret_tensor(buf16, (512, 128), (128, 1), 0); del buf16  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1477, (512, 128), (1, 512), 0), view_280, out=buf1480)
    del view_280
    buf1481 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1484 = buf1466; del buf1466  # reuse
    cpp_fused_mul_sum_347(c_void_p(buf1477.data_ptr()), c_void_p(buf1479.data_ptr()), c_void_p(primals_111.data_ptr()), c_void_p(buf1481.data_ptr()), c_void_p(buf1484.data_ptr()))
    del primals_111
    buf1485 = buf1473; del buf1473  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1484, (128, 128), (128, 1), 0), permute_1667, out=buf1485)
    del permute_1667
    buf1488 = reinterpret_tensor(buf1485, (1, 128, 512), (65536, 512, 1), 0); del buf1485  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_348(c_void_p(buf1488.data_ptr()), c_void_p(le_69.data_ptr()))
    del le_69
    buf1489 = buf1461; del buf1461  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1488, (128, 512), (512, 1), 0), permute_1671, out=buf1489)
    del permute_1671
    buf1482 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1483 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1487 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1492 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1493 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_349(c_void_p(buf1479.data_ptr()), c_void_p(addmm_104.data_ptr()), c_void_p(buf15.data_ptr()), c_void_p(primals_109.data_ptr()), c_void_p(primals_110.data_ptr()), c_void_p(buf1484.data_ptr()), c_void_p(buf1489.data_ptr()), c_void_p(buf1482.data_ptr()), c_void_p(buf1483.data_ptr()), c_void_p(buf1487.data_ptr()), c_void_p(buf1492.data_ptr()), c_void_p(buf1493.data_ptr()))
    del addmm_104
    del primals_110
    buf1486 = buf1467; del buf1467  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1484, (128, 128), (1, 128), 0), view_278, out=buf1486)
    del view_278
    buf1490 = reinterpret_tensor(buf1453, (512, 128), (128, 1), 0); del buf1453  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1488, (512, 128), (1, 512), 0), view_276, out=buf1490)
    del view_276
    buf1491 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1494 = buf1484; del buf1484  # reuse
    cpp_fused_add_mul_sum_350(c_void_p(buf1494.data_ptr()), c_void_p(buf1488.data_ptr()), c_void_p(buf1489.data_ptr()), c_void_p(primals_109.data_ptr()), c_void_p(buf1491.data_ptr()))
    del primals_109
    buf1495 = reinterpret_tensor(buf1488, (128, 512), (512, 1), 0); del buf1488  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1494, (128, 128), (128, 1), 0), permute_1675, out=buf1495)
    del permute_1675
    buf1496 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1494, (128, 128), (1, 128), 0), view_274, out=buf1496)
    del view_274
    buf1498 = reinterpret_tensor(buf1495, (1, 128, 512), (65536, 512, 1), 0); del buf1495  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_351(c_void_p(buf1498.data_ptr()), c_void_p(le_70.data_ptr()))
    del le_70
    buf1499 = buf1489; del buf1489  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1498, (128, 512), (512, 1), 0), permute_1679, out=buf1499)
    del permute_1679
    buf1504 = buf15; del buf15  # reuse
    cpp_fused_add_mul_352(c_void_p(buf1494.data_ptr()), c_void_p(buf1499.data_ptr()), c_void_p(primals_107.data_ptr()), c_void_p(buf1504.data_ptr()))
    del primals_107
    buf1505 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1504, (128, 128), (128, 1), 0), permute_1683, out=buf1505)
    del permute_1683
    buf1508 = reinterpret_tensor(buf1505, (1, 128, 512), (65536, 512, 1), 0); del buf1505  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_353(c_void_p(buf1508.data_ptr()), c_void_p(le_71.data_ptr()))
    del le_71
    buf1509 = buf1479; del buf1479  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1508, (128, 512), (512, 1), 0), permute_1687, out=buf1509)
    del permute_1687
    buf1497 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1502 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1503 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1507 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1512 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1513 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_354(c_void_p(buf1494.data_ptr()), c_void_p(buf1499.data_ptr()), c_void_p(addmm_100.data_ptr()), c_void_p(buf14.data_ptr()), c_void_p(primals_105.data_ptr()), c_void_p(primals_106.data_ptr()), c_void_p(buf1504.data_ptr()), c_void_p(buf1509.data_ptr()), c_void_p(buf1497.data_ptr()), c_void_p(buf1502.data_ptr()), c_void_p(buf1503.data_ptr()), c_void_p(buf1507.data_ptr()), c_void_p(buf1512.data_ptr()), c_void_p(buf1513.data_ptr()))
    del addmm_100
    del primals_106
    buf1500 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1498, (512, 128), (1, 512), 0), view_272, out=buf1500)
    del view_272
    buf1501 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_355(c_void_p(buf1498.data_ptr()), c_void_p(buf1501.data_ptr()))
    buf1506 = reinterpret_tensor(buf1498, (128, 512), (512, 1), 0); del buf1498  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1504, (128, 128), (1, 128), 0), view_270, out=buf1506)
    del view_270
    buf1510 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1508, (512, 128), (1, 512), 0), view_268, out=buf1510)
    del view_268
    buf1511 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1514 = buf1504; del buf1504  # reuse
    cpp_fused_add_mul_sum_356(c_void_p(buf1514.data_ptr()), c_void_p(buf1508.data_ptr()), c_void_p(buf1509.data_ptr()), c_void_p(primals_105.data_ptr()), c_void_p(buf1511.data_ptr()))
    del primals_105
    buf1515 = reinterpret_tensor(buf1508, (128, 512), (512, 1), 0); del buf1508  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1514, (128, 128), (128, 1), 0), permute_1691, out=buf1515)
    del permute_1691
    buf1516 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1514, (128, 128), (1, 128), 0), view_266, out=buf1516)
    del view_266
    buf1518 = reinterpret_tensor(buf1515, (1, 128, 512), (65536, 512, 1), 0); del buf1515  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_357(c_void_p(buf1518.data_ptr()), c_void_p(le_72.data_ptr()))
    del le_72
    buf1519 = buf1509; del buf1509  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1518, (128, 512), (512, 1), 0), permute_1695, out=buf1519)
    del permute_1695
    buf1524 = reinterpret_tensor(buf1499, (1, 128, 128), (16384, 128, 1), 0); del buf1499  # reuse
    buf1554 = buf1494; del buf1494  # reuse
    buf1517 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1522 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1523 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1527 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1552 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1553 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_358(c_void_p(buf1514.data_ptr()), c_void_p(buf1519.data_ptr()), c_void_p(primals_103.data_ptr()), c_void_p(primals_99.data_ptr()), c_void_p(addmm_96.data_ptr()), c_void_p(addmm_91.data_ptr()), c_void_p(primals_100.data_ptr()), c_void_p(buf1524.data_ptr()), c_void_p(buf1554.data_ptr()), c_void_p(buf1517.data_ptr()), c_void_p(buf1522.data_ptr()), c_void_p(buf1523.data_ptr()), c_void_p(buf1527.data_ptr()), c_void_p(buf1552.data_ptr()), c_void_p(buf1553.data_ptr()))
    del addmm_91
    del addmm_96
    del primals_100
    del primals_103
    del primals_99
    buf1520 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1518, (512, 128), (1, 512), 0), view_264, out=buf1520)
    del view_264
    buf1521 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_359(c_void_p(buf1518.data_ptr()), c_void_p(buf1521.data_ptr()))
    buf1525 = buf1519; del buf1519  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1524, (128, 128), (128, 1), 0), permute_1699, out=buf1525)
    del permute_1699
    buf1526 = reinterpret_tensor(buf1514, (128, 128), (128, 1), 0); del buf1514  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1524, (128, 128), (1, 128), 0), view_262, out=buf1526)
    del view_262
    buf1528 = reinterpret_tensor(buf1524, (4, 128, 32), (4096, 32, 1), 0); del buf1524  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_103, reinterpret_tensor(buf1525, (4, 128, 32), (32, 128, 1), 0), out=buf1528)
    del permute_default_103
    buf1529 = reinterpret_tensor(buf1518, (4, 128, 128), (16384, 128, 1), 0); del buf1518  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1525, (4, 128, 32), (32, 128, 1), 0), permute_default_104, out=buf1529)
    del permute_default_104
    buf1530 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1531 = reinterpret_tensor(buf1529, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1529  # reuse
    cpp_fused_360(c_void_p(buf1531.data_ptr()), c_void_p(getitem_85.data_ptr()), c_void_p(alias_default_35.data_ptr()), c_void_p(buf1530.data_ptr()))
    del alias_default_35
    del getitem_85
    buf1532 = reinterpret_tensor(buf1525, (4, 32, 128), (4096, 128, 1), 0); del buf1525  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_105, reinterpret_tensor(buf1531, (4, 128, 128), (16384, 128, 1), 0), out=buf1532)
    del permute_default_105
    buf1533 = reinterpret_tensor(buf14, (4, 128, 32), (4096, 32, 1), 0); del buf14  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1531, (4, 128, 128), (16384, 128, 1), 0), permute_default_106, out=buf1533)
    del permute_default_106
    buf1534 = buf1460; del buf1460  # reuse
    cpp_fused_view_361(c_void_p(buf1528.data_ptr()), c_void_p(buf1534.data_ptr()))
    buf1535 = reinterpret_tensor(buf1531, (128, 512), (512, 1), 0); del buf1531  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1534, permute_1712, out=buf1535)
    del permute_1712
    buf1536 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1534, (128, 128), (1, 128), 0), view_242, out=buf1536)
    buf1537 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1538 = reinterpret_tensor(buf1532, (128, 128), (1, 128), 0); del buf1532  # reuse
    cpp_fused_sum_view_362(c_void_p(buf1538.data_ptr()), c_void_p(buf1534.data_ptr()), c_void_p(buf1537.data_ptr()))
    buf1539 = buf1534; del buf1534  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1538, permute_1716, out=buf1539)
    del permute_1716
    buf1540 = reinterpret_tensor(buf1528, (128, 128), (128, 1), 0); del buf1528  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1538, (128, 128), (128, 1), 0), view_246, out=buf1540)
    buf1541 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1542 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_363(c_void_p(buf1538.data_ptr()), c_void_p(buf1533.data_ptr()), c_void_p(buf1541.data_ptr()), c_void_p(buf1542.data_ptr()))
    buf1543 = reinterpret_tensor(buf1538, (128, 128), (128, 1), 0); del buf1538  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1542, permute_1720, out=buf1543)
    del permute_1720
    buf1544 = reinterpret_tensor(buf1533, (128, 128), (128, 1), 0); del buf1533  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1542, (128, 128), (1, 128), 0), view_246, out=buf1544)
    del view_246
    buf1545 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1546 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1547 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1548 = reinterpret_tensor(buf1539, (1, 128, 128), (16384, 128, 1), 0); del buf1539  # reuse
    cpp_fused_add_mul_sum_364(c_void_p(buf1548.data_ptr()), c_void_p(buf1542.data_ptr()), c_void_p(buf1543.data_ptr()), c_void_p(addmm_92.data_ptr()), c_void_p(primals_101.data_ptr()), c_void_p(buf1545.data_ptr()), c_void_p(buf1546.data_ptr()), c_void_p(buf1547.data_ptr()))
    del addmm_92
    del primals_101
    buf1549 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1548, (128, 128), (128, 1), 0), permute_1724, out=buf1549)
    del permute_1724
    buf1550 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1548, (128, 128), (1, 128), 0), view_242, out=buf1550)
    buf1551 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_365(c_void_p(buf1548.data_ptr()), c_void_p(buf1551.data_ptr()))
    buf1555 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1554, (128, 128), (128, 1), 0), permute_1728, out=buf1555)
    del permute_1728
    buf1556 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1554, (128, 128), (1, 128), 0), view_242, out=buf1556)
    del view_242
    buf1557 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1558 = reinterpret_tensor(buf1530, (1, 1, 512), (512, 512, 1), 0); del buf1530  # reuse
    buf1560 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1559 = buf1477; del buf1477  # reuse
    cpp_fused_add_mul_sum_366(c_void_p(buf1559.data_ptr()), c_void_p(buf1554.data_ptr()), c_void_p(buf1535.data_ptr()), c_void_p(buf1549.data_ptr()), c_void_p(buf1555.data_ptr()), c_void_p(addmm_90.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(primals_81.data_ptr()), c_void_p(primals_82.data_ptr()), c_void_p(primals_97.data_ptr()), c_void_p(buf1557.data_ptr()), c_void_p(buf1558.data_ptr()), c_void_p(buf1560.data_ptr()))
    del addmm_90
    del primals_82
    del primals_97
    buf1561 = reinterpret_tensor(buf1554, (128, 128), (128, 1), 0); del buf1554  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1559, (128, 512), (512, 1), 0), permute_1732, out=buf1561)
    del permute_1732
    buf1562 = reinterpret_tensor(buf1555, (512, 128), (128, 1), 0); del buf1555  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1559, (512, 128), (1, 512), 0), view_240, out=buf1562)
    del view_240
    buf1563 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1566 = buf1548; del buf1548  # reuse
    cpp_fused_mul_sum_367(c_void_p(buf1559.data_ptr()), c_void_p(buf1561.data_ptr()), c_void_p(primals_95.data_ptr()), c_void_p(buf1563.data_ptr()), c_void_p(buf1566.data_ptr()))
    del primals_95
    buf1567 = buf1549; del buf1549  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1566, (128, 128), (128, 1), 0), permute_1736, out=buf1567)
    del permute_1736
    buf1570 = reinterpret_tensor(buf1567, (1, 128, 512), (65536, 512, 1), 0); del buf1567  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_368(c_void_p(buf1570.data_ptr()), c_void_p(le_73.data_ptr()))
    del le_73
    buf1571 = buf1543; del buf1543  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1570, (128, 512), (512, 1), 0), permute_1740, out=buf1571)
    del permute_1740
    buf1564 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1565 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1569 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1574 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1575 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_369(c_void_p(buf1561.data_ptr()), c_void_p(addmm_89.data_ptr()), c_void_p(buf13.data_ptr()), c_void_p(primals_93.data_ptr()), c_void_p(primals_94.data_ptr()), c_void_p(buf1566.data_ptr()), c_void_p(buf1571.data_ptr()), c_void_p(buf1564.data_ptr()), c_void_p(buf1565.data_ptr()), c_void_p(buf1569.data_ptr()), c_void_p(buf1574.data_ptr()), c_void_p(buf1575.data_ptr()))
    del addmm_89
    del primals_94
    buf1568 = buf1535; del buf1535  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1566, (128, 128), (1, 128), 0), view_238, out=buf1568)
    del view_238
    buf1572 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1570, (512, 128), (1, 512), 0), view_236, out=buf1572)
    del view_236
    buf1573 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1576 = buf1566; del buf1566  # reuse
    cpp_fused_add_mul_sum_370(c_void_p(buf1576.data_ptr()), c_void_p(buf1570.data_ptr()), c_void_p(buf1571.data_ptr()), c_void_p(primals_93.data_ptr()), c_void_p(buf1573.data_ptr()))
    del primals_93
    buf1577 = reinterpret_tensor(buf1570, (128, 512), (512, 1), 0); del buf1570  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1576, (128, 128), (128, 1), 0), permute_1744, out=buf1577)
    del permute_1744
    buf1578 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1576, (128, 128), (1, 128), 0), view_234, out=buf1578)
    del view_234
    buf1580 = reinterpret_tensor(buf1577, (1, 128, 512), (65536, 512, 1), 0); del buf1577  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_371(c_void_p(buf1580.data_ptr()), c_void_p(le_74.data_ptr()))
    del le_74
    buf1581 = buf1571; del buf1571  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1580, (128, 512), (512, 1), 0), permute_1748, out=buf1581)
    del permute_1748
    buf1586 = reinterpret_tensor(buf1561, (1, 128, 128), (16384, 128, 1), 0); del buf1561  # reuse
    cpp_fused_add_mul_372(c_void_p(buf1576.data_ptr()), c_void_p(buf1581.data_ptr()), c_void_p(primals_91.data_ptr()), c_void_p(buf1586.data_ptr()))
    del primals_91
    buf1587 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1586, (128, 128), (128, 1), 0), permute_1752, out=buf1587)
    del permute_1752
    buf1590 = reinterpret_tensor(buf1587, (1, 128, 512), (65536, 512, 1), 0); del buf1587  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_373(c_void_p(buf1590.data_ptr()), c_void_p(le_75.data_ptr()))
    del le_75
    buf1591 = reinterpret_tensor(buf13, (128, 128), (128, 1), 0); del buf13  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1590, (128, 512), (512, 1), 0), permute_1756, out=buf1591)
    del permute_1756
    buf1579 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1584 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1585 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1589 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1594 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1595 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_374(c_void_p(buf1576.data_ptr()), c_void_p(buf1581.data_ptr()), c_void_p(addmm_85.data_ptr()), c_void_p(buf12.data_ptr()), c_void_p(primals_89.data_ptr()), c_void_p(primals_90.data_ptr()), c_void_p(buf1586.data_ptr()), c_void_p(buf1591.data_ptr()), c_void_p(buf1579.data_ptr()), c_void_p(buf1584.data_ptr()), c_void_p(buf1585.data_ptr()), c_void_p(buf1589.data_ptr()), c_void_p(buf1594.data_ptr()), c_void_p(buf1595.data_ptr()))
    del addmm_85
    del primals_90
    buf1582 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1580, (512, 128), (1, 512), 0), view_232, out=buf1582)
    del view_232
    buf1583 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_375(c_void_p(buf1580.data_ptr()), c_void_p(buf1583.data_ptr()))
    buf1588 = reinterpret_tensor(buf1580, (128, 512), (512, 1), 0); del buf1580  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1586, (128, 128), (1, 128), 0), view_230, out=buf1588)
    del view_230
    buf1592 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1590, (512, 128), (1, 512), 0), view_228, out=buf1592)
    del view_228
    buf1593 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1596 = buf1586; del buf1586  # reuse
    cpp_fused_add_mul_sum_376(c_void_p(buf1596.data_ptr()), c_void_p(buf1590.data_ptr()), c_void_p(buf1591.data_ptr()), c_void_p(primals_89.data_ptr()), c_void_p(buf1593.data_ptr()))
    del primals_89
    buf1597 = reinterpret_tensor(buf1590, (128, 512), (512, 1), 0); del buf1590  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1596, (128, 128), (128, 1), 0), permute_1760, out=buf1597)
    del permute_1760
    buf1598 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1596, (128, 128), (1, 128), 0), view_226, out=buf1598)
    del view_226
    buf1600 = reinterpret_tensor(buf1597, (1, 128, 512), (65536, 512, 1), 0); del buf1597  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_377(c_void_p(buf1600.data_ptr()), c_void_p(le_76.data_ptr()))
    del le_76
    buf1601 = buf1591; del buf1591  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1600, (128, 512), (512, 1), 0), permute_1764, out=buf1601)
    del permute_1764
    buf1606 = reinterpret_tensor(buf1581, (1, 128, 128), (16384, 128, 1), 0); del buf1581  # reuse
    buf1636 = buf1576; del buf1576  # reuse
    buf1599 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1604 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1605 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1609 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1634 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1635 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_378(c_void_p(buf1596.data_ptr()), c_void_p(buf1601.data_ptr()), c_void_p(primals_87.data_ptr()), c_void_p(primals_83.data_ptr()), c_void_p(addmm_81.data_ptr()), c_void_p(addmm_76.data_ptr()), c_void_p(primals_84.data_ptr()), c_void_p(buf1606.data_ptr()), c_void_p(buf1636.data_ptr()), c_void_p(buf1599.data_ptr()), c_void_p(buf1604.data_ptr()), c_void_p(buf1605.data_ptr()), c_void_p(buf1609.data_ptr()), c_void_p(buf1634.data_ptr()), c_void_p(buf1635.data_ptr()))
    del addmm_76
    del addmm_81
    del primals_83
    del primals_84
    del primals_87
    buf1602 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1600, (512, 128), (1, 512), 0), view_224, out=buf1602)
    del view_224
    buf1603 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_379(c_void_p(buf1600.data_ptr()), c_void_p(buf1603.data_ptr()))
    buf1607 = buf1601; del buf1601  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1606, (128, 128), (128, 1), 0), permute_1768, out=buf1607)
    del permute_1768
    buf1608 = reinterpret_tensor(buf1596, (128, 128), (128, 1), 0); del buf1596  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1606, (128, 128), (1, 128), 0), view_222, out=buf1608)
    del view_222
    buf1610 = reinterpret_tensor(buf1606, (4, 128, 32), (4096, 32, 1), 0); del buf1606  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_109, reinterpret_tensor(buf1607, (4, 128, 32), (32, 128, 1), 0), out=buf1610)
    del permute_default_109
    buf1611 = reinterpret_tensor(buf1600, (4, 128, 128), (16384, 128, 1), 0); del buf1600  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1607, (4, 128, 32), (32, 128, 1), 0), permute_default_110, out=buf1611)
    del permute_default_110
    buf1612 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1613 = reinterpret_tensor(buf1611, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1611  # reuse
    cpp_fused_380(c_void_p(buf1613.data_ptr()), c_void_p(getitem_87.data_ptr()), c_void_p(alias_default_37.data_ptr()), c_void_p(buf1612.data_ptr()))
    del alias_default_37
    del getitem_87
    buf1614 = reinterpret_tensor(buf1607, (4, 32, 128), (4096, 128, 1), 0); del buf1607  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_111, reinterpret_tensor(buf1613, (4, 128, 128), (16384, 128, 1), 0), out=buf1614)
    del permute_default_111
    buf1615 = reinterpret_tensor(buf12, (4, 128, 32), (4096, 32, 1), 0); del buf12  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1613, (4, 128, 128), (16384, 128, 1), 0), permute_default_112, out=buf1615)
    del permute_default_112
    buf1616 = buf1542; del buf1542  # reuse
    cpp_fused_view_381(c_void_p(buf1610.data_ptr()), c_void_p(buf1616.data_ptr()))
    buf1617 = reinterpret_tensor(buf1613, (128, 512), (512, 1), 0); del buf1613  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1616, permute_1781, out=buf1617)
    del permute_1781
    buf1618 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1616, (128, 128), (1, 128), 0), view_202, out=buf1618)
    buf1619 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1620 = reinterpret_tensor(buf1614, (128, 128), (1, 128), 0); del buf1614  # reuse
    cpp_fused_sum_view_382(c_void_p(buf1620.data_ptr()), c_void_p(buf1616.data_ptr()), c_void_p(buf1619.data_ptr()))
    buf1621 = buf1616; del buf1616  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1620, permute_1785, out=buf1621)
    del permute_1785
    buf1622 = reinterpret_tensor(buf1610, (128, 128), (128, 1), 0); del buf1610  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1620, (128, 128), (128, 1), 0), view_206, out=buf1622)
    buf1623 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1624 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_383(c_void_p(buf1620.data_ptr()), c_void_p(buf1615.data_ptr()), c_void_p(buf1623.data_ptr()), c_void_p(buf1624.data_ptr()))
    buf1625 = reinterpret_tensor(buf1620, (128, 128), (128, 1), 0); del buf1620  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1624, permute_1789, out=buf1625)
    del permute_1789
    buf1626 = reinterpret_tensor(buf1615, (128, 128), (128, 1), 0); del buf1615  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1624, (128, 128), (1, 128), 0), view_206, out=buf1626)
    del view_206
    buf1627 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1628 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1629 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1630 = reinterpret_tensor(buf1621, (1, 128, 128), (16384, 128, 1), 0); del buf1621  # reuse
    cpp_fused_add_mul_sum_384(c_void_p(buf1630.data_ptr()), c_void_p(buf1624.data_ptr()), c_void_p(buf1625.data_ptr()), c_void_p(addmm_77.data_ptr()), c_void_p(primals_85.data_ptr()), c_void_p(buf1627.data_ptr()), c_void_p(buf1628.data_ptr()), c_void_p(buf1629.data_ptr()))
    del addmm_77
    del primals_85
    buf1631 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1630, (128, 128), (128, 1), 0), permute_1793, out=buf1631)
    del permute_1793
    buf1632 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1630, (128, 128), (1, 128), 0), view_202, out=buf1632)
    buf1633 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_385(c_void_p(buf1630.data_ptr()), c_void_p(buf1633.data_ptr()))
    buf1637 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1636, (128, 128), (128, 1), 0), permute_1797, out=buf1637)
    del permute_1797
    buf1638 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1636, (128, 128), (1, 128), 0), view_202, out=buf1638)
    del view_202
    buf1639 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1640 = reinterpret_tensor(buf1612, (1, 1, 512), (512, 512, 1), 0); del buf1612  # reuse
    buf1642 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1641 = buf1559; del buf1559  # reuse
    cpp_fused_add_mul_sum_386(c_void_p(buf1641.data_ptr()), c_void_p(buf1636.data_ptr()), c_void_p(buf1617.data_ptr()), c_void_p(buf1631.data_ptr()), c_void_p(buf1637.data_ptr()), c_void_p(buf11.data_ptr()), c_void_p(primals_81.data_ptr()), c_void_p(buf1639.data_ptr()), c_void_p(buf1640.data_ptr()), c_void_p(buf1642.data_ptr()))
    del primals_81
    buf1643 = reinterpret_tensor(buf1636, (128, 128), (128, 1), 0); del buf1636  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1641, (128, 512), (512, 1), 0), permute_1801, out=buf1643)
    del permute_1801
    buf1644 = reinterpret_tensor(buf1637, (512, 128), (128, 1), 0); del buf1637  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1641, (512, 128), (1, 512), 0), view_200, out=buf1644)
    del view_200
    buf1645 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1648 = buf1630; del buf1630  # reuse
    cpp_fused_mul_sum_387(c_void_p(buf1641.data_ptr()), c_void_p(buf1643.data_ptr()), c_void_p(primals_79.data_ptr()), c_void_p(buf1645.data_ptr()), c_void_p(buf1648.data_ptr()))
    del primals_79
    buf1649 = buf1631; del buf1631  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1648, (128, 128), (128, 1), 0), permute_1805, out=buf1649)
    del permute_1805
    buf1652 = reinterpret_tensor(buf1649, (1, 128, 512), (65536, 512, 1), 0); del buf1649  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_388(c_void_p(buf1652.data_ptr()), c_void_p(le_77.data_ptr()))
    del le_77
    buf1653 = buf1625; del buf1625  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1652, (128, 512), (512, 1), 0), permute_1809, out=buf1653)
    del permute_1809
    buf1646 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1647 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1651 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1656 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1657 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_389(c_void_p(buf1643.data_ptr()), c_void_p(addmm_74.data_ptr()), c_void_p(buf10.data_ptr()), c_void_p(primals_77.data_ptr()), c_void_p(primals_78.data_ptr()), c_void_p(buf1648.data_ptr()), c_void_p(buf1653.data_ptr()), c_void_p(buf1646.data_ptr()), c_void_p(buf1647.data_ptr()), c_void_p(buf1651.data_ptr()), c_void_p(buf1656.data_ptr()), c_void_p(buf1657.data_ptr()))
    del addmm_74
    del primals_78
    buf1650 = buf1617; del buf1617  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1648, (128, 128), (1, 128), 0), view_198, out=buf1650)
    del view_198
    buf1654 = reinterpret_tensor(buf11, (512, 128), (128, 1), 0); del buf11  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1652, (512, 128), (1, 512), 0), view_196, out=buf1654)
    del view_196
    buf1655 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1658 = buf1648; del buf1648  # reuse
    cpp_fused_add_mul_sum_390(c_void_p(buf1658.data_ptr()), c_void_p(buf1652.data_ptr()), c_void_p(buf1653.data_ptr()), c_void_p(primals_77.data_ptr()), c_void_p(buf1655.data_ptr()))
    del primals_77
    buf1659 = reinterpret_tensor(buf1652, (128, 512), (512, 1), 0); del buf1652  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1658, (128, 128), (128, 1), 0), permute_1813, out=buf1659)
    del permute_1813
    buf1660 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1658, (128, 128), (1, 128), 0), view_194, out=buf1660)
    del view_194
    buf1662 = reinterpret_tensor(buf1659, (1, 128, 512), (65536, 512, 1), 0); del buf1659  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_391(c_void_p(buf1662.data_ptr()), c_void_p(le_78.data_ptr()))
    del le_78
    buf1663 = buf1653; del buf1653  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1662, (128, 512), (512, 1), 0), permute_1817, out=buf1663)
    del permute_1817
    buf1668 = reinterpret_tensor(buf1643, (1, 128, 128), (16384, 128, 1), 0); del buf1643  # reuse
    cpp_fused_add_mul_392(c_void_p(buf1658.data_ptr()), c_void_p(buf1663.data_ptr()), c_void_p(primals_75.data_ptr()), c_void_p(buf1668.data_ptr()))
    del primals_75
    buf1669 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1668, (128, 128), (128, 1), 0), permute_1821, out=buf1669)
    del permute_1821
    buf1672 = reinterpret_tensor(buf1669, (1, 128, 512), (65536, 512, 1), 0); del buf1669  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_393(c_void_p(buf1672.data_ptr()), c_void_p(le_79.data_ptr()))
    del le_79
    buf1673 = reinterpret_tensor(buf10, (128, 128), (128, 1), 0); del buf10  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1672, (128, 512), (512, 1), 0), permute_1825, out=buf1673)
    del permute_1825
    buf1661 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1666 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1667 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1671 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1676 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1677 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_394(c_void_p(buf1658.data_ptr()), c_void_p(buf1663.data_ptr()), c_void_p(addmm_70.data_ptr()), c_void_p(buf9.data_ptr()), c_void_p(primals_73.data_ptr()), c_void_p(primals_74.data_ptr()), c_void_p(buf1668.data_ptr()), c_void_p(buf1673.data_ptr()), c_void_p(buf1661.data_ptr()), c_void_p(buf1666.data_ptr()), c_void_p(buf1667.data_ptr()), c_void_p(buf1671.data_ptr()), c_void_p(buf1676.data_ptr()), c_void_p(buf1677.data_ptr()))
    del addmm_70
    del primals_74
    buf1664 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1662, (512, 128), (1, 512), 0), view_192, out=buf1664)
    del view_192
    buf1665 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_395(c_void_p(buf1662.data_ptr()), c_void_p(buf1665.data_ptr()))
    buf1670 = reinterpret_tensor(buf1662, (128, 512), (512, 1), 0); del buf1662  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1668, (128, 128), (1, 128), 0), view_190, out=buf1670)
    del view_190
    buf1674 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1672, (512, 128), (1, 512), 0), view_188, out=buf1674)
    del view_188
    buf1675 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1678 = buf1668; del buf1668  # reuse
    cpp_fused_add_mul_sum_396(c_void_p(buf1678.data_ptr()), c_void_p(buf1672.data_ptr()), c_void_p(buf1673.data_ptr()), c_void_p(primals_73.data_ptr()), c_void_p(buf1675.data_ptr()))
    del primals_73
    buf1679 = reinterpret_tensor(buf1672, (128, 512), (512, 1), 0); del buf1672  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1678, (128, 128), (128, 1), 0), permute_1829, out=buf1679)
    del permute_1829
    buf1680 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1678, (128, 128), (1, 128), 0), view_186, out=buf1680)
    del view_186
    buf1682 = reinterpret_tensor(buf1679, (1, 128, 512), (65536, 512, 1), 0); del buf1679  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_397(c_void_p(buf1682.data_ptr()), c_void_p(le_80.data_ptr()))
    del le_80
    buf1683 = buf1673; del buf1673  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1682, (128, 512), (512, 1), 0), permute_1833, out=buf1683)
    del permute_1833
    buf1688 = buf9; del buf9  # reuse
    buf1718 = reinterpret_tensor(buf1663, (1, 128, 128), (16384, 128, 1), 0); del buf1663  # reuse
    buf1681 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1686 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1687 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1691 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1716 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1717 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_398(c_void_p(buf1678.data_ptr()), c_void_p(buf1683.data_ptr()), c_void_p(primals_71.data_ptr()), c_void_p(primals_67.data_ptr()), c_void_p(addmm_66.data_ptr()), c_void_p(addmm_61.data_ptr()), c_void_p(primals_68.data_ptr()), c_void_p(buf1688.data_ptr()), c_void_p(buf1718.data_ptr()), c_void_p(buf1681.data_ptr()), c_void_p(buf1686.data_ptr()), c_void_p(buf1687.data_ptr()), c_void_p(buf1691.data_ptr()), c_void_p(buf1716.data_ptr()), c_void_p(buf1717.data_ptr()))
    del addmm_61
    del addmm_66
    del primals_67
    del primals_68
    del primals_71
    buf1684 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1682, (512, 128), (1, 512), 0), view_184, out=buf1684)
    del view_184
    buf1685 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_399(c_void_p(buf1682.data_ptr()), c_void_p(buf1685.data_ptr()))
    buf1689 = buf1683; del buf1683  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1688, (128, 128), (128, 1), 0), permute_1837, out=buf1689)
    del permute_1837
    buf1690 = reinterpret_tensor(buf1678, (128, 128), (128, 1), 0); del buf1678  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1688, (128, 128), (1, 128), 0), view_182, out=buf1690)
    del view_182
    buf1692 = reinterpret_tensor(buf1688, (4, 128, 32), (4096, 32, 1), 0); del buf1688  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_115, reinterpret_tensor(buf1689, (4, 128, 32), (32, 128, 1), 0), out=buf1692)
    del permute_default_115
    buf1693 = reinterpret_tensor(buf1682, (4, 128, 128), (16384, 128, 1), 0); del buf1682  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1689, (4, 128, 32), (32, 128, 1), 0), permute_default_116, out=buf1693)
    del permute_default_116
    buf1694 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1695 = reinterpret_tensor(buf1693, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1693  # reuse
    cpp_fused_400(c_void_p(buf1695.data_ptr()), c_void_p(getitem_89.data_ptr()), c_void_p(alias_default_39.data_ptr()), c_void_p(buf1694.data_ptr()))
    del alias_default_39
    del getitem_89
    buf1696 = reinterpret_tensor(buf1689, (4, 32, 128), (4096, 128, 1), 0); del buf1689  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_117, reinterpret_tensor(buf1695, (4, 128, 128), (16384, 128, 1), 0), out=buf1696)
    del permute_default_117
    buf1697 = reinterpret_tensor(buf1658, (4, 128, 32), (4096, 32, 1), 0); del buf1658  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1695, (4, 128, 128), (16384, 128, 1), 0), permute_default_118, out=buf1697)
    del permute_default_118
    buf1698 = buf1624; del buf1624  # reuse
    cpp_fused_view_401(c_void_p(buf1692.data_ptr()), c_void_p(buf1698.data_ptr()))
    buf1699 = reinterpret_tensor(buf1695, (128, 512), (512, 1), 0); del buf1695  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1698, permute_1850, out=buf1699)
    del permute_1850
    buf1700 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1698, (128, 128), (1, 128), 0), view_162, out=buf1700)
    buf1701 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1702 = reinterpret_tensor(buf1696, (128, 128), (1, 128), 0); del buf1696  # reuse
    cpp_fused_sum_view_402(c_void_p(buf1702.data_ptr()), c_void_p(buf1698.data_ptr()), c_void_p(buf1701.data_ptr()))
    buf1703 = buf1698; del buf1698  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1702, permute_1854, out=buf1703)
    del permute_1854
    buf1704 = reinterpret_tensor(buf1692, (128, 128), (128, 1), 0); del buf1692  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1702, (128, 128), (128, 1), 0), view_166, out=buf1704)
    buf1705 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1706 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_403(c_void_p(buf1702.data_ptr()), c_void_p(buf1697.data_ptr()), c_void_p(buf1705.data_ptr()), c_void_p(buf1706.data_ptr()))
    buf1707 = reinterpret_tensor(buf1702, (128, 128), (128, 1), 0); del buf1702  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1706, permute_1858, out=buf1707)
    del permute_1858
    buf1708 = reinterpret_tensor(buf1697, (128, 128), (128, 1), 0); del buf1697  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1706, (128, 128), (1, 128), 0), view_166, out=buf1708)
    del view_166
    buf1709 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1710 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1711 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1712 = reinterpret_tensor(buf1703, (1, 128, 128), (16384, 128, 1), 0); del buf1703  # reuse
    cpp_fused_add_mul_sum_404(c_void_p(buf1712.data_ptr()), c_void_p(buf1706.data_ptr()), c_void_p(buf1707.data_ptr()), c_void_p(addmm_62.data_ptr()), c_void_p(primals_69.data_ptr()), c_void_p(buf1709.data_ptr()), c_void_p(buf1710.data_ptr()), c_void_p(buf1711.data_ptr()))
    del addmm_62
    del primals_69
    buf1713 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1712, (128, 128), (128, 1), 0), permute_1862, out=buf1713)
    del permute_1862
    buf1714 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1712, (128, 128), (1, 128), 0), view_162, out=buf1714)
    buf1715 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_405(c_void_p(buf1712.data_ptr()), c_void_p(buf1715.data_ptr()))
    buf1719 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1718, (128, 128), (128, 1), 0), permute_1866, out=buf1719)
    del permute_1866
    buf1720 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1718, (128, 128), (1, 128), 0), view_162, out=buf1720)
    del view_162
    buf1721 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1722 = reinterpret_tensor(buf1694, (1, 1, 512), (512, 512, 1), 0); del buf1694  # reuse
    buf1724 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1723 = buf1641; del buf1641  # reuse
    cpp_fused_add_mul_sum_406(c_void_p(buf1723.data_ptr()), c_void_p(buf1718.data_ptr()), c_void_p(buf1699.data_ptr()), c_void_p(buf1713.data_ptr()), c_void_p(buf1719.data_ptr()), c_void_p(addmm_60.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(primals_49.data_ptr()), c_void_p(primals_50.data_ptr()), c_void_p(primals_65.data_ptr()), c_void_p(buf1721.data_ptr()), c_void_p(buf1722.data_ptr()), c_void_p(buf1724.data_ptr()))
    del addmm_60
    del primals_50
    del primals_65
    buf1725 = reinterpret_tensor(buf1718, (128, 128), (128, 1), 0); del buf1718  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1723, (128, 512), (512, 1), 0), permute_1870, out=buf1725)
    del permute_1870
    buf1726 = reinterpret_tensor(buf1719, (512, 128), (128, 1), 0); del buf1719  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1723, (512, 128), (1, 512), 0), view_160, out=buf1726)
    del view_160
    buf1727 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1730 = buf1712; del buf1712  # reuse
    cpp_fused_mul_sum_407(c_void_p(buf1723.data_ptr()), c_void_p(buf1725.data_ptr()), c_void_p(primals_63.data_ptr()), c_void_p(buf1727.data_ptr()), c_void_p(buf1730.data_ptr()))
    del primals_63
    buf1731 = buf1713; del buf1713  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1730, (128, 128), (128, 1), 0), permute_1874, out=buf1731)
    del permute_1874
    buf1734 = reinterpret_tensor(buf1731, (1, 128, 512), (65536, 512, 1), 0); del buf1731  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_408(c_void_p(buf1734.data_ptr()), c_void_p(le_81.data_ptr()))
    del le_81
    buf1735 = buf1707; del buf1707  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1734, (128, 512), (512, 1), 0), permute_1878, out=buf1735)
    del permute_1878
    buf1728 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1729 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1733 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1738 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1739 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_409(c_void_p(buf1725.data_ptr()), c_void_p(addmm_59.data_ptr()), c_void_p(buf8.data_ptr()), c_void_p(primals_61.data_ptr()), c_void_p(primals_62.data_ptr()), c_void_p(buf1730.data_ptr()), c_void_p(buf1735.data_ptr()), c_void_p(buf1728.data_ptr()), c_void_p(buf1729.data_ptr()), c_void_p(buf1733.data_ptr()), c_void_p(buf1738.data_ptr()), c_void_p(buf1739.data_ptr()))
    del addmm_59
    del primals_62
    buf1732 = buf1699; del buf1699  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1730, (128, 128), (1, 128), 0), view_158, out=buf1732)
    del view_158
    buf1736 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1734, (512, 128), (1, 512), 0), view_156, out=buf1736)
    del view_156
    buf1737 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1740 = buf1730; del buf1730  # reuse
    cpp_fused_add_mul_sum_410(c_void_p(buf1740.data_ptr()), c_void_p(buf1734.data_ptr()), c_void_p(buf1735.data_ptr()), c_void_p(primals_61.data_ptr()), c_void_p(buf1737.data_ptr()))
    del primals_61
    buf1741 = reinterpret_tensor(buf1734, (128, 512), (512, 1), 0); del buf1734  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1740, (128, 128), (128, 1), 0), permute_1882, out=buf1741)
    del permute_1882
    buf1742 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1740, (128, 128), (1, 128), 0), view_154, out=buf1742)
    del view_154
    buf1744 = reinterpret_tensor(buf1741, (1, 128, 512), (65536, 512, 1), 0); del buf1741  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_411(c_void_p(buf1744.data_ptr()), c_void_p(le_82.data_ptr()))
    del le_82
    buf1745 = buf1735; del buf1735  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1744, (128, 512), (512, 1), 0), permute_1886, out=buf1745)
    del permute_1886
    buf1750 = buf8; del buf8  # reuse
    cpp_fused_add_mul_412(c_void_p(buf1740.data_ptr()), c_void_p(buf1745.data_ptr()), c_void_p(primals_59.data_ptr()), c_void_p(buf1750.data_ptr()))
    del primals_59
    buf1751 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1750, (128, 128), (128, 1), 0), permute_1890, out=buf1751)
    del permute_1890
    buf1754 = reinterpret_tensor(buf1751, (1, 128, 512), (65536, 512, 1), 0); del buf1751  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_413(c_void_p(buf1754.data_ptr()), c_void_p(le_83.data_ptr()))
    del le_83
    buf1755 = buf1725; del buf1725  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1754, (128, 512), (512, 1), 0), permute_1894, out=buf1755)
    del permute_1894
    buf1743 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1748 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1749 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1753 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1758 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1759 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_414(c_void_p(buf1740.data_ptr()), c_void_p(buf1745.data_ptr()), c_void_p(addmm_55.data_ptr()), c_void_p(buf7.data_ptr()), c_void_p(primals_57.data_ptr()), c_void_p(primals_58.data_ptr()), c_void_p(buf1750.data_ptr()), c_void_p(buf1755.data_ptr()), c_void_p(buf1743.data_ptr()), c_void_p(buf1748.data_ptr()), c_void_p(buf1749.data_ptr()), c_void_p(buf1753.data_ptr()), c_void_p(buf1758.data_ptr()), c_void_p(buf1759.data_ptr()))
    del addmm_55
    del primals_58
    buf1746 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1744, (512, 128), (1, 512), 0), view_152, out=buf1746)
    del view_152
    buf1747 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_415(c_void_p(buf1744.data_ptr()), c_void_p(buf1747.data_ptr()))
    buf1752 = reinterpret_tensor(buf1744, (128, 512), (512, 1), 0); del buf1744  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1750, (128, 128), (1, 128), 0), view_150, out=buf1752)
    del view_150
    buf1756 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1754, (512, 128), (1, 512), 0), view_148, out=buf1756)
    del view_148
    buf1757 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1760 = buf1750; del buf1750  # reuse
    cpp_fused_add_mul_sum_416(c_void_p(buf1760.data_ptr()), c_void_p(buf1754.data_ptr()), c_void_p(buf1755.data_ptr()), c_void_p(primals_57.data_ptr()), c_void_p(buf1757.data_ptr()))
    del primals_57
    buf1761 = reinterpret_tensor(buf1754, (128, 512), (512, 1), 0); del buf1754  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1760, (128, 128), (128, 1), 0), permute_1898, out=buf1761)
    del permute_1898
    buf1762 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1760, (128, 128), (1, 128), 0), view_146, out=buf1762)
    del view_146
    buf1764 = reinterpret_tensor(buf1761, (1, 128, 512), (65536, 512, 1), 0); del buf1761  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_417(c_void_p(buf1764.data_ptr()), c_void_p(le_84.data_ptr()))
    del le_84
    buf1765 = buf1755; del buf1755  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1764, (128, 512), (512, 1), 0), permute_1902, out=buf1765)
    del permute_1902
    buf1770 = buf7; del buf7  # reuse
    buf1800 = reinterpret_tensor(buf1745, (1, 128, 128), (16384, 128, 1), 0); del buf1745  # reuse
    buf1763 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1768 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1769 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1773 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1798 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1799 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_418(c_void_p(buf1760.data_ptr()), c_void_p(buf1765.data_ptr()), c_void_p(primals_55.data_ptr()), c_void_p(primals_51.data_ptr()), c_void_p(addmm_51.data_ptr()), c_void_p(addmm_46.data_ptr()), c_void_p(primals_52.data_ptr()), c_void_p(buf1770.data_ptr()), c_void_p(buf1800.data_ptr()), c_void_p(buf1763.data_ptr()), c_void_p(buf1768.data_ptr()), c_void_p(buf1769.data_ptr()), c_void_p(buf1773.data_ptr()), c_void_p(buf1798.data_ptr()), c_void_p(buf1799.data_ptr()))
    del addmm_46
    del addmm_51
    del primals_51
    del primals_52
    del primals_55
    buf1766 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1764, (512, 128), (1, 512), 0), view_144, out=buf1766)
    del view_144
    buf1767 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_419(c_void_p(buf1764.data_ptr()), c_void_p(buf1767.data_ptr()))
    buf1771 = buf1765; del buf1765  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1770, (128, 128), (128, 1), 0), permute_1906, out=buf1771)
    del permute_1906
    buf1772 = reinterpret_tensor(buf1760, (128, 128), (128, 1), 0); del buf1760  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1770, (128, 128), (1, 128), 0), view_142, out=buf1772)
    del view_142
    buf1774 = reinterpret_tensor(buf1770, (4, 128, 32), (4096, 32, 1), 0); del buf1770  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_121, reinterpret_tensor(buf1771, (4, 128, 32), (32, 128, 1), 0), out=buf1774)
    del permute_default_121
    buf1775 = reinterpret_tensor(buf1764, (4, 128, 128), (16384, 128, 1), 0); del buf1764  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1771, (4, 128, 32), (32, 128, 1), 0), permute_default_122, out=buf1775)
    del permute_default_122
    buf1776 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1777 = reinterpret_tensor(buf1775, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1775  # reuse
    cpp_fused_420(c_void_p(buf1777.data_ptr()), c_void_p(getitem_91.data_ptr()), c_void_p(alias_default_41.data_ptr()), c_void_p(buf1776.data_ptr()))
    del alias_default_41
    del getitem_91
    buf1778 = reinterpret_tensor(buf1771, (4, 32, 128), (4096, 128, 1), 0); del buf1771  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_123, reinterpret_tensor(buf1777, (4, 128, 128), (16384, 128, 1), 0), out=buf1778)
    del permute_default_123
    buf1779 = reinterpret_tensor(buf1740, (4, 128, 32), (4096, 32, 1), 0); del buf1740  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1777, (4, 128, 128), (16384, 128, 1), 0), permute_default_124, out=buf1779)
    del permute_default_124
    buf1780 = buf1706; del buf1706  # reuse
    cpp_fused_view_421(c_void_p(buf1774.data_ptr()), c_void_p(buf1780.data_ptr()))
    buf1781 = reinterpret_tensor(buf1777, (128, 512), (512, 1), 0); del buf1777  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1780, permute_1919, out=buf1781)
    del permute_1919
    buf1782 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1780, (128, 128), (1, 128), 0), view_122, out=buf1782)
    buf1783 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1784 = reinterpret_tensor(buf1778, (128, 128), (1, 128), 0); del buf1778  # reuse
    cpp_fused_sum_view_422(c_void_p(buf1784.data_ptr()), c_void_p(buf1780.data_ptr()), c_void_p(buf1783.data_ptr()))
    buf1785 = buf1780; del buf1780  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1784, permute_1923, out=buf1785)
    del permute_1923
    buf1786 = reinterpret_tensor(buf1774, (128, 128), (128, 1), 0); del buf1774  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1784, (128, 128), (128, 1), 0), view_126, out=buf1786)
    buf1787 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1788 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_423(c_void_p(buf1784.data_ptr()), c_void_p(buf1779.data_ptr()), c_void_p(buf1787.data_ptr()), c_void_p(buf1788.data_ptr()))
    buf1789 = reinterpret_tensor(buf1784, (128, 128), (128, 1), 0); del buf1784  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1788, permute_1927, out=buf1789)
    del permute_1927
    buf1790 = reinterpret_tensor(buf1779, (128, 128), (128, 1), 0); del buf1779  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1788, (128, 128), (1, 128), 0), view_126, out=buf1790)
    del view_126
    buf1791 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1792 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1793 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1794 = reinterpret_tensor(buf1785, (1, 128, 128), (16384, 128, 1), 0); del buf1785  # reuse
    cpp_fused_add_mul_sum_424(c_void_p(buf1794.data_ptr()), c_void_p(buf1788.data_ptr()), c_void_p(buf1789.data_ptr()), c_void_p(addmm_47.data_ptr()), c_void_p(primals_53.data_ptr()), c_void_p(buf1791.data_ptr()), c_void_p(buf1792.data_ptr()), c_void_p(buf1793.data_ptr()))
    del addmm_47
    del primals_53
    buf1795 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1794, (128, 128), (128, 1), 0), permute_1931, out=buf1795)
    del permute_1931
    buf1796 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1794, (128, 128), (1, 128), 0), view_122, out=buf1796)
    buf1797 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_425(c_void_p(buf1794.data_ptr()), c_void_p(buf1797.data_ptr()))
    buf1801 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1800, (128, 128), (128, 1), 0), permute_1935, out=buf1801)
    del permute_1935
    buf1802 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1800, (128, 128), (1, 128), 0), view_122, out=buf1802)
    del view_122
    buf1803 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1804 = reinterpret_tensor(buf1776, (1, 1, 512), (512, 512, 1), 0); del buf1776  # reuse
    buf1806 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1805 = buf1723; del buf1723  # reuse
    cpp_fused_add_mul_sum_426(c_void_p(buf1805.data_ptr()), c_void_p(buf1800.data_ptr()), c_void_p(buf1781.data_ptr()), c_void_p(buf1795.data_ptr()), c_void_p(buf1801.data_ptr()), c_void_p(buf6.data_ptr()), c_void_p(primals_49.data_ptr()), c_void_p(buf1803.data_ptr()), c_void_p(buf1804.data_ptr()), c_void_p(buf1806.data_ptr()))
    del primals_49
    buf1807 = reinterpret_tensor(buf1800, (128, 128), (128, 1), 0); del buf1800  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1805, (128, 512), (512, 1), 0), permute_1939, out=buf1807)
    del permute_1939
    buf1808 = reinterpret_tensor(buf6, (512, 128), (128, 1), 0); del buf6  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1805, (512, 128), (1, 512), 0), view_120, out=buf1808)
    del view_120
    buf1809 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1812 = buf1794; del buf1794  # reuse
    cpp_fused_mul_sum_427(c_void_p(buf1805.data_ptr()), c_void_p(buf1807.data_ptr()), c_void_p(primals_47.data_ptr()), c_void_p(buf1809.data_ptr()), c_void_p(buf1812.data_ptr()))
    del primals_47
    buf1813 = buf1801; del buf1801  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1812, (128, 128), (128, 1), 0), permute_1943, out=buf1813)
    del permute_1943
    buf1816 = reinterpret_tensor(buf1813, (1, 128, 512), (65536, 512, 1), 0); del buf1813  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_428(c_void_p(buf1816.data_ptr()), c_void_p(le_85.data_ptr()))
    del le_85
    buf1817 = buf1789; del buf1789  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1816, (128, 512), (512, 1), 0), permute_1947, out=buf1817)
    del permute_1947
    buf1810 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1811 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1815 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1820 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1821 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_429(c_void_p(buf1807.data_ptr()), c_void_p(addmm_44.data_ptr()), c_void_p(buf5.data_ptr()), c_void_p(primals_45.data_ptr()), c_void_p(primals_46.data_ptr()), c_void_p(buf1812.data_ptr()), c_void_p(buf1817.data_ptr()), c_void_p(buf1810.data_ptr()), c_void_p(buf1811.data_ptr()), c_void_p(buf1815.data_ptr()), c_void_p(buf1820.data_ptr()), c_void_p(buf1821.data_ptr()))
    del addmm_44
    del primals_46
    buf1814 = buf1795; del buf1795  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1812, (128, 128), (1, 128), 0), view_118, out=buf1814)
    del view_118
    buf1818 = reinterpret_tensor(buf1781, (512, 128), (128, 1), 0); del buf1781  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1816, (512, 128), (1, 512), 0), view_116, out=buf1818)
    del view_116
    buf1819 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1822 = buf1812; del buf1812  # reuse
    cpp_fused_add_mul_sum_430(c_void_p(buf1822.data_ptr()), c_void_p(buf1816.data_ptr()), c_void_p(buf1817.data_ptr()), c_void_p(primals_45.data_ptr()), c_void_p(buf1819.data_ptr()))
    del primals_45
    buf1823 = reinterpret_tensor(buf1816, (128, 512), (512, 1), 0); del buf1816  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1822, (128, 128), (128, 1), 0), permute_1951, out=buf1823)
    del permute_1951
    buf1824 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1822, (128, 128), (1, 128), 0), view_114, out=buf1824)
    del view_114
    buf1826 = reinterpret_tensor(buf1823, (1, 128, 512), (65536, 512, 1), 0); del buf1823  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_431(c_void_p(buf1826.data_ptr()), c_void_p(le_86.data_ptr()))
    del le_86
    buf1827 = buf1817; del buf1817  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1826, (128, 512), (512, 1), 0), permute_1955, out=buf1827)
    del permute_1955
    buf1832 = buf5; del buf5  # reuse
    cpp_fused_add_mul_432(c_void_p(buf1822.data_ptr()), c_void_p(buf1827.data_ptr()), c_void_p(primals_43.data_ptr()), c_void_p(buf1832.data_ptr()))
    del primals_43
    buf1833 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1832, (128, 128), (128, 1), 0), permute_1959, out=buf1833)
    del permute_1959
    buf1836 = reinterpret_tensor(buf1833, (1, 128, 512), (65536, 512, 1), 0); del buf1833  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_433(c_void_p(buf1836.data_ptr()), c_void_p(le_87.data_ptr()))
    del le_87
    buf1837 = buf1807; del buf1807  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1836, (128, 512), (512, 1), 0), permute_1963, out=buf1837)
    del permute_1963
    buf1825 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1830 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1831 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1835 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1840 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1841 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_434(c_void_p(buf1822.data_ptr()), c_void_p(buf1827.data_ptr()), c_void_p(addmm_40.data_ptr()), c_void_p(buf4.data_ptr()), c_void_p(primals_41.data_ptr()), c_void_p(primals_42.data_ptr()), c_void_p(buf1832.data_ptr()), c_void_p(buf1837.data_ptr()), c_void_p(buf1825.data_ptr()), c_void_p(buf1830.data_ptr()), c_void_p(buf1831.data_ptr()), c_void_p(buf1835.data_ptr()), c_void_p(buf1840.data_ptr()), c_void_p(buf1841.data_ptr()))
    del addmm_40
    del primals_42
    buf1828 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1826, (512, 128), (1, 512), 0), view_112, out=buf1828)
    del view_112
    buf1829 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_435(c_void_p(buf1826.data_ptr()), c_void_p(buf1829.data_ptr()))
    buf1834 = reinterpret_tensor(buf1826, (128, 512), (512, 1), 0); del buf1826  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1832, (128, 128), (1, 128), 0), view_110, out=buf1834)
    del view_110
    buf1838 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1836, (512, 128), (1, 512), 0), view_108, out=buf1838)
    del view_108
    buf1839 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1842 = buf1832; del buf1832  # reuse
    cpp_fused_add_mul_sum_436(c_void_p(buf1842.data_ptr()), c_void_p(buf1836.data_ptr()), c_void_p(buf1837.data_ptr()), c_void_p(primals_41.data_ptr()), c_void_p(buf1839.data_ptr()))
    del primals_41
    buf1843 = reinterpret_tensor(buf1836, (128, 512), (512, 1), 0); del buf1836  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1842, (128, 128), (128, 1), 0), permute_1967, out=buf1843)
    del permute_1967
    buf1844 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1842, (128, 128), (1, 128), 0), view_106, out=buf1844)
    del view_106
    buf1846 = reinterpret_tensor(buf1843, (1, 128, 512), (65536, 512, 1), 0); del buf1843  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_437(c_void_p(buf1846.data_ptr()), c_void_p(le_88.data_ptr()))
    del le_88
    buf1847 = buf1837; del buf1837  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1846, (128, 512), (512, 1), 0), permute_1971, out=buf1847)
    del permute_1971
    buf1852 = buf4; del buf4  # reuse
    buf1882 = reinterpret_tensor(buf1827, (1, 128, 128), (16384, 128, 1), 0); del buf1827  # reuse
    buf1845 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1850 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1851 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1855 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1880 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1881 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_438(c_void_p(buf1842.data_ptr()), c_void_p(buf1847.data_ptr()), c_void_p(primals_39.data_ptr()), c_void_p(primals_35.data_ptr()), c_void_p(addmm_36.data_ptr()), c_void_p(addmm_31.data_ptr()), c_void_p(primals_36.data_ptr()), c_void_p(buf1852.data_ptr()), c_void_p(buf1882.data_ptr()), c_void_p(buf1845.data_ptr()), c_void_p(buf1850.data_ptr()), c_void_p(buf1851.data_ptr()), c_void_p(buf1855.data_ptr()), c_void_p(buf1880.data_ptr()), c_void_p(buf1881.data_ptr()))
    del addmm_31
    del addmm_36
    del primals_35
    del primals_36
    del primals_39
    buf1848 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1846, (512, 128), (1, 512), 0), view_104, out=buf1848)
    del view_104
    buf1849 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_439(c_void_p(buf1846.data_ptr()), c_void_p(buf1849.data_ptr()))
    buf1853 = buf1847; del buf1847  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1852, (128, 128), (128, 1), 0), permute_1975, out=buf1853)
    del permute_1975
    buf1854 = reinterpret_tensor(buf1842, (128, 128), (128, 1), 0); del buf1842  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1852, (128, 128), (1, 128), 0), view_102, out=buf1854)
    del view_102
    buf1856 = reinterpret_tensor(buf1852, (4, 128, 32), (4096, 32, 1), 0); del buf1852  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_127, reinterpret_tensor(buf1853, (4, 128, 32), (32, 128, 1), 0), out=buf1856)
    del permute_default_127
    buf1857 = reinterpret_tensor(buf1846, (4, 128, 128), (16384, 128, 1), 0); del buf1846  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1853, (4, 128, 32), (32, 128, 1), 0), permute_default_128, out=buf1857)
    del permute_default_128
    buf1858 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1859 = reinterpret_tensor(buf1857, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1857  # reuse
    cpp_fused_440(c_void_p(buf1859.data_ptr()), c_void_p(getitem_93.data_ptr()), c_void_p(alias_default_43.data_ptr()), c_void_p(buf1858.data_ptr()))
    del alias_default_43
    del getitem_93
    buf1860 = reinterpret_tensor(buf1853, (4, 32, 128), (4096, 128, 1), 0); del buf1853  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_129, reinterpret_tensor(buf1859, (4, 128, 128), (16384, 128, 1), 0), out=buf1860)
    del permute_default_129
    buf1861 = reinterpret_tensor(buf1822, (4, 128, 32), (4096, 32, 1), 0); del buf1822  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1859, (4, 128, 128), (16384, 128, 1), 0), permute_default_130, out=buf1861)
    del permute_default_130
    buf1862 = buf1788; del buf1788  # reuse
    cpp_fused_view_441(c_void_p(buf1856.data_ptr()), c_void_p(buf1862.data_ptr()))
    buf1863 = reinterpret_tensor(buf1859, (128, 512), (512, 1), 0); del buf1859  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1862, permute_1988, out=buf1863)
    del permute_1988
    buf1864 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1862, (128, 128), (1, 128), 0), view_82, out=buf1864)
    buf1865 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1866 = reinterpret_tensor(buf1860, (128, 128), (1, 128), 0); del buf1860  # reuse
    cpp_fused_sum_view_442(c_void_p(buf1866.data_ptr()), c_void_p(buf1862.data_ptr()), c_void_p(buf1865.data_ptr()))
    buf1867 = buf1862; del buf1862  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1866, permute_1992, out=buf1867)
    del permute_1992
    buf1868 = reinterpret_tensor(buf1856, (128, 128), (128, 1), 0); del buf1856  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1866, (128, 128), (128, 1), 0), view_86, out=buf1868)
    buf1869 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1870 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_443(c_void_p(buf1866.data_ptr()), c_void_p(buf1861.data_ptr()), c_void_p(buf1869.data_ptr()), c_void_p(buf1870.data_ptr()))
    buf1871 = reinterpret_tensor(buf1866, (128, 128), (128, 1), 0); del buf1866  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1870, permute_1996, out=buf1871)
    del permute_1996
    buf1872 = reinterpret_tensor(buf1861, (128, 128), (128, 1), 0); del buf1861  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1870, (128, 128), (1, 128), 0), view_86, out=buf1872)
    del view_86
    buf1873 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1874 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1875 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1876 = reinterpret_tensor(buf1867, (1, 128, 128), (16384, 128, 1), 0); del buf1867  # reuse
    cpp_fused_add_mul_sum_444(c_void_p(buf1876.data_ptr()), c_void_p(buf1870.data_ptr()), c_void_p(buf1871.data_ptr()), c_void_p(addmm_32.data_ptr()), c_void_p(primals_37.data_ptr()), c_void_p(buf1873.data_ptr()), c_void_p(buf1874.data_ptr()), c_void_p(buf1875.data_ptr()))
    del addmm_32
    del primals_37
    buf1877 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1876, (128, 128), (128, 1), 0), permute_2000, out=buf1877)
    del permute_2000
    buf1878 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1876, (128, 128), (1, 128), 0), view_82, out=buf1878)
    buf1879 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_445(c_void_p(buf1876.data_ptr()), c_void_p(buf1879.data_ptr()))
    buf1883 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1882, (128, 128), (128, 1), 0), permute_2004, out=buf1883)
    del permute_2004
    buf1884 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1882, (128, 128), (1, 128), 0), view_82, out=buf1884)
    del view_82
    buf1885 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1886 = reinterpret_tensor(buf1858, (1, 1, 512), (512, 512, 1), 0); del buf1858  # reuse
    buf1888 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1887 = buf1805; del buf1805  # reuse
    cpp_fused_add_mul_sum_446(c_void_p(buf1887.data_ptr()), c_void_p(buf1882.data_ptr()), c_void_p(buf1863.data_ptr()), c_void_p(buf1877.data_ptr()), c_void_p(buf1883.data_ptr()), c_void_p(addmm_30.data_ptr()), c_void_p(add_16.data_ptr()), c_void_p(primals_17.data_ptr()), c_void_p(primals_18.data_ptr()), c_void_p(primals_33.data_ptr()), c_void_p(buf1885.data_ptr()), c_void_p(buf1886.data_ptr()), c_void_p(buf1888.data_ptr()))
    del addmm_30
    del primals_18
    del primals_33
    buf1889 = reinterpret_tensor(buf1882, (128, 128), (128, 1), 0); del buf1882  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1887, (128, 512), (512, 1), 0), permute_2008, out=buf1889)
    del permute_2008
    buf1890 = reinterpret_tensor(buf1883, (512, 128), (128, 1), 0); del buf1883  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1887, (512, 128), (1, 512), 0), view_80, out=buf1890)
    del view_80
    buf1891 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1894 = buf1876; del buf1876  # reuse
    cpp_fused_mul_sum_447(c_void_p(buf1887.data_ptr()), c_void_p(buf1889.data_ptr()), c_void_p(primals_31.data_ptr()), c_void_p(buf1891.data_ptr()), c_void_p(buf1894.data_ptr()))
    del primals_31
    buf1895 = buf1877; del buf1877  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1894, (128, 128), (128, 1), 0), permute_2012, out=buf1895)
    del permute_2012
    buf1898 = reinterpret_tensor(buf1895, (1, 128, 512), (65536, 512, 1), 0); del buf1895  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_448(c_void_p(buf1898.data_ptr()), c_void_p(le_89.data_ptr()))
    del le_89
    buf1899 = buf1871; del buf1871  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1898, (128, 512), (512, 1), 0), permute_2016, out=buf1899)
    del permute_2016
    buf1892 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1893 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1897 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1902 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1903 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_449(c_void_p(buf1889.data_ptr()), c_void_p(addmm_29.data_ptr()), c_void_p(buf3.data_ptr()), c_void_p(primals_29.data_ptr()), c_void_p(primals_30.data_ptr()), c_void_p(buf1894.data_ptr()), c_void_p(buf1899.data_ptr()), c_void_p(buf1892.data_ptr()), c_void_p(buf1893.data_ptr()), c_void_p(buf1897.data_ptr()), c_void_p(buf1902.data_ptr()), c_void_p(buf1903.data_ptr()))
    del addmm_29
    del primals_30
    buf1896 = buf1863; del buf1863  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1894, (128, 128), (1, 128), 0), view_78, out=buf1896)
    del view_78
    buf1900 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1898, (512, 128), (1, 512), 0), view_76, out=buf1900)
    del view_76
    buf1901 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1904 = buf1894; del buf1894  # reuse
    cpp_fused_add_mul_sum_450(c_void_p(buf1904.data_ptr()), c_void_p(buf1898.data_ptr()), c_void_p(buf1899.data_ptr()), c_void_p(primals_29.data_ptr()), c_void_p(buf1901.data_ptr()))
    del primals_29
    buf1905 = reinterpret_tensor(buf1898, (128, 512), (512, 1), 0); del buf1898  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1904, (128, 128), (128, 1), 0), permute_2020, out=buf1905)
    del permute_2020
    buf1906 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1904, (128, 128), (1, 128), 0), view_74, out=buf1906)
    del view_74
    buf1908 = reinterpret_tensor(buf1905, (1, 128, 512), (65536, 512, 1), 0); del buf1905  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_451(c_void_p(buf1908.data_ptr()), c_void_p(le_90.data_ptr()))
    del le_90
    buf1909 = buf1899; del buf1899  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1908, (128, 512), (512, 1), 0), permute_2024, out=buf1909)
    del permute_2024
    buf1914 = buf3; del buf3  # reuse
    cpp_fused_add_mul_452(c_void_p(buf1904.data_ptr()), c_void_p(buf1909.data_ptr()), c_void_p(primals_27.data_ptr()), c_void_p(buf1914.data_ptr()))
    del primals_27
    buf1915 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1914, (128, 128), (128, 1), 0), permute_2028, out=buf1915)
    del permute_2028
    buf1918 = reinterpret_tensor(buf1915, (1, 128, 512), (65536, 512, 1), 0); del buf1915  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_453(c_void_p(buf1918.data_ptr()), c_void_p(le_91.data_ptr()))
    del le_91
    buf1919 = buf1889; del buf1889  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1918, (128, 512), (512, 1), 0), permute_2032, out=buf1919)
    del permute_2032
    buf1907 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1912 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1913 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1917 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1922 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1923 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_454(c_void_p(buf1904.data_ptr()), c_void_p(buf1909.data_ptr()), c_void_p(addmm_25.data_ptr()), c_void_p(buf2.data_ptr()), c_void_p(primals_25.data_ptr()), c_void_p(primals_26.data_ptr()), c_void_p(buf1914.data_ptr()), c_void_p(buf1919.data_ptr()), c_void_p(buf1907.data_ptr()), c_void_p(buf1912.data_ptr()), c_void_p(buf1913.data_ptr()), c_void_p(buf1917.data_ptr()), c_void_p(buf1922.data_ptr()), c_void_p(buf1923.data_ptr()))
    del addmm_25
    del primals_26
    buf1910 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1908, (512, 128), (1, 512), 0), view_72, out=buf1910)
    del view_72
    buf1911 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_455(c_void_p(buf1908.data_ptr()), c_void_p(buf1911.data_ptr()))
    buf1916 = reinterpret_tensor(buf1908, (128, 512), (512, 1), 0); del buf1908  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1914, (128, 128), (1, 128), 0), view_70, out=buf1916)
    del view_70
    buf1920 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1918, (512, 128), (1, 512), 0), view_68, out=buf1920)
    del view_68
    buf1921 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1924 = buf1914; del buf1914  # reuse
    cpp_fused_add_mul_sum_456(c_void_p(buf1924.data_ptr()), c_void_p(buf1918.data_ptr()), c_void_p(buf1919.data_ptr()), c_void_p(primals_25.data_ptr()), c_void_p(buf1921.data_ptr()))
    del primals_25
    buf1925 = reinterpret_tensor(buf1918, (128, 512), (512, 1), 0); del buf1918  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1924, (128, 128), (128, 1), 0), permute_2036, out=buf1925)
    del permute_2036
    buf1926 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1924, (128, 128), (1, 128), 0), view_66, out=buf1926)
    del view_66
    buf1928 = reinterpret_tensor(buf1925, (1, 128, 512), (65536, 512, 1), 0); del buf1925  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_457(c_void_p(buf1928.data_ptr()), c_void_p(le_92.data_ptr()))
    del le_92
    buf1929 = buf1919; del buf1919  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1928, (128, 512), (512, 1), 0), permute_2040, out=buf1929)
    del permute_2040
    buf1934 = buf2; del buf2  # reuse
    buf1964 = reinterpret_tensor(buf1909, (1, 128, 128), (16384, 128, 1), 0); del buf1909  # reuse
    buf1927 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1932 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1933 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1937 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1962 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1963 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_458(c_void_p(buf1924.data_ptr()), c_void_p(buf1929.data_ptr()), c_void_p(primals_23.data_ptr()), c_void_p(primals_19.data_ptr()), c_void_p(addmm_21.data_ptr()), c_void_p(addmm_16.data_ptr()), c_void_p(primals_20.data_ptr()), c_void_p(buf1934.data_ptr()), c_void_p(buf1964.data_ptr()), c_void_p(buf1927.data_ptr()), c_void_p(buf1932.data_ptr()), c_void_p(buf1933.data_ptr()), c_void_p(buf1937.data_ptr()), c_void_p(buf1962.data_ptr()), c_void_p(buf1963.data_ptr()))
    del addmm_16
    del addmm_21
    del primals_19
    del primals_20
    del primals_23
    buf1930 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1928, (512, 128), (1, 512), 0), view_64, out=buf1930)
    del view_64
    buf1931 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_459(c_void_p(buf1928.data_ptr()), c_void_p(buf1931.data_ptr()))
    buf1935 = buf1929; del buf1929  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1934, (128, 128), (128, 1), 0), permute_2044, out=buf1935)
    del permute_2044
    buf1936 = reinterpret_tensor(buf1924, (128, 128), (128, 1), 0); del buf1924  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1934, (128, 128), (1, 128), 0), view_62, out=buf1936)
    del view_62
    buf1938 = reinterpret_tensor(buf1934, (4, 128, 32), (4096, 32, 1), 0); del buf1934  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_133, reinterpret_tensor(buf1935, (4, 128, 32), (32, 128, 1), 0), out=buf1938)
    del permute_default_133
    buf1939 = reinterpret_tensor(buf1928, (4, 128, 128), (16384, 128, 1), 0); del buf1928  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1935, (4, 128, 32), (32, 128, 1), 0), permute_default_134, out=buf1939)
    del permute_default_134
    buf1940 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf1941 = reinterpret_tensor(buf1939, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf1939  # reuse
    cpp_fused_460(c_void_p(buf1941.data_ptr()), c_void_p(getitem_95.data_ptr()), c_void_p(alias_default_45.data_ptr()), c_void_p(buf1940.data_ptr()))
    del alias_default_45
    del getitem_95
    buf1942 = reinterpret_tensor(buf1935, (4, 32, 128), (4096, 128, 1), 0); del buf1935  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_135, reinterpret_tensor(buf1941, (4, 128, 128), (16384, 128, 1), 0), out=buf1942)
    del permute_default_135
    buf1943 = reinterpret_tensor(buf1904, (4, 128, 32), (4096, 32, 1), 0); del buf1904  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf1941, (4, 128, 128), (16384, 128, 1), 0), permute_default_136, out=buf1943)
    del permute_default_136
    buf1944 = buf1870; del buf1870  # reuse
    cpp_fused_view_461(c_void_p(buf1938.data_ptr()), c_void_p(buf1944.data_ptr()))
    buf1945 = reinterpret_tensor(buf1941, (128, 512), (512, 1), 0); del buf1941  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1944, permute_2057, out=buf1945)
    del permute_2057
    buf1946 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1944, (128, 128), (1, 128), 0), view_42, out=buf1946)
    buf1947 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1948 = reinterpret_tensor(buf1942, (128, 128), (1, 128), 0); del buf1942  # reuse
    cpp_fused_sum_view_462(c_void_p(buf1948.data_ptr()), c_void_p(buf1944.data_ptr()), c_void_p(buf1947.data_ptr()))
    buf1949 = buf1944; del buf1944  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1948, permute_2061, out=buf1949)
    del permute_2061
    buf1950 = reinterpret_tensor(buf1938, (128, 128), (128, 1), 0); del buf1938  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1948, (128, 128), (128, 1), 0), view_46, out=buf1950)
    buf1951 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1952 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_463(c_void_p(buf1948.data_ptr()), c_void_p(buf1943.data_ptr()), c_void_p(buf1951.data_ptr()), c_void_p(buf1952.data_ptr()))
    buf1953 = reinterpret_tensor(buf1948, (128, 128), (128, 1), 0); del buf1948  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf1952, permute_2065, out=buf1953)
    del permute_2065
    buf1954 = reinterpret_tensor(buf1943, (128, 128), (128, 1), 0); del buf1943  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1952, (128, 128), (1, 128), 0), view_46, out=buf1954)
    del view_46
    buf1955 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1956 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1957 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1958 = reinterpret_tensor(buf1949, (1, 128, 128), (16384, 128, 1), 0); del buf1949  # reuse
    cpp_fused_add_mul_sum_464(c_void_p(buf1958.data_ptr()), c_void_p(buf1952.data_ptr()), c_void_p(buf1953.data_ptr()), c_void_p(addmm_17.data_ptr()), c_void_p(primals_21.data_ptr()), c_void_p(buf1955.data_ptr()), c_void_p(buf1956.data_ptr()), c_void_p(buf1957.data_ptr()))
    del addmm_17
    del primals_21
    buf1959 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1958, (128, 128), (128, 1), 0), permute_2069, out=buf1959)
    del permute_2069
    buf1960 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1958, (128, 128), (1, 128), 0), view_42, out=buf1960)
    buf1961 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_465(c_void_p(buf1958.data_ptr()), c_void_p(buf1961.data_ptr()))
    buf1965 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1964, (128, 128), (128, 1), 0), permute_2073, out=buf1965)
    del permute_2073
    buf1966 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1964, (128, 128), (1, 128), 0), view_42, out=buf1966)
    del view_42
    buf1967 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1968 = reinterpret_tensor(buf1940, (1, 1, 512), (512, 512, 1), 0); del buf1940  # reuse
    buf1970 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf1969 = buf1887; del buf1887  # reuse
    cpp_fused_add_mul_sum_466(c_void_p(buf1969.data_ptr()), c_void_p(buf1964.data_ptr()), c_void_p(buf1945.data_ptr()), c_void_p(buf1959.data_ptr()), c_void_p(buf1965.data_ptr()), c_void_p(add_16.data_ptr()), c_void_p(primals_17.data_ptr()), c_void_p(buf1967.data_ptr()), c_void_p(buf1968.data_ptr()), c_void_p(buf1970.data_ptr()))
    del add_16
    del primals_17
    buf1971 = reinterpret_tensor(buf1964, (128, 128), (128, 1), 0); del buf1964  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1969, (128, 512), (512, 1), 0), permute_2077, out=buf1971)
    del permute_2077
    buf1972 = reinterpret_tensor(buf1965, (512, 128), (128, 1), 0); del buf1965  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1969, (512, 128), (1, 512), 0), view_40, out=buf1972)
    del view_40
    buf1973 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1976 = buf1958; del buf1958  # reuse
    cpp_fused_mul_sum_467(c_void_p(buf1969.data_ptr()), c_void_p(buf1971.data_ptr()), c_void_p(primals_15.data_ptr()), c_void_p(buf1973.data_ptr()), c_void_p(buf1976.data_ptr()))
    del primals_15
    buf1977 = buf1959; del buf1959  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1976, (128, 128), (128, 1), 0), permute_2081, out=buf1977)
    del permute_2081
    buf1980 = reinterpret_tensor(buf1977, (1, 128, 512), (65536, 512, 1), 0); del buf1977  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_468(c_void_p(buf1980.data_ptr()), c_void_p(le_93.data_ptr()))
    del le_93
    buf1981 = buf1953; del buf1953  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1980, (128, 512), (512, 1), 0), permute_2085, out=buf1981)
    del permute_2085
    buf1974 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1975 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1979 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1984 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1985 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_469(c_void_p(buf1971.data_ptr()), c_void_p(addmm_14.data_ptr()), c_void_p(buf1.data_ptr()), c_void_p(primals_13.data_ptr()), c_void_p(primals_14.data_ptr()), c_void_p(buf1976.data_ptr()), c_void_p(buf1981.data_ptr()), c_void_p(buf1974.data_ptr()), c_void_p(buf1975.data_ptr()), c_void_p(buf1979.data_ptr()), c_void_p(buf1984.data_ptr()), c_void_p(buf1985.data_ptr()))
    del addmm_14
    del primals_14
    buf1978 = buf1945; del buf1945  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1976, (128, 128), (1, 128), 0), view_38, out=buf1978)
    del view_38
    buf1982 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1980, (512, 128), (1, 512), 0), view_36, out=buf1982)
    del view_36
    buf1983 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf1986 = buf1976; del buf1976  # reuse
    cpp_fused_add_mul_sum_470(c_void_p(buf1986.data_ptr()), c_void_p(buf1980.data_ptr()), c_void_p(buf1981.data_ptr()), c_void_p(primals_13.data_ptr()), c_void_p(buf1983.data_ptr()))
    del primals_13
    buf1987 = reinterpret_tensor(buf1980, (128, 512), (512, 1), 0); del buf1980  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1986, (128, 128), (128, 1), 0), permute_2089, out=buf1987)
    del permute_2089
    buf1988 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1986, (128, 128), (1, 128), 0), view_34, out=buf1988)
    del view_34
    buf1990 = reinterpret_tensor(buf1987, (1, 128, 512), (65536, 512, 1), 0); del buf1987  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_471(c_void_p(buf1990.data_ptr()), c_void_p(le_94.data_ptr()))
    del le_94
    buf1991 = buf1981; del buf1981  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1990, (128, 512), (512, 1), 0), permute_2093, out=buf1991)
    del permute_2093
    buf1996 = reinterpret_tensor(buf1971, (1, 128, 128), (16384, 128, 1), 0); del buf1971  # reuse
    cpp_fused_add_mul_472(c_void_p(buf1986.data_ptr()), c_void_p(buf1991.data_ptr()), c_void_p(primals_11.data_ptr()), c_void_p(buf1996.data_ptr()))
    del primals_11
    buf1997 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1996, (128, 128), (128, 1), 0), permute_2097, out=buf1997)
    del permute_2097
    buf2000 = reinterpret_tensor(buf1997, (1, 128, 512), (65536, 512, 1), 0); del buf1997  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_473(c_void_p(buf2000.data_ptr()), c_void_p(le_95.data_ptr()))
    del le_95
    buf2001 = reinterpret_tensor(buf1, (128, 128), (128, 1), 0); del buf1  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2000, (128, 512), (512, 1), 0), permute_2101, out=buf2001)
    del permute_2101
    buf1989 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf1994 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1995 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf1999 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf2004 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf2005 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_474(c_void_p(buf1986.data_ptr()), c_void_p(buf1991.data_ptr()), c_void_p(addmm_10.data_ptr()), c_void_p(buf0.data_ptr()), c_void_p(primals_9.data_ptr()), c_void_p(primals_10.data_ptr()), c_void_p(buf1996.data_ptr()), c_void_p(buf2001.data_ptr()), c_void_p(buf1989.data_ptr()), c_void_p(buf1994.data_ptr()), c_void_p(buf1995.data_ptr()), c_void_p(buf1999.data_ptr()), c_void_p(buf2004.data_ptr()), c_void_p(buf2005.data_ptr()))
    del addmm_10
    del primals_10
    buf1992 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1990, (512, 128), (1, 512), 0), view_32, out=buf1992)
    del view_32
    buf1993 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_475(c_void_p(buf1990.data_ptr()), c_void_p(buf1993.data_ptr()))
    buf1998 = reinterpret_tensor(buf1990, (128, 512), (512, 1), 0); del buf1990  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf1996, (128, 128), (1, 128), 0), view_30, out=buf1998)
    del view_30
    buf2002 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2000, (512, 128), (1, 512), 0), view_28, out=buf2002)
    del view_28
    buf2003 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf2006 = buf1996; del buf1996  # reuse
    cpp_fused_add_mul_sum_476(c_void_p(buf2006.data_ptr()), c_void_p(buf2000.data_ptr()), c_void_p(buf2001.data_ptr()), c_void_p(primals_9.data_ptr()), c_void_p(buf2003.data_ptr()))
    del primals_9
    buf2007 = reinterpret_tensor(buf2000, (128, 512), (512, 1), 0); del buf2000  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2006, (128, 128), (128, 1), 0), permute_2105, out=buf2007)
    del permute_2105
    buf2008 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2006, (128, 128), (1, 128), 0), view_26, out=buf2008)
    del view_26
    buf2010 = reinterpret_tensor(buf2007, (1, 128, 512), (65536, 512, 1), 0); del buf2007  # reuse
    cpp_fused_nll_loss_forward_threshold_backward_477(c_void_p(buf2010.data_ptr()), c_void_p(le_96.data_ptr()))
    del le_96
    buf2011 = buf2001; del buf2001  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2010, (128, 512), (512, 1), 0), permute_2109, out=buf2011)
    del permute_2109
    buf2016 = reinterpret_tensor(buf1991, (1, 128, 128), (16384, 128, 1), 0); del buf1991  # reuse
    buf2046 = buf1986; del buf1986  # reuse
    buf2009 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf2014 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf2015 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf2019 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf2044 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf2045 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_add_mul_sum_478(c_void_p(buf2006.data_ptr()), c_void_p(buf2011.data_ptr()), c_void_p(primals_7.data_ptr()), c_void_p(primals_3.data_ptr()), c_void_p(addmm_6.data_ptr()), c_void_p(addmm_1.data_ptr()), c_void_p(primals_4.data_ptr()), c_void_p(buf2016.data_ptr()), c_void_p(buf2046.data_ptr()), c_void_p(buf2009.data_ptr()), c_void_p(buf2014.data_ptr()), c_void_p(buf2015.data_ptr()), c_void_p(buf2019.data_ptr()), c_void_p(buf2044.data_ptr()), c_void_p(buf2045.data_ptr()))
    del addmm_1
    del addmm_6
    del primals_3
    del primals_4
    del primals_7
    buf2012 = empty((512, 128), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2010, (512, 128), (1, 512), 0), view_24, out=buf2012)
    del view_24
    buf2013 = empty((1, 512), device='cpu', dtype=torch.float32)
    cpp_fused_sum_479(c_void_p(buf2010.data_ptr()), c_void_p(buf2013.data_ptr()))
    buf2017 = buf2011; del buf2011  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2016, (128, 128), (128, 1), 0), permute_2113, out=buf2017)
    del permute_2113
    buf2018 = reinterpret_tensor(buf2006, (128, 128), (128, 1), 0); del buf2006  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2016, (128, 128), (1, 128), 0), view_22, out=buf2018)
    del view_22
    buf2020 = reinterpret_tensor(buf2016, (4, 128, 32), (4096, 32, 1), 0); del buf2016  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_139, reinterpret_tensor(buf2017, (4, 128, 32), (32, 128, 1), 0), out=buf2020)
    del permute_default_139
    buf2021 = reinterpret_tensor(buf2010, (4, 128, 128), (16384, 128, 1), 0); del buf2010  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf2017, (4, 128, 32), (32, 128, 1), 0), permute_default_140, out=buf2021)
    del permute_default_140
    buf2022 = empty_strided((1, 4, 128, 1), (512, 128, 1, 512), device='cpu', dtype=torch.float32)
    buf2023 = reinterpret_tensor(buf2021, (1, 4, 128, 128), (65536, 16384, 128, 1), 0); del buf2021  # reuse
    cpp_fused_480(c_void_p(buf2023.data_ptr()), c_void_p(getitem_97.data_ptr()), c_void_p(alias_default_47.data_ptr()), c_void_p(buf2022.data_ptr()))
    del alias_default_47
    del getitem_97
    buf2024 = reinterpret_tensor(buf2017, (4, 32, 128), (4096, 128, 1), 0); del buf2017  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(permute_default_141, reinterpret_tensor(buf2023, (4, 128, 128), (16384, 128, 1), 0), out=buf2024)
    del permute_default_141
    buf2025 = reinterpret_tensor(buf0, (4, 128, 32), (4096, 32, 1), 0); del buf0  # reuse
    # Source Nodes: [], Original ATen: []
    extern_kernels.bmm(reinterpret_tensor(buf2023, (4, 128, 128), (16384, 128, 1), 0), permute_default_142, out=buf2025)
    del permute_default_142
    buf2026 = buf1952; del buf1952  # reuse
    cpp_fused_view_481(c_void_p(buf2020.data_ptr()), c_void_p(buf2026.data_ptr()))
    buf2027 = reinterpret_tensor(buf2023, (128, 512), (512, 1), 0); del buf2023  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf2026, permute_2126, out=buf2027)
    del permute_2126
    buf2028 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2026, (128, 128), (1, 128), 0), view_2, out=buf2028)
    buf2029 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf2030 = reinterpret_tensor(buf2024, (128, 128), (1, 128), 0); del buf2024  # reuse
    cpp_fused_sum_view_482(c_void_p(buf2030.data_ptr()), c_void_p(buf2026.data_ptr()), c_void_p(buf2029.data_ptr()))
    buf2031 = buf2026; del buf2026  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf2030, permute_2130, out=buf2031)
    del permute_2130
    buf2032 = reinterpret_tensor(buf2020, (128, 128), (128, 1), 0); del buf2020  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2030, (128, 128), (128, 1), 0), view_6, out=buf2032)
    buf2033 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf2034 = empty((128, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_view_483(c_void_p(buf2030.data_ptr()), c_void_p(buf2025.data_ptr()), c_void_p(buf2033.data_ptr()), c_void_p(buf2034.data_ptr()))
    buf2035 = reinterpret_tensor(buf2030, (128, 128), (128, 1), 0); del buf2030  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(buf2034, permute_2134, out=buf2035)
    del permute_2134
    buf2036 = reinterpret_tensor(buf2025, (128, 128), (128, 1), 0); del buf2025  # reuse
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2034, (128, 128), (1, 128), 0), view_6, out=buf2036)
    del view_6
    buf2037 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf2038 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf2039 = empty((1, 1, 128), device='cpu', dtype=torch.float32)
    buf2040 = reinterpret_tensor(buf2031, (1, 128, 128), (16384, 128, 1), 0); del buf2031  # reuse
    cpp_fused_add_mul_sum_484(c_void_p(buf2040.data_ptr()), c_void_p(buf2034.data_ptr()), c_void_p(buf2035.data_ptr()), c_void_p(addmm_2.data_ptr()), c_void_p(primals_5.data_ptr()), c_void_p(buf2037.data_ptr()), c_void_p(buf2038.data_ptr()), c_void_p(buf2039.data_ptr()))
    del addmm_2
    del buf2034
    del buf2035
    del primals_5
    buf2041 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2040, (128, 128), (128, 1), 0), permute_2138, out=buf2041)
    del permute_2138
    buf2042 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2040, (128, 128), (1, 128), 0), view_2, out=buf2042)
    buf2043 = empty((1, 128), device='cpu', dtype=torch.float32)
    cpp_fused_sum_485(c_void_p(buf2040.data_ptr()), c_void_p(buf2043.data_ptr()))
    del buf2040
    buf2047 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2046, (128, 128), (128, 1), 0), permute_2142, out=buf2047)
    del permute_2142
    buf2048 = empty((128, 512), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2046, (128, 128), (1, 128), 0), view_2, out=buf2048)
    del view_2
    buf2049 = empty((1, 128), device='cpu', dtype=torch.float32)
    buf2050 = reinterpret_tensor(buf2022, (1, 1, 512), (512, 512, 1), 0); del buf2022  # reuse
    buf2052 = empty((1, 1, 512), device='cpu', dtype=torch.float32)
    buf2051 = buf1969; del buf1969  # reuse
    buf2058 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    buf2053 = empty((2, 512), device='cpu', dtype=torch.float32)
    buf2054 = empty((1, 128, 512), device='cpu', dtype=torch.float32)
    cpp_fused_add_embedding_dense_backward_mul_nll_loss_forward_sum_486(c_void_p(buf2051.data_ptr()), c_void_p(buf2046.data_ptr()), c_void_p(buf2027.data_ptr()), c_void_p(buf2041.data_ptr()), c_void_p(buf2047.data_ptr()), c_void_p(add_1.data_ptr()), c_void_p(primals_1.data_ptr()), c_void_p(slice_4.data_ptr()), c_void_p(buf2049.data_ptr()), c_void_p(buf2050.data_ptr()), c_void_p(buf2052.data_ptr()), c_void_p(buf2058.data_ptr()), c_void_p(buf2053.data_ptr()), c_void_p(buf2054.data_ptr()))
    del add_1
    del buf2027
    del buf2041
    del buf2047
    del primals_1
    aten.index_put_(buf2053, [full_default], buf2054, True)
    del buf2054
    del full_default
    buf2057 = empty((512, 512), device='cpu', dtype=torch.float32)
    cpp_fused_embedding_dense_backward_487(c_void_p(buf2057.data_ptr()))
    aten.index_put_(buf2057, [slice_4], buf2058, True)
    del buf2058
    del slice_4
    buf2061 = empty((128, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2051, (128, 512), (512, 1), 0), permute_2146, out=buf2061)
    del permute_2146
    buf2062 = empty((512, 384), device='cpu', dtype=torch.float32)
    # Source Nodes: [], Original ATen: [aten.mm]
    extern_kernels.mm(reinterpret_tensor(buf2051, (512, 128), (1, 512), 0), view, out=buf2062)
    del view
    buf2063 = empty((1, 512), device='cpu', dtype=torch.float32)
    buf2064 = reinterpret_tensor(buf69, (30522, 128), (128, 1), 0); del buf69  # reuse
    buf2065 = buf2046; del buf2046  # reuse
    cpp_fused_add_constant_pad_nd_embedding_dense_backward_nll_loss_forward_slice_backward_sum_488(c_void_p(buf2051.data_ptr()), c_void_p(primals_1120.data_ptr()), c_void_p(buf2061.data_ptr()), c_void_p(buf2063.data_ptr()), c_void_p(buf2064.data_ptr()), c_void_p(buf2065.data_ptr()))
    del buf2051
    del buf2061
    aten.index_put_(buf2064, [primals_1120], buf2065, True)
    del buf2065
    del primals_1120
    return (reinterpret_tensor(buf2052, (512, ), (1, ), 0), reinterpret_tensor(buf2050, (512, ), (1, ), 0), reinterpret_tensor(buf2045, (128, ), (1, ), 0), reinterpret_tensor(buf2044, (128, ), (1, ), 0), reinterpret_tensor(buf2039, (128, ), (1, ), 0), reinterpret_tensor(buf2038, (128, ), (1, ), 0), reinterpret_tensor(buf2015, (128, ), (1, ), 0), reinterpret_tensor(buf2014, (128, ), (1, ), 0), reinterpret_tensor(buf2005, (128, ), (1, ), 0), reinterpret_tensor(buf2004, (128, ), (1, ), 0), reinterpret_tensor(buf1995, (128, ), (1, ), 0), reinterpret_tensor(buf1994, (128, ), (1, ), 0), reinterpret_tensor(buf1985, (128, ), (1, ), 0), reinterpret_tensor(buf1984, (128, ), (1, ), 0), reinterpret_tensor(buf1975, (128, ), (1, ), 0), reinterpret_tensor(buf1974, (128, ), (1, ), 0), reinterpret_tensor(buf1970, (512, ), (1, ), 0), reinterpret_tensor(buf1968, (512, ), (1, ), 0), reinterpret_tensor(buf1963, (128, ), (1, ), 0), reinterpret_tensor(buf1962, (128, ), (1, ), 0), reinterpret_tensor(buf1957, (128, ), (1, ), 0), reinterpret_tensor(buf1956, (128, ), (1, ), 0), reinterpret_tensor(buf1933, (128, ), (1, ), 0), reinterpret_tensor(buf1932, (128, ), (1, ), 0), reinterpret_tensor(buf1923, (128, ), (1, ), 0), reinterpret_tensor(buf1922, (128, ), (1, ), 0), reinterpret_tensor(buf1913, (128, ), (1, ), 0), reinterpret_tensor(buf1912, (128, ), (1, ), 0), reinterpret_tensor(buf1903, (128, ), (1, ), 0), reinterpret_tensor(buf1902, (128, ), (1, ), 0), reinterpret_tensor(buf1893, (128, ), (1, ), 0), reinterpret_tensor(buf1892, (128, ), (1, ), 0), reinterpret_tensor(buf1888, (512, ), (1, ), 0), reinterpret_tensor(buf1886, (512, ), (1, ), 0), reinterpret_tensor(buf1881, (128, ), (1, ), 0), reinterpret_tensor(buf1880, (128, ), (1, ), 0), reinterpret_tensor(buf1875, (128, ), (1, ), 0), reinterpret_tensor(buf1874, (128, ), (1, ), 0), reinterpret_tensor(buf1851, (128, ), (1, ), 0), reinterpret_tensor(buf1850, (128, ), (1, ), 0), reinterpret_tensor(buf1841, (128, ), (1, ), 0), reinterpret_tensor(buf1840, (128, ), (1, ), 0), reinterpret_tensor(buf1831, (128, ), (1, ), 0), reinterpret_tensor(buf1830, (128, ), (1, ), 0), reinterpret_tensor(buf1821, (128, ), (1, ), 0), reinterpret_tensor(buf1820, (128, ), (1, ), 0), reinterpret_tensor(buf1811, (128, ), (1, ), 0), reinterpret_tensor(buf1810, (128, ), (1, ), 0), reinterpret_tensor(buf1806, (512, ), (1, ), 0), reinterpret_tensor(buf1804, (512, ), (1, ), 0), reinterpret_tensor(buf1799, (128, ), (1, ), 0), reinterpret_tensor(buf1798, (128, ), (1, ), 0), reinterpret_tensor(buf1793, (128, ), (1, ), 0), reinterpret_tensor(buf1792, (128, ), (1, ), 0), reinterpret_tensor(buf1769, (128, ), (1, ), 0), reinterpret_tensor(buf1768, (128, ), (1, ), 0), reinterpret_tensor(buf1759, (128, ), (1, ), 0), reinterpret_tensor(buf1758, (128, ), (1, ), 0), reinterpret_tensor(buf1749, (128, ), (1, ), 0), reinterpret_tensor(buf1748, (128, ), (1, ), 0), reinterpret_tensor(buf1739, (128, ), (1, ), 0), reinterpret_tensor(buf1738, (128, ), (1, ), 0), reinterpret_tensor(buf1729, (128, ), (1, ), 0), reinterpret_tensor(buf1728, (128, ), (1, ), 0), reinterpret_tensor(buf1724, (512, ), (1, ), 0), reinterpret_tensor(buf1722, (512, ), (1, ), 0), reinterpret_tensor(buf1717, (128, ), (1, ), 0), reinterpret_tensor(buf1716, (128, ), (1, ), 0), reinterpret_tensor(buf1711, (128, ), (1, ), 0), reinterpret_tensor(buf1710, (128, ), (1, ), 0), reinterpret_tensor(buf1687, (128, ), (1, ), 0), reinterpret_tensor(buf1686, (128, ), (1, ), 0), reinterpret_tensor(buf1677, (128, ), (1, ), 0), reinterpret_tensor(buf1676, (128, ), (1, ), 0), reinterpret_tensor(buf1667, (128, ), (1, ), 0), reinterpret_tensor(buf1666, (128, ), (1, ), 0), reinterpret_tensor(buf1657, (128, ), (1, ), 0), reinterpret_tensor(buf1656, (128, ), (1, ), 0), reinterpret_tensor(buf1647, (128, ), (1, ), 0), reinterpret_tensor(buf1646, (128, ), (1, ), 0), reinterpret_tensor(buf1642, (512, ), (1, ), 0), reinterpret_tensor(buf1640, (512, ), (1, ), 0), reinterpret_tensor(buf1635, (128, ), (1, ), 0), reinterpret_tensor(buf1634, (128, ), (1, ), 0), reinterpret_tensor(buf1629, (128, ), (1, ), 0), reinterpret_tensor(buf1628, (128, ), (1, ), 0), reinterpret_tensor(buf1605, (128, ), (1, ), 0), reinterpret_tensor(buf1604, (128, ), (1, ), 0), reinterpret_tensor(buf1595, (128, ), (1, ), 0), reinterpret_tensor(buf1594, (128, ), (1, ), 0), reinterpret_tensor(buf1585, (128, ), (1, ), 0), reinterpret_tensor(buf1584, (128, ), (1, ), 0), reinterpret_tensor(buf1575, (128, ), (1, ), 0), reinterpret_tensor(buf1574, (128, ), (1, ), 0), reinterpret_tensor(buf1565, (128, ), (1, ), 0), reinterpret_tensor(buf1564, (128, ), (1, ), 0), reinterpret_tensor(buf1560, (512, ), (1, ), 0), reinterpret_tensor(buf1558, (512, ), (1, ), 0), reinterpret_tensor(buf1553, (128, ), (1, ), 0), reinterpret_tensor(buf1552, (128, ), (1, ), 0), reinterpret_tensor(buf1547, (128, ), (1, ), 0), reinterpret_tensor(buf1546, (128, ), (1, ), 0), reinterpret_tensor(buf1523, (128, ), (1, ), 0), reinterpret_tensor(buf1522, (128, ), (1, ), 0), reinterpret_tensor(buf1513, (128, ), (1, ), 0), reinterpret_tensor(buf1512, (128, ), (1, ), 0), reinterpret_tensor(buf1503, (128, ), (1, ), 0), reinterpret_tensor(buf1502, (128, ), (1, ), 0), reinterpret_tensor(buf1493, (128, ), (1, ), 0), reinterpret_tensor(buf1492, (128, ), (1, ), 0), reinterpret_tensor(buf1483, (128, ), (1, ), 0), reinterpret_tensor(buf1482, (128, ), (1, ), 0), reinterpret_tensor(buf1478, (512, ), (1, ), 0), reinterpret_tensor(buf1476, (512, ), (1, ), 0), reinterpret_tensor(buf1471, (128, ), (1, ), 0), reinterpret_tensor(buf1470, (128, ), (1, ), 0), reinterpret_tensor(buf1465, (128, ), (1, ), 0), reinterpret_tensor(buf1464, (128, ), (1, ), 0), reinterpret_tensor(buf1441, (128, ), (1, ), 0), reinterpret_tensor(buf1440, (128, ), (1, ), 0), reinterpret_tensor(buf1431, (128, ), (1, ), 0), reinterpret_tensor(buf1430, (128, ), (1, ), 0), reinterpret_tensor(buf1421, (128, ), (1, ), 0), reinterpret_tensor(buf1420, (128, ), (1, ), 0), reinterpret_tensor(buf1411, (128, ), (1, ), 0), reinterpret_tensor(buf1410, (128, ), (1, ), 0), reinterpret_tensor(buf1401, (128, ), (1, ), 0), reinterpret_tensor(buf1400, (128, ), (1, ), 0), reinterpret_tensor(buf1396, (512, ), (1, ), 0), reinterpret_tensor(buf1394, (512, ), (1, ), 0), reinterpret_tensor(buf1389, (128, ), (1, ), 0), reinterpret_tensor(buf1388, (128, ), (1, ), 0), reinterpret_tensor(buf1383, (128, ), (1, ), 0), reinterpret_tensor(buf1382, (128, ), (1, ), 0), reinterpret_tensor(buf1359, (128, ), (1, ), 0), reinterpret_tensor(buf1358, (128, ), (1, ), 0), reinterpret_tensor(buf1349, (128, ), (1, ), 0), reinterpret_tensor(buf1348, (128, ), (1, ), 0), reinterpret_tensor(buf1339, (128, ), (1, ), 0), reinterpret_tensor(buf1338, (128, ), (1, ), 0), reinterpret_tensor(buf1329, (128, ), (1, ), 0), reinterpret_tensor(buf1328, (128, ), (1, ), 0), reinterpret_tensor(buf1319, (128, ), (1, ), 0), reinterpret_tensor(buf1318, (128, ), (1, ), 0), reinterpret_tensor(buf1314, (512, ), (1, ), 0), reinterpret_tensor(buf1312, (512, ), (1, ), 0), reinterpret_tensor(buf1307, (128, ), (1, ), 0), reinterpret_tensor(buf1306, (128, ), (1, ), 0), reinterpret_tensor(buf1301, (128, ), (1, ), 0), reinterpret_tensor(buf1300, (128, ), (1, ), 0), reinterpret_tensor(buf1277, (128, ), (1, ), 0), reinterpret_tensor(buf1276, (128, ), (1, ), 0), reinterpret_tensor(buf1267, (128, ), (1, ), 0), reinterpret_tensor(buf1266, (128, ), (1, ), 0), reinterpret_tensor(buf1257, (128, ), (1, ), 0), reinterpret_tensor(buf1256, (128, ), (1, ), 0), reinterpret_tensor(buf1247, (128, ), (1, ), 0), reinterpret_tensor(buf1246, (128, ), (1, ), 0), reinterpret_tensor(buf1237, (128, ), (1, ), 0), reinterpret_tensor(buf1236, (128, ), (1, ), 0), reinterpret_tensor(buf1232, (512, ), (1, ), 0), reinterpret_tensor(buf1230, (512, ), (1, ), 0), reinterpret_tensor(buf1225, (128, ), (1, ), 0), reinterpret_tensor(buf1224, (128, ), (1, ), 0), reinterpret_tensor(buf1219, (128, ), (1, ), 0), reinterpret_tensor(buf1218, (128, ), (1, ), 0), reinterpret_tensor(buf1195, (128, ), (1, ), 0), reinterpret_tensor(buf1194, (128, ), (1, ), 0), reinterpret_tensor(buf1185, (128, ), (1, ), 0), reinterpret_tensor(buf1184, (128, ), (1, ), 0), reinterpret_tensor(buf1175, (128, ), (1, ), 0), reinterpret_tensor(buf1174, (128, ), (1, ), 0), reinterpret_tensor(buf1165, (128, ), (1, ), 0), reinterpret_tensor(buf1164, (128, ), (1, ), 0), reinterpret_tensor(buf1155, (128, ), (1, ), 0), reinterpret_tensor(buf1154, (128, ), (1, ), 0), reinterpret_tensor(buf1150, (512, ), (1, ), 0), reinterpret_tensor(buf1148, (512, ), (1, ), 0), reinterpret_tensor(buf1143, (128, ), (1, ), 0), reinterpret_tensor(buf1142, (128, ), (1, ), 0), reinterpret_tensor(buf1137, (128, ), (1, ), 0), reinterpret_tensor(buf1136, (128, ), (1, ), 0), reinterpret_tensor(buf1113, (128, ), (1, ), 0), reinterpret_tensor(buf1112, (128, ), (1, ), 0), reinterpret_tensor(buf1103, (128, ), (1, ), 0), reinterpret_tensor(buf1102, (128, ), (1, ), 0), reinterpret_tensor(buf1093, (128, ), (1, ), 0), reinterpret_tensor(buf1092, (128, ), (1, ), 0), reinterpret_tensor(buf1083, (128, ), (1, ), 0), reinterpret_tensor(buf1082, (128, ), (1, ), 0), reinterpret_tensor(buf1073, (128, ), (1, ), 0), reinterpret_tensor(buf1072, (128, ), (1, ), 0), reinterpret_tensor(buf1068, (512, ), (1, ), 0), reinterpret_tensor(buf1066, (512, ), (1, ), 0), reinterpret_tensor(buf1061, (128, ), (1, ), 0), reinterpret_tensor(buf1060, (128, ), (1, ), 0), reinterpret_tensor(buf1055, (128, ), (1, ), 0), reinterpret_tensor(buf1054, (128, ), (1, ), 0), reinterpret_tensor(buf1031, (128, ), (1, ), 0), reinterpret_tensor(buf1030, (128, ), (1, ), 0), reinterpret_tensor(buf1021, (128, ), (1, ), 0), reinterpret_tensor(buf1020, (128, ), (1, ), 0), reinterpret_tensor(buf1011, (128, ), (1, ), 0), reinterpret_tensor(buf1010, (128, ), (1, ), 0), reinterpret_tensor(buf1001, (128, ), (1, ), 0), reinterpret_tensor(buf1000, (128, ), (1, ), 0), reinterpret_tensor(buf991, (128, ), (1, ), 0), reinterpret_tensor(buf990, (128, ), (1, ), 0), reinterpret_tensor(buf986, (512, ), (1, ), 0), reinterpret_tensor(buf984, (512, ), (1, ), 0), reinterpret_tensor(buf979, (128, ), (1, ), 0), reinterpret_tensor(buf978, (128, ), (1, ), 0), reinterpret_tensor(buf973, (128, ), (1, ), 0), reinterpret_tensor(buf972, (128, ), (1, ), 0), reinterpret_tensor(buf949, (128, ), (1, ), 0), reinterpret_tensor(buf948, (128, ), (1, ), 0), reinterpret_tensor(buf939, (128, ), (1, ), 0), reinterpret_tensor(buf938, (128, ), (1, ), 0), reinterpret_tensor(buf929, (128, ), (1, ), 0), reinterpret_tensor(buf928, (128, ), (1, ), 0), reinterpret_tensor(buf919, (128, ), (1, ), 0), reinterpret_tensor(buf918, (128, ), (1, ), 0), reinterpret_tensor(buf909, (128, ), (1, ), 0), reinterpret_tensor(buf908, (128, ), (1, ), 0), reinterpret_tensor(buf904, (512, ), (1, ), 0), reinterpret_tensor(buf902, (512, ), (1, ), 0), reinterpret_tensor(buf897, (128, ), (1, ), 0), reinterpret_tensor(buf896, (128, ), (1, ), 0), reinterpret_tensor(buf891, (128, ), (1, ), 0), reinterpret_tensor(buf890, (128, ), (1, ), 0), reinterpret_tensor(buf867, (128, ), (1, ), 0), reinterpret_tensor(buf866, (128, ), (1, ), 0), reinterpret_tensor(buf857, (128, ), (1, ), 0), reinterpret_tensor(buf856, (128, ), (1, ), 0), reinterpret_tensor(buf847, (128, ), (1, ), 0), reinterpret_tensor(buf846, (128, ), (1, ), 0), reinterpret_tensor(buf837, (128, ), (1, ), 0), reinterpret_tensor(buf836, (128, ), (1, ), 0), reinterpret_tensor(buf827, (128, ), (1, ), 0), reinterpret_tensor(buf826, (128, ), (1, ), 0), reinterpret_tensor(buf822, (512, ), (1, ), 0), reinterpret_tensor(buf820, (512, ), (1, ), 0), reinterpret_tensor(buf815, (128, ), (1, ), 0), reinterpret_tensor(buf814, (128, ), (1, ), 0), reinterpret_tensor(buf809, (128, ), (1, ), 0), reinterpret_tensor(buf808, (128, ), (1, ), 0), reinterpret_tensor(buf785, (128, ), (1, ), 0), reinterpret_tensor(buf784, (128, ), (1, ), 0), reinterpret_tensor(buf775, (128, ), (1, ), 0), reinterpret_tensor(buf774, (128, ), (1, ), 0), reinterpret_tensor(buf765, (128, ), (1, ), 0), reinterpret_tensor(buf764, (128, ), (1, ), 0), reinterpret_tensor(buf755, (128, ), (1, ), 0), reinterpret_tensor(buf754, (128, ), (1, ), 0), reinterpret_tensor(buf745, (128, ), (1, ), 0), reinterpret_tensor(buf744, (128, ), (1, ), 0), reinterpret_tensor(buf740, (512, ), (1, ), 0), reinterpret_tensor(buf738, (512, ), (1, ), 0), reinterpret_tensor(buf733, (128, ), (1, ), 0), reinterpret_tensor(buf732, (128, ), (1, ), 0), reinterpret_tensor(buf727, (128, ), (1, ), 0), reinterpret_tensor(buf726, (128, ), (1, ), 0), reinterpret_tensor(buf703, (128, ), (1, ), 0), reinterpret_tensor(buf702, (128, ), (1, ), 0), reinterpret_tensor(buf693, (128, ), (1, ), 0), reinterpret_tensor(buf692, (128, ), (1, ), 0), reinterpret_tensor(buf683, (128, ), (1, ), 0), reinterpret_tensor(buf682, (128, ), (1, ), 0), reinterpret_tensor(buf673, (128, ), (1, ), 0), reinterpret_tensor(buf672, (128, ), (1, ), 0), reinterpret_tensor(buf663, (128, ), (1, ), 0), reinterpret_tensor(buf662, (128, ), (1, ), 0), reinterpret_tensor(buf658, (512, ), (1, ), 0), reinterpret_tensor(buf656, (512, ), (1, ), 0), reinterpret_tensor(buf651, (128, ), (1, ), 0), reinterpret_tensor(buf650, (128, ), (1, ), 0), reinterpret_tensor(buf645, (128, ), (1, ), 0), reinterpret_tensor(buf644, (128, ), (1, ), 0), reinterpret_tensor(buf621, (128, ), (1, ), 0), reinterpret_tensor(buf620, (128, ), (1, ), 0), reinterpret_tensor(buf611, (128, ), (1, ), 0), reinterpret_tensor(buf610, (128, ), (1, ), 0), reinterpret_tensor(buf601, (128, ), (1, ), 0), reinterpret_tensor(buf600, (128, ), (1, ), 0), reinterpret_tensor(buf591, (128, ), (1, ), 0), reinterpret_tensor(buf590, (128, ), (1, ), 0), reinterpret_tensor(buf581, (128, ), (1, ), 0), reinterpret_tensor(buf580, (128, ), (1, ), 0), reinterpret_tensor(buf576, (512, ), (1, ), 0), reinterpret_tensor(buf574, (512, ), (1, ), 0), reinterpret_tensor(buf569, (128, ), (1, ), 0), reinterpret_tensor(buf568, (128, ), (1, ), 0), reinterpret_tensor(buf563, (128, ), (1, ), 0), reinterpret_tensor(buf562, (128, ), (1, ), 0), reinterpret_tensor(buf539, (128, ), (1, ), 0), reinterpret_tensor(buf538, (128, ), (1, ), 0), reinterpret_tensor(buf529, (128, ), (1, ), 0), reinterpret_tensor(buf528, (128, ), (1, ), 0), reinterpret_tensor(buf519, (128, ), (1, ), 0), reinterpret_tensor(buf518, (128, ), (1, ), 0), reinterpret_tensor(buf509, (128, ), (1, ), 0), reinterpret_tensor(buf508, (128, ), (1, ), 0), reinterpret_tensor(buf499, (128, ), (1, ), 0), reinterpret_tensor(buf498, (128, ), (1, ), 0), reinterpret_tensor(buf494, (512, ), (1, ), 0), reinterpret_tensor(buf492, (512, ), (1, ), 0), reinterpret_tensor(buf487, (128, ), (1, ), 0), reinterpret_tensor(buf486, (128, ), (1, ), 0), reinterpret_tensor(buf481, (128, ), (1, ), 0), reinterpret_tensor(buf480, (128, ), (1, ), 0), reinterpret_tensor(buf457, (128, ), (1, ), 0), reinterpret_tensor(buf456, (128, ), (1, ), 0), reinterpret_tensor(buf447, (128, ), (1, ), 0), reinterpret_tensor(buf446, (128, ), (1, ), 0), reinterpret_tensor(buf437, (128, ), (1, ), 0), reinterpret_tensor(buf436, (128, ), (1, ), 0), reinterpret_tensor(buf427, (128, ), (1, ), 0), reinterpret_tensor(buf426, (128, ), (1, ), 0), reinterpret_tensor(buf417, (128, ), (1, ), 0), reinterpret_tensor(buf416, (128, ), (1, ), 0), reinterpret_tensor(buf412, (512, ), (1, ), 0), reinterpret_tensor(buf410, (512, ), (1, ), 0), reinterpret_tensor(buf405, (128, ), (1, ), 0), reinterpret_tensor(buf404, (128, ), (1, ), 0), reinterpret_tensor(buf399, (128, ), (1, ), 0), reinterpret_tensor(buf398, (128, ), (1, ), 0), reinterpret_tensor(buf375, (128, ), (1, ), 0), reinterpret_tensor(buf374, (128, ), (1, ), 0), reinterpret_tensor(buf365, (128, ), (1, ), 0), reinterpret_tensor(buf364, (128, ), (1, ), 0), reinterpret_tensor(buf355, (128, ), (1, ), 0), reinterpret_tensor(buf354, (128, ), (1, ), 0), reinterpret_tensor(buf345, (128, ), (1, ), 0), reinterpret_tensor(buf344, (128, ), (1, ), 0), reinterpret_tensor(buf335, (128, ), (1, ), 0), reinterpret_tensor(buf334, (128, ), (1, ), 0), reinterpret_tensor(buf330, (512, ), (1, ), 0), reinterpret_tensor(buf328, (512, ), (1, ), 0), reinterpret_tensor(buf323, (128, ), (1, ), 0), reinterpret_tensor(buf322, (128, ), (1, ), 0), reinterpret_tensor(buf317, (128, ), (1, ), 0), reinterpret_tensor(buf316, (128, ), (1, ), 0), reinterpret_tensor(buf293, (128, ), (1, ), 0), reinterpret_tensor(buf292, (128, ), (1, ), 0), reinterpret_tensor(buf283, (128, ), (1, ), 0), reinterpret_tensor(buf282, (128, ), (1, ), 0), reinterpret_tensor(buf273, (128, ), (1, ), 0), reinterpret_tensor(buf272, (128, ), (1, ), 0), reinterpret_tensor(buf263, (128, ), (1, ), 0), reinterpret_tensor(buf262, (128, ), (1, ), 0), reinterpret_tensor(buf253, (128, ), (1, ), 0), reinterpret_tensor(buf252, (128, ), (1, ), 0), reinterpret_tensor(buf248, (512, ), (1, ), 0), reinterpret_tensor(buf246, (512, ), (1, ), 0), reinterpret_tensor(buf241, (128, ), (1, ), 0), reinterpret_tensor(buf240, (128, ), (1, ), 0), reinterpret_tensor(buf235, (128, ), (1, ), 0), reinterpret_tensor(buf234, (128, ), (1, ), 0), reinterpret_tensor(buf211, (128, ), (1, ), 0), reinterpret_tensor(buf210, (128, ), (1, ), 0), reinterpret_tensor(buf201, (128, ), (1, ), 0), reinterpret_tensor(buf200, (128, ), (1, ), 0), reinterpret_tensor(buf191, (128, ), (1, ), 0), reinterpret_tensor(buf190, (128, ), (1, ), 0), reinterpret_tensor(buf181, (128, ), (1, ), 0), reinterpret_tensor(buf180, (128, ), (1, ), 0), reinterpret_tensor(buf171, (128, ), (1, ), 0), reinterpret_tensor(buf170, (128, ), (1, ), 0), reinterpret_tensor(buf166, (512, ), (1, ), 0), reinterpret_tensor(buf164, (512, ), (1, ), 0), reinterpret_tensor(buf159, (128, ), (1, ), 0), reinterpret_tensor(buf158, (128, ), (1, ), 0), reinterpret_tensor(buf153, (128, ), (1, ), 0), reinterpret_tensor(buf152, (128, ), (1, ), 0), reinterpret_tensor(buf129, (128, ), (1, ), 0), reinterpret_tensor(buf128, (128, ), (1, ), 0), reinterpret_tensor(buf119, (128, ), (1, ), 0), reinterpret_tensor(buf118, (128, ), (1, ), 0), reinterpret_tensor(buf109, (128, ), (1, ), 0), reinterpret_tensor(buf108, (128, ), (1, ), 0), reinterpret_tensor(buf99, (128, ), (1, ), 0), reinterpret_tensor(buf98, (128, ), (1, ), 0), reinterpret_tensor(buf89, (128, ), (1, ), 0), reinterpret_tensor(buf88, (128, ), (1, ), 0), reinterpret_tensor(buf83, (512, ), (1, ), 0), reinterpret_tensor(buf82, (512, ), (1, ), 0), reinterpret_tensor(buf72, (30522, 128), (1, 30522), 0), reinterpret_tensor(buf72, (384, 30522), (30522, 1), 3906816), reinterpret_tensor(buf71, (30522, ), (1, ), 0), buf2064, reinterpret_tensor(buf2062, (512, 384), (384, 1), 0), reinterpret_tensor(buf2063, (512, ), (1, ), 0), buf2057, buf2053, reinterpret_tensor(buf2048, (128, 512), (512, 1), 0), reinterpret_tensor(buf2049, (128, ), (1, ), 0), reinterpret_tensor(buf2042, (128, 512), (512, 1), 0), reinterpret_tensor(buf2043, (128, ), (1, ), 0), reinterpret_tensor(buf2036, (128, 128), (128, 1), 0), reinterpret_tensor(buf2037, (128, ), (1, ), 0), reinterpret_tensor(buf2032, (128, 128), (128, 1), 0), reinterpret_tensor(buf2033, (128, ), (1, ), 0), reinterpret_tensor(buf2028, (128, 512), (512, 1), 0), reinterpret_tensor(buf2029, (128, ), (1, ), 0), reinterpret_tensor(buf2018, (128, 128), (128, 1), 0), reinterpret_tensor(buf2019, (128, ), (1, ), 0), reinterpret_tensor(buf2012, (512, 128), (128, 1), 0), reinterpret_tensor(buf2013, (512, ), (1, ), 0), reinterpret_tensor(buf2008, (128, 512), (512, 1), 0), reinterpret_tensor(buf2009, (128, ), (1, ), 0), reinterpret_tensor(buf2002, (512, 128), (128, 1), 0), reinterpret_tensor(buf2003, (512, ), (1, ), 0), reinterpret_tensor(buf1998, (128, 512), (512, 1), 0), reinterpret_tensor(buf1999, (128, ), (1, ), 0), reinterpret_tensor(buf1992, (512, 128), (128, 1), 0), reinterpret_tensor(buf1993, (512, ), (1, ), 0), reinterpret_tensor(buf1988, (128, 512), (512, 1), 0), reinterpret_tensor(buf1989, (128, ), (1, ), 0), reinterpret_tensor(buf1982, (512, 128), (128, 1), 0), reinterpret_tensor(buf1983, (512, ), (1, ), 0), reinterpret_tensor(buf1978, (128, 512), (512, 1), 0), reinterpret_tensor(buf1979, (128, ), (1, ), 0), reinterpret_tensor(buf1972, (512, 128), (128, 1), 0), reinterpret_tensor(buf1973, (512, ), (1, ), 0), reinterpret_tensor(buf1966, (128, 512), (512, 1), 0), reinterpret_tensor(buf1967, (128, ), (1, ), 0), reinterpret_tensor(buf1960, (128, 512), (512, 1), 0), reinterpret_tensor(buf1961, (128, ), (1, ), 0), reinterpret_tensor(buf1954, (128, 128), (128, 1), 0), reinterpret_tensor(buf1955, (128, ), (1, ), 0), reinterpret_tensor(buf1950, (128, 128), (128, 1), 0), reinterpret_tensor(buf1951, (128, ), (1, ), 0), reinterpret_tensor(buf1946, (128, 512), (512, 1), 0), reinterpret_tensor(buf1947, (128, ), (1, ), 0), reinterpret_tensor(buf1936, (128, 128), (128, 1), 0), reinterpret_tensor(buf1937, (128, ), (1, ), 0), reinterpret_tensor(buf1930, (512, 128), (128, 1), 0), reinterpret_tensor(buf1931, (512, ), (1, ), 0), reinterpret_tensor(buf1926, (128, 512), (512, 1), 0), reinterpret_tensor(buf1927, (128, ), (1, ), 0), reinterpret_tensor(buf1920, (512, 128), (128, 1), 0), reinterpret_tensor(buf1921, (512, ), (1, ), 0), reinterpret_tensor(buf1916, (128, 512), (512, 1), 0), reinterpret_tensor(buf1917, (128, ), (1, ), 0), reinterpret_tensor(buf1910, (512, 128), (128, 1), 0), reinterpret_tensor(buf1911, (512, ), (1, ), 0), reinterpret_tensor(buf1906, (128, 512), (512, 1), 0), reinterpret_tensor(buf1907, (128, ), (1, ), 0), reinterpret_tensor(buf1900, (512, 128), (128, 1), 0), reinterpret_tensor(buf1901, (512, ), (1, ), 0), reinterpret_tensor(buf1896, (128, 512), (512, 1), 0), reinterpret_tensor(buf1897, (128, ), (1, ), 0), reinterpret_tensor(buf1890, (512, 128), (128, 1), 0), reinterpret_tensor(buf1891, (512, ), (1, ), 0), reinterpret_tensor(buf1884, (128, 512), (512, 1), 0), reinterpret_tensor(buf1885, (128, ), (1, ), 0), reinterpret_tensor(buf1878, (128, 512), (512, 1), 0), reinterpret_tensor(buf1879, (128, ), (1, ), 0), reinterpret_tensor(buf1872, (128, 128), (128, 1), 0), reinterpret_tensor(buf1873, (128, ), (1, ), 0), reinterpret_tensor(buf1868, (128, 128), (128, 1), 0), reinterpret_tensor(buf1869, (128, ), (1, ), 0), reinterpret_tensor(buf1864, (128, 512), (512, 1), 0), reinterpret_tensor(buf1865, (128, ), (1, ), 0), reinterpret_tensor(buf1854, (128, 128), (128, 1), 0), reinterpret_tensor(buf1855, (128, ), (1, ), 0), reinterpret_tensor(buf1848, (512, 128), (128, 1), 0), reinterpret_tensor(buf1849, (512, ), (1, ), 0), reinterpret_tensor(buf1844, (128, 512), (512, 1), 0), reinterpret_tensor(buf1845, (128, ), (1, ), 0), reinterpret_tensor(buf1838, (512, 128), (128, 1), 0), reinterpret_tensor(buf1839, (512, ), (1, ), 0), reinterpret_tensor(buf1834, (128, 512), (512, 1), 0), reinterpret_tensor(buf1835, (128, ), (1, ), 0), reinterpret_tensor(buf1828, (512, 128), (128, 1), 0), reinterpret_tensor(buf1829, (512, ), (1, ), 0), reinterpret_tensor(buf1824, (128, 512), (512, 1), 0), reinterpret_tensor(buf1825, (128, ), (1, ), 0), reinterpret_tensor(buf1818, (512, 128), (128, 1), 0), reinterpret_tensor(buf1819, (512, ), (1, ), 0), reinterpret_tensor(buf1814, (128, 512), (512, 1), 0), reinterpret_tensor(buf1815, (128, ), (1, ), 0), reinterpret_tensor(buf1808, (512, 128), (128, 1), 0), reinterpret_tensor(buf1809, (512, ), (1, ), 0), reinterpret_tensor(buf1802, (128, 512), (512, 1), 0), reinterpret_tensor(buf1803, (128, ), (1, ), 0), reinterpret_tensor(buf1796, (128, 512), (512, 1), 0), reinterpret_tensor(buf1797, (128, ), (1, ), 0), reinterpret_tensor(buf1790, (128, 128), (128, 1), 0), reinterpret_tensor(buf1791, (128, ), (1, ), 0), reinterpret_tensor(buf1786, (128, 128), (128, 1), 0), reinterpret_tensor(buf1787, (128, ), (1, ), 0), reinterpret_tensor(buf1782, (128, 512), (512, 1), 0), reinterpret_tensor(buf1783, (128, ), (1, ), 0), reinterpret_tensor(buf1772, (128, 128), (128, 1), 0), reinterpret_tensor(buf1773, (128, ), (1, ), 0), reinterpret_tensor(buf1766, (512, 128), (128, 1), 0), reinterpret_tensor(buf1767, (512, ), (1, ), 0), reinterpret_tensor(buf1762, (128, 512), (512, 1), 0), reinterpret_tensor(buf1763, (128, ), (1, ), 0), reinterpret_tensor(buf1756, (512, 128), (128, 1), 0), reinterpret_tensor(buf1757, (512, ), (1, ), 0), reinterpret_tensor(buf1752, (128, 512), (512, 1), 0), reinterpret_tensor(buf1753, (128, ), (1, ), 0), reinterpret_tensor(buf1746, (512, 128), (128, 1), 0), reinterpret_tensor(buf1747, (512, ), (1, ), 0), reinterpret_tensor(buf1742, (128, 512), (512, 1), 0), reinterpret_tensor(buf1743, (128, ), (1, ), 0), reinterpret_tensor(buf1736, (512, 128), (128, 1), 0), reinterpret_tensor(buf1737, (512, ), (1, ), 0), reinterpret_tensor(buf1732, (128, 512), (512, 1), 0), reinterpret_tensor(buf1733, (128, ), (1, ), 0), reinterpret_tensor(buf1726, (512, 128), (128, 1), 0), reinterpret_tensor(buf1727, (512, ), (1, ), 0), reinterpret_tensor(buf1720, (128, 512), (512, 1), 0), reinterpret_tensor(buf1721, (128, ), (1, ), 0), reinterpret_tensor(buf1714, (128, 512), (512, 1), 0), reinterpret_tensor(buf1715, (128, ), (1, ), 0), reinterpret_tensor(buf1708, (128, 128), (128, 1), 0), reinterpret_tensor(buf1709, (128, ), (1, ), 0), reinterpret_tensor(buf1704, (128, 128), (128, 1), 0), reinterpret_tensor(buf1705, (128, ), (1, ), 0), reinterpret_tensor(buf1700, (128, 512), (512, 1), 0), reinterpret_tensor(buf1701, (128, ), (1, ), 0), reinterpret_tensor(buf1690, (128, 128), (128, 1), 0), reinterpret_tensor(buf1691, (128, ), (1, ), 0), reinterpret_tensor(buf1684, (512, 128), (128, 1), 0), reinterpret_tensor(buf1685, (512, ), (1, ), 0), reinterpret_tensor(buf1680, (128, 512), (512, 1), 0), reinterpret_tensor(buf1681, (128, ), (1, ), 0), reinterpret_tensor(buf1674, (512, 128), (128, 1), 0), reinterpret_tensor(buf1675, (512, ), (1, ), 0), reinterpret_tensor(buf1670, (128, 512), (512, 1), 0), reinterpret_tensor(buf1671, (128, ), (1, ), 0), reinterpret_tensor(buf1664, (512, 128), (128, 1), 0), reinterpret_tensor(buf1665, (512, ), (1, ), 0), reinterpret_tensor(buf1660, (128, 512), (512, 1), 0), reinterpret_tensor(buf1661, (128, ), (1, ), 0), reinterpret_tensor(buf1654, (512, 128), (128, 1), 0), reinterpret_tensor(buf1655, (512, ), (1, ), 0), reinterpret_tensor(buf1650, (128, 512), (512, 1), 0), reinterpret_tensor(buf1651, (128, ), (1, ), 0), reinterpret_tensor(buf1644, (512, 128), (128, 1), 0), reinterpret_tensor(buf1645, (512, ), (1, ), 0), reinterpret_tensor(buf1638, (128, 512), (512, 1), 0), reinterpret_tensor(buf1639, (128, ), (1, ), 0), reinterpret_tensor(buf1632, (128, 512), (512, 1), 0), reinterpret_tensor(buf1633, (128, ), (1, ), 0), reinterpret_tensor(buf1626, (128, 128), (128, 1), 0), reinterpret_tensor(buf1627, (128, ), (1, ), 0), reinterpret_tensor(buf1622, (128, 128), (128, 1), 0), reinterpret_tensor(buf1623, (128, ), (1, ), 0), reinterpret_tensor(buf1618, (128, 512), (512, 1), 0), reinterpret_tensor(buf1619, (128, ), (1, ), 0), reinterpret_tensor(buf1608, (128, 128), (128, 1), 0), reinterpret_tensor(buf1609, (128, ), (1, ), 0), reinterpret_tensor(buf1602, (512, 128), (128, 1), 0), reinterpret_tensor(buf1603, (512, ), (1, ), 0), reinterpret_tensor(buf1598, (128, 512), (512, 1), 0), reinterpret_tensor(buf1599, (128, ), (1, ), 0), reinterpret_tensor(buf1592, (512, 128), (128, 1), 0), reinterpret_tensor(buf1593, (512, ), (1, ), 0), reinterpret_tensor(buf1588, (128, 512), (512, 1), 0), reinterpret_tensor(buf1589, (128, ), (1, ), 0), reinterpret_tensor(buf1582, (512, 128), (128, 1), 0), reinterpret_tensor(buf1583, (512, ), (1, ), 0), reinterpret_tensor(buf1578, (128, 512), (512, 1), 0), reinterpret_tensor(buf1579, (128, ), (1, ), 0), reinterpret_tensor(buf1572, (512, 128), (128, 1), 0), reinterpret_tensor(buf1573, (512, ), (1, ), 0), reinterpret_tensor(buf1568, (128, 512), (512, 1), 0), reinterpret_tensor(buf1569, (128, ), (1, ), 0), reinterpret_tensor(buf1562, (512, 128), (128, 1), 0), reinterpret_tensor(buf1563, (512, ), (1, ), 0), reinterpret_tensor(buf1556, (128, 512), (512, 1), 0), reinterpret_tensor(buf1557, (128, ), (1, ), 0), reinterpret_tensor(buf1550, (128, 512), (512, 1), 0), reinterpret_tensor(buf1551, (128, ), (1, ), 0), reinterpret_tensor(buf1544, (128, 128), (128, 1), 0), reinterpret_tensor(buf1545, (128, ), (1, ), 0), reinterpret_tensor(buf1540, (128, 128), (128, 1), 0), reinterpret_tensor(buf1541, (128, ), (1, ), 0), reinterpret_tensor(buf1536, (128, 512), (512, 1), 0), reinterpret_tensor(buf1537, (128, ), (1, ), 0), reinterpret_tensor(buf1526, (128, 128), (128, 1), 0), reinterpret_tensor(buf1527, (128, ), (1, ), 0), reinterpret_tensor(buf1520, (512, 128), (128, 1), 0), reinterpret_tensor(buf1521, (512, ), (1, ), 0), reinterpret_tensor(buf1516, (128, 512), (512, 1), 0), reinterpret_tensor(buf1517, (128, ), (1, ), 0), reinterpret_tensor(buf1510, (512, 128), (128, 1), 0), reinterpret_tensor(buf1511, (512, ), (1, ), 0), reinterpret_tensor(buf1506, (128, 512), (512, 1), 0), reinterpret_tensor(buf1507, (128, ), (1, ), 0), reinterpret_tensor(buf1500, (512, 128), (128, 1), 0), reinterpret_tensor(buf1501, (512, ), (1, ), 0), reinterpret_tensor(buf1496, (128, 512), (512, 1), 0), reinterpret_tensor(buf1497, (128, ), (1, ), 0), reinterpret_tensor(buf1490, (512, 128), (128, 1), 0), reinterpret_tensor(buf1491, (512, ), (1, ), 0), reinterpret_tensor(buf1486, (128, 512), (512, 1), 0), reinterpret_tensor(buf1487, (128, ), (1, ), 0), reinterpret_tensor(buf1480, (512, 128), (128, 1), 0), reinterpret_tensor(buf1481, (512, ), (1, ), 0), reinterpret_tensor(buf1474, (128, 512), (512, 1), 0), reinterpret_tensor(buf1475, (128, ), (1, ), 0), reinterpret_tensor(buf1468, (128, 512), (512, 1), 0), reinterpret_tensor(buf1469, (128, ), (1, ), 0), reinterpret_tensor(buf1462, (128, 128), (128, 1), 0), reinterpret_tensor(buf1463, (128, ), (1, ), 0), reinterpret_tensor(buf1458, (128, 128), (128, 1), 0), reinterpret_tensor(buf1459, (128, ), (1, ), 0), reinterpret_tensor(buf1454, (128, 512), (512, 1), 0), reinterpret_tensor(buf1455, (128, ), (1, ), 0), reinterpret_tensor(buf1444, (128, 128), (128, 1), 0), reinterpret_tensor(buf1445, (128, ), (1, ), 0), reinterpret_tensor(buf1438, (512, 128), (128, 1), 0), reinterpret_tensor(buf1439, (512, ), (1, ), 0), reinterpret_tensor(buf1434, (128, 512), (512, 1), 0), reinterpret_tensor(buf1435, (128, ), (1, ), 0), reinterpret_tensor(buf1428, (512, 128), (128, 1), 0), reinterpret_tensor(buf1429, (512, ), (1, ), 0), reinterpret_tensor(buf1424, (128, 512), (512, 1), 0), reinterpret_tensor(buf1425, (128, ), (1, ), 0), reinterpret_tensor(buf1418, (512, 128), (128, 1), 0), reinterpret_tensor(buf1419, (512, ), (1, ), 0), reinterpret_tensor(buf1414, (128, 512), (512, 1), 0), reinterpret_tensor(buf1415, (128, ), (1, ), 0), reinterpret_tensor(buf1408, (512, 128), (128, 1), 0), reinterpret_tensor(buf1409, (512, ), (1, ), 0), reinterpret_tensor(buf1404, (128, 512), (512, 1), 0), reinterpret_tensor(buf1405, (128, ), (1, ), 0), reinterpret_tensor(buf1398, (512, 128), (128, 1), 0), reinterpret_tensor(buf1399, (512, ), (1, ), 0), reinterpret_tensor(buf1392, (128, 512), (512, 1), 0), reinterpret_tensor(buf1393, (128, ), (1, ), 0), reinterpret_tensor(buf1386, (128, 512), (512, 1), 0), reinterpret_tensor(buf1387, (128, ), (1, ), 0), reinterpret_tensor(buf1380, (128, 128), (128, 1), 0), reinterpret_tensor(buf1381, (128, ), (1, ), 0), reinterpret_tensor(buf1376, (128, 128), (128, 1), 0), reinterpret_tensor(buf1377, (128, ), (1, ), 0), reinterpret_tensor(buf1372, (128, 512), (512, 1), 0), reinterpret_tensor(buf1373, (128, ), (1, ), 0), reinterpret_tensor(buf1362, (128, 128), (128, 1), 0), reinterpret_tensor(buf1363, (128, ), (1, ), 0), reinterpret_tensor(buf1356, (512, 128), (128, 1), 0), reinterpret_tensor(buf1357, (512, ), (1, ), 0), reinterpret_tensor(buf1352, (128, 512), (512, 1), 0), reinterpret_tensor(buf1353, (128, ), (1, ), 0), reinterpret_tensor(buf1346, (512, 128), (128, 1), 0), reinterpret_tensor(buf1347, (512, ), (1, ), 0), reinterpret_tensor(buf1342, (128, 512), (512, 1), 0), reinterpret_tensor(buf1343, (128, ), (1, ), 0), reinterpret_tensor(buf1336, (512, 128), (128, 1), 0), reinterpret_tensor(buf1337, (512, ), (1, ), 0), reinterpret_tensor(buf1332, (128, 512), (512, 1), 0), reinterpret_tensor(buf1333, (128, ), (1, ), 0), reinterpret_tensor(buf1326, (512, 128), (128, 1), 0), reinterpret_tensor(buf1327, (512, ), (1, ), 0), reinterpret_tensor(buf1322, (128, 512), (512, 1), 0), reinterpret_tensor(buf1323, (128, ), (1, ), 0), reinterpret_tensor(buf1316, (512, 128), (128, 1), 0), reinterpret_tensor(buf1317, (512, ), (1, ), 0), reinterpret_tensor(buf1310, (128, 512), (512, 1), 0), reinterpret_tensor(buf1311, (128, ), (1, ), 0), reinterpret_tensor(buf1304, (128, 512), (512, 1), 0), reinterpret_tensor(buf1305, (128, ), (1, ), 0), reinterpret_tensor(buf1298, (128, 128), (128, 1), 0), reinterpret_tensor(buf1299, (128, ), (1, ), 0), reinterpret_tensor(buf1294, (128, 128), (128, 1), 0), reinterpret_tensor(buf1295, (128, ), (1, ), 0), reinterpret_tensor(buf1290, (128, 512), (512, 1), 0), reinterpret_tensor(buf1291, (128, ), (1, ), 0), reinterpret_tensor(buf1280, (128, 128), (128, 1), 0), reinterpret_tensor(buf1281, (128, ), (1, ), 0), reinterpret_tensor(buf1274, (512, 128), (128, 1), 0), reinterpret_tensor(buf1275, (512, ), (1, ), 0), reinterpret_tensor(buf1270, (128, 512), (512, 1), 0), reinterpret_tensor(buf1271, (128, ), (1, ), 0), reinterpret_tensor(buf1264, (512, 128), (128, 1), 0), reinterpret_tensor(buf1265, (512, ), (1, ), 0), reinterpret_tensor(buf1260, (128, 512), (512, 1), 0), reinterpret_tensor(buf1261, (128, ), (1, ), 0), reinterpret_tensor(buf1254, (512, 128), (128, 1), 0), reinterpret_tensor(buf1255, (512, ), (1, ), 0), reinterpret_tensor(buf1250, (128, 512), (512, 1), 0), reinterpret_tensor(buf1251, (128, ), (1, ), 0), reinterpret_tensor(buf1244, (512, 128), (128, 1), 0), reinterpret_tensor(buf1245, (512, ), (1, ), 0), reinterpret_tensor(buf1240, (128, 512), (512, 1), 0), reinterpret_tensor(buf1241, (128, ), (1, ), 0), reinterpret_tensor(buf1234, (512, 128), (128, 1), 0), reinterpret_tensor(buf1235, (512, ), (1, ), 0), reinterpret_tensor(buf1228, (128, 512), (512, 1), 0), reinterpret_tensor(buf1229, (128, ), (1, ), 0), reinterpret_tensor(buf1222, (128, 512), (512, 1), 0), reinterpret_tensor(buf1223, (128, ), (1, ), 0), reinterpret_tensor(buf1216, (128, 128), (128, 1), 0), reinterpret_tensor(buf1217, (128, ), (1, ), 0), reinterpret_tensor(buf1212, (128, 128), (128, 1), 0), reinterpret_tensor(buf1213, (128, ), (1, ), 0), reinterpret_tensor(buf1208, (128, 512), (512, 1), 0), reinterpret_tensor(buf1209, (128, ), (1, ), 0), reinterpret_tensor(buf1198, (128, 128), (128, 1), 0), reinterpret_tensor(buf1199, (128, ), (1, ), 0), reinterpret_tensor(buf1192, (512, 128), (128, 1), 0), reinterpret_tensor(buf1193, (512, ), (1, ), 0), reinterpret_tensor(buf1188, (128, 512), (512, 1), 0), reinterpret_tensor(buf1189, (128, ), (1, ), 0), reinterpret_tensor(buf1182, (512, 128), (128, 1), 0), reinterpret_tensor(buf1183, (512, ), (1, ), 0), reinterpret_tensor(buf1178, (128, 512), (512, 1), 0), reinterpret_tensor(buf1179, (128, ), (1, ), 0), reinterpret_tensor(buf1172, (512, 128), (128, 1), 0), reinterpret_tensor(buf1173, (512, ), (1, ), 0), reinterpret_tensor(buf1168, (128, 512), (512, 1), 0), reinterpret_tensor(buf1169, (128, ), (1, ), 0), reinterpret_tensor(buf1162, (512, 128), (128, 1), 0), reinterpret_tensor(buf1163, (512, ), (1, ), 0), reinterpret_tensor(buf1158, (128, 512), (512, 1), 0), reinterpret_tensor(buf1159, (128, ), (1, ), 0), reinterpret_tensor(buf1152, (512, 128), (128, 1), 0), reinterpret_tensor(buf1153, (512, ), (1, ), 0), reinterpret_tensor(buf1146, (128, 512), (512, 1), 0), reinterpret_tensor(buf1147, (128, ), (1, ), 0), reinterpret_tensor(buf1140, (128, 512), (512, 1), 0), reinterpret_tensor(buf1141, (128, ), (1, ), 0), reinterpret_tensor(buf1134, (128, 128), (128, 1), 0), reinterpret_tensor(buf1135, (128, ), (1, ), 0), reinterpret_tensor(buf1130, (128, 128), (128, 1), 0), reinterpret_tensor(buf1131, (128, ), (1, ), 0), reinterpret_tensor(buf1126, (128, 512), (512, 1), 0), reinterpret_tensor(buf1127, (128, ), (1, ), 0), reinterpret_tensor(buf1116, (128, 128), (128, 1), 0), reinterpret_tensor(buf1117, (128, ), (1, ), 0), reinterpret_tensor(buf1110, (512, 128), (128, 1), 0), reinterpret_tensor(buf1111, (512, ), (1, ), 0), reinterpret_tensor(buf1106, (128, 512), (512, 1), 0), reinterpret_tensor(buf1107, (128, ), (1, ), 0), reinterpret_tensor(buf1100, (512, 128), (128, 1), 0), reinterpret_tensor(buf1101, (512, ), (1, ), 0), reinterpret_tensor(buf1096, (128, 512), (512, 1), 0), reinterpret_tensor(buf1097, (128, ), (1, ), 0), reinterpret_tensor(buf1090, (512, 128), (128, 1), 0), reinterpret_tensor(buf1091, (512, ), (1, ), 0), reinterpret_tensor(buf1086, (128, 512), (512, 1), 0), reinterpret_tensor(buf1087, (128, ), (1, ), 0), reinterpret_tensor(buf1080, (512, 128), (128, 1), 0), reinterpret_tensor(buf1081, (512, ), (1, ), 0), reinterpret_tensor(buf1076, (128, 512), (512, 1), 0), reinterpret_tensor(buf1077, (128, ), (1, ), 0), reinterpret_tensor(buf1070, (512, 128), (128, 1), 0), reinterpret_tensor(buf1071, (512, ), (1, ), 0), reinterpret_tensor(buf1064, (128, 512), (512, 1), 0), reinterpret_tensor(buf1065, (128, ), (1, ), 0), reinterpret_tensor(buf1058, (128, 512), (512, 1), 0), reinterpret_tensor(buf1059, (128, ), (1, ), 0), reinterpret_tensor(buf1052, (128, 128), (128, 1), 0), reinterpret_tensor(buf1053, (128, ), (1, ), 0), reinterpret_tensor(buf1048, (128, 128), (128, 1), 0), reinterpret_tensor(buf1049, (128, ), (1, ), 0), reinterpret_tensor(buf1044, (128, 512), (512, 1), 0), reinterpret_tensor(buf1045, (128, ), (1, ), 0), reinterpret_tensor(buf1034, (128, 128), (128, 1), 0), reinterpret_tensor(buf1035, (128, ), (1, ), 0), reinterpret_tensor(buf1028, (512, 128), (128, 1), 0), reinterpret_tensor(buf1029, (512, ), (1, ), 0), reinterpret_tensor(buf1024, (128, 512), (512, 1), 0), reinterpret_tensor(buf1025, (128, ), (1, ), 0), reinterpret_tensor(buf1018, (512, 128), (128, 1), 0), reinterpret_tensor(buf1019, (512, ), (1, ), 0), reinterpret_tensor(buf1014, (128, 512), (512, 1), 0), reinterpret_tensor(buf1015, (128, ), (1, ), 0), reinterpret_tensor(buf1008, (512, 128), (128, 1), 0), reinterpret_tensor(buf1009, (512, ), (1, ), 0), reinterpret_tensor(buf1004, (128, 512), (512, 1), 0), reinterpret_tensor(buf1005, (128, ), (1, ), 0), reinterpret_tensor(buf998, (512, 128), (128, 1), 0), reinterpret_tensor(buf999, (512, ), (1, ), 0), reinterpret_tensor(buf994, (128, 512), (512, 1), 0), reinterpret_tensor(buf995, (128, ), (1, ), 0), reinterpret_tensor(buf988, (512, 128), (128, 1), 0), reinterpret_tensor(buf989, (512, ), (1, ), 0), reinterpret_tensor(buf982, (128, 512), (512, 1), 0), reinterpret_tensor(buf983, (128, ), (1, ), 0), reinterpret_tensor(buf976, (128, 512), (512, 1), 0), reinterpret_tensor(buf977, (128, ), (1, ), 0), reinterpret_tensor(buf970, (128, 128), (128, 1), 0), reinterpret_tensor(buf971, (128, ), (1, ), 0), reinterpret_tensor(buf966, (128, 128), (128, 1), 0), reinterpret_tensor(buf967, (128, ), (1, ), 0), reinterpret_tensor(buf962, (128, 512), (512, 1), 0), reinterpret_tensor(buf963, (128, ), (1, ), 0), reinterpret_tensor(buf952, (128, 128), (128, 1), 0), reinterpret_tensor(buf953, (128, ), (1, ), 0), reinterpret_tensor(buf946, (512, 128), (128, 1), 0), reinterpret_tensor(buf947, (512, ), (1, ), 0), reinterpret_tensor(buf942, (128, 512), (512, 1), 0), reinterpret_tensor(buf943, (128, ), (1, ), 0), reinterpret_tensor(buf936, (512, 128), (128, 1), 0), reinterpret_tensor(buf937, (512, ), (1, ), 0), reinterpret_tensor(buf932, (128, 512), (512, 1), 0), reinterpret_tensor(buf933, (128, ), (1, ), 0), reinterpret_tensor(buf926, (512, 128), (128, 1), 0), reinterpret_tensor(buf927, (512, ), (1, ), 0), reinterpret_tensor(buf922, (128, 512), (512, 1), 0), reinterpret_tensor(buf923, (128, ), (1, ), 0), reinterpret_tensor(buf916, (512, 128), (128, 1), 0), reinterpret_tensor(buf917, (512, ), (1, ), 0), reinterpret_tensor(buf912, (128, 512), (512, 1), 0), reinterpret_tensor(buf913, (128, ), (1, ), 0), reinterpret_tensor(buf906, (512, 128), (128, 1), 0), reinterpret_tensor(buf907, (512, ), (1, ), 0), reinterpret_tensor(buf900, (128, 512), (512, 1), 0), reinterpret_tensor(buf901, (128, ), (1, ), 0), reinterpret_tensor(buf894, (128, 512), (512, 1), 0), reinterpret_tensor(buf895, (128, ), (1, ), 0), reinterpret_tensor(buf888, (128, 128), (128, 1), 0), reinterpret_tensor(buf889, (128, ), (1, ), 0), reinterpret_tensor(buf884, (128, 128), (128, 1), 0), reinterpret_tensor(buf885, (128, ), (1, ), 0), reinterpret_tensor(buf880, (128, 512), (512, 1), 0), reinterpret_tensor(buf881, (128, ), (1, ), 0), reinterpret_tensor(buf870, (128, 128), (128, 1), 0), reinterpret_tensor(buf871, (128, ), (1, ), 0), reinterpret_tensor(buf864, (512, 128), (128, 1), 0), reinterpret_tensor(buf865, (512, ), (1, ), 0), reinterpret_tensor(buf860, (128, 512), (512, 1), 0), reinterpret_tensor(buf861, (128, ), (1, ), 0), reinterpret_tensor(buf854, (512, 128), (128, 1), 0), reinterpret_tensor(buf855, (512, ), (1, ), 0), reinterpret_tensor(buf850, (128, 512), (512, 1), 0), reinterpret_tensor(buf851, (128, ), (1, ), 0), reinterpret_tensor(buf844, (512, 128), (128, 1), 0), reinterpret_tensor(buf845, (512, ), (1, ), 0), reinterpret_tensor(buf840, (128, 512), (512, 1), 0), reinterpret_tensor(buf841, (128, ), (1, ), 0), reinterpret_tensor(buf834, (512, 128), (128, 1), 0), reinterpret_tensor(buf835, (512, ), (1, ), 0), reinterpret_tensor(buf830, (128, 512), (512, 1), 0), reinterpret_tensor(buf831, (128, ), (1, ), 0), reinterpret_tensor(buf824, (512, 128), (128, 1), 0), reinterpret_tensor(buf825, (512, ), (1, ), 0), reinterpret_tensor(buf818, (128, 512), (512, 1), 0), reinterpret_tensor(buf819, (128, ), (1, ), 0), reinterpret_tensor(buf812, (128, 512), (512, 1), 0), reinterpret_tensor(buf813, (128, ), (1, ), 0), reinterpret_tensor(buf806, (128, 128), (128, 1), 0), reinterpret_tensor(buf807, (128, ), (1, ), 0), reinterpret_tensor(buf802, (128, 128), (128, 1), 0), reinterpret_tensor(buf803, (128, ), (1, ), 0), reinterpret_tensor(buf798, (128, 512), (512, 1), 0), reinterpret_tensor(buf799, (128, ), (1, ), 0), reinterpret_tensor(buf788, (128, 128), (128, 1), 0), reinterpret_tensor(buf789, (128, ), (1, ), 0), reinterpret_tensor(buf782, (512, 128), (128, 1), 0), reinterpret_tensor(buf783, (512, ), (1, ), 0), reinterpret_tensor(buf778, (128, 512), (512, 1), 0), reinterpret_tensor(buf779, (128, ), (1, ), 0), reinterpret_tensor(buf772, (512, 128), (128, 1), 0), reinterpret_tensor(buf773, (512, ), (1, ), 0), reinterpret_tensor(buf768, (128, 512), (512, 1), 0), reinterpret_tensor(buf769, (128, ), (1, ), 0), reinterpret_tensor(buf762, (512, 128), (128, 1), 0), reinterpret_tensor(buf763, (512, ), (1, ), 0), reinterpret_tensor(buf758, (128, 512), (512, 1), 0), reinterpret_tensor(buf759, (128, ), (1, ), 0), reinterpret_tensor(buf752, (512, 128), (128, 1), 0), reinterpret_tensor(buf753, (512, ), (1, ), 0), reinterpret_tensor(buf748, (128, 512), (512, 1), 0), reinterpret_tensor(buf749, (128, ), (1, ), 0), reinterpret_tensor(buf742, (512, 128), (128, 1), 0), reinterpret_tensor(buf743, (512, ), (1, ), 0), reinterpret_tensor(buf736, (128, 512), (512, 1), 0), reinterpret_tensor(buf737, (128, ), (1, ), 0), reinterpret_tensor(buf730, (128, 512), (512, 1), 0), reinterpret_tensor(buf731, (128, ), (1, ), 0), reinterpret_tensor(buf724, (128, 128), (128, 1), 0), reinterpret_tensor(buf725, (128, ), (1, ), 0), reinterpret_tensor(buf720, (128, 128), (128, 1), 0), reinterpret_tensor(buf721, (128, ), (1, ), 0), reinterpret_tensor(buf716, (128, 512), (512, 1), 0), reinterpret_tensor(buf717, (128, ), (1, ), 0), reinterpret_tensor(buf706, (128, 128), (128, 1), 0), reinterpret_tensor(buf707, (128, ), (1, ), 0), reinterpret_tensor(buf700, (512, 128), (128, 1), 0), reinterpret_tensor(buf701, (512, ), (1, ), 0), reinterpret_tensor(buf696, (128, 512), (512, 1), 0), reinterpret_tensor(buf697, (128, ), (1, ), 0), reinterpret_tensor(buf690, (512, 128), (128, 1), 0), reinterpret_tensor(buf691, (512, ), (1, ), 0), reinterpret_tensor(buf686, (128, 512), (512, 1), 0), reinterpret_tensor(buf687, (128, ), (1, ), 0), reinterpret_tensor(buf680, (512, 128), (128, 1), 0), reinterpret_tensor(buf681, (512, ), (1, ), 0), reinterpret_tensor(buf676, (128, 512), (512, 1), 0), reinterpret_tensor(buf677, (128, ), (1, ), 0), reinterpret_tensor(buf670, (512, 128), (128, 1), 0), reinterpret_tensor(buf671, (512, ), (1, ), 0), reinterpret_tensor(buf666, (128, 512), (512, 1), 0), reinterpret_tensor(buf667, (128, ), (1, ), 0), reinterpret_tensor(buf660, (512, 128), (128, 1), 0), reinterpret_tensor(buf661, (512, ), (1, ), 0), reinterpret_tensor(buf654, (128, 512), (512, 1), 0), reinterpret_tensor(buf655, (128, ), (1, ), 0), reinterpret_tensor(buf648, (128, 512), (512, 1), 0), reinterpret_tensor(buf649, (128, ), (1, ), 0), reinterpret_tensor(buf642, (128, 128), (128, 1), 0), reinterpret_tensor(buf643, (128, ), (1, ), 0), reinterpret_tensor(buf638, (128, 128), (128, 1), 0), reinterpret_tensor(buf639, (128, ), (1, ), 0), reinterpret_tensor(buf634, (128, 512), (512, 1), 0), reinterpret_tensor(buf635, (128, ), (1, ), 0), reinterpret_tensor(buf624, (128, 128), (128, 1), 0), reinterpret_tensor(buf625, (128, ), (1, ), 0), reinterpret_tensor(buf618, (512, 128), (128, 1), 0), reinterpret_tensor(buf619, (512, ), (1, ), 0), reinterpret_tensor(buf614, (128, 512), (512, 1), 0), reinterpret_tensor(buf615, (128, ), (1, ), 0), reinterpret_tensor(buf608, (512, 128), (128, 1), 0), reinterpret_tensor(buf609, (512, ), (1, ), 0), reinterpret_tensor(buf604, (128, 512), (512, 1), 0), reinterpret_tensor(buf605, (128, ), (1, ), 0), reinterpret_tensor(buf598, (512, 128), (128, 1), 0), reinterpret_tensor(buf599, (512, ), (1, ), 0), reinterpret_tensor(buf594, (128, 512), (512, 1), 0), reinterpret_tensor(buf595, (128, ), (1, ), 0), reinterpret_tensor(buf588, (512, 128), (128, 1), 0), reinterpret_tensor(buf589, (512, ), (1, ), 0), reinterpret_tensor(buf584, (128, 512), (512, 1), 0), reinterpret_tensor(buf585, (128, ), (1, ), 0), reinterpret_tensor(buf578, (512, 128), (128, 1), 0), reinterpret_tensor(buf579, (512, ), (1, ), 0), reinterpret_tensor(buf572, (128, 512), (512, 1), 0), reinterpret_tensor(buf573, (128, ), (1, ), 0), reinterpret_tensor(buf566, (128, 512), (512, 1), 0), reinterpret_tensor(buf567, (128, ), (1, ), 0), reinterpret_tensor(buf560, (128, 128), (128, 1), 0), reinterpret_tensor(buf561, (128, ), (1, ), 0), reinterpret_tensor(buf556, (128, 128), (128, 1), 0), reinterpret_tensor(buf557, (128, ), (1, ), 0), reinterpret_tensor(buf552, (128, 512), (512, 1), 0), reinterpret_tensor(buf553, (128, ), (1, ), 0), reinterpret_tensor(buf542, (128, 128), (128, 1), 0), reinterpret_tensor(buf543, (128, ), (1, ), 0), reinterpret_tensor(buf536, (512, 128), (128, 1), 0), reinterpret_tensor(buf537, (512, ), (1, ), 0), reinterpret_tensor(buf532, (128, 512), (512, 1), 0), reinterpret_tensor(buf533, (128, ), (1, ), 0), reinterpret_tensor(buf526, (512, 128), (128, 1), 0), reinterpret_tensor(buf527, (512, ), (1, ), 0), reinterpret_tensor(buf522, (128, 512), (512, 1), 0), reinterpret_tensor(buf523, (128, ), (1, ), 0), reinterpret_tensor(buf516, (512, 128), (128, 1), 0), reinterpret_tensor(buf517, (512, ), (1, ), 0), reinterpret_tensor(buf512, (128, 512), (512, 1), 0), reinterpret_tensor(buf513, (128, ), (1, ), 0), reinterpret_tensor(buf506, (512, 128), (128, 1), 0), reinterpret_tensor(buf507, (512, ), (1, ), 0), reinterpret_tensor(buf502, (128, 512), (512, 1), 0), reinterpret_tensor(buf503, (128, ), (1, ), 0), reinterpret_tensor(buf496, (512, 128), (128, 1), 0), reinterpret_tensor(buf497, (512, ), (1, ), 0), reinterpret_tensor(buf490, (128, 512), (512, 1), 0), reinterpret_tensor(buf491, (128, ), (1, ), 0), reinterpret_tensor(buf484, (128, 512), (512, 1), 0), reinterpret_tensor(buf485, (128, ), (1, ), 0), reinterpret_tensor(buf478, (128, 128), (128, 1), 0), reinterpret_tensor(buf479, (128, ), (1, ), 0), reinterpret_tensor(buf474, (128, 128), (128, 1), 0), reinterpret_tensor(buf475, (128, ), (1, ), 0), reinterpret_tensor(buf470, (128, 512), (512, 1), 0), reinterpret_tensor(buf471, (128, ), (1, ), 0), reinterpret_tensor(buf460, (128, 128), (128, 1), 0), reinterpret_tensor(buf461, (128, ), (1, ), 0), reinterpret_tensor(buf454, (512, 128), (128, 1), 0), reinterpret_tensor(buf455, (512, ), (1, ), 0), reinterpret_tensor(buf450, (128, 512), (512, 1), 0), reinterpret_tensor(buf451, (128, ), (1, ), 0), reinterpret_tensor(buf444, (512, 128), (128, 1), 0), reinterpret_tensor(buf445, (512, ), (1, ), 0), reinterpret_tensor(buf440, (128, 512), (512, 1), 0), reinterpret_tensor(buf441, (128, ), (1, ), 0), reinterpret_tensor(buf434, (512, 128), (128, 1), 0), reinterpret_tensor(buf435, (512, ), (1, ), 0), reinterpret_tensor(buf430, (128, 512), (512, 1), 0), reinterpret_tensor(buf431, (128, ), (1, ), 0), reinterpret_tensor(buf424, (512, 128), (128, 1), 0), reinterpret_tensor(buf425, (512, ), (1, ), 0), reinterpret_tensor(buf420, (128, 512), (512, 1), 0), reinterpret_tensor(buf421, (128, ), (1, ), 0), reinterpret_tensor(buf414, (512, 128), (128, 1), 0), reinterpret_tensor(buf415, (512, ), (1, ), 0), reinterpret_tensor(buf408, (128, 512), (512, 1), 0), reinterpret_tensor(buf409, (128, ), (1, ), 0), reinterpret_tensor(buf402, (128, 512), (512, 1), 0), reinterpret_tensor(buf403, (128, ), (1, ), 0), reinterpret_tensor(buf396, (128, 128), (128, 1), 0), reinterpret_tensor(buf397, (128, ), (1, ), 0), reinterpret_tensor(buf392, (128, 128), (128, 1), 0), reinterpret_tensor(buf393, (128, ), (1, ), 0), reinterpret_tensor(buf388, (128, 512), (512, 1), 0), reinterpret_tensor(buf389, (128, ), (1, ), 0), reinterpret_tensor(buf378, (128, 128), (128, 1), 0), reinterpret_tensor(buf379, (128, ), (1, ), 0), reinterpret_tensor(buf372, (512, 128), (128, 1), 0), reinterpret_tensor(buf373, (512, ), (1, ), 0), reinterpret_tensor(buf368, (128, 512), (512, 1), 0), reinterpret_tensor(buf369, (128, ), (1, ), 0), reinterpret_tensor(buf362, (512, 128), (128, 1), 0), reinterpret_tensor(buf363, (512, ), (1, ), 0), reinterpret_tensor(buf358, (128, 512), (512, 1), 0), reinterpret_tensor(buf359, (128, ), (1, ), 0), reinterpret_tensor(buf352, (512, 128), (128, 1), 0), reinterpret_tensor(buf353, (512, ), (1, ), 0), reinterpret_tensor(buf348, (128, 512), (512, 1), 0), reinterpret_tensor(buf349, (128, ), (1, ), 0), reinterpret_tensor(buf342, (512, 128), (128, 1), 0), reinterpret_tensor(buf343, (512, ), (1, ), 0), reinterpret_tensor(buf338, (128, 512), (512, 1), 0), reinterpret_tensor(buf339, (128, ), (1, ), 0), reinterpret_tensor(buf332, (512, 128), (128, 1), 0), reinterpret_tensor(buf333, (512, ), (1, ), 0), reinterpret_tensor(buf326, (128, 512), (512, 1), 0), reinterpret_tensor(buf327, (128, ), (1, ), 0), reinterpret_tensor(buf320, (128, 512), (512, 1), 0), reinterpret_tensor(buf321, (128, ), (1, ), 0), reinterpret_tensor(buf314, (128, 128), (128, 1), 0), reinterpret_tensor(buf315, (128, ), (1, ), 0), reinterpret_tensor(buf310, (128, 128), (128, 1), 0), reinterpret_tensor(buf311, (128, ), (1, ), 0), reinterpret_tensor(buf306, (128, 512), (512, 1), 0), reinterpret_tensor(buf307, (128, ), (1, ), 0), reinterpret_tensor(buf296, (128, 128), (128, 1), 0), reinterpret_tensor(buf297, (128, ), (1, ), 0), reinterpret_tensor(buf290, (512, 128), (128, 1), 0), reinterpret_tensor(buf291, (512, ), (1, ), 0), reinterpret_tensor(buf286, (128, 512), (512, 1), 0), reinterpret_tensor(buf287, (128, ), (1, ), 0), reinterpret_tensor(buf280, (512, 128), (128, 1), 0), reinterpret_tensor(buf281, (512, ), (1, ), 0), reinterpret_tensor(buf276, (128, 512), (512, 1), 0), reinterpret_tensor(buf277, (128, ), (1, ), 0), reinterpret_tensor(buf270, (512, 128), (128, 1), 0), reinterpret_tensor(buf271, (512, ), (1, ), 0), reinterpret_tensor(buf266, (128, 512), (512, 1), 0), reinterpret_tensor(buf267, (128, ), (1, ), 0), reinterpret_tensor(buf260, (512, 128), (128, 1), 0), reinterpret_tensor(buf261, (512, ), (1, ), 0), reinterpret_tensor(buf256, (128, 512), (512, 1), 0), reinterpret_tensor(buf257, (128, ), (1, ), 0), reinterpret_tensor(buf250, (512, 128), (128, 1), 0), reinterpret_tensor(buf251, (512, ), (1, ), 0), reinterpret_tensor(buf244, (128, 512), (512, 1), 0), reinterpret_tensor(buf245, (128, ), (1, ), 0), reinterpret_tensor(buf238, (128, 512), (512, 1), 0), reinterpret_tensor(buf239, (128, ), (1, ), 0), reinterpret_tensor(buf232, (128, 128), (128, 1), 0), reinterpret_tensor(buf233, (128, ), (1, ), 0), reinterpret_tensor(buf228, (128, 128), (128, 1), 0), reinterpret_tensor(buf229, (128, ), (1, ), 0), reinterpret_tensor(buf224, (128, 512), (512, 1), 0), reinterpret_tensor(buf225, (128, ), (1, ), 0), reinterpret_tensor(buf214, (128, 128), (128, 1), 0), reinterpret_tensor(buf215, (128, ), (1, ), 0), reinterpret_tensor(buf208, (512, 128), (128, 1), 0), reinterpret_tensor(buf209, (512, ), (1, ), 0), reinterpret_tensor(buf204, (128, 512), (512, 1), 0), reinterpret_tensor(buf205, (128, ), (1, ), 0), reinterpret_tensor(buf198, (512, 128), (128, 1), 0), reinterpret_tensor(buf199, (512, ), (1, ), 0), reinterpret_tensor(buf194, (128, 512), (512, 1), 0), reinterpret_tensor(buf195, (128, ), (1, ), 0), reinterpret_tensor(buf188, (512, 128), (128, 1), 0), reinterpret_tensor(buf189, (512, ), (1, ), 0), reinterpret_tensor(buf184, (128, 512), (512, 1), 0), reinterpret_tensor(buf185, (128, ), (1, ), 0), reinterpret_tensor(buf178, (512, 128), (128, 1), 0), reinterpret_tensor(buf179, (512, ), (1, ), 0), reinterpret_tensor(buf174, (128, 512), (512, 1), 0), reinterpret_tensor(buf175, (128, ), (1, ), 0), reinterpret_tensor(buf168, (512, 128), (128, 1), 0), reinterpret_tensor(buf169, (512, ), (1, ), 0), reinterpret_tensor(buf162, (128, 512), (512, 1), 0), reinterpret_tensor(buf163, (128, ), (1, ), 0), reinterpret_tensor(buf156, (128, 512), (512, 1), 0), reinterpret_tensor(buf157, (128, ), (1, ), 0), reinterpret_tensor(buf150, (128, 128), (128, 1), 0), reinterpret_tensor(buf151, (128, ), (1, ), 0), reinterpret_tensor(buf146, (128, 128), (128, 1), 0), reinterpret_tensor(buf147, (128, ), (1, ), 0), reinterpret_tensor(buf142, (128, 512), (512, 1), 0), reinterpret_tensor(buf143, (128, ), (1, ), 0), reinterpret_tensor(buf132, (128, 128), (128, 1), 0), reinterpret_tensor(buf133, (128, ), (1, ), 0), reinterpret_tensor(buf126, (512, 128), (128, 1), 0), reinterpret_tensor(buf127, (512, ), (1, ), 0), reinterpret_tensor(buf122, (128, 512), (512, 1), 0), reinterpret_tensor(buf123, (128, ), (1, ), 0), reinterpret_tensor(buf116, (512, 128), (128, 1), 0), reinterpret_tensor(buf117, (512, ), (1, ), 0), reinterpret_tensor(buf112, (128, 512), (512, 1), 0), reinterpret_tensor(buf113, (128, ), (1, ), 0), reinterpret_tensor(buf106, (512, 128), (128, 1), 0), reinterpret_tensor(buf107, (512, ), (1, ), 0), reinterpret_tensor(buf102, (128, 512), (512, 1), 0), reinterpret_tensor(buf103, (128, ), (1, ), 0), reinterpret_tensor(buf96, (512, 128), (128, 1), 0), reinterpret_tensor(buf97, (512, ), (1, ), 0), reinterpret_tensor(buf92, (128, 512), (512, 1), 0), reinterpret_tensor(buf93, (128, ), (1, ), 0), reinterpret_tensor(buf86, (512, 128), (128, 1), 0), reinterpret_tensor(buf87, (512, ), (1, ), 0), reinterpret_tensor(buf80, (512, 512), (512, 1), 0), reinterpret_tensor(buf81, (512, ), (1, ), 0), buf76, buf77, None, None, None, )


def benchmark_compiled_module(times=10, repeat=10):
    from torch._dynamo.testing import rand_strided
    from torch._inductor.utils import print_performance
    primals_1 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_3 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_4 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_5 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_7 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_8 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_9 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_10 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_11 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_12 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_13 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_14 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_15 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_17 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_18 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_19 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_20 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_21 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_23 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_24 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_25 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_26 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_27 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_28 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_29 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_30 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_31 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_33 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_34 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_35 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_36 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_37 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_39 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_40 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_41 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_42 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_43 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_44 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_45 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_46 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_47 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_49 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_50 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_51 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_52 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_53 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_55 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_56 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_57 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_58 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_59 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_60 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_61 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_62 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_63 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_65 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_66 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_67 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_68 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_69 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_71 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_72 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_73 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_74 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_75 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_76 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_77 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_78 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_79 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_81 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_82 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_83 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_84 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_85 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_87 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_88 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_89 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_90 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_91 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_92 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_93 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_94 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_95 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_97 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_98 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_99 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_100 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_101 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_103 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_104 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_105 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_106 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_107 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_108 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_109 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_110 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_111 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_113 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_114 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_115 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_116 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_117 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_119 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_120 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_121 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_122 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_123 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_124 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_125 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_126 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_127 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_129 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_130 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_131 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_132 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_133 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_135 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_136 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_137 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_138 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_139 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_140 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_141 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_142 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_143 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_145 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_146 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_147 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_148 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_149 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_151 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_152 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_153 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_154 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_155 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_156 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_157 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_158 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_159 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_161 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_162 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_163 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_164 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_165 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_167 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_168 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_169 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_170 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_171 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_172 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_173 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_174 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_175 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_177 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_178 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_179 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_180 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_181 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_183 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_184 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_185 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_186 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_187 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_188 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_189 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_190 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_191 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_193 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_194 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_195 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_196 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_197 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_199 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_200 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_201 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_202 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_203 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_204 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_205 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_206 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_207 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_209 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_210 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_211 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_212 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_213 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_215 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_216 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_217 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_218 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_219 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_220 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_221 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_222 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_223 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_225 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_226 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_227 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_228 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_229 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_231 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_232 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_233 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_234 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_235 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_236 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_237 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_238 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_239 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_241 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_242 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_243 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_244 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_245 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_247 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_248 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_249 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_250 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_251 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_252 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_253 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_254 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_255 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_257 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_258 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_259 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_260 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_261 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_263 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_264 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_265 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_266 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_267 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_268 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_269 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_270 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_271 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_273 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_274 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_275 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_276 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_277 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_279 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_280 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_281 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_282 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_283 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_284 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_285 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_286 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_287 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_289 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_290 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_291 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_292 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_293 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_295 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_296 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_297 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_298 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_299 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_300 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_301 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_302 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_303 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_305 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_306 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_307 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_308 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_309 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_311 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_312 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_313 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_314 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_315 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_316 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_317 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_318 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_319 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_321 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_322 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_323 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_324 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_325 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_327 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_328 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_329 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_330 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_331 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_332 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_333 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_334 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_335 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_337 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_338 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_339 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_340 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_341 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_343 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_344 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_345 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_346 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_347 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_348 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_349 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_350 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_351 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_353 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_354 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_355 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_356 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_357 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_359 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_360 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_361 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_362 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_363 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_364 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_365 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_366 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_367 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_369 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_370 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_371 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_372 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_373 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_375 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_376 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_377 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_378 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_379 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_380 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_381 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_382 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_383 = rand_strided((128, ), (1, ), device='cpu', dtype=torch.float32)
    primals_385 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_1117 = rand_strided((512, ), (1, ), device='cpu', dtype=torch.float32)
    primals_1120 = rand_strided((1, 128), (128, 1), device='cpu', dtype=torch.int64)
    primals_1121 = rand_strided((1, 128), (128, 1), device='cpu', dtype=torch.int64)
    full_default = rand_strided((1, 128), (128, 1), device='cpu', dtype=torch.int64)
    slice_4 = rand_strided((1, 128), (512, 1), device='cpu', dtype=torch.int64)
    view = rand_strided((128, 384), (384, 1), device='cpu', dtype=torch.float32)
    add_1 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.float32)
    view_2 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_1 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_2 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_6 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_97 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_139 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_140 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_47 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_141 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_142 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_22 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_6 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_24 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_26 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_8 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_28 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_30 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_10 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_32 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_34 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_12 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_36 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_38 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_14 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_40 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    add_16 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.float32)
    view_42 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_16 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_17 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_46 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_95 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_133 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_134 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_45 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_135 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_136 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_62 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_21 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_64 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_66 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_23 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_68 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_70 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_25 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_72 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_74 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_27 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_76 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_78 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_29 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_80 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_30 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_82 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_31 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_32 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_86 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_93 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_127 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_128 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_43 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_129 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_130 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_102 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_36 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_104 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_106 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_38 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_108 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_110 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_40 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_112 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_114 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_42 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_116 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_118 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_44 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_120 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_45 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_122 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_46 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_47 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_126 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_91 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_121 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_122 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_41 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_123 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_124 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_142 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_51 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_144 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_146 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_53 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_148 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_150 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_55 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_152 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_154 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_57 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_156 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_158 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_59 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_160 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_60 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_162 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_61 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_62 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_166 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_89 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_115 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_116 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_39 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_117 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_118 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_182 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_66 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_184 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_186 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_68 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_188 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_190 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_70 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_192 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_194 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_72 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_196 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_198 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_74 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_200 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_75 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_202 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_76 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_77 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_206 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_87 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_109 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_110 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_37 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_111 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_112 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_222 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_81 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_224 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_226 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_83 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_228 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_230 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_85 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_232 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_234 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_87 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_236 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_238 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_89 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_240 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_90 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_242 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_91 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_92 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_246 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_85 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_103 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_104 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_35 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_105 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_106 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_262 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_96 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_264 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_266 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_98 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_268 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_270 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_100 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_272 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_274 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_102 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_276 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_278 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_104 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_280 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_105 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_282 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_106 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_107 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_286 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_83 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_97 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_98 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_33 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_99 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_100 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_302 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_111 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_304 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_306 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_113 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_308 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_310 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_115 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_312 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_314 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_117 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_316 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_318 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_119 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_320 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_120 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_322 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_121 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_122 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_326 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_81 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_91 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_92 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_31 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_93 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_94 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_342 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_126 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_344 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_346 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_128 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_348 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_350 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_130 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_352 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_354 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_132 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_356 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_358 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_134 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_360 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_135 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_362 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_136 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_137 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_366 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_79 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_85 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_86 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_29 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_87 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_88 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_382 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_141 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_384 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_386 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_143 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_388 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_390 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_145 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_392 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_394 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_147 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_396 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_398 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_149 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_400 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_150 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_402 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_151 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_152 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_406 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_77 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_79 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_80 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_27 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_81 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_82 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_422 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_156 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_424 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_426 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_158 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_428 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_430 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_160 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_432 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_434 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_162 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_436 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_438 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_164 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_440 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_165 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_442 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_166 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_167 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_446 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_75 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_73 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_74 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_25 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_75 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_76 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_462 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_171 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_464 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_466 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_173 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_468 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_470 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_175 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_472 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_474 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_177 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_476 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_478 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_179 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_480 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_180 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_482 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_181 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_182 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_486 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_73 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_67 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_68 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_23 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_69 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_70 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_502 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_186 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_504 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_506 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_188 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_508 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_510 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_190 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_512 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_514 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_192 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_516 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_518 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_194 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_520 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_195 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_522 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_196 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_197 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_526 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_71 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_61 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_62 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_21 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_63 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_64 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_542 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_201 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_544 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_546 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_203 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_548 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_550 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_205 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_552 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_554 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_207 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_556 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_558 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_209 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_560 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_210 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_562 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_211 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_212 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_566 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_69 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_55 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_56 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_19 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_57 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_58 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_582 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_216 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_584 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_586 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_218 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_588 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_590 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_220 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_592 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_594 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_222 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_596 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_598 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_224 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_600 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_225 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_602 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_226 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_227 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_606 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_67 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_49 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_50 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_17 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_51 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_52 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_622 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_231 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_624 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_626 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_233 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_628 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_630 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_235 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_632 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_634 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_237 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_636 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_638 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_239 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_640 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_240 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_642 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_241 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_242 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_646 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_65 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_43 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_44 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_15 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_45 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_46 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_662 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_246 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_664 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_666 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_248 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_668 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_670 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_250 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_672 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_674 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_252 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_676 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_678 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_254 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_680 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_255 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_682 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_256 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_257 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_686 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_63 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_37 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_38 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_13 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_39 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_40 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_702 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_261 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_704 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_706 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_263 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_708 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_710 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_265 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_712 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_714 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_267 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_716 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_718 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_269 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_720 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_270 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_722 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_271 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_272 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_726 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_61 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_31 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_32 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_11 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_33 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_34 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_742 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_276 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_744 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_746 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_278 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_748 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_750 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_280 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_752 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_754 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_282 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_756 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_758 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_284 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_760 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_285 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_762 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_286 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_287 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_766 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_59 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_25 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_26 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_9 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_27 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_28 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_782 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_291 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_784 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_786 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_293 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_788 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_790 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_295 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_792 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_794 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_297 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_796 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_798 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_299 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_800 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_300 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_802 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_301 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_302 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_806 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_57 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_19 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_20 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_7 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_21 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_22 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_822 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_306 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_824 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_826 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_308 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_828 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_830 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_310 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_832 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_834 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_312 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_836 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_838 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_314 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_840 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_315 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_842 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_316 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_317 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_846 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_55 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_13 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_14 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_5 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_15 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_16 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_862 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_321 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_864 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_866 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_323 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_868 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_870 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_325 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_872 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_874 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_327 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_876 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_878 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_329 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_880 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_330 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_882 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_331 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_332 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_886 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_53 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_7 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_8 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_3 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_9 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_10 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_902 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_336 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_904 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_906 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_338 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_908 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_910 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_340 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_912 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_914 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_342 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_916 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_918 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_344 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_920 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_345 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_922 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_346 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_347 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_926 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    getitem_51 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.bool)
    permute_default_1 = rand_strided((4, 128, 128), (16384, 1, 128), device='cpu', dtype=torch.float32)
    permute_default_2 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    alias_default_1 = rand_strided((1, 4, 128, 128), (65536, 16384, 128, 1), device='cpu', dtype=torch.float32)
    permute_default_3 = rand_strided((4, 32, 128), (4096, 1, 32), device='cpu', dtype=torch.float32)
    permute_default_4 = rand_strided((4, 128, 32), (4096, 32, 1), device='cpu', dtype=torch.float32)
    view_942 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_351 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_944 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_946 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_353 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_948 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_950 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_355 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_952 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_954 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_357 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_956 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_958 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_359 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    view_960 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    addmm_360 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    view_962 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    addmm_361 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    getitem_49 = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    rsqrt = rand_strided((1, 128, 1), (128, 1, 1), device='cpu', dtype=torch.float32)
    sub_27 = rand_strided((128, 30522), (30522, 1), device='cpu', dtype=torch.float32)
    convert_element_type = rand_strided((), (), device='cpu', dtype=torch.float32)
    permute_483 = rand_strided((512, 128), (1, 512), device='cpu', dtype=torch.float32)
    permute_484 = rand_strided((30522, 512), (1, 30522), device='cpu', dtype=torch.float32)
    permute_486 = rand_strided((512, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_490 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_494 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_1 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_498 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_502 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_2 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_506 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_510 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_3 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_514 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_518 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_4 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_522 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_526 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_539 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_543 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_547 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_551 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_555 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_559 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_563 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_5 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_567 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_571 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_6 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_575 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_579 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_7 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_583 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_587 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_8 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_591 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_595 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_608 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_612 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_616 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_620 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_624 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_628 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_632 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_9 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_636 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_640 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_10 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_644 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_648 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_11 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_652 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_656 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_12 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_660 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_664 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_677 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_681 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_685 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_689 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_693 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_697 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_701 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_13 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_705 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_709 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_14 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_713 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_717 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_15 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_721 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_725 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_16 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_729 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_733 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_746 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_750 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_754 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_758 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_762 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_766 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_770 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_17 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_774 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_778 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_18 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_782 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_786 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_19 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_790 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_794 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_20 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_798 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_802 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_815 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_819 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_823 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_827 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_831 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_835 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_839 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_21 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_843 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_847 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_22 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_851 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_855 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_23 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_859 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_863 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_24 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_867 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_871 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_884 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_888 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_892 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_896 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_900 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_904 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_908 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_25 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_912 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_916 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_26 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_920 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_924 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_27 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_928 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_932 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_28 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_936 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_940 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_953 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_957 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_961 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_965 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_969 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_973 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_977 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_29 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_981 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_985 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_30 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_989 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_993 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_31 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_997 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1001 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_32 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1005 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1009 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1022 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1026 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1030 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1034 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1038 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1042 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1046 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_33 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1050 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1054 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_34 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1058 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1062 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_35 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1066 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1070 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_36 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1074 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1078 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1091 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1095 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1099 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1103 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1107 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1111 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1115 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_37 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1119 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1123 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_38 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1127 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1131 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_39 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1135 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1139 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_40 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1143 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1147 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1160 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1164 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1168 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1172 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1176 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1180 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1184 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_41 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1188 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1192 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_42 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1196 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1200 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_43 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1204 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1208 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_44 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1212 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1216 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1229 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1233 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1237 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1241 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1245 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1249 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1253 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_45 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1257 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1261 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_46 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1265 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1269 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_47 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1273 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1277 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_48 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1281 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1285 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1298 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1302 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1306 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1310 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1314 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1318 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1322 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_49 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1326 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1330 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_50 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1334 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1338 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_51 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1342 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1346 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_52 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1350 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1354 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1367 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1371 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1375 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1379 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1383 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1387 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1391 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_53 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1395 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1399 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_54 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1403 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1407 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_55 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1411 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1415 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_56 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1419 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1423 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1436 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1440 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1444 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1448 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1452 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1456 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1460 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_57 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1464 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1468 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_58 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1472 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1476 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_59 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1480 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1484 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_60 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1488 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1492 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1505 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1509 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1513 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1517 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1521 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1525 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1529 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_61 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1533 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1537 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_62 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1541 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1545 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_63 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1549 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1553 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_64 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1557 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1561 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1574 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1578 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1582 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1586 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1590 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1594 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1598 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_65 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1602 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1606 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_66 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1610 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1614 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_67 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1618 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1622 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_68 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1626 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1630 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1643 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1647 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1651 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1655 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1659 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1663 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1667 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_69 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1671 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1675 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_70 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1679 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1683 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_71 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1687 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1691 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_72 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1695 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1699 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1712 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1716 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1720 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1724 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1728 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1732 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1736 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_73 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1740 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1744 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_74 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1748 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1752 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_75 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1756 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1760 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_76 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1764 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1768 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1781 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1785 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1789 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1793 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1797 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1801 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1805 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_77 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1809 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1813 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_78 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1817 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1821 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_79 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1825 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1829 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_80 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1833 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1837 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1850 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1854 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1858 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1862 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1866 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1870 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1874 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_81 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1878 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1882 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_82 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1886 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1890 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_83 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1894 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1898 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_84 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1902 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1906 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1919 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1923 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1927 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1931 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1935 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1939 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1943 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_85 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1947 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1951 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_86 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1955 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1959 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_87 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1963 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1967 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_88 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_1971 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1975 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1988 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_1992 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_1996 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2000 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_2004 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_2008 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2012 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_89 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_2016 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2020 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_90 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_2024 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2028 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_91 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_2032 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2036 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_92 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_2040 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2044 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2057 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_2061 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2065 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2069 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_2073 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_2077 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2081 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_93 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_2085 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2089 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_94 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_2093 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2097 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_95 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_2101 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2105 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    le_96 = rand_strided((1, 128, 512), (65536, 512, 1), device='cpu', dtype=torch.bool)
    permute_2109 = rand_strided((512, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2113 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2126 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_2130 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2134 = rand_strided((128, 128), (128, 1), device='cpu', dtype=torch.float32)
    permute_2138 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_2142 = rand_strided((128, 512), (512, 1), device='cpu', dtype=torch.float32)
    permute_2146 = rand_strided((512, 384), (384, 1), device='cpu', dtype=torch.float32)
    tangents_1 = rand_strided((), (), device='cpu', dtype=torch.float32)
    tangents_2 = rand_strided((1, 128, 30522), (3906816, 30522, 1), device='cpu', dtype=torch.float32)
    return print_performance(lambda: call([primals_1, primals_3, primals_4, primals_5, primals_7, primals_8, primals_9, primals_10, primals_11, primals_12, primals_13, primals_14, primals_15, primals_17, primals_18, primals_19, primals_20, primals_21, primals_23, primals_24, primals_25, primals_26, primals_27, primals_28, primals_29, primals_30, primals_31, primals_33, primals_34, primals_35, primals_36, primals_37, primals_39, primals_40, primals_41, primals_42, primals_43, primals_44, primals_45, primals_46, primals_47, primals_49, primals_50, primals_51, primals_52, primals_53, primals_55, primals_56, primals_57, primals_58, primals_59, primals_60, primals_61, primals_62, primals_63, primals_65, primals_66, primals_67, primals_68, primals_69, primals_71, primals_72, primals_73, primals_74, primals_75, primals_76, primals_77, primals_78, primals_79, primals_81, primals_82, primals_83, primals_84, primals_85, primals_87, primals_88, primals_89, primals_90, primals_91, primals_92, primals_93, primals_94, primals_95, primals_97, primals_98, primals_99, primals_100, primals_101, primals_103, primals_104, primals_105, primals_106, primals_107, primals_108, primals_109, primals_110, primals_111, primals_113, primals_114, primals_115, primals_116, primals_117, primals_119, primals_120, primals_121, primals_122, primals_123, primals_124, primals_125, primals_126, primals_127, primals_129, primals_130, primals_131, primals_132, primals_133, primals_135, primals_136, primals_137, primals_138, primals_139, primals_140, primals_141, primals_142, primals_143, primals_145, primals_146, primals_147, primals_148, primals_149, primals_151, primals_152, primals_153, primals_154, primals_155, primals_156, primals_157, primals_158, primals_159, primals_161, primals_162, primals_163, primals_164, primals_165, primals_167, primals_168, primals_169, primals_170, primals_171, primals_172, primals_173, primals_174, primals_175, primals_177, primals_178, primals_179, primals_180, primals_181, primals_183, primals_184, primals_185, primals_186, primals_187, primals_188, primals_189, primals_190, primals_191, primals_193, primals_194, primals_195, primals_196, primals_197, primals_199, primals_200, primals_201, primals_202, primals_203, primals_204, primals_205, primals_206, primals_207, primals_209, primals_210, primals_211, primals_212, primals_213, primals_215, primals_216, primals_217, primals_218, primals_219, primals_220, primals_221, primals_222, primals_223, primals_225, primals_226, primals_227, primals_228, primals_229, primals_231, primals_232, primals_233, primals_234, primals_235, primals_236, primals_237, primals_238, primals_239, primals_241, primals_242, primals_243, primals_244, primals_245, primals_247, primals_248, primals_249, primals_250, primals_251, primals_252, primals_253, primals_254, primals_255, primals_257, primals_258, primals_259, primals_260, primals_261, primals_263, primals_264, primals_265, primals_266, primals_267, primals_268, primals_269, primals_270, primals_271, primals_273, primals_274, primals_275, primals_276, primals_277, primals_279, primals_280, primals_281, primals_282, primals_283, primals_284, primals_285, primals_286, primals_287, primals_289, primals_290, primals_291, primals_292, primals_293, primals_295, primals_296, primals_297, primals_298, primals_299, primals_300, primals_301, primals_302, primals_303, primals_305, primals_306, primals_307, primals_308, primals_309, primals_311, primals_312, primals_313, primals_314, primals_315, primals_316, primals_317, primals_318, primals_319, primals_321, primals_322, primals_323, primals_324, primals_325, primals_327, primals_328, primals_329, primals_330, primals_331, primals_332, primals_333, primals_334, primals_335, primals_337, primals_338, primals_339, primals_340, primals_341, primals_343, primals_344, primals_345, primals_346, primals_347, primals_348, primals_349, primals_350, primals_351, primals_353, primals_354, primals_355, primals_356, primals_357, primals_359, primals_360, primals_361, primals_362, primals_363, primals_364, primals_365, primals_366, primals_367, primals_369, primals_370, primals_371, primals_372, primals_373, primals_375, primals_376, primals_377, primals_378, primals_379, primals_380, primals_381, primals_382, primals_383, primals_385, primals_1117, primals_1120, primals_1121, full_default, slice_4, view, add_1, view_2, addmm_1, addmm_2, view_6, getitem_97, permute_default_139, permute_default_140, alias_default_47, permute_default_141, permute_default_142, view_22, addmm_6, view_24, view_26, addmm_8, view_28, view_30, addmm_10, view_32, view_34, addmm_12, view_36, view_38, addmm_14, view_40, add_16, view_42, addmm_16, addmm_17, view_46, getitem_95, permute_default_133, permute_default_134, alias_default_45, permute_default_135, permute_default_136, view_62, addmm_21, view_64, view_66, addmm_23, view_68, view_70, addmm_25, view_72, view_74, addmm_27, view_76, view_78, addmm_29, view_80, addmm_30, view_82, addmm_31, addmm_32, view_86, getitem_93, permute_default_127, permute_default_128, alias_default_43, permute_default_129, permute_default_130, view_102, addmm_36, view_104, view_106, addmm_38, view_108, view_110, addmm_40, view_112, view_114, addmm_42, view_116, view_118, addmm_44, view_120, addmm_45, view_122, addmm_46, addmm_47, view_126, getitem_91, permute_default_121, permute_default_122, alias_default_41, permute_default_123, permute_default_124, view_142, addmm_51, view_144, view_146, addmm_53, view_148, view_150, addmm_55, view_152, view_154, addmm_57, view_156, view_158, addmm_59, view_160, addmm_60, view_162, addmm_61, addmm_62, view_166, getitem_89, permute_default_115, permute_default_116, alias_default_39, permute_default_117, permute_default_118, view_182, addmm_66, view_184, view_186, addmm_68, view_188, view_190, addmm_70, view_192, view_194, addmm_72, view_196, view_198, addmm_74, view_200, addmm_75, view_202, addmm_76, addmm_77, view_206, getitem_87, permute_default_109, permute_default_110, alias_default_37, permute_default_111, permute_default_112, view_222, addmm_81, view_224, view_226, addmm_83, view_228, view_230, addmm_85, view_232, view_234, addmm_87, view_236, view_238, addmm_89, view_240, addmm_90, view_242, addmm_91, addmm_92, view_246, getitem_85, permute_default_103, permute_default_104, alias_default_35, permute_default_105, permute_default_106, view_262, addmm_96, view_264, view_266, addmm_98, view_268, view_270, addmm_100, view_272, view_274, addmm_102, view_276, view_278, addmm_104, view_280, addmm_105, view_282, addmm_106, addmm_107, view_286, getitem_83, permute_default_97, permute_default_98, alias_default_33, permute_default_99, permute_default_100, view_302, addmm_111, view_304, view_306, addmm_113, view_308, view_310, addmm_115, view_312, view_314, addmm_117, view_316, view_318, addmm_119, view_320, addmm_120, view_322, addmm_121, addmm_122, view_326, getitem_81, permute_default_91, permute_default_92, alias_default_31, permute_default_93, permute_default_94, view_342, addmm_126, view_344, view_346, addmm_128, view_348, view_350, addmm_130, view_352, view_354, addmm_132, view_356, view_358, addmm_134, view_360, addmm_135, view_362, addmm_136, addmm_137, view_366, getitem_79, permute_default_85, permute_default_86, alias_default_29, permute_default_87, permute_default_88, view_382, addmm_141, view_384, view_386, addmm_143, view_388, view_390, addmm_145, view_392, view_394, addmm_147, view_396, view_398, addmm_149, view_400, addmm_150, view_402, addmm_151, addmm_152, view_406, getitem_77, permute_default_79, permute_default_80, alias_default_27, permute_default_81, permute_default_82, view_422, addmm_156, view_424, view_426, addmm_158, view_428, view_430, addmm_160, view_432, view_434, addmm_162, view_436, view_438, addmm_164, view_440, addmm_165, view_442, addmm_166, addmm_167, view_446, getitem_75, permute_default_73, permute_default_74, alias_default_25, permute_default_75, permute_default_76, view_462, addmm_171, view_464, view_466, addmm_173, view_468, view_470, addmm_175, view_472, view_474, addmm_177, view_476, view_478, addmm_179, view_480, addmm_180, view_482, addmm_181, addmm_182, view_486, getitem_73, permute_default_67, permute_default_68, alias_default_23, permute_default_69, permute_default_70, view_502, addmm_186, view_504, view_506, addmm_188, view_508, view_510, addmm_190, view_512, view_514, addmm_192, view_516, view_518, addmm_194, view_520, addmm_195, view_522, addmm_196, addmm_197, view_526, getitem_71, permute_default_61, permute_default_62, alias_default_21, permute_default_63, permute_default_64, view_542, addmm_201, view_544, view_546, addmm_203, view_548, view_550, addmm_205, view_552, view_554, addmm_207, view_556, view_558, addmm_209, view_560, addmm_210, view_562, addmm_211, addmm_212, view_566, getitem_69, permute_default_55, permute_default_56, alias_default_19, permute_default_57, permute_default_58, view_582, addmm_216, view_584, view_586, addmm_218, view_588, view_590, addmm_220, view_592, view_594, addmm_222, view_596, view_598, addmm_224, view_600, addmm_225, view_602, addmm_226, addmm_227, view_606, getitem_67, permute_default_49, permute_default_50, alias_default_17, permute_default_51, permute_default_52, view_622, addmm_231, view_624, view_626, addmm_233, view_628, view_630, addmm_235, view_632, view_634, addmm_237, view_636, view_638, addmm_239, view_640, addmm_240, view_642, addmm_241, addmm_242, view_646, getitem_65, permute_default_43, permute_default_44, alias_default_15, permute_default_45, permute_default_46, view_662, addmm_246, view_664, view_666, addmm_248, view_668, view_670, addmm_250, view_672, view_674, addmm_252, view_676, view_678, addmm_254, view_680, addmm_255, view_682, addmm_256, addmm_257, view_686, getitem_63, permute_default_37, permute_default_38, alias_default_13, permute_default_39, permute_default_40, view_702, addmm_261, view_704, view_706, addmm_263, view_708, view_710, addmm_265, view_712, view_714, addmm_267, view_716, view_718, addmm_269, view_720, addmm_270, view_722, addmm_271, addmm_272, view_726, getitem_61, permute_default_31, permute_default_32, alias_default_11, permute_default_33, permute_default_34, view_742, addmm_276, view_744, view_746, addmm_278, view_748, view_750, addmm_280, view_752, view_754, addmm_282, view_756, view_758, addmm_284, view_760, addmm_285, view_762, addmm_286, addmm_287, view_766, getitem_59, permute_default_25, permute_default_26, alias_default_9, permute_default_27, permute_default_28, view_782, addmm_291, view_784, view_786, addmm_293, view_788, view_790, addmm_295, view_792, view_794, addmm_297, view_796, view_798, addmm_299, view_800, addmm_300, view_802, addmm_301, addmm_302, view_806, getitem_57, permute_default_19, permute_default_20, alias_default_7, permute_default_21, permute_default_22, view_822, addmm_306, view_824, view_826, addmm_308, view_828, view_830, addmm_310, view_832, view_834, addmm_312, view_836, view_838, addmm_314, view_840, addmm_315, view_842, addmm_316, addmm_317, view_846, getitem_55, permute_default_13, permute_default_14, alias_default_5, permute_default_15, permute_default_16, view_862, addmm_321, view_864, view_866, addmm_323, view_868, view_870, addmm_325, view_872, view_874, addmm_327, view_876, view_878, addmm_329, view_880, addmm_330, view_882, addmm_331, addmm_332, view_886, getitem_53, permute_default_7, permute_default_8, alias_default_3, permute_default_9, permute_default_10, view_902, addmm_336, view_904, view_906, addmm_338, view_908, view_910, addmm_340, view_912, view_914, addmm_342, view_916, view_918, addmm_344, view_920, addmm_345, view_922, addmm_346, addmm_347, view_926, getitem_51, permute_default_1, permute_default_2, alias_default_1, permute_default_3, permute_default_4, view_942, addmm_351, view_944, view_946, addmm_353, view_948, view_950, addmm_355, view_952, view_954, addmm_357, view_956, view_958, addmm_359, view_960, addmm_360, view_962, addmm_361, getitem_49, rsqrt, sub_27, convert_element_type, permute_483, permute_484, permute_486, permute_490, permute_494, le_1, permute_498, permute_502, le_2, permute_506, permute_510, le_3, permute_514, permute_518, le_4, permute_522, permute_526, permute_539, permute_543, permute_547, permute_551, permute_555, permute_559, permute_563, le_5, permute_567, permute_571, le_6, permute_575, permute_579, le_7, permute_583, permute_587, le_8, permute_591, permute_595, permute_608, permute_612, permute_616, permute_620, permute_624, permute_628, permute_632, le_9, permute_636, permute_640, le_10, permute_644, permute_648, le_11, permute_652, permute_656, le_12, permute_660, permute_664, permute_677, permute_681, permute_685, permute_689, permute_693, permute_697, permute_701, le_13, permute_705, permute_709, le_14, permute_713, permute_717, le_15, permute_721, permute_725, le_16, permute_729, permute_733, permute_746, permute_750, permute_754, permute_758, permute_762, permute_766, permute_770, le_17, permute_774, permute_778, le_18, permute_782, permute_786, le_19, permute_790, permute_794, le_20, permute_798, permute_802, permute_815, permute_819, permute_823, permute_827, permute_831, permute_835, permute_839, le_21, permute_843, permute_847, le_22, permute_851, permute_855, le_23, permute_859, permute_863, le_24, permute_867, permute_871, permute_884, permute_888, permute_892, permute_896, permute_900, permute_904, permute_908, le_25, permute_912, permute_916, le_26, permute_920, permute_924, le_27, permute_928, permute_932, le_28, permute_936, permute_940, permute_953, permute_957, permute_961, permute_965, permute_969, permute_973, permute_977, le_29, permute_981, permute_985, le_30, permute_989, permute_993, le_31, permute_997, permute_1001, le_32, permute_1005, permute_1009, permute_1022, permute_1026, permute_1030, permute_1034, permute_1038, permute_1042, permute_1046, le_33, permute_1050, permute_1054, le_34, permute_1058, permute_1062, le_35, permute_1066, permute_1070, le_36, permute_1074, permute_1078, permute_1091, permute_1095, permute_1099, permute_1103, permute_1107, permute_1111, permute_1115, le_37, permute_1119, permute_1123, le_38, permute_1127, permute_1131, le_39, permute_1135, permute_1139, le_40, permute_1143, permute_1147, permute_1160, permute_1164, permute_1168, permute_1172, permute_1176, permute_1180, permute_1184, le_41, permute_1188, permute_1192, le_42, permute_1196, permute_1200, le_43, permute_1204, permute_1208, le_44, permute_1212, permute_1216, permute_1229, permute_1233, permute_1237, permute_1241, permute_1245, permute_1249, permute_1253, le_45, permute_1257, permute_1261, le_46, permute_1265, permute_1269, le_47, permute_1273, permute_1277, le_48, permute_1281, permute_1285, permute_1298, permute_1302, permute_1306, permute_1310, permute_1314, permute_1318, permute_1322, le_49, permute_1326, permute_1330, le_50, permute_1334, permute_1338, le_51, permute_1342, permute_1346, le_52, permute_1350, permute_1354, permute_1367, permute_1371, permute_1375, permute_1379, permute_1383, permute_1387, permute_1391, le_53, permute_1395, permute_1399, le_54, permute_1403, permute_1407, le_55, permute_1411, permute_1415, le_56, permute_1419, permute_1423, permute_1436, permute_1440, permute_1444, permute_1448, permute_1452, permute_1456, permute_1460, le_57, permute_1464, permute_1468, le_58, permute_1472, permute_1476, le_59, permute_1480, permute_1484, le_60, permute_1488, permute_1492, permute_1505, permute_1509, permute_1513, permute_1517, permute_1521, permute_1525, permute_1529, le_61, permute_1533, permute_1537, le_62, permute_1541, permute_1545, le_63, permute_1549, permute_1553, le_64, permute_1557, permute_1561, permute_1574, permute_1578, permute_1582, permute_1586, permute_1590, permute_1594, permute_1598, le_65, permute_1602, permute_1606, le_66, permute_1610, permute_1614, le_67, permute_1618, permute_1622, le_68, permute_1626, permute_1630, permute_1643, permute_1647, permute_1651, permute_1655, permute_1659, permute_1663, permute_1667, le_69, permute_1671, permute_1675, le_70, permute_1679, permute_1683, le_71, permute_1687, permute_1691, le_72, permute_1695, permute_1699, permute_1712, permute_1716, permute_1720, permute_1724, permute_1728, permute_1732, permute_1736, le_73, permute_1740, permute_1744, le_74, permute_1748, permute_1752, le_75, permute_1756, permute_1760, le_76, permute_1764, permute_1768, permute_1781, permute_1785, permute_1789, permute_1793, permute_1797, permute_1801, permute_1805, le_77, permute_1809, permute_1813, le_78, permute_1817, permute_1821, le_79, permute_1825, permute_1829, le_80, permute_1833, permute_1837, permute_1850, permute_1854, permute_1858, permute_1862, permute_1866, permute_1870, permute_1874, le_81, permute_1878, permute_1882, le_82, permute_1886, permute_1890, le_83, permute_1894, permute_1898, le_84, permute_1902, permute_1906, permute_1919, permute_1923, permute_1927, permute_1931, permute_1935, permute_1939, permute_1943, le_85, permute_1947, permute_1951, le_86, permute_1955, permute_1959, le_87, permute_1963, permute_1967, le_88, permute_1971, permute_1975, permute_1988, permute_1992, permute_1996, permute_2000, permute_2004, permute_2008, permute_2012, le_89, permute_2016, permute_2020, le_90, permute_2024, permute_2028, le_91, permute_2032, permute_2036, le_92, permute_2040, permute_2044, permute_2057, permute_2061, permute_2065, permute_2069, permute_2073, permute_2077, permute_2081, le_93, permute_2085, permute_2089, le_94, permute_2093, permute_2097, le_95, permute_2101, permute_2105, le_96, permute_2109, permute_2113, permute_2126, permute_2130, permute_2134, permute_2138, permute_2142, permute_2146, tangents_1, tangents_2]), times=times, repeat=repeat)


if __name__ == "__main__":
    from torch._inductor.wrapper_benchmark import compiled_module_main
    compiled_module_main('MobileBertForMaskedLM', benchmark_compiled_module)
